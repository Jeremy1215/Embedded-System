
final_l4s5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109c0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014450  08010b80  08010b80  00011b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024fd0  08024fd0  0002626c  2**0
                  CONTENTS
  4 .ARM          00000008  08024fd0  08024fd0  00025fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024fd8  08024fd8  0002626c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024fd8  08024fd8  00025fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024fdc  08024fdc  00025fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  08024fe0  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e050  2000026c  0802524c  0002626c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001e2bc  0802524c  000262bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002626c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000293ef  00000000  00000000  0002629c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005370  00000000  00000000  0004f68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b8  00000000  00000000  00054a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019c1  00000000  00000000  00056bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009858  00000000  00000000  00058579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b565  00000000  00000000  00061dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d007  00000000  00000000  0008d336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ba33d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c94  00000000  00000000  001ba380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001c4014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08010b68 	.word	0x08010b68

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000270 	.word	0x20000270
 80001fc:	08010b68 	.word	0x08010b68

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <arm_bitreversal_32>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	460b      	mov	r3, r1
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e043      	b.n	8001004 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	68f9      	ldr	r1, [r7, #12]
 8000fb8:	440b      	add	r3, r1
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	68f9      	ldr	r1, [r7, #12]
 8000fea:	440b      	add	r3, r1
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	601a      	str	r2, [r3, #0]

    i += 2;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3302      	adds	r3, #2
 8001002:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8001004:	897b      	ldrh	r3, [r7, #10]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	429a      	cmp	r2, r3
 800100a:	d3b7      	bcc.n	8000f7c <arm_bitreversal_32+0x14>
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <arm_cfft_radix8by2_f32>:
  @par Size of buffers according to the target architecture and datatype:
       They are described on the page \ref transformbuffers "transform buffers".
 */

static void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b0a0      	sub	sp, #128	@ 0x80
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800102a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 800103e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001040:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 8001042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8001048:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8001052:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001058:	4413      	add	r3, r2
 800105a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800105c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001062:	e1b6      	b.n	80013d2 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 800107c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8001082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 8001088:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 800108e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8001094:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800109a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 80010a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 80010a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 80010ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 80010b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 80010b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 80010be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 80010c4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80010c8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	1d1a      	adds	r2, r3, #4
 80010d0:	603a      	str	r2, [r7, #0]
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 80010da:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80010de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	1d1a      	adds	r2, r3, #4
 80010e6:	603a      	str	r2, [r7, #0]
 80010e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ec:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 80010f0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80010f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	1d1a      	adds	r2, r3, #4
 80010fc:	603a      	str	r2, [r7, #0]
 80010fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001102:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8001106:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800110a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	603a      	str	r2, [r7, #0]
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800111c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001120:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001128:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 800112c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001130:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001138:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 800113c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001140:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800114c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001150:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 800115c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001160:	edd7 7a02 	vldr	s15, [r7, #8]
 8001164:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001166:	1d1a      	adds	r2, r3, #4
 8001168:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800116a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8001172:	ed97 7a07 	vldr	s14, [r7, #28]
 8001176:	edd7 7a03 	vldr	s15, [r7, #12]
 800117a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800117c:	1d1a      	adds	r2, r3, #4
 800117e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001184:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001188:	ed97 7a08 	vldr	s14, [r7, #32]
 800118c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001190:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001192:	1d1a      	adds	r2, r3, #4
 8001194:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800119e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80011a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011a8:	1d1a      	adds	r2, r3, #4
 80011aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80011ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b0:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80011b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80011bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c0:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80011c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 80011d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80011d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80011dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e0:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 80011e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f0:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80011f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011f6:	1d1a      	adds	r2, r3, #4
 80011f8:	673a      	str	r2, [r7, #112]	@ 0x70
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 80011fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001200:	1d1a      	adds	r2, r3, #4
 8001202:	673a      	str	r2, [r7, #112]	@ 0x70
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001208:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800120c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001214:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 8001218:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800121c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 8001228:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800122c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 8001238:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800123c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8001248:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800124a:	1d1a      	adds	r2, r3, #4
 800124c:	677a      	str	r2, [r7, #116]	@ 0x74
 800124e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001252:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800125e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001260:	1d1a      	adds	r2, r3, #4
 8001262:	677a      	str	r2, [r7, #116]	@ 0x74
 8001264:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001268:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800126c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001270:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8001274:	edd7 7a02 	vldr	s15, [r7, #8]
 8001278:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800127c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001280:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 8001284:	edd7 7a03 	vldr	s15, [r7, #12]
 8001288:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800128c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001290:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 8001294:	edd7 7a03 	vldr	s15, [r7, #12]
 8001298:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800129c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 80012a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80012ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 80012b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012b6:	1d1a      	adds	r2, r3, #4
 80012b8:	67ba      	str	r2, [r7, #120]	@ 0x78
 80012ba:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80012be:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80012c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c6:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80012ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012cc:	1d1a      	adds	r2, r3, #4
 80012ce:	67ba      	str	r2, [r7, #120]	@ 0x78
 80012d0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80012d4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 80012e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012e2:	1d1a      	adds	r2, r3, #4
 80012e4:	673a      	str	r2, [r7, #112]	@ 0x70
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 80012ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012ec:	1d1a      	adds	r2, r3, #4
 80012ee:	673a      	str	r2, [r7, #112]	@ 0x70
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 80012f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012f8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 8001304:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001308:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800130c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001310:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 8001314:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001318:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 8001324:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001328:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 8001334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001336:	1d1a      	adds	r2, r3, #4
 8001338:	677a      	str	r2, [r7, #116]	@ 0x74
 800133a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800133e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800134a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800134c:	1d1a      	adds	r2, r3, #4
 800134e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001350:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001354:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8001360:	edd7 7a04 	vldr	s15, [r7, #16]
 8001364:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 8001370:	edd7 7a05 	vldr	s15, [r7, #20]
 8001374:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 8001380:	edd7 7a05 	vldr	s15, [r7, #20]
 8001384:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 8001390:	edd7 7a04 	vldr	s15, [r7, #16]
 8001394:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 80013a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013a2:	1d1a      	adds	r2, r3, #4
 80013a4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80013a6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80013aa:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80013b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013b8:	1d1a      	adds	r2, r3, #4
 80013ba:	67ba      	str	r2, [r7, #120]	@ 0x78
 80013bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80013c0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80013cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013ce:	3b01      	subs	r3, #1
 80013d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f47f ae45 	bne.w	8001064 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80013da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013dc:	b299      	uxth	r1, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	2302      	movs	r3, #2
 80013e4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80013e6:	f001 f80f 	bl	8002408 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80013ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013ec:	b299      	uxth	r1, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	2302      	movs	r3, #2
 80013f4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80013f6:	f001 f807 	bl	8002408 <arm_radix8_butterfly_f32>
}
 80013fa:	bf00      	nop
 80013fc:	3780      	adds	r7, #128	@ 0x80
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <arm_cfft_radix8by4_f32>:

static void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b0ac      	sub	sp, #176	@ 0xb0
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	b29b      	uxth	r3, r3
 8001414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001418:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 8001426:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001430:	4413      	add	r3, r2
 8001432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 8001436:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001440:	4413      	add	r3, r2
 8001442:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 800144a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800144e:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 8001450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001454:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 8001456:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800145a:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800145c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001460:	3b04      	subs	r3, #4
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 8001466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800146a:	3b04      	subs	r3, #4
 800146c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 8001470:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001474:	3b04      	subs	r3, #4
 8001476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 800147a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001484:	4413      	add	r3, r2
 8001486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001492:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001496:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800149a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800149e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 80014a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 80014b0:	2304      	movs	r3, #4
 80014b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 80014b4:	2306      	movs	r3, #6
 80014b6:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	ed93 7a00 	vldr	s14, [r3]
 80014be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ca:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	ed93 7a00 	vldr	s14, [r3]
 80014d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3304      	adds	r3, #4
 80014e8:	ed93 7a00 	vldr	s14, [r3]
 80014ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014f0:	3304      	adds	r3, #4
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3304      	adds	r3, #4
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800150a:	3304      	adds	r3, #4
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001514:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001518:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800151c:	3304      	adds	r3, #4
 800151e:	ed93 7a00 	vldr	s14, [r3]
 8001522:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800152a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800152e:	3304      	adds	r3, #4
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001538:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800153c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001558:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800155c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800156c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001578:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800157c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001580:	3304      	adds	r3, #4
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800158a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800158e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001592:	3304      	adds	r3, #4
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80015a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015a4:	3304      	adds	r3, #4
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80015ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015b6:	3304      	adds	r3, #4
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80015c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015c8:	ed93 7a00 	vldr	s14, [r3]
 80015cc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80015d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e0:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80015e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80015f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	1d1a      	adds	r2, r3, #4
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800160a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800160e:	3304      	adds	r3, #4
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001620:	3304      	adds	r3, #4
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	1d1a      	adds	r2, r3, #4
 800162a:	603a      	str	r2, [r7, #0]
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8001634:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800163e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001640:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001642:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001646:	1d1a      	adds	r2, r3, #4
 8001648:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800164c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800164e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001654:	1d1a      	adds	r2, r3, #4
 8001656:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800165e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001662:	1d1a      	adds	r2, r3, #4
 8001664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001668:	6a3a      	ldr	r2, [r7, #32]
 800166a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800166c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001670:	1d1a      	adds	r2, r3, #4
 8001672:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800167a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001690:	4413      	add	r3, r2
 8001692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8001696:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800169e:	4413      	add	r3, r2
 80016a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 80016a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80016ac:	4413      	add	r3, r2
 80016ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80016b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016b6:	3b02      	subs	r3, #2
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80016be:	e31c      	b.n	8001cfa <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	ed93 7a00 	vldr	s14, [r3]
 80016c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	ed93 7a00 	vldr	s14, [r3]
 80016dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3304      	adds	r3, #4
 80016f0:	ed93 7a00 	vldr	s14, [r3]
 80016f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016f8:	3304      	adds	r3, #4
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001702:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3304      	adds	r3, #4
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001712:	3304      	adds	r3, #4
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800171c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001720:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001724:	3304      	adds	r3, #4
 8001726:	ed93 7a00 	vldr	s14, [r3]
 800172a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800172e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001732:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001736:	3304      	adds	r3, #4
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001740:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001744:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001760:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001764:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001770:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001780:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001784:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001788:	3304      	adds	r3, #4
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001792:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001796:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800179a:	3304      	adds	r3, #4
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a4:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80017a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017ac:	3304      	adds	r3, #4
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80017b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017be:	3304      	adds	r3, #4
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80017cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017d0:	ed93 7a00 	vldr	s14, [r3]
 80017d4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80017d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80017ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80017f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	1d1a      	adds	r2, r3, #4
 8001808:	603a      	str	r2, [r7, #0]
 800180a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180e:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001812:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001816:	3304      	adds	r3, #4
 8001818:	ed93 7a00 	vldr	s14, [r3]
 800181c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001828:	3304      	adds	r3, #4
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	1d1a      	adds	r2, r3, #4
 8001832:	603a      	str	r2, [r7, #0]
 8001834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001838:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800183c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001840:	3b04      	subs	r3, #4
 8001842:	ed93 7a00 	vldr	s14, [r3]
 8001846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800184a:	3b04      	subs	r3, #4
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001854:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800185c:	3b04      	subs	r3, #4
 800185e:	ed93 7a00 	vldr	s14, [r3]
 8001862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001866:	3b04      	subs	r3, #4
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001870:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8001874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001888:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800188c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80018a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018b8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80018c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018c8:	ed93 7a00 	vldr	s14, [r3]
 80018cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018dc:	3b04      	subs	r3, #4
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018ea:	3b04      	subs	r3, #4
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80018f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018fc:	3b04      	subs	r3, #4
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800190a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800190e:	3b04      	subs	r3, #4
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800191c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001928:	ee37 7a67 	vsub.f32	s14, s14, s15
 800192c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800193c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001950:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001958:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800195c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001960:	3b04      	subs	r3, #4
 8001962:	ed93 7a00 	vldr	s14, [r3]
 8001966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800196a:	3b04      	subs	r3, #4
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001974:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8001980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001984:	ed93 7a00 	vldr	s14, [r3]
 8001988:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800198c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001990:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800199c:	1f1a      	subs	r2, r3, #4
 800199e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80019a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80019aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019ae:	3b04      	subs	r3, #4
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80019b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019c0:	3b04      	subs	r3, #4
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019ca:	1f1a      	subs	r2, r3, #4
 80019cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80019d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d4:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 80019d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019dc:	1d1a      	adds	r2, r3, #4
 80019de:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 80019e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019ea:	1d1a      	adds	r2, r3, #4
 80019ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 80019f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019f8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a00:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8001a04:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a08:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8001a14:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a18:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a20:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8001a24:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a28:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 8001a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a38:	1d1a      	adds	r2, r3, #4
 8001a3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001a3e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001a42:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8001a4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a52:	1d1a      	adds	r2, r3, #4
 8001a54:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001a58:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001a5c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a64:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8001a68:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a6c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a74:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 8001a78:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a7c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a84:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 8001a88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a8c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a94:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8001a98:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a9c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8001aa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001aac:	1f1a      	subs	r2, r3, #4
 8001aae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001ab2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001ab6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abe:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8001ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ac6:	1f1a      	subs	r2, r3, #4
 8001ac8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001acc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ad0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad8:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8001adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8001ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ae8:	3304      	adds	r3, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8001aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001af6:	4413      	add	r3, r2
 8001af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8001afc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b00:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8001b0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b10:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8001b1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b20:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8001b2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b30:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b38:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8001b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b40:	1d1a      	adds	r2, r3, #4
 8001b42:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b46:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001b4a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8001b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b5a:	1d1a      	adds	r2, r3, #4
 8001b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b60:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001b64:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8001b70:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b74:	eef1 7a67 	vneg.f32	s15, s15
 8001b78:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b80:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8001b84:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b88:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b90:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8001b94:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001b98:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8001ba4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ba8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8001bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bb8:	1f1a      	subs	r2, r3, #4
 8001bba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001bbe:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001bc2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8001bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bd2:	1f1a      	subs	r2, r3, #4
 8001bd4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001bd8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001bdc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8001be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8001bf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8001bfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c02:	4413      	add	r3, r2
 8001c04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8001c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c0c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8001c18:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c1c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c24:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8001c28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c2c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8001c38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c3c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c44:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8001c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c4c:	1d1a      	adds	r2, r3, #4
 8001c4e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001c52:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001c56:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8001c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c66:	1d1a      	adds	r2, r3, #4
 8001c68:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001c6c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001c70:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c78:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8001c7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c80:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c88:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 8001c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c90:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c98:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 8001c9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8001cbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cc0:	1f1a      	subs	r2, r3, #4
 8001cc2:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001cc6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001cca:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8001cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cda:	1f1a      	subs	r2, r3, #4
 8001cdc:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001ce0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ce4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f47f acde 	bne.w	80016c0 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	ed93 7a00 	vldr	s14, [r3]
 8001d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	3304      	adds	r3, #4
 8001d34:	ed93 7a00 	vldr	s14, [r3]
 8001d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d46:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	ed93 7a00 	vldr	s14, [r3]
 8001d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d56:	3304      	adds	r3, #4
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d60:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d68:	3304      	adds	r3, #4
 8001d6a:	ed93 7a00 	vldr	s14, [r3]
 8001d6e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001d72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d84:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001da8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001db4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc4:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dcc:	3304      	adds	r3, #4
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001dd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001dde:	3304      	adds	r3, #4
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de8:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001df0:	3304      	adds	r3, #4
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e02:	3304      	adds	r3, #4
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2c:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001e30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	1d1a      	adds	r2, r3, #4
 8001e4c:	603a      	str	r2, [r7, #0]
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e52:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	1d1a      	adds	r2, r3, #4
 8001e76:	603a      	str	r2, [r7, #0]
 8001e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7c:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8001e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 8001e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8001e92:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e96:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8001ea2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ea6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 8001eb2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001eb6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 8001ec2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ec6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ece:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 8001ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ed6:	1d1a      	adds	r2, r3, #4
 8001ed8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001edc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001ee0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee8:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001eec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ef0:	1d1a      	adds	r2, r3, #4
 8001ef2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001ef6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001efa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f02:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8001f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8001f0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f12:	3304      	adds	r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 8001f18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f1c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f24:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 8001f28:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f2c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f34:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 8001f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f3c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f44:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 8001f48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f4c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f54:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 8001f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f5c:	1d1a      	adds	r2, r3, #4
 8001f5e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f62:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001f66:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6e:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f76:	1d1a      	adds	r2, r3, #4
 8001f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f7c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001f80:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f88:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8001f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 8001f94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f98:	3304      	adds	r3, #4
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 8001f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 8001fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fb2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 8001fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fc2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fca:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8001fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fda:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8001fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fe2:	1d1a      	adds	r2, r3, #4
 8001fe4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001fe8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001fec:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ffc:	1d1a      	adds	r2, r3, #4
 8001ffe:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002002:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002006:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8002012:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002016:	b299      	uxth	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2304      	movs	r3, #4
 800201e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002020:	f000 f9f2 	bl	8002408 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8002024:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002028:	b299      	uxth	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	2304      	movs	r3, #4
 8002030:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002032:	f000 f9e9 	bl	8002408 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8002036:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800203a:	b299      	uxth	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	2304      	movs	r3, #4
 8002042:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002044:	f000 f9e0 	bl	8002408 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8002048:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800204c:	b299      	uxth	r1, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	2304      	movs	r3, #4
 8002054:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002056:	f000 f9d7 	bl	8002408 <arm_radix8_butterfly_f32>
}
 800205a:	bf00      	nop
 800205c:	37b0      	adds	r7, #176	@ 0xb0
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <arm_cfft_f32>:
ARM_DSP_ATTRIBUTE void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b088      	sub	sp, #32
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	4611      	mov	r1, r2
 800206e:	461a      	mov	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	4613      	mov	r3, r2
 8002076:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d117      	bne.n	80020b4 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3304      	adds	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e00d      	b.n	80020ac <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	eef1 7a67 	vneg.f32	s15, s15
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	3308      	adds	r3, #8
 80020a4:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3ed      	bcc.n	8002090 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ba:	d040      	beq.n	800213e <arm_cfft_f32+0xdc>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020c2:	d845      	bhi.n	8002150 <arm_cfft_f32+0xee>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ca:	d033      	beq.n	8002134 <arm_cfft_f32+0xd2>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020d2:	d83d      	bhi.n	8002150 <arm_cfft_f32+0xee>
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020da:	d026      	beq.n	800212a <arm_cfft_f32+0xc8>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e2:	d835      	bhi.n	8002150 <arm_cfft_f32+0xee>
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ea:	d028      	beq.n	800213e <arm_cfft_f32+0xdc>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f2:	d82d      	bhi.n	8002150 <arm_cfft_f32+0xee>
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020fa:	d01b      	beq.n	8002134 <arm_cfft_f32+0xd2>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002102:	d825      	bhi.n	8002150 <arm_cfft_f32+0xee>
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b80      	cmp	r3, #128	@ 0x80
 8002108:	d00f      	beq.n	800212a <arm_cfft_f32+0xc8>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b80      	cmp	r3, #128	@ 0x80
 800210e:	d81f      	bhi.n	8002150 <arm_cfft_f32+0xee>
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b40      	cmp	r3, #64	@ 0x40
 8002114:	d013      	beq.n	800213e <arm_cfft_f32+0xdc>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b40      	cmp	r3, #64	@ 0x40
 800211a:	d819      	bhi.n	8002150 <arm_cfft_f32+0xee>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d003      	beq.n	800212a <arm_cfft_f32+0xc8>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b20      	cmp	r3, #32
 8002126:	d005      	beq.n	8002134 <arm_cfft_f32+0xd2>
 8002128:	e012      	b.n	8002150 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7fe ff74 	bl	800101a <arm_cfft_radix8by2_f32>
    break;
 8002132:	e00d      	b.n	8002150 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7ff f963 	bl	8001402 <arm_cfft_radix8by4_f32>
    break;
 800213c:	e008      	b.n	8002150 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	b299      	uxth	r1, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	2301      	movs	r3, #1
 8002148:	68b8      	ldr	r0, [r7, #8]
 800214a:	f000 f95d 	bl	8002408 <arm_radix8_butterfly_f32>
    break;
 800214e:	bf00      	nop
  }

  if ( bitReverseFlag )
 8002150:	79bb      	ldrb	r3, [r7, #6]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8999      	ldrh	r1, [r3, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	461a      	mov	r2, r3
 8002160:	68b8      	ldr	r0, [r7, #8]
 8002162:	f7fe ff01 	bl	8000f68 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d130      	bne.n	80021ce <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800217a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800217e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e01c      	b.n	80021c6 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1d1a      	adds	r2, r3, #4
 8002190:	61ba      	str	r2, [r7, #24]
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	edd7 7a04 	vldr	s15, [r7, #16]
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	eeb1 7a67 	vneg.f32	s14, s15
 80021ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	3304      	adds	r3, #4
 80021be:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	3301      	adds	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d3de      	bcc.n	800218c <arm_cfft_f32+0x12a>
    }
  }
}
 80021ce:	bf00      	nop
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <arm_cfft_init_2048_f32+0x44>)
 80021f4:	899a      	ldrh	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	819a      	strh	r2, [r3, #12]
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <arm_cfft_init_2048_f32+0x44>)
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <arm_cfft_init_2048_f32+0x44>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	08024994 	.word	0x08024994

08002220 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <arm_cfft_init_1024_f32+0x44>)
 800223c:	899a      	ldrh	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	819a      	strh	r2, [r3, #12]
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <arm_cfft_init_1024_f32+0x44>)
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <arm_cfft_init_1024_f32+0x44>)
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	08024984 	.word	0x08024984

08002268 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <arm_cfft_init_512_f32+0x44>)
 8002284:	899a      	ldrh	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	819a      	strh	r2, [r3, #12]
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <arm_cfft_init_512_f32+0x44>)
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <arm_cfft_init_512_f32+0x44>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	08024974 	.word	0x08024974

080022b0 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022c2:	801a      	strh	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <arm_cfft_init_256_f32+0x44>)
 80022cc:	899a      	ldrh	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	819a      	strh	r2, [r3, #12]
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <arm_cfft_init_256_f32+0x44>)
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <arm_cfft_init_256_f32+0x44>)
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	08024964 	.word	0x08024964

080022f8 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	801a      	strh	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <arm_cfft_init_128_f32+0x40>)
 8002312:	899a      	ldrh	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	819a      	strh	r2, [r3, #12]
 8002318:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <arm_cfft_init_128_f32+0x40>)
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <arm_cfft_init_128_f32+0x40>)
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	08024954 	.word	0x08024954

0800233c <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2240      	movs	r2, #64	@ 0x40
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <arm_cfft_init_64_f32+0x40>)
 8002356:	899a      	ldrh	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	819a      	strh	r2, [r3, #12]
 800235c:	4b07      	ldr	r3, [pc, #28]	@ (800237c <arm_cfft_init_64_f32+0x40>)
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <arm_cfft_init_64_f32+0x40>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	08024944 	.word	0x08024944

08002380 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <arm_cfft_init_32_f32+0x40>)
 800239a:	899a      	ldrh	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	819a      	strh	r2, [r3, #12]
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <arm_cfft_init_32_f32+0x40>)
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <arm_cfft_init_32_f32+0x40>)
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	08024934 	.word	0x08024934

080023c4 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2210      	movs	r2, #16
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <arm_cfft_init_16_f32+0x40>)
 80023de:	899a      	ldrh	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	819a      	strh	r2, [r3, #12]
 80023e4:	4b07      	ldr	r3, [pc, #28]	@ (8002404 <arm_cfft_init_16_f32+0x40>)
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <arm_cfft_init_16_f32+0x40>)
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	08024924 	.word	0x08024924

08002408 <arm_radix8_butterfly_f32>:
ARM_DSP_ATTRIBUTE void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002408:	b480      	push	{r7}
 800240a:	b0bd      	sub	sp, #244	@ 0xf4
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	461a      	mov	r2, r3
 8002414:	460b      	mov	r3, r1
 8002416:	817b      	strh	r3, [r7, #10]
 8002418:	4613      	mov	r3, r2
 800241a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <arm_radix8_butterfly_f32+0x3c>)
 800241e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8002428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800242c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8002430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002440:	e002      	b.n	8002448 <arm_radix8_butterfly_f32+0x40>
 8002442:	bf00      	nop
 8002444:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8002448:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800244c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002450:	4413      	add	r3, r2
 8002452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 8002456:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800245e:	4413      	add	r3, r2
 8002460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 8002464:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800246c:	4413      	add	r3, r2
 800246e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 8002472:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800247a:	4413      	add	r3, r2
 800247c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 8002480:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002488:	4413      	add	r3, r2
 800248a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 800248e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002496:	4413      	add	r3, r2
 8002498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 800249c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80024a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a4:	4413      	add	r3, r2
 80024a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80024aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	ed93 7a00 	vldr	s14, [r3]
 80024b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ca:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80024ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ee:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80024f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4413      	add	r3, r2
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002512:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	ed93 7a00 	vldr	s14, [r3]
 8002524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002536:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800253a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	ed93 7a00 	vldr	s14, [r3]
 8002548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255a:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800255e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	ed93 7a00 	vldr	s14, [r3]
 800256c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	ed93 7a00 	vldr	s14, [r3]
 8002590:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4413      	add	r3, r2
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a2:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80025a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4413      	add	r3, r2
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c6:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 80025ca:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80025ce:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80025d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d6:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 80025da:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80025de:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 80025ea:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80025ee:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80025f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f6:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 80025fa:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80025fe:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 800260a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002618:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800261c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002620:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4413      	add	r3, r2
 800262e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002632:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800263e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	3304      	adds	r3, #4
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	ed93 7a00 	vldr	s14, [r3]
 800264e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3304      	adds	r3, #4
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002662:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002666:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3304      	adds	r3, #4
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	ed93 7a00 	vldr	s14, [r3]
 8002676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	3304      	adds	r3, #4
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4413      	add	r3, r2
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800268e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	3304      	adds	r3, #4
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	ed93 7a00 	vldr	s14, [r3]
 800269e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3304      	adds	r3, #4
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80026b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	3304      	adds	r3, #4
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4413      	add	r3, r2
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	3304      	adds	r3, #4
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4413      	add	r3, r2
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026da:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80026de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3304      	adds	r3, #4
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	3304      	adds	r3, #4
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	3304      	adds	r3, #4
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	ed93 7a00 	vldr	s14, [r3]
 8002716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	3304      	adds	r3, #4
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800272e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	3304      	adds	r3, #4
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	ed93 7a00 	vldr	s14, [r3]
 800273e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	3304      	adds	r3, #4
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4413      	add	r3, r2
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002752:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	3304      	adds	r3, #4
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4413      	add	r3, r2
 8002762:	ed93 7a00 	vldr	s14, [r3]
 8002766:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	3304      	adds	r3, #4
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 800277e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002782:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 800278e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002792:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 800279e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80027a2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 80027ae:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80027b2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80027be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	3304      	adds	r3, #4
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80027ce:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80027da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	3304      	adds	r3, #4
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80027ea:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80027ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80027f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002804:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800281e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800282a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	3304      	adds	r3, #4
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800283a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800283e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002842:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	3304      	adds	r3, #4
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002856:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002862:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002866:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800286a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8002872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002876:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 800287a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800287e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002886:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800288a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288e:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 8002892:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8002896:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800289a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 80028aa:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80028ae:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80028ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028be:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 80028c2:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80028c6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80028ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ce:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 80028d2:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80028d6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80028da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028de:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 80028e2:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80028e6:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80028ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ee:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 80028f2:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80028f6:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80028fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fe:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8002902:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002906:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800290a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800290e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8002912:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002916:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800291a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8002922:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8002926:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8002932:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8002936:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8002950:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800295c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800296a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800296e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002972:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002984:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4413      	add	r3, r2
 800299a:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800299e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80029aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	3304      	adds	r3, #4
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4413      	add	r3, r2
 80029b6:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80029ba:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80029be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80029c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	3304      	adds	r3, #4
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80029d6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80029da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80029e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	3304      	adds	r3, #4
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80029f2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80029f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80029fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	3304      	adds	r3, #4
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4413      	add	r3, r2
 8002a0a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002a0e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a16:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8002a1a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a22:	4413      	add	r3, r2
 8002a24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8002a28:	897b      	ldrh	r3, [r7, #10]
 8002a2a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	f4ff ad0a 	bcc.w	8002448 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8002a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a38:	2b07      	cmp	r3, #7
 8002a3a:	f240 84e3 	bls.w	8003404 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002a4a:	893b      	ldrh	r3, [r7, #8]
 8002a4c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a50:	4413      	add	r3, r2
 8002a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 8002a54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 8002a5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002a5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a60:	4413      	add	r3, r2
 8002a62:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 8002a64:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002a66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a68:	4413      	add	r3, r2
 8002a6a:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 8002a6c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a70:	4413      	add	r3, r2
 8002a72:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 8002a74:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002a76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a78:	4413      	add	r3, r2
 8002a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 8002a7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a80:	4413      	add	r3, r2
 8002a82:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8002a84:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a88:	4413      	add	r3, r2
 8002a8a:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8002a8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8002a9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8002aa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8002ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8002abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8002aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8002ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002ae2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	3304      	adds	r3, #4
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	3304      	adds	r3, #4
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	3304      	adds	r3, #4
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	3304      	adds	r3, #4
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002b1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	3304      	adds	r3, #4
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002b2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	3304      	adds	r3, #4
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8002b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8002b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002b4e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b56:	4413      	add	r3, r2
 8002b58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8002b5c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b64:	4413      	add	r3, r2
 8002b66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8002b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b72:	4413      	add	r3, r2
 8002b74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8002b78:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b80:	4413      	add	r3, r2
 8002b82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8002b86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8e:	4413      	add	r3, r2
 8002b90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8002b94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8002ba2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002baa:	4413      	add	r3, r2
 8002bac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002bb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	ed93 7a00 	vldr	s14, [r3]
 8002bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd0:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002bd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4413      	add	r3, r2
 8002bde:	ed93 7a00 	vldr	s14, [r3]
 8002be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf4:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	ed93 7a00 	vldr	s14, [r3]
 8002c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c18:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002c1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4413      	add	r3, r2
 8002c26:	ed93 7a00 	vldr	s14, [r3]
 8002c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002c40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	ed93 7a00 	vldr	s14, [r3]
 8002c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c60:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002c64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	ed93 7a00 	vldr	s14, [r3]
 8002c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c84:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002cac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	ed93 7a00 	vldr	s14, [r3]
 8002cba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ccc:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8002cd0:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002cd4:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cdc:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8002ce0:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002ce4:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cec:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8002cf0:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002cf4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfc:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8002d00:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002d04:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8002d10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4413      	add	r3, r2
 8002d1a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002d1e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d26:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8002d2a:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8002d2e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d36:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002d3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	3304      	adds	r3, #4
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	ed93 7a00 	vldr	s14, [r3]
 8002d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	3304      	adds	r3, #4
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4413      	add	r3, r2
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3304      	adds	r3, #4
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	ed93 7a00 	vldr	s14, [r3]
 8002d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	3304      	adds	r3, #4
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d86:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	3304      	adds	r3, #4
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	ed93 7a00 	vldr	s14, [r3]
 8002d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	3304      	adds	r3, #4
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4413      	add	r3, r2
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	3304      	adds	r3, #4
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	ed93 7a00 	vldr	s14, [r3]
 8002dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	3304      	adds	r3, #4
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd6:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002dda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	3304      	adds	r3, #4
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	ed93 7a00 	vldr	s14, [r3]
 8002dea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	3304      	adds	r3, #4
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4413      	add	r3, r2
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002e02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	3304      	adds	r3, #4
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	ed93 7a00 	vldr	s14, [r3]
 8002e12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3304      	adds	r3, #4
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	3304      	adds	r3, #4
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4413      	add	r3, r2
 8002e36:	ed93 7a00 	vldr	s14, [r3]
 8002e3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	3304      	adds	r3, #4
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002e52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	3304      	adds	r3, #4
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	ed93 7a00 	vldr	s14, [r3]
 8002e62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	3304      	adds	r3, #4
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e76:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 8002e7a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002e7e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e86:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 8002e8a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002e8e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e96:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 8002e9a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 8002eaa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002eae:	edd7 7a08 	vldr	s15, [r7, #32]
 8002eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 8002eba:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002ebe:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec6:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 8002eca:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8002ece:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed6:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8002eda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002eea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8002ef6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002efa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 8002f06:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002f0a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f12:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 8002f16:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002f1a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8002f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f22:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 8002f26:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002f2a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f32:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8002f36:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002f3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f42:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8002f46:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002f4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8002f56:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002f5a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8002f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f62:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8002f66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f74:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	3304      	adds	r3, #4
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f90:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f98:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8002f9c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002fa0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8002fac:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002fb0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8002fbc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002fc0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8002fcc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002fd0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8002fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8002fdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002fea:	edd7 7a06 	vldr	s15, [r7, #24]
 8002fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8002ff6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	ed97 7a05 	vldr	s14, [r7, #20]
 8003006:	edd7 7a04 	vldr	s15, [r7, #16]
 800300a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8003012:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003016:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800301a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8003022:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003026:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8003032:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003036:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800303a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8003042:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003046:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003060:	edd7 7a06 	vldr	s15, [r7, #24]
 8003064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003068:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800306c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	3304      	adds	r3, #4
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	ed97 7a05 	vldr	s14, [r7, #20]
 800307c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003084:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003088:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800308c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003094:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 80030a0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80030a4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80030a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ac:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80030b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 80030b8:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80030bc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80030c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80030c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030cc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 80030d0:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80030d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80030d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030dc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80030e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e4:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 80030e8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80030ec:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80030f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 80030f8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80030fc:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003104:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8003108:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800310c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003114:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8003118:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800311c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003124:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8003128:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800312c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003134:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8003138:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800313c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003144:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8003148:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800314c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003154:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 8003158:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800315c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003164:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 8003168:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800316c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003174:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 8003178:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800317c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003184:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 8003188:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800318c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 8003198:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800319c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80031a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 80031a8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80031ac:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80031b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 80031b8:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80031bc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80031c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c4:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 80031c8:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80031cc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d4:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 80031d8:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80031dc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80031e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e4:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 80031e8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80031ec:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80031f8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80031fc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003208:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800320c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003214:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003218:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800321c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003224:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	ed97 7a07 	vldr	s14, [r7, #28]
 8003236:	edd7 7a06 	vldr	s15, [r7, #24]
 800323a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	3304      	adds	r3, #4
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003252:	edd7 7a04 	vldr	s15, [r7, #16]
 8003256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800325e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003262:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800326e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003272:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800327e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003282:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800328e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003292:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800329e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80032b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	3304      	adds	r3, #4
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80032cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80032d4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80032d8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80032dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80032e4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80032e8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80032ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80032f4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80032f8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80032fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003300:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8003304:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003308:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800330c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003310:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003322:	edd7 7a06 	vldr	s15, [r7, #24]
 8003326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800332e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	3304      	adds	r3, #4
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	ed97 7a05 	vldr	s14, [r7, #20]
 800333e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003346:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800334a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800334e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800335a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800335e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800336a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800336e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800337a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800337e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003386:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800338a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	ed97 7a07 	vldr	s14, [r7, #28]
 8003398:	edd7 7a06 	vldr	s15, [r7, #24]
 800339c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80033a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	3304      	adds	r3, #4
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80033b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033bc:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80033c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80033c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033c8:	4413      	add	r3, r2
 80033ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 80033ce:	897b      	ldrh	r3, [r7, #10]
 80033d0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80033d4:	429a      	cmp	r2, r3
 80033d6:	f4ff abba 	bcc.w	8002b4e <arm_radix8_butterfly_f32+0x746>

         j++;
 80033da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033de:	3301      	adds	r3, #1
 80033e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 80033e4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f4ff ab2c 	bcc.w	8002a4a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80033f2:	893b      	ldrh	r3, [r7, #8]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80033f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	f63f a813 	bhi.w	8002428 <arm_radix8_butterfly_f32+0x20>
}
 8003402:	e000      	b.n	8003406 <arm_radix8_butterfly_f32+0xffe>
         break;
 8003404:	bf00      	nop
}
 8003406:	bf00      	nop
 8003408:	37f4      	adds	r7, #244	@ 0xf4
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop

08003414 <arm_cmplx_mag_f32>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8003414:	b480      	push	{r7}
 8003416:	b08b      	sub	sp, #44	@ 0x2c
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8003424:	e030      	b.n	8003488 <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1d1a      	adds	r2, r3, #4
 800342a:	60fa      	str	r2, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1d1a      	adds	r2, r3, #4
 8003434:	60fa      	str	r2, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 800343a:	edd7 7a08 	vldr	s15, [r7, #32]
 800343e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003442:	edd7 7a07 	vldr	s15, [r7, #28]
 8003446:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800344a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	60ba      	str	r2, [r7, #8]
 8003454:	edc7 7a06 	vstr	s15, [r7, #24]
 8003458:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800345a:	edd7 7a06 	vldr	s15, [r7, #24]
 800345e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	db07      	blt.n	8003478 <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8003468:	edd7 7a06 	vldr	s15, [r7, #24]
 800346c:	eef1 7ae7 	vsqrt.f32	s15, s15
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8003476:	e004      	b.n	8003482 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8003480:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	3b01      	subs	r3, #1
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1cb      	bne.n	8003426 <arm_cmplx_mag_f32+0x12>
  }

}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	372c      	adds	r7, #44	@ 0x2c
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <arm_cos_f32>:
  @param[in]     x  input value in radians
  @return        cos(x)
 */
ARM_DSP_ATTRIBUTE float32_t arm_cos_f32(
  float32_t x)
{
 800349c:	b480      	push	{r7}
 800349e:	b08b      	sub	sp, #44	@ 0x2c
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80034a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80034aa:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800359c <arm_cos_f32+0x100>
 80034ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b2:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80034b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034ba:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80034be:	edd7 7a06 	vldr	s15, [r7, #24]
 80034c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c6:	ee17 3a90 	vmov	r3, s15
 80034ca:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80034cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80034d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	d502      	bpl.n	80034e0 <arm_cos_f32+0x44>
  {
    n--;
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	3b01      	subs	r3, #1
 80034de:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80034ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80034f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80034fa:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80035a0 <arm_cos_f32+0x104>
 80034fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8003506:	edd7 7a07 	vldr	s15, [r7, #28]
 800350a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800350e:	ee17 3a90 	vmov	r3, s15
 8003512:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8003514:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800351a:	d309      	bcc.n	8003530 <arm_cos_f32+0x94>
    index = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8003520:	edd7 7a07 	vldr	s15, [r7, #28]
 8003524:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80035a0 <arm_cos_f32+0x104>
 8003528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800352c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8003530:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353a:	ed97 7a07 	vldr	s14, [r7, #28]
 800353e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003542:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8003546:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003548:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <arm_cos_f32+0x108>)
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8003552:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003554:	3301      	adds	r3, #1
 8003556:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <arm_cos_f32+0x108>)
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8003560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003564:	edd7 7a05 	vldr	s15, [r7, #20]
 8003568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800356c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003574:	edd7 6a05 	vldr	s13, [r7, #20]
 8003578:	edd7 7a03 	vldr	s15, [r7, #12]
 800357c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003584:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	ee07 3a90 	vmov	s15, r3
}
 800358e:	eeb0 0a67 	vmov.f32	s0, s15
 8003592:	372c      	adds	r7, #44	@ 0x2c
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	3e22f983 	.word	0x3e22f983
 80035a0:	44000000 	.word	0x44000000
 80035a4:	08024120 	.word	0x08024120

080035a8 <arm_max_f32>:
ARM_DSP_ATTRIBUTE void arm_max_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult,
        uint32_t * pIndex)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	@ 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_LOOPUNROLL) && !defined(ARM_MATH_AUTOVECTORIZE)
        uint32_t index;                                /* index of maximum value */
#endif

  /* Initialise index value to zero. */
  outIndex = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]

  /* Load first input value that act as reference value for comparison */
  out = *pSrc++;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1d1a      	adds	r2, r3, #4
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	61fb      	str	r3, [r7, #28]
  blkCnt = (blockSize - 1U) % 4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = (blockSize - 1U);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80035ca:	e016      	b.n	80035fa <arm_max_f32+0x52>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal = *pSrc++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	60fa      	str	r2, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if (out < maxVal)
 80035d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80035da:	edd7 7a04 	vldr	s15, [r7, #16]
 80035de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e6:	d505      	bpl.n	80035f4 <arm_max_f32+0x4c>
    {
      /* Update the maximum value and it's index */
      out = maxVal;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	61fb      	str	r3, [r7, #28]
      outIndex = blockSize - blkCnt;
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	617b      	str	r3, [r7, #20]
    }

    /* Decrement loop counter */
    blkCnt--;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <arm_max_f32+0x24>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	601a      	str	r2, [r3, #0]
}
 800360c:	bf00      	nop
 800360e:	3724      	adds	r7, #36	@ 0x24
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <arm_mult_f32>:
ARM_DSP_ATTRIBUTE void arm_mult_f32(
  const float32_t * pSrcA,
  const float32_t * pSrcB,
        float32_t * pDst,
        uint32_t blockSize)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800362a:	e013      	b.n	8003654 <arm_mult_f32+0x3c>
  {
    /* C = A * B */

    /* Multiply input and store result in destination buffer. */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	60fa      	str	r2, [r7, #12]
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	1d1a      	adds	r2, r3, #4
 800363a:	60ba      	str	r2, [r7, #8]
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	1d1a      	adds	r2, r3, #4
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	3b01      	subs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e8      	bne.n	800362c <arm_mult_f32+0x14>
  }

}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <stage_rfft_f32>:
#else
static void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8003668:	b480      	push	{r7}
 800366a:	b095      	sub	sp, #84	@ 0x54
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	3b01      	subs	r3, #1
 8003688:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800368a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 8003690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003692:	3304      	adds	r3, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 8003698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 800369e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a0:	3304      	adds	r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 80036a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a8:	1d1a      	adds	r2, r3, #4
 80036aa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 80036b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b2:	1d1a      	adds	r2, r3, #4
 80036b4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80036ba:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80036be:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80036c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80036ca:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80036ce:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80036da:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80036de:	edd7 7a08 	vldr	s15, [r7, #32]
 80036e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1d1a      	adds	r2, r3, #4
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f4:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80036f8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80036fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	1d1a      	adds	r2, r3, #4
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800370e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003712:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8003716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4413      	add	r3, r2
 800371e:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 8003720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003722:	3308      	adds	r3, #8
 8003724:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8003726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003728:	3304      	adds	r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 800372e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 8003734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 800373a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373c:	3304      	adds	r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 8003742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003744:	1d1a      	adds	r2, r3, #4
 8003746:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 800374c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374e:	1d1a      	adds	r2, r3, #4
 8003750:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 8003756:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800375a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800375e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003762:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 8003766:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800376a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800376e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003772:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8003776:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800377a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8003786:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800378a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8003796:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800379a:	edd7 7a08 	vldr	s15, [r7, #32]
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80037a6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80037aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80037b6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80037ba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80037be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80037c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80037ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	1d1a      	adds	r2, r3, #4
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80037e4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80037e8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80037ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80037f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	1d1a      	adds	r2, r3, #4
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800380a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800380e:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8003812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003814:	3308      	adds	r3, #8
 8003816:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8003818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381a:	3b08      	subs	r3, #8
 800381c:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 800381e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003820:	3b01      	subs	r3, #1
 8003822:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 8003824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003826:	2b00      	cmp	r3, #0
 8003828:	f73f af7d 	bgt.w	8003726 <stage_rfft_f32+0xbe>
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3754      	adds	r7, #84	@ 0x54
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <merge_rfft_f32>:
/* Prepares data for inverse cfft */
static void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 800383a:	b480      	push	{r7}
 800383c:	b095      	sub	sp, #84	@ 0x54
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	3b01      	subs	r3, #1
 800385a:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 800385c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 8003862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003864:	3304      	adds	r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 800386a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800386c:	3308      	adds	r3, #8
 800386e:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8003870:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003874:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1d1a      	adds	r2, r3, #4
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800388a:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800388e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003892:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a8:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80038ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	4413      	add	r3, r2
 80038b4:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 80038b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b8:	3308      	adds	r3, #8
 80038ba:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 80038bc:	e07e      	b.n	80039bc <merge_rfft_f32+0x182>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80038be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c0:	3304      	adds	r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 80038c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 80038cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 80038d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d4:	3304      	adds	r3, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 80038da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038dc:	1d1a      	adds	r2, r3, #4
 80038de:	64ba      	str	r2, [r7, #72]	@ 0x48
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 80038e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e6:	1d1a      	adds	r2, r3, #4
 80038e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 80038ee:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80038f2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80038f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 80038fe:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003902:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390a:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800390e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003912:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391a:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800391e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003922:	edd7 7a08 	vldr	s15, [r7, #32]
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800392e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003932:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393a:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800393e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003942:	edd7 7a08 	vldr	s15, [r7, #32]
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800394e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003952:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800395a:	edd7 7a07 	vldr	s15, [r7, #28]
 800395e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003962:	edd7 7a06 	vldr	s15, [r7, #24]
 8003966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003978:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800397c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003980:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003988:	edd7 7a05 	vldr	s15, [r7, #20]
 800398c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003990:	edd7 7a04 	vldr	s15, [r7, #16]
 8003994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a6:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80039aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039ac:	3308      	adds	r3, #8
 80039ae:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80039b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b2:	3b08      	subs	r3, #8
 80039b4:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80039b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b8:	3b01      	subs	r3, #1
 80039ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 80039bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f73f af7d 	bgt.w	80038be <merge_rfft_f32+0x84>
   }

}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3754      	adds	r7, #84	@ 0x54
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <arm_rfft_fast_f32>:
ARM_DSP_ATTRIBUTE void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff23 	bl	800383a <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	2301      	movs	r3, #1
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7fe fb31 	bl	8002062 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8003a00:	e00a      	b.n	8003a18 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	2301      	movs	r3, #1
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	6978      	ldr	r0, [r7, #20]
 8003a0a:	f7fe fb2a 	bl	8002062 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fe28 	bl	8003668 <stage_rfft_f32>
}
 8003a18:	bf00      	nop
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <arm_rfft_fast_init_32_f32>:
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)

FAST_INIT_FUNC(32)

#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <arm_rfft_fast_init_32_f32+0x14>
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a32:	e013      	b.n	8003a5c <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fcc4 	bl	80023c4 <arm_cfft_init_16_f32>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8003a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4c:	e006      	b.n	8003a5c <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a03      	ldr	r2, [pc, #12]	@ (8003a64 <arm_rfft_fast_init_32_f32+0x44>)
 8003a58:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	0801c1a0 	.word	0x0801c1a0

08003a68 <arm_rfft_fast_init_64_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(64)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <arm_rfft_fast_init_64_f32+0x14>
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a7a:	e013      	b.n	8003aa4 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fc7e 	bl	8002380 <arm_cfft_init_32_f32>
 8003a84:	4603      	mov	r3, r0
 8003a86:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8003a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a94:	e006      	b.n	8003aa4 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2240      	movs	r2, #64	@ 0x40
 8003a9a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a03      	ldr	r2, [pc, #12]	@ (8003aac <arm_rfft_fast_init_64_f32+0x44>)
 8003aa0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	0801c220 	.word	0x0801c220

08003ab0 <arm_rfft_fast_init_128_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(128)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <arm_rfft_fast_init_128_f32+0x14>
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ac2:	e013      	b.n	8003aec <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fc38 	bl	800233c <arm_cfft_init_64_f32>
 8003acc:	4603      	mov	r3, r0
 8003ace:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8003ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003adc:	e006      	b.n	8003aec <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2280      	movs	r2, #128	@ 0x80
 8003ae2:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a03      	ldr	r2, [pc, #12]	@ (8003af4 <arm_rfft_fast_init_128_f32+0x44>)
 8003ae8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	0801c320 	.word	0x0801c320

08003af8 <arm_rfft_fast_init_256_f32>:
*/

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(256)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <arm_rfft_fast_init_256_f32+0x14>
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b0a:	e014      	b.n	8003b36 <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fbf2 	bl	80022f8 <arm_cfft_init_128_f32>
 8003b14:	4603      	mov	r3, r0
 8003b16:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8003b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b24:	e007      	b.n	8003b36 <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b2c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a03      	ldr	r2, [pc, #12]	@ (8003b40 <arm_rfft_fast_init_256_f32+0x48>)
 8003b32:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	0801c520 	.word	0x0801c520

08003b44 <arm_rfft_fast_init_512_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(512)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <arm_rfft_fast_init_512_f32+0x14>
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b56:	e014      	b.n	8003b82 <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fba8 	bl	80022b0 <arm_cfft_init_256_f32>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8003b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b70:	e007      	b.n	8003b82 <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b78:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a03      	ldr	r2, [pc, #12]	@ (8003b8c <arm_rfft_fast_init_512_f32+0x48>)
 8003b7e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	0801c920 	.word	0x0801c920

08003b90 <arm_rfft_fast_init_1024_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(1024)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <arm_rfft_fast_init_1024_f32+0x14>
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ba2:	e014      	b.n	8003bce <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fb5e 	bl	8002268 <arm_cfft_init_512_f32>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8003bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbc:	e007      	b.n	8003bce <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bc4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a03      	ldr	r2, [pc, #12]	@ (8003bd8 <arm_rfft_fast_init_1024_f32+0x48>)
 8003bca:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	0801d120 	.word	0x0801d120

08003bdc <arm_rfft_fast_init_2048_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(2048)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <arm_rfft_fast_init_2048_f32+0x14>
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bee:	e014      	b.n	8003c1a <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fb14 	bl	8002220 <arm_cfft_init_1024_f32>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 8003c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c08:	e007      	b.n	8003c1a <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c10:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a03      	ldr	r2, [pc, #12]	@ (8003c24 <arm_rfft_fast_init_2048_f32+0x48>)
 8003c16:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	0801e120 	.word	0x0801e120

08003c28 <arm_rfft_fast_init_4096_f32>:
 */

#if defined(ARM_MATH_NEON) && !defined(ARM_MATH_AUTOVECTORIZE)
FAST_INIT_FUNC(4096)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <arm_rfft_fast_init_4096_f32+0x14>
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c3a:	e014      	b.n	8003c66 <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fe faca 	bl	80021d8 <arm_cfft_init_2048_f32>
 8003c44:	4603      	mov	r3, r0
 8003c46:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8003c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8003c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c54:	e007      	b.n	8003c66 <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c5c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a03      	ldr	r2, [pc, #12]	@ (8003c70 <arm_rfft_fast_init_4096_f32+0x48>)
 8003c62:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	08020120 	.word	0x08020120

08003c74 <arm_rfft_fast_init_f32>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c86:	d023      	beq.n	8003cd0 <arm_rfft_fast_init_f32+0x5c>
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8c:	dc50      	bgt.n	8003d30 <arm_rfft_fast_init_f32+0xbc>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c92:	d023      	beq.n	8003cdc <arm_rfft_fast_init_f32+0x68>
 8003c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c98:	dc4a      	bgt.n	8003d30 <arm_rfft_fast_init_f32+0xbc>
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9e:	d023      	beq.n	8003ce8 <arm_rfft_fast_init_f32+0x74>
 8003ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca4:	dc44      	bgt.n	8003d30 <arm_rfft_fast_init_f32+0xbc>
 8003ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003caa:	d023      	beq.n	8003cf4 <arm_rfft_fast_init_f32+0x80>
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb0:	dc3e      	bgt.n	8003d30 <arm_rfft_fast_init_f32+0xbc>
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb6:	d023      	beq.n	8003d00 <arm_rfft_fast_init_f32+0x8c>
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cbc:	dc38      	bgt.n	8003d30 <arm_rfft_fast_init_f32+0xbc>
 8003cbe:	2b80      	cmp	r3, #128	@ 0x80
 8003cc0:	d024      	beq.n	8003d0c <arm_rfft_fast_init_f32+0x98>
 8003cc2:	2b80      	cmp	r3, #128	@ 0x80
 8003cc4:	dc34      	bgt.n	8003d30 <arm_rfft_fast_init_f32+0xbc>
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d02c      	beq.n	8003d24 <arm_rfft_fast_init_f32+0xb0>
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d024      	beq.n	8003d18 <arm_rfft_fast_init_f32+0xa4>
 8003cce:	e02f      	b.n	8003d30 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ffa9 	bl	8003c28 <arm_rfft_fast_init_4096_f32>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8003cda:	e02c      	b.n	8003d36 <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff7d 	bl	8003bdc <arm_rfft_fast_init_2048_f32>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8003ce6:	e026      	b.n	8003d36 <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff51 	bl	8003b90 <arm_rfft_fast_init_1024_f32>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8003cf2:	e020      	b.n	8003d36 <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff25 	bl	8003b44 <arm_rfft_fast_init_512_f32>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8003cfe:	e01a      	b.n	8003d36 <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fef9 	bl	8003af8 <arm_rfft_fast_init_256_f32>
 8003d06:	4603      	mov	r3, r0
 8003d08:	73fb      	strb	r3, [r7, #15]
    break;
 8003d0a:	e014      	b.n	8003d36 <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fecf 	bl	8003ab0 <arm_rfft_fast_init_128_f32>
 8003d12:	4603      	mov	r3, r0
 8003d14:	73fb      	strb	r3, [r7, #15]
    break;
 8003d16:	e00e      	b.n	8003d36 <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fea5 	bl	8003a68 <arm_rfft_fast_init_64_f32>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]
    break;
 8003d22:	e008      	b.n	8003d36 <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fe7b 	bl	8003a20 <arm_rfft_fast_init_32_f32>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8003d2e:	e002      	b.n	8003d36 <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d34:	e001      	b.n	8003d3a <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8003d36:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	0000      	movs	r0, r0
 8003d44:	0000      	movs	r0, r0
	...

08003d48 <generate_hanning_window_f32>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void generate_hanning_window_f32(float32_t *pWindow, uint16_t windowLen)
{
 8003d48:	b5b0      	push	{r4, r5, r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < windowLen; i++)
 8003d54:	2300      	movs	r3, #0
 8003d56:	81fb      	strh	r3, [r7, #14]
 8003d58:	e03f      	b.n	8003dda <generate_hanning_window_f32+0x92>
    {
        // Hanning window 公式: 0.5 * (1 - cos(2 * PI * i / (N - 1)))
        // 使用 arm_cos_f32 和 PI_F (來自 arm_math.h)
        pWindow[i] = 0.5f * (1.0f - arm_cos_f32(2.0f * PI_F64 * (float32_t)i / (float32_t)(windowLen - 1)));
 8003d5a:	89fb      	ldrh	r3, [r7, #14]
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d64:	ee17 0a90 	vmov	r0, s15
 8003d68:	f7fc fc06 	bl	8000578 <__aeabi_f2d>
 8003d6c:	a320      	add	r3, pc, #128	@ (adr r3, 8003df0 <generate_hanning_window_f32+0xa8>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f7fc fc59 	bl	8000628 <__aeabi_dmul>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4614      	mov	r4, r2
 8003d7c:	461d      	mov	r5, r3
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	ee17 0a90 	vmov	r0, s15
 8003d8e:	f7fc fbf3 	bl	8000578 <__aeabi_f2d>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f7fc fd6f 	bl	800087c <__aeabi_ddiv>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fc ff17 	bl	8000bd8 <__aeabi_d2f>
 8003daa:	4603      	mov	r3, r0
 8003dac:	ee00 3a10 	vmov	s0, r3
 8003db0:	f7ff fb74 	bl	800349c <arm_cos_f32>
 8003db4:	eef0 7a40 	vmov.f32	s15, s0
 8003db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc0:	89fb      	ldrh	r3, [r7, #14]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd0:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < windowLen; i++)
 8003dd4:	89fb      	ldrh	r3, [r7, #14]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	81fb      	strh	r3, [r7, #14]
 8003dda:	89fa      	ldrh	r2, [r7, #14]
 8003ddc:	887b      	ldrh	r3, [r7, #2]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d3bb      	bcc.n	8003d5a <generate_hanning_window_f32+0x12>
    }
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}
 8003dec:	f3af 8000 	nop.w
 8003df0:	54442d18 	.word	0x54442d18
 8003df4:	401921fb 	.word	0x401921fb

08003df8 <find_note_index_f32>:

// 假設 detected_frequency 是你計算出的頻率 (float32_t 型別)
int find_note_index_f32(float32_t detected_frequency) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < NUM_NOTES_IN_TABLE; i++) {
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e01e      	b.n	8003e46 <find_note_index_f32+0x4e>
        // 檢查頻率是否落在第 i 個音符的區間內
        // 注意：區間定義為 [lower_bound, upper_bound) - 包含下限，不包含上限
        // 這確保每個頻率只會被歸類到一個音符，避免重疊問題。
        if (detected_frequency >= note_lower_bounds[i] && detected_frequency < note_upper_bounds[i]) {
 8003e08:	4a14      	ldr	r2, [pc, #80]	@ (8003e5c <find_note_index_f32+0x64>)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e20:	db0e      	blt.n	8003e40 <find_note_index_f32+0x48>
 8003e22:	4a0f      	ldr	r2, [pc, #60]	@ (8003e60 <find_note_index_f32+0x68>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	edd3 7a00 	vldr	s15, [r3]
 8003e2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3a:	d501      	bpl.n	8003e40 <find_note_index_f32+0x48>
            return i; // 找到對應音符，返回其索引
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	e007      	b.n	8003e50 <find_note_index_f32+0x58>
    for (int i = 0; i < NUM_NOTES_IN_TABLE; i++) {
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3301      	adds	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b23      	cmp	r3, #35	@ 0x23
 8003e4a:	dddd      	ble.n	8003e08 <find_note_index_f32+0x10>
        }
    }
    // 如果遍歷完所有音符區間都沒有找到，表示頻率未知
    return -1;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	08024a34 	.word	0x08024a34
 8003e60:	08024ac4 	.word	0x08024ac4

08003e64 <__io_putchar>:

int __io_putchar(int ch)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003e6c:	1d39      	adds	r1, r7, #4
 8003e6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e72:	2201      	movs	r2, #1
 8003e74:	4803      	ldr	r0, [pc, #12]	@ (8003e84 <__io_putchar+0x20>)
 8003e76:	f006 f886 	bl	8009f86 <HAL_UART_Transmit>
  return ch;
 8003e7a:	687b      	ldr	r3, [r7, #4]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000630 	.word	0x20000630

08003e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e8c:	f001 fcc3 	bl	8005816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e90:	f000 f87c 	bl	8003f8c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003e94:	f000 f8dc 	bl	8004050 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e98:	f000 fc8a 	bl	80047b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e9c:	f000 fc5e 	bl	800475c <MX_DMA_Init>
  MX_ADC1_Init();
 8003ea0:	f000 f906 	bl	80040b0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8003ea4:	f000 f968 	bl	8004178 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8003ea8:	f000 f9cc 	bl	8004244 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003eac:	f000 fa0a 	bl	80042c4 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8003eb0:	f000 fa48 	bl	8004344 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8003eb4:	f000 fa9c 	bl	80043f0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003eb8:	f000 fad8 	bl	800446c <MX_SPI3_Init>
  MX_UART4_Init();
 8003ebc:	f000 fb14 	bl	80044e8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003ec0:	f000 fb5e 	bl	8004580 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003ec4:	f000 fba8 	bl	8004618 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003ec8:	f000 fbf4 	bl	80046b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8003ecc:	f000 fc3e 	bl	800474c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003ed0:	f006 ff3a 	bl	800ad48 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of TransferHalfSem */
  TransferHalfSemHandle = osSemaphoreNew(1, 0, &TransferHalfSem_attributes);
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <main+0xc0>)
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f007 f811 	bl	800af00 <osSemaphoreNew>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f4c <main+0xc4>)
 8003ee2:	6013      	str	r3, [r2, #0]

  /* creation of TransferFullSem */
  TransferFullSemHandle = osSemaphoreNew(1, 0, &TransferFullSem_attributes);
 8003ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f50 <main+0xc8>)
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f007 f809 	bl	800af00 <osSemaphoreNew>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <main+0xcc>)
 8003ef2:	6013      	str	r3, [r2, #0]

  /* creation of FFTSem */
  FFTSemHandle = osSemaphoreNew(1, 0, &FFTSem_attributes);
 8003ef4:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <main+0xd0>)
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f007 f801 	bl	800af00 <osSemaphoreNew>
 8003efe:	4603      	mov	r3, r0
 8003f00:	4a16      	ldr	r2, [pc, #88]	@ (8003f5c <main+0xd4>)
 8003f02:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of FFTTask */
  FFTTaskHandle = osThreadNew(StartDefaultTask, NULL, &FFTTask_attributes);
 8003f04:	4a16      	ldr	r2, [pc, #88]	@ (8003f60 <main+0xd8>)
 8003f06:	2100      	movs	r1, #0
 8003f08:	4816      	ldr	r0, [pc, #88]	@ (8003f64 <main+0xdc>)
 8003f0a:	f006 ff67 	bl	800addc <osThreadNew>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a15      	ldr	r2, [pc, #84]	@ (8003f68 <main+0xe0>)
 8003f12:	6013      	str	r3, [r2, #0]

  /* creation of TransferHalfTas */
  TransferHalfTasHandle = osThreadNew(StartTask02, NULL, &TransferHalfTas_attributes);
 8003f14:	4a15      	ldr	r2, [pc, #84]	@ (8003f6c <main+0xe4>)
 8003f16:	2100      	movs	r1, #0
 8003f18:	4815      	ldr	r0, [pc, #84]	@ (8003f70 <main+0xe8>)
 8003f1a:	f006 ff5f 	bl	800addc <osThreadNew>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4a14      	ldr	r2, [pc, #80]	@ (8003f74 <main+0xec>)
 8003f22:	6013      	str	r3, [r2, #0]

  /* creation of TransferFullTas */
  TransferFullTasHandle = osThreadNew(StartTask03, NULL, &TransferFullTas_attributes);
 8003f24:	4a14      	ldr	r2, [pc, #80]	@ (8003f78 <main+0xf0>)
 8003f26:	2100      	movs	r1, #0
 8003f28:	4814      	ldr	r0, [pc, #80]	@ (8003f7c <main+0xf4>)
 8003f2a:	f006 ff57 	bl	800addc <osThreadNew>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4a13      	ldr	r2, [pc, #76]	@ (8003f80 <main+0xf8>)
 8003f32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_REC);
 8003f34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f38:	4912      	ldr	r1, [pc, #72]	@ (8003f84 <main+0xfc>)
 8003f3a:	4813      	ldr	r0, [pc, #76]	@ (8003f88 <main+0x100>)
 8003f3c:	f002 feb4 	bl	8006ca8 <HAL_DFSDM_FilterRegularStart_DMA>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003f40:	f006 ff26 	bl	800ad90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <main+0xbc>
 8003f48:	08024bc0 	.word	0x08024bc0
 8003f4c:	200007f8 	.word	0x200007f8
 8003f50:	08024bd0 	.word	0x08024bd0
 8003f54:	200007fc 	.word	0x200007fc
 8003f58:	08024be0 	.word	0x08024be0
 8003f5c:	20000800 	.word	0x20000800
 8003f60:	08024b54 	.word	0x08024b54
 8003f64:	08004a85 	.word	0x08004a85
 8003f68:	200007ec 	.word	0x200007ec
 8003f6c:	08024b78 	.word	0x08024b78
 8003f70:	08004bf9 	.word	0x08004bf9
 8003f74:	200007f0 	.word	0x200007f0
 8003f78:	08024b9c 	.word	0x08024b9c
 8003f7c:	08004c6d 	.word	0x08004c6d
 8003f80:	200007f4 	.word	0x200007f4
 8003f84:	20000804 	.word	0x20000804
 8003f88:	200002f0 	.word	0x200002f0

08003f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b096      	sub	sp, #88	@ 0x58
 8003f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f92:	f107 0314 	add.w	r3, r7, #20
 8003f96:	2244      	movs	r2, #68	@ 0x44
 8003f98:	2100      	movs	r1, #0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f00a fe80 	bl	800eca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fa0:	463b      	mov	r3, r7
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f004 fa52 	bl	8008458 <HAL_PWREx_ControlVoltageScaling>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003fba:	f000 fe93 	bl	8004ce4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003fbe:	f004 fa1b 	bl	80083f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003fc2:	4b22      	ldr	r3, [pc, #136]	@ (800404c <SystemClock_Config+0xc0>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc8:	4a20      	ldr	r2, [pc, #128]	@ (800404c <SystemClock_Config+0xc0>)
 8003fca:	f023 0318 	bic.w	r3, r3, #24
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003fd2:	2314      	movs	r3, #20
 8003fd4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003fe2:	2360      	movs	r3, #96	@ 0x60
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003fea:	2301      	movs	r3, #1
 8003fec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003ff2:	233c      	movs	r3, #60	@ 0x3c
 8003ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ffe:	2302      	movs	r3, #2
 8004000:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	4618      	mov	r0, r3
 8004008:	f004 faca 	bl	80085a0 <HAL_RCC_OscConfig>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004012:	f000 fe67 	bl	8004ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004016:	230f      	movs	r3, #15
 8004018:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800401a:	2303      	movs	r3, #3
 800401c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800402a:	463b      	mov	r3, r7
 800402c:	2105      	movs	r1, #5
 800402e:	4618      	mov	r0, r3
 8004030:	f004 fed0 	bl	8008dd4 <HAL_RCC_ClockConfig>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800403a:	f000 fe53 	bl	8004ce4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800403e:	f005 fcb7 	bl	80099b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004042:	bf00      	nop
 8004044:	3758      	adds	r7, #88	@ 0x58
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000

08004050 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b0a6      	sub	sp, #152	@ 0x98
 8004054:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	2294      	movs	r2, #148	@ 0x94
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f00a fe1f 	bl	800eca0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8004062:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8004066:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004068:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800406c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004070:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004074:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004076:	2301      	movs	r3, #1
 8004078:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800407e:	2318      	movs	r3, #24
 8004080:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004082:	2302      	movs	r3, #2
 8004084:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004086:	2302      	movs	r3, #2
 8004088:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800408a:	2302      	movs	r3, #2
 800408c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800408e:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8004092:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004094:	1d3b      	adds	r3, r7, #4
 8004096:	4618      	mov	r0, r3
 8004098:	f005 f95a 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80040a2:	f000 fe1f 	bl	8004ce4 <Error_Handler>
  }
}
 80040a6:	bf00      	nop
 80040a8:	3798      	adds	r7, #152	@ 0x98
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040b6:	463b      	mov	r3, r7
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
 80040c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040c6:	4b29      	ldr	r3, [pc, #164]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040c8:	4a29      	ldr	r2, [pc, #164]	@ (8004170 <MX_ADC1_Init+0xc0>)
 80040ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80040cc:	4b27      	ldr	r3, [pc, #156]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040d2:	4b26      	ldr	r3, [pc, #152]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040d8:	4b24      	ldr	r3, [pc, #144]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040da:	2200      	movs	r2, #0
 80040dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80040de:	4b23      	ldr	r3, [pc, #140]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040e4:	4b21      	ldr	r3, [pc, #132]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040e6:	2204      	movs	r2, #4
 80040e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80040ea:	4b20      	ldr	r3, [pc, #128]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80040f0:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80040f6:	4b1d      	ldr	r3, [pc, #116]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040fc:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <MX_ADC1_Init+0xbc>)
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004104:	4b19      	ldr	r3, [pc, #100]	@ (800416c <MX_ADC1_Init+0xbc>)
 8004106:	2200      	movs	r2, #0
 8004108:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800410a:	4b18      	ldr	r3, [pc, #96]	@ (800416c <MX_ADC1_Init+0xbc>)
 800410c:	2200      	movs	r2, #0
 800410e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004110:	4b16      	ldr	r3, [pc, #88]	@ (800416c <MX_ADC1_Init+0xbc>)
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004118:	4b14      	ldr	r3, [pc, #80]	@ (800416c <MX_ADC1_Init+0xbc>)
 800411a:	2200      	movs	r2, #0
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800411e:	4b13      	ldr	r3, [pc, #76]	@ (800416c <MX_ADC1_Init+0xbc>)
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004126:	4811      	ldr	r0, [pc, #68]	@ (800416c <MX_ADC1_Init+0xbc>)
 8004128:	f001 fd8a 	bl	8005c40 <HAL_ADC_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8004132:	f000 fdd7 	bl	8004ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004136:	4b0f      	ldr	r3, [pc, #60]	@ (8004174 <MX_ADC1_Init+0xc4>)
 8004138:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800413a:	2306      	movs	r3, #6
 800413c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004142:	237f      	movs	r3, #127	@ 0x7f
 8004144:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004146:	2304      	movs	r3, #4
 8004148:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800414e:	463b      	mov	r3, r7
 8004150:	4619      	mov	r1, r3
 8004152:	4806      	ldr	r0, [pc, #24]	@ (800416c <MX_ADC1_Init+0xbc>)
 8004154:	f001 feba 	bl	8005ecc <HAL_ADC_ConfigChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800415e:	f000 fdc1 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004162:	bf00      	nop
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000288 	.word	0x20000288
 8004170:	50040000 	.word	0x50040000
 8004174:	04300002 	.word	0x04300002

08004178 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800417c:	4b2c      	ldr	r3, [pc, #176]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 800417e:	4a2d      	ldr	r2, [pc, #180]	@ (8004234 <MX_DFSDM1_Init+0xbc>)
 8004180:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8004182:	4b2b      	ldr	r3, [pc, #172]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8004188:	4b29      	ldr	r3, [pc, #164]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 800418a:	2201      	movs	r2, #1
 800418c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800418e:	4b28      	ldr	r3, [pc, #160]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 8004190:	2201      	movs	r2, #1
 8004192:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8004194:	4b26      	ldr	r3, [pc, #152]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 8004196:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800419a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 800419c:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 800419e:	22fa      	movs	r2, #250	@ 0xfa
 80041a0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80041a2:	4b23      	ldr	r3, [pc, #140]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80041a8:	4821      	ldr	r0, [pc, #132]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 80041aa:	f002 fc5d 	bl	8006a68 <HAL_DFSDM_FilterInit>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80041b4:	f000 fd96 	bl	8004ce4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80041b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041ba:	4a20      	ldr	r2, [pc, #128]	@ (800423c <MX_DFSDM1_Init+0xc4>)
 80041bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80041be:	4b1e      	ldr	r3, [pc, #120]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80041c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 60;
 80041ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041cc:	223c      	movs	r2, #60	@ 0x3c
 80041ce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80041d0:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80041d6:	4b18      	ldr	r3, [pc, #96]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041d8:	2200      	movs	r2, #0
 80041da:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80041dc:	4b16      	ldr	r3, [pc, #88]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041de:	2200      	movs	r2, #0
 80041e0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80041e2:	4b15      	ldr	r3, [pc, #84]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80041e8:	4b13      	ldr	r3, [pc, #76]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041ea:	2204      	movs	r2, #4
 80041ec:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80041ee:	4b12      	ldr	r3, [pc, #72]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80041f4:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80041fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8004200:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8004206:	480c      	ldr	r0, [pc, #48]	@ (8004238 <MX_DFSDM1_Init+0xc0>)
 8004208:	f002 fb6e 	bl	80068e8 <HAL_DFSDM_ChannelInit>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8004212:	f000 fd67 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8004216:	2201      	movs	r2, #1
 8004218:	4909      	ldr	r1, [pc, #36]	@ (8004240 <MX_DFSDM1_Init+0xc8>)
 800421a:	4805      	ldr	r0, [pc, #20]	@ (8004230 <MX_DFSDM1_Init+0xb8>)
 800421c:	f002 fcfe 	bl	8006c1c <HAL_DFSDM_FilterConfigRegChannel>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8004226:	f000 fd5d 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200002f0 	.word	0x200002f0
 8004234:	40016100 	.word	0x40016100
 8004238:	20000344 	.word	0x20000344
 800423c:	40016040 	.word	0x40016040
 8004240:	00020004 	.word	0x00020004

08004244 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004248:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <MX_I2C1_Init+0x74>)
 800424a:	4a1c      	ldr	r2, [pc, #112]	@ (80042bc <MX_I2C1_Init+0x78>)
 800424c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 800424e:	4b1a      	ldr	r3, [pc, #104]	@ (80042b8 <MX_I2C1_Init+0x74>)
 8004250:	4a1b      	ldr	r2, [pc, #108]	@ (80042c0 <MX_I2C1_Init+0x7c>)
 8004252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004254:	4b18      	ldr	r3, [pc, #96]	@ (80042b8 <MX_I2C1_Init+0x74>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800425a:	4b17      	ldr	r3, [pc, #92]	@ (80042b8 <MX_I2C1_Init+0x74>)
 800425c:	2201      	movs	r2, #1
 800425e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004260:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <MX_I2C1_Init+0x74>)
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004266:	4b14      	ldr	r3, [pc, #80]	@ (80042b8 <MX_I2C1_Init+0x74>)
 8004268:	2200      	movs	r2, #0
 800426a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800426c:	4b12      	ldr	r3, [pc, #72]	@ (80042b8 <MX_I2C1_Init+0x74>)
 800426e:	2200      	movs	r2, #0
 8004270:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004272:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <MX_I2C1_Init+0x74>)
 8004274:	2200      	movs	r2, #0
 8004276:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004278:	4b0f      	ldr	r3, [pc, #60]	@ (80042b8 <MX_I2C1_Init+0x74>)
 800427a:	2200      	movs	r2, #0
 800427c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800427e:	480e      	ldr	r0, [pc, #56]	@ (80042b8 <MX_I2C1_Init+0x74>)
 8004280:	f003 faad 	bl	80077de <HAL_I2C_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800428a:	f000 fd2b 	bl	8004ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800428e:	2100      	movs	r1, #0
 8004290:	4809      	ldr	r0, [pc, #36]	@ (80042b8 <MX_I2C1_Init+0x74>)
 8004292:	f003 fb3f 	bl	8007914 <HAL_I2CEx_ConfigAnalogFilter>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800429c:	f000 fd22 	bl	8004ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80042a0:	2100      	movs	r1, #0
 80042a2:	4805      	ldr	r0, [pc, #20]	@ (80042b8 <MX_I2C1_Init+0x74>)
 80042a4:	f003 fb81 	bl	80079aa <HAL_I2CEx_ConfigDigitalFilter>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80042ae:	f000 fd19 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200003dc 	.word	0x200003dc
 80042bc:	40005400 	.word	0x40005400
 80042c0:	30a175ab 	.word	0x30a175ab

080042c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042ca:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <MX_I2C2_Init+0x78>)
 80042cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 80042ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <MX_I2C2_Init+0x7c>)
 80042d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80042d4:	4b18      	ldr	r3, [pc, #96]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042da:	4b17      	ldr	r3, [pc, #92]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042dc:	2201      	movs	r2, #1
 80042de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042e0:	4b15      	ldr	r3, [pc, #84]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80042e6:	4b14      	ldr	r3, [pc, #80]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80042ec:	4b12      	ldr	r3, [pc, #72]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042f2:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004338 <MX_I2C2_Init+0x74>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80042fe:	480e      	ldr	r0, [pc, #56]	@ (8004338 <MX_I2C2_Init+0x74>)
 8004300:	f003 fa6d 	bl	80077de <HAL_I2C_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800430a:	f000 fceb 	bl	8004ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800430e:	2100      	movs	r1, #0
 8004310:	4809      	ldr	r0, [pc, #36]	@ (8004338 <MX_I2C2_Init+0x74>)
 8004312:	f003 faff 	bl	8007914 <HAL_I2CEx_ConfigAnalogFilter>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800431c:	f000 fce2 	bl	8004ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004320:	2100      	movs	r1, #0
 8004322:	4805      	ldr	r0, [pc, #20]	@ (8004338 <MX_I2C2_Init+0x74>)
 8004324:	f003 fb41 	bl	80079aa <HAL_I2CEx_ConfigDigitalFilter>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800432e:	f000 fcd9 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000430 	.word	0x20000430
 800433c:	40005800 	.word	0x40005800
 8004340:	30a175ab 	.word	0x30a175ab

08004344 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8004358:	4b23      	ldr	r3, [pc, #140]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 800435a:	4a24      	ldr	r2, [pc, #144]	@ (80043ec <MX_OCTOSPI1_Init+0xa8>)
 800435c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800435e:	4b22      	ldr	r3, [pc, #136]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 8004360:	2201      	movs	r2, #1
 8004362:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8004364:	4b20      	ldr	r3, [pc, #128]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800436a:	4b1f      	ldr	r3, [pc, #124]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 800436c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004370:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8004372:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 8004374:	2220      	movs	r2, #32
 8004376:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8004378:	4b1b      	ldr	r3, [pc, #108]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 800437a:	2201      	movs	r2, #1
 800437c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800437e:	4b1a      	ldr	r3, [pc, #104]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 8004380:	2200      	movs	r2, #0
 8004382:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8004384:	4b18      	ldr	r3, [pc, #96]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 8004386:	2200      	movs	r2, #0
 8004388:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800438a:	4b17      	ldr	r3, [pc, #92]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 800438c:	2201      	movs	r2, #1
 800438e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004390:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 8004392:	2200      	movs	r2, #0
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8004396:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 8004398:	2200      	movs	r2, #0
 800439a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800439c:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 800439e:	2200      	movs	r2, #0
 80043a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80043a2:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 80043a4:	2208      	movs	r2, #8
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80043a8:	480f      	ldr	r0, [pc, #60]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 80043aa:	f003 fb4b 	bl	8007a44 <HAL_OSPI_Init>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80043b4:	f000 fc96 	bl	8004ce4 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80043b8:	2301      	movs	r3, #1
 80043ba:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80043bc:	2301      	movs	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80043c0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80043c4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043cc:	4619      	mov	r1, r3
 80043ce:	4806      	ldr	r0, [pc, #24]	@ (80043e8 <MX_OCTOSPI1_Init+0xa4>)
 80043d0:	f003 fbf2 	bl	8007bb8 <HAL_OSPIM_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80043da:	f000 fc83 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000484 	.word	0x20000484
 80043ec:	a0001000 	.word	0xa0001000

080043f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80043f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004464 <MX_SPI1_Init+0x74>)
 80043f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004468 <MX_SPI1_Init+0x78>)
 80043f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80043fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004464 <MX_SPI1_Init+0x74>)
 80043fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004402:	4b18      	ldr	r3, [pc, #96]	@ (8004464 <MX_SPI1_Init+0x74>)
 8004404:	2200      	movs	r2, #0
 8004406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004408:	4b16      	ldr	r3, [pc, #88]	@ (8004464 <MX_SPI1_Init+0x74>)
 800440a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800440e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004410:	4b14      	ldr	r3, [pc, #80]	@ (8004464 <MX_SPI1_Init+0x74>)
 8004412:	2200      	movs	r2, #0
 8004414:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004416:	4b13      	ldr	r3, [pc, #76]	@ (8004464 <MX_SPI1_Init+0x74>)
 8004418:	2200      	movs	r2, #0
 800441a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800441c:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <MX_SPI1_Init+0x74>)
 800441e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004422:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004424:	4b0f      	ldr	r3, [pc, #60]	@ (8004464 <MX_SPI1_Init+0x74>)
 8004426:	2208      	movs	r2, #8
 8004428:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800442a:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <MX_SPI1_Init+0x74>)
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <MX_SPI1_Init+0x74>)
 8004432:	2200      	movs	r2, #0
 8004434:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004436:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <MX_SPI1_Init+0x74>)
 8004438:	2200      	movs	r2, #0
 800443a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800443c:	4b09      	ldr	r3, [pc, #36]	@ (8004464 <MX_SPI1_Init+0x74>)
 800443e:	2207      	movs	r2, #7
 8004440:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004442:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <MX_SPI1_Init+0x74>)
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004448:	4b06      	ldr	r3, [pc, #24]	@ (8004464 <MX_SPI1_Init+0x74>)
 800444a:	2208      	movs	r2, #8
 800444c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800444e:	4805      	ldr	r0, [pc, #20]	@ (8004464 <MX_SPI1_Init+0x74>)
 8004450:	f005 fca6 	bl	8009da0 <HAL_SPI_Init>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800445a:	f000 fc43 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800445e:	bf00      	nop
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200004d4 	.word	0x200004d4
 8004468:	40013000 	.word	0x40013000

0800446c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004470:	4b1b      	ldr	r3, [pc, #108]	@ (80044e0 <MX_SPI3_Init+0x74>)
 8004472:	4a1c      	ldr	r2, [pc, #112]	@ (80044e4 <MX_SPI3_Init+0x78>)
 8004474:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004476:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <MX_SPI3_Init+0x74>)
 8004478:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800447c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800447e:	4b18      	ldr	r3, [pc, #96]	@ (80044e0 <MX_SPI3_Init+0x74>)
 8004480:	2200      	movs	r2, #0
 8004482:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004484:	4b16      	ldr	r3, [pc, #88]	@ (80044e0 <MX_SPI3_Init+0x74>)
 8004486:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800448a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800448c:	4b14      	ldr	r3, [pc, #80]	@ (80044e0 <MX_SPI3_Init+0x74>)
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004492:	4b13      	ldr	r3, [pc, #76]	@ (80044e0 <MX_SPI3_Init+0x74>)
 8004494:	2200      	movs	r2, #0
 8004496:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004498:	4b11      	ldr	r3, [pc, #68]	@ (80044e0 <MX_SPI3_Init+0x74>)
 800449a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800449e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80044a0:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <MX_SPI3_Init+0x74>)
 80044a2:	2208      	movs	r2, #8
 80044a4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044a6:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <MX_SPI3_Init+0x74>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <MX_SPI3_Init+0x74>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b2:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <MX_SPI3_Init+0x74>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <MX_SPI3_Init+0x74>)
 80044ba:	2207      	movs	r2, #7
 80044bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044be:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <MX_SPI3_Init+0x74>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80044c4:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <MX_SPI3_Init+0x74>)
 80044c6:	2208      	movs	r2, #8
 80044c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80044ca:	4805      	ldr	r0, [pc, #20]	@ (80044e0 <MX_SPI3_Init+0x74>)
 80044cc:	f005 fc68 	bl	8009da0 <HAL_SPI_Init>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80044d6:	f000 fc05 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000538 	.word	0x20000538
 80044e4:	40003c00 	.word	0x40003c00

080044e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80044ec:	4b22      	ldr	r3, [pc, #136]	@ (8004578 <MX_UART4_Init+0x90>)
 80044ee:	4a23      	ldr	r2, [pc, #140]	@ (800457c <MX_UART4_Init+0x94>)
 80044f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80044f2:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <MX_UART4_Init+0x90>)
 80044f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80044f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80044fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <MX_UART4_Init+0x90>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004500:	4b1d      	ldr	r3, [pc, #116]	@ (8004578 <MX_UART4_Init+0x90>)
 8004502:	2200      	movs	r2, #0
 8004504:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004506:	4b1c      	ldr	r3, [pc, #112]	@ (8004578 <MX_UART4_Init+0x90>)
 8004508:	2200      	movs	r2, #0
 800450a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800450c:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <MX_UART4_Init+0x90>)
 800450e:	220c      	movs	r2, #12
 8004510:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004512:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <MX_UART4_Init+0x90>)
 8004514:	2200      	movs	r2, #0
 8004516:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004518:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <MX_UART4_Init+0x90>)
 800451a:	2200      	movs	r2, #0
 800451c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800451e:	4b16      	ldr	r3, [pc, #88]	@ (8004578 <MX_UART4_Init+0x90>)
 8004520:	2200      	movs	r2, #0
 8004522:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004524:	4b14      	ldr	r3, [pc, #80]	@ (8004578 <MX_UART4_Init+0x90>)
 8004526:	2200      	movs	r2, #0
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800452a:	4b13      	ldr	r3, [pc, #76]	@ (8004578 <MX_UART4_Init+0x90>)
 800452c:	2200      	movs	r2, #0
 800452e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004530:	4811      	ldr	r0, [pc, #68]	@ (8004578 <MX_UART4_Init+0x90>)
 8004532:	f005 fcd8 	bl	8009ee6 <HAL_UART_Init>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800453c:	f000 fbd2 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004540:	2100      	movs	r1, #0
 8004542:	480d      	ldr	r0, [pc, #52]	@ (8004578 <MX_UART4_Init+0x90>)
 8004544:	f006 fb02 	bl	800ab4c <HAL_UARTEx_SetTxFifoThreshold>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800454e:	f000 fbc9 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004552:	2100      	movs	r1, #0
 8004554:	4808      	ldr	r0, [pc, #32]	@ (8004578 <MX_UART4_Init+0x90>)
 8004556:	f006 fb37 	bl	800abc8 <HAL_UARTEx_SetRxFifoThreshold>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004560:	f000 fbc0 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004564:	4804      	ldr	r0, [pc, #16]	@ (8004578 <MX_UART4_Init+0x90>)
 8004566:	f006 fab8 	bl	800aada <HAL_UARTEx_DisableFifoMode>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8004570:	f000 fbb8 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004574:	bf00      	nop
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2000059c 	.word	0x2000059c
 800457c:	40004c00 	.word	0x40004c00

08004580 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004584:	4b22      	ldr	r3, [pc, #136]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 8004586:	4a23      	ldr	r2, [pc, #140]	@ (8004614 <MX_USART1_UART_Init+0x94>)
 8004588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800458a:	4b21      	ldr	r3, [pc, #132]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 800458c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004592:	4b1f      	ldr	r3, [pc, #124]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 8004594:	2200      	movs	r2, #0
 8004596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004598:	4b1d      	ldr	r3, [pc, #116]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 800459a:	2200      	movs	r2, #0
 800459c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800459e:	4b1c      	ldr	r3, [pc, #112]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045a6:	220c      	movs	r2, #12
 80045a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045aa:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045b0:	4b17      	ldr	r3, [pc, #92]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045b6:	4b16      	ldr	r3, [pc, #88]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045bc:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045be:	2200      	movs	r2, #0
 80045c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045c2:	4b13      	ldr	r3, [pc, #76]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045c8:	4811      	ldr	r0, [pc, #68]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045ca:	f005 fc8c 	bl	8009ee6 <HAL_UART_Init>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80045d4:	f000 fb86 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045d8:	2100      	movs	r1, #0
 80045da:	480d      	ldr	r0, [pc, #52]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045dc:	f006 fab6 	bl	800ab4c <HAL_UARTEx_SetTxFifoThreshold>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80045e6:	f000 fb7d 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80045ea:	2100      	movs	r1, #0
 80045ec:	4808      	ldr	r0, [pc, #32]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045ee:	f006 faeb 	bl	800abc8 <HAL_UARTEx_SetRxFifoThreshold>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80045f8:	f000 fb74 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80045fc:	4804      	ldr	r0, [pc, #16]	@ (8004610 <MX_USART1_UART_Init+0x90>)
 80045fe:	f006 fa6c 	bl	800aada <HAL_UARTEx_DisableFifoMode>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004608:	f000 fb6c 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800460c:	bf00      	nop
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000630 	.word	0x20000630
 8004614:	40013800 	.word	0x40013800

08004618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800461c:	4b23      	ldr	r3, [pc, #140]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 800461e:	4a24      	ldr	r2, [pc, #144]	@ (80046b0 <MX_USART2_UART_Init+0x98>)
 8004620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004622:	4b22      	ldr	r3, [pc, #136]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800462a:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004630:	4b1e      	ldr	r3, [pc, #120]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004632:	2200      	movs	r2, #0
 8004634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004636:	4b1d      	ldr	r3, [pc, #116]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004638:	2200      	movs	r2, #0
 800463a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800463c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 800463e:	220c      	movs	r2, #12
 8004640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8004642:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004644:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004648:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800464a:	4b18      	ldr	r3, [pc, #96]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 800464c:	2200      	movs	r2, #0
 800464e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004650:	4b16      	ldr	r3, [pc, #88]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004652:	2200      	movs	r2, #0
 8004654:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004656:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004658:	2200      	movs	r2, #0
 800465a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800465c:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 800465e:	2200      	movs	r2, #0
 8004660:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004662:	4812      	ldr	r0, [pc, #72]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004664:	f005 fc3f 	bl	8009ee6 <HAL_UART_Init>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800466e:	f000 fb39 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004672:	2100      	movs	r1, #0
 8004674:	480d      	ldr	r0, [pc, #52]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004676:	f006 fa69 	bl	800ab4c <HAL_UARTEx_SetTxFifoThreshold>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8004680:	f000 fb30 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004684:	2100      	movs	r1, #0
 8004686:	4809      	ldr	r0, [pc, #36]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004688:	f006 fa9e 	bl	800abc8 <HAL_UARTEx_SetRxFifoThreshold>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8004692:	f000 fb27 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004696:	4805      	ldr	r0, [pc, #20]	@ (80046ac <MX_USART2_UART_Init+0x94>)
 8004698:	f006 fa1f 	bl	800aada <HAL_UARTEx_DisableFifoMode>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80046a2:	f000 fb1f 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200006c4 	.word	0x200006c4
 80046b0:	40004400 	.word	0x40004400

080046b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80046b8:	4b22      	ldr	r3, [pc, #136]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046ba:	4a23      	ldr	r2, [pc, #140]	@ (8004748 <MX_USART3_UART_Init+0x94>)
 80046bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80046be:	4b21      	ldr	r3, [pc, #132]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80046c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80046c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046da:	220c      	movs	r2, #12
 80046dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046de:	4b19      	ldr	r3, [pc, #100]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046e4:	4b17      	ldr	r3, [pc, #92]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046ea:	4b16      	ldr	r3, [pc, #88]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80046f0:	4b14      	ldr	r3, [pc, #80]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046f6:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046fc:	4811      	ldr	r0, [pc, #68]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 80046fe:	f005 fbf2 	bl	8009ee6 <HAL_UART_Init>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004708:	f000 faec 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800470c:	2100      	movs	r1, #0
 800470e:	480d      	ldr	r0, [pc, #52]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 8004710:	f006 fa1c 	bl	800ab4c <HAL_UARTEx_SetTxFifoThreshold>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800471a:	f000 fae3 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800471e:	2100      	movs	r1, #0
 8004720:	4808      	ldr	r0, [pc, #32]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 8004722:	f006 fa51 	bl	800abc8 <HAL_UARTEx_SetRxFifoThreshold>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800472c:	f000 fada 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004730:	4804      	ldr	r0, [pc, #16]	@ (8004744 <MX_USART3_UART_Init+0x90>)
 8004732:	f006 f9d2 	bl	800aada <HAL_UARTEx_DisableFifoMode>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800473c:	f000 fad2 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004740:	bf00      	nop
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000758 	.word	0x20000758
 8004748:	40004800 	.word	0x40004800

0800474c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004750:	bf00      	nop
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <MX_DMA_Init+0x50>)
 8004764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004766:	4a11      	ldr	r2, [pc, #68]	@ (80047ac <MX_DMA_Init+0x50>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	6493      	str	r3, [r2, #72]	@ 0x48
 800476e:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <MX_DMA_Init+0x50>)
 8004770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800477a:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <MX_DMA_Init+0x50>)
 800477c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800477e:	4a0b      	ldr	r2, [pc, #44]	@ (80047ac <MX_DMA_Init+0x50>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6493      	str	r3, [r2, #72]	@ 0x48
 8004786:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <MX_DMA_Init+0x50>)
 8004788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004792:	2200      	movs	r2, #0
 8004794:	2105      	movs	r1, #5
 8004796:	200e      	movs	r0, #14
 8004798:	f002 f86f 	bl	800687a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800479c:	200e      	movs	r0, #14
 800479e:	f002 f888 	bl	80068b2 <HAL_NVIC_EnableIRQ>

}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000

080047b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08c      	sub	sp, #48	@ 0x30
 80047b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b6:	f107 031c 	add.w	r3, r7, #28
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	60da      	str	r2, [r3, #12]
 80047c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80047c6:	4b96      	ldr	r3, [pc, #600]	@ (8004a20 <MX_GPIO_Init+0x270>)
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	4a95      	ldr	r2, [pc, #596]	@ (8004a20 <MX_GPIO_Init+0x270>)
 80047cc:	f043 0310 	orr.w	r3, r3, #16
 80047d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047d2:	4b93      	ldr	r3, [pc, #588]	@ (8004a20 <MX_GPIO_Init+0x270>)
 80047d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047de:	4b90      	ldr	r3, [pc, #576]	@ (8004a20 <MX_GPIO_Init+0x270>)
 80047e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e2:	4a8f      	ldr	r2, [pc, #572]	@ (8004a20 <MX_GPIO_Init+0x270>)
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004a20 <MX_GPIO_Init+0x270>)
 80047ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047f6:	4b8a      	ldr	r3, [pc, #552]	@ (8004a20 <MX_GPIO_Init+0x270>)
 80047f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fa:	4a89      	ldr	r2, [pc, #548]	@ (8004a20 <MX_GPIO_Init+0x270>)
 80047fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004802:	4b87      	ldr	r3, [pc, #540]	@ (8004a20 <MX_GPIO_Init+0x270>)
 8004804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800480e:	4b84      	ldr	r3, [pc, #528]	@ (8004a20 <MX_GPIO_Init+0x270>)
 8004810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004812:	4a83      	ldr	r2, [pc, #524]	@ (8004a20 <MX_GPIO_Init+0x270>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800481a:	4b81      	ldr	r3, [pc, #516]	@ (8004a20 <MX_GPIO_Init+0x270>)
 800481c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004826:	4b7e      	ldr	r3, [pc, #504]	@ (8004a20 <MX_GPIO_Init+0x270>)
 8004828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482a:	4a7d      	ldr	r2, [pc, #500]	@ (8004a20 <MX_GPIO_Init+0x270>)
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004832:	4b7b      	ldr	r3, [pc, #492]	@ (8004a20 <MX_GPIO_Init+0x270>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800483e:	4b78      	ldr	r3, [pc, #480]	@ (8004a20 <MX_GPIO_Init+0x270>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	4a77      	ldr	r2, [pc, #476]	@ (8004a20 <MX_GPIO_Init+0x270>)
 8004844:	f043 0308 	orr.w	r3, r3, #8
 8004848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800484a:	4b75      	ldr	r3, [pc, #468]	@ (8004a20 <MX_GPIO_Init+0x270>)
 800484c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8004856:	2200      	movs	r2, #0
 8004858:	f240 1105 	movw	r1, #261	@ 0x105
 800485c:	4871      	ldr	r0, [pc, #452]	@ (8004a24 <MX_GPIO_Init+0x274>)
 800485e:	f002 ff83 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004862:	2200      	movs	r2, #0
 8004864:	f248 111c 	movw	r1, #33052	@ 0x811c
 8004868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800486c:	f002 ff7c 	bl	8007768 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004870:	2200      	movs	r2, #0
 8004872:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8004876:	486c      	ldr	r0, [pc, #432]	@ (8004a28 <MX_GPIO_Init+0x278>)
 8004878:	f002 ff76 	bl	8007768 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 800487c:	2200      	movs	r2, #0
 800487e:	f242 0183 	movw	r1, #8323	@ 0x2083
 8004882:	486a      	ldr	r0, [pc, #424]	@ (8004a2c <MX_GPIO_Init+0x27c>)
 8004884:	f002 ff70 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004888:	2200      	movs	r2, #0
 800488a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800488e:	4868      	ldr	r0, [pc, #416]	@ (8004a30 <MX_GPIO_Init+0x280>)
 8004890:	f002 ff6a 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004894:	f240 1305 	movw	r3, #261	@ 0x105
 8004898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800489a:	2301      	movs	r3, #1
 800489c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a2:	2300      	movs	r3, #0
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048a6:	f107 031c 	add.w	r3, r7, #28
 80048aa:	4619      	mov	r1, r3
 80048ac:	485d      	ldr	r0, [pc, #372]	@ (8004a24 <MX_GPIO_Init+0x274>)
 80048ae:	f002 fdc9 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 80048b2:	237a      	movs	r3, #122	@ 0x7a
 80048b4:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048c0:	f107 031c 	add.w	r3, r7, #28
 80048c4:	4619      	mov	r1, r3
 80048c6:	4857      	ldr	r0, [pc, #348]	@ (8004a24 <MX_GPIO_Init+0x274>)
 80048c8:	f002 fdbc 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80048cc:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 80048d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048dc:	f107 031c 	add.w	r3, r7, #28
 80048e0:	4619      	mov	r1, r3
 80048e2:	4853      	ldr	r0, [pc, #332]	@ (8004a30 <MX_GPIO_Init+0x280>)
 80048e4:	f002 fdae 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80048e8:	f248 131c 	movw	r3, #33052	@ 0x811c
 80048ec:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ee:	2301      	movs	r3, #1
 80048f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f6:	2300      	movs	r3, #0
 80048f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048fa:	f107 031c 	add.w	r3, r7, #28
 80048fe:	4619      	mov	r1, r3
 8004900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004904:	f002 fd9e 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004908:	2301      	movs	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800490c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004916:	f107 031c 	add.w	r3, r7, #28
 800491a:	4619      	mov	r1, r3
 800491c:	4842      	ldr	r0, [pc, #264]	@ (8004a28 <MX_GPIO_Init+0x278>)
 800491e:	f002 fd91 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004922:	2302      	movs	r3, #2
 8004924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	2302      	movs	r3, #2
 8004928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492e:	2300      	movs	r3, #0
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004932:	2302      	movs	r3, #2
 8004934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004936:	f107 031c 	add.w	r3, r7, #28
 800493a:	4619      	mov	r1, r3
 800493c:	483a      	ldr	r0, [pc, #232]	@ (8004a28 <MX_GPIO_Init+0x278>)
 800493e:	f002 fd81 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004942:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8004946:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004948:	2301      	movs	r3, #1
 800494a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004950:	2300      	movs	r3, #0
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004954:	f107 031c 	add.w	r3, r7, #28
 8004958:	4619      	mov	r1, r3
 800495a:	4833      	ldr	r0, [pc, #204]	@ (8004a28 <MX_GPIO_Init+0x278>)
 800495c:	f002 fd72 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8004960:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8004964:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004966:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800496a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	2300      	movs	r3, #0
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004970:	f107 031c 	add.w	r3, r7, #28
 8004974:	4619      	mov	r1, r3
 8004976:	482d      	ldr	r0, [pc, #180]	@ (8004a2c <MX_GPIO_Init+0x27c>)
 8004978:	f002 fd64 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 800497c:	f242 0383 	movw	r3, #8323	@ 0x2083
 8004980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004982:	2301      	movs	r3, #1
 8004984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498a:	2300      	movs	r3, #0
 800498c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	4619      	mov	r1, r3
 8004994:	4825      	ldr	r0, [pc, #148]	@ (8004a2c <MX_GPIO_Init+0x27c>)
 8004996:	f002 fd55 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800499a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800499e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a0:	2301      	movs	r3, #1
 80049a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a8:	2300      	movs	r3, #0
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ac:	f107 031c 	add.w	r3, r7, #28
 80049b0:	4619      	mov	r1, r3
 80049b2:	481f      	ldr	r0, [pc, #124]	@ (8004a30 <MX_GPIO_Init+0x280>)
 80049b4:	f002 fd46 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80049b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049be:	2300      	movs	r3, #0
 80049c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80049c6:	f107 031c 	add.w	r3, r7, #28
 80049ca:	4619      	mov	r1, r3
 80049cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049d0:	f002 fd38 	bl	8007444 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80049d4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80049d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e2:	2303      	movs	r3, #3
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80049e6:	230a      	movs	r3, #10
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ea:	f107 031c 	add.w	r3, r7, #28
 80049ee:	4619      	mov	r1, r3
 80049f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049f4:	f002 fd26 	bl	8007444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80049f8:	2200      	movs	r2, #0
 80049fa:	2105      	movs	r1, #5
 80049fc:	2017      	movs	r0, #23
 80049fe:	f001 ff3c 	bl	800687a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a02:	2017      	movs	r0, #23
 8004a04:	f001 ff55 	bl	80068b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2105      	movs	r1, #5
 8004a0c:	2028      	movs	r0, #40	@ 0x28
 8004a0e:	f001 ff34 	bl	800687a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a12:	2028      	movs	r0, #40	@ 0x28
 8004a14:	f001 ff4d 	bl	80068b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004a18:	bf00      	nop
 8004a1a:	3730      	adds	r7, #48	@ 0x30
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	48001000 	.word	0x48001000
 8004a28:	48000400 	.word	0x48000400
 8004a2c:	48000c00 	.word	0x48000c00
 8004a30:	48000800 	.word	0x48000800

08004a34 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(TransferHalfSemHandle);
 8004a3c:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x20>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f006 fb39 	bl	800b0b8 <osSemaphoreRelease>
	DMAHalfFlag = 1;
 8004a46:	4b04      	ldr	r3, [pc, #16]	@ (8004a58 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	801a      	strh	r2, [r3, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200007f8 	.word	0x200007f8
 8004a58:	2001c82e 	.word	0x2001c82e

08004a5c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(TransferFullSemHandle);
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_DFSDM_FilterRegConvCpltCallback+0x20>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f006 fb25 	bl	800b0b8 <osSemaphoreRelease>
	DMAFullFlag = 1;
 8004a6e:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	801a      	strh	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	200007fc 	.word	0x200007fc
 8004a80:	2001c830 	.word	0x2001c830

08004a84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FFT */


		  // 初始化實數快速 FFT 結構體
		  // FFT_SIZE 必須是 2 的冪次方
		  if (arm_rfft_fast_init_f32(&S, FFT_SIZE) != ARM_MATH_SUCCESS)
 8004a8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004a90:	4845      	ldr	r0, [pc, #276]	@ (8004ba8 <StartDefaultTask+0x124>)
 8004a92:	f7ff f8ef 	bl	8003c74 <arm_rfft_fast_init_f32>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <StartDefaultTask+0x1c>
		  {
		      // FFT 初始化失敗，可以在這裡處理錯誤，例如進入無限迴圈或閃爍 LED
		      Error_Handler();
 8004a9c:	f000 f922 	bl	8004ce4 <Error_Handler>
		  }
		  // 初始化漢寧窗係數
		  generate_hanning_window_f32(HanningWindow, FFT_SIZE);
 8004aa0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004aa4:	4841      	ldr	r0, [pc, #260]	@ (8004bac <StartDefaultTask+0x128>)
 8004aa6:	f7ff f94f 	bl	8003d48 <generate_hanning_window_f32>

		  /* Infinite loop */
		  for(;;)
		  {
		    // 等待 FFTSem 號誌，直到被釋放
		    osSemaphoreAcquire(FFTSemHandle, osWaitForever);
 8004aaa:	4b41      	ldr	r3, [pc, #260]	@ (8004bb0 <StartDefaultTask+0x12c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f006 faae 	bl	800b014 <osSemaphoreAcquire>
		    FFTFlag = 1;
 8004ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb4 <StartDefaultTask+0x130>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	801a      	strh	r2, [r3, #0]

		    arm_mult_f32(PlayBuf, HanningWindow, PlayBuf, FFT_SIZE);
 8004abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8004bb8 <StartDefaultTask+0x134>)
 8004ac4:	4939      	ldr	r1, [pc, #228]	@ (8004bac <StartDefaultTask+0x128>)
 8004ac6:	483c      	ldr	r0, [pc, #240]	@ (8004bb8 <StartDefaultTask+0x134>)
 8004ac8:	f7fe fda6 	bl	8003618 <arm_mult_f32>

		    // 執行實數快速 FFT
		    // InputSignal: 輸入緩衝區 (實數)
		    // OutputSignal: 輸出緩衝區 (複數：實部和虛部交錯)
		    // ifftFlag: 0 for forward FFT (正向 FFT)
		    arm_rfft_fast_f32(&S, PlayBuf, OutputSignal, 0);
 8004acc:	2300      	movs	r3, #0
 8004ace:	4a3b      	ldr	r2, [pc, #236]	@ (8004bbc <StartDefaultTask+0x138>)
 8004ad0:	4939      	ldr	r1, [pc, #228]	@ (8004bb8 <StartDefaultTask+0x134>)
 8004ad2:	4835      	ldr	r0, [pc, #212]	@ (8004ba8 <StartDefaultTask+0x124>)
 8004ad4:	f7fe ff7d 	bl	80039d2 <arm_rfft_fast_f32>

		    // 計算每個頻率分量的幅度
		    // OutputSignal: 包含實部和虛部的複數輸出
		    // Magnitude: 儲存計算出的幅度
		    // FFT_SIZE: 處理的複數對數量
		    arm_cmplx_mag_f32(OutputSignal, Magnitude, FFT_SIZE);
 8004ad8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004adc:	4938      	ldr	r1, [pc, #224]	@ (8004bc0 <StartDefaultTask+0x13c>)
 8004ade:	4837      	ldr	r0, [pc, #220]	@ (8004bbc <StartDefaultTask+0x138>)
 8004ae0:	f7fe fc98 	bl	8003414 <arm_cmplx_mag_f32>
		    // 尋找最大幅度及其索引
		    // Magnitude: 幅度緩衝區
		    // FFT_SIZE: 緩衝區大小
		    // &MaxValue: 儲存最大幅度值
		    // &MaxIndex: 儲存最大幅度所在索引
		    arm_max_f32(&Magnitude[1], FFT_SIZE - 1, &MaxValue, &MaxIndex);
 8004ae4:	4b37      	ldr	r3, [pc, #220]	@ (8004bc4 <StartDefaultTask+0x140>)
 8004ae6:	4a38      	ldr	r2, [pc, #224]	@ (8004bc8 <StartDefaultTask+0x144>)
 8004ae8:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8004aec:	4837      	ldr	r0, [pc, #220]	@ (8004bcc <StartDefaultTask+0x148>)
 8004aee:	f7fe fd5b 	bl	80035a8 <arm_max_f32>
		    MaxIndex += 1;
 8004af2:	4b34      	ldr	r3, [pc, #208]	@ (8004bc4 <StartDefaultTask+0x140>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	4a32      	ldr	r2, [pc, #200]	@ (8004bc4 <StartDefaultTask+0x140>)
 8004afa:	6013      	str	r3, [r2, #0]
		    // 注意：DC 分量 (頻率 0) 通常是第一個元素 (索引 0)，我們通常會忽略它
		    // 在許多應用中，第一個頻率分量（索引 0）代表直流（DC）偏移，通常不會被視為「主要頻率」。
		    // 如果 MaxIndex 為 0 且你不希望將 DC 視為主要頻率，你可能需要額外的邏輯來處理這個情況。
		    // 例如，你可以從索引 1 開始搜尋最大值，或者在 MaxIndex == 0 時忽略它。
		    // 這裡我們直接計算，如果你需要排除 DC 分量，請調整 arm_max_f32 的起始索引或結果處理。
		    MainFrequency = (float32_t)MaxIndex * SamplingFreq / (float32_t)FFT_SIZE;
 8004afc:	4b31      	ldr	r3, [pc, #196]	@ (8004bc4 <StartDefaultTask+0x140>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b08:	4b31      	ldr	r3, [pc, #196]	@ (8004bd0 <StartDefaultTask+0x14c>)
 8004b0a:	edd3 7a00 	vldr	s15, [r3]
 8004b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b12:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8004bd4 <StartDefaultTask+0x150>
 8004b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd8 <StartDefaultTask+0x154>)
 8004b1c:	edc3 7a00 	vstr	s15, [r3]
		    FFTCpltFlag = 1;
 8004b20:	4b2e      	ldr	r3, [pc, #184]	@ (8004bdc <StartDefaultTask+0x158>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	801a      	strh	r2, [r3, #0]
		    // 現在 MainFrequency 儲存了主要頻率的值
		    // 你可以在這裡使用它，例如透過 UART 輸出、更新顯示器等
		    // 例如：printf("Main Frequency: %.2f Hz\r\n", MainFrequency);
		    int index = find_note_index_f32(MainFrequency);
 8004b26:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd8 <StartDefaultTask+0x154>)
 8004b28:	edd3 7a00 	vldr	s15, [r3]
 8004b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b30:	f7ff f962 	bl	8003df8 <find_note_index_f32>
 8004b34:	6178      	str	r0, [r7, #20]
		    if (index == -1) {
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b3c:	d107      	bne.n	8004b4e <StartDefaultTask+0xca>
		    	printf("%d,%d\n", -1, -1);
 8004b3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b42:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b46:	4826      	ldr	r0, [pc, #152]	@ (8004be0 <StartDefaultTask+0x15c>)
 8004b48:	f00a f898 	bl	800ec7c <iprintf>
		    	continue;
 8004b4c:	e02a      	b.n	8004ba4 <StartDefaultTask+0x120>
		    }
		    const char* note_name = note_names[index];
 8004b4e:	4a25      	ldr	r2, [pc, #148]	@ (8004be4 <StartDefaultTask+0x160>)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b56:	613b      	str	r3, [r7, #16]
		    float32_t diff = (MainFrequency - note_ideal_frequencies[index]) / (note_upper_bounds[index] - note_lower_bounds[index]);
 8004b58:	4b1f      	ldr	r3, [pc, #124]	@ (8004bd8 <StartDefaultTask+0x154>)
 8004b5a:	ed93 7a00 	vldr	s14, [r3]
 8004b5e:	4a22      	ldr	r2, [pc, #136]	@ (8004be8 <StartDefaultTask+0x164>)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bec <StartDefaultTask+0x168>)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	ed93 7a00 	vldr	s14, [r3]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf0 <StartDefaultTask+0x16c>)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	edd3 7a00 	vldr	s15, [r3]
 8004b86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8e:	edc7 7a03 	vstr	s15, [r7, #12]
		    printf("%s,%.2f\n", note_name, diff);
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7fb fcf0 	bl	8000578 <__aeabi_f2d>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	6939      	ldr	r1, [r7, #16]
 8004b9e:	4815      	ldr	r0, [pc, #84]	@ (8004bf4 <StartDefaultTask+0x170>)
 8004ba0:	f00a f86c 	bl	800ec7c <iprintf>
		  {
 8004ba4:	e781      	b.n	8004aaa <StartDefaultTask+0x26>
 8004ba6:	bf00      	nop
 8004ba8:	20018810 	.word	0x20018810
 8004bac:	20018828 	.word	0x20018828
 8004bb0:	20000800 	.word	0x20000800
 8004bb4:	2001c828 	.word	0x2001c828
 8004bb8:	20008804 	.word	0x20008804
 8004bbc:	2000c804 	.word	0x2000c804
 8004bc0:	20014804 	.word	0x20014804
 8004bc4:	20018804 	.word	0x20018804
 8004bc8:	20018808 	.word	0x20018808
 8004bcc:	20014808 	.word	0x20014808
 8004bd0:	20000090 	.word	0x20000090
 8004bd4:	45800000 	.word	0x45800000
 8004bd8:	2001880c 	.word	0x2001880c
 8004bdc:	2001c832 	.word	0x2001c832
 8004be0:	08010c9c 	.word	0x08010c9c
 8004be4:	20000000 	.word	0x20000000
 8004be8:	080249a4 	.word	0x080249a4
 8004bec:	08024ac4 	.word	0x08024ac4
 8004bf0:	08024a34 	.word	0x08024a34
 8004bf4:	08010ca4 	.word	0x08010ca4

08004bf8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  uint16_t i = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(TransferHalfSemHandle, osWaitForever);
 8004c04:	4b14      	ldr	r3, [pc, #80]	@ (8004c58 <StartTask02+0x60>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f006 fa01 	bl	800b014 <osSemaphoreAcquire>
		TransferHalfFlag = 1;
 8004c12:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <StartTask02+0x64>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < AUDIO_REC / 2; i++) {
 8004c18:	2300      	movs	r3, #0
 8004c1a:	81fb      	strh	r3, [r7, #14]
 8004c1c:	e011      	b.n	8004c42 <StartTask02+0x4a>
	  PlayBuf[i] = (float32_t)(RecBuf[i] >> 8);
 8004c1e:	89fb      	ldrh	r3, [r7, #14]
 8004c20:	4a0f      	ldr	r2, [pc, #60]	@ (8004c60 <StartTask02+0x68>)
 8004c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c26:	121a      	asrs	r2, r3, #8
 8004c28:	89fb      	ldrh	r3, [r7, #14]
 8004c2a:	ee07 2a90 	vmov	s15, r2
 8004c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c32:	4a0c      	ldr	r2, [pc, #48]	@ (8004c64 <StartTask02+0x6c>)
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < AUDIO_REC / 2; i++) {
 8004c3c:	89fb      	ldrh	r3, [r7, #14]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	81fb      	strh	r3, [r7, #14]
 8004c42:	89fb      	ldrh	r3, [r7, #14]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c48:	d3e9      	bcc.n	8004c1e <StartTask02+0x26>
    }
	osSemaphoreRelease(FFTSemHandle);
 8004c4a:	4b07      	ldr	r3, [pc, #28]	@ (8004c68 <StartTask02+0x70>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f006 fa32 	bl	800b0b8 <osSemaphoreRelease>
    osSemaphoreAcquire(TransferHalfSemHandle, osWaitForever);
 8004c54:	e7d6      	b.n	8004c04 <StartTask02+0xc>
 8004c56:	bf00      	nop
 8004c58:	200007f8 	.word	0x200007f8
 8004c5c:	2001c82c 	.word	0x2001c82c
 8004c60:	20000804 	.word	0x20000804
 8004c64:	20008804 	.word	0x20008804
 8004c68:	20000800 	.word	0x20000800

08004c6c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  uint16_t i = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreAcquire(TransferFullSemHandle, osWaitForever);
 8004c78:	4b15      	ldr	r3, [pc, #84]	@ (8004cd0 <StartTask03+0x64>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c80:	4618      	mov	r0, r3
 8004c82:	f006 f9c7 	bl	800b014 <osSemaphoreAcquire>
		TransferFullFlag = 1;
 8004c86:	4b13      	ldr	r3, [pc, #76]	@ (8004cd4 <StartTask03+0x68>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < AUDIO_REC / 2; i++) {
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	81fb      	strh	r3, [r7, #14]
 8004c90:	e013      	b.n	8004cba <StartTask03+0x4e>
	  PlayBuf[i] = (float32_t)(RecBuf[i + AUDIO_REC / 2] >> 8);
 8004c92:	89fb      	ldrh	r3, [r7, #14]
 8004c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c98:	4a0f      	ldr	r2, [pc, #60]	@ (8004cd8 <StartTask03+0x6c>)
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	121a      	asrs	r2, r3, #8
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	ee07 2a90 	vmov	s15, r2
 8004ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004caa:	4a0c      	ldr	r2, [pc, #48]	@ (8004cdc <StartTask03+0x70>)
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < AUDIO_REC / 2; i++) {
 8004cb4:	89fb      	ldrh	r3, [r7, #14]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	81fb      	strh	r3, [r7, #14]
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc0:	d3e7      	bcc.n	8004c92 <StartTask03+0x26>
	}
	osSemaphoreRelease(FFTSemHandle);
 8004cc2:	4b07      	ldr	r3, [pc, #28]	@ (8004ce0 <StartTask03+0x74>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f006 f9f6 	bl	800b0b8 <osSemaphoreRelease>
    osSemaphoreAcquire(TransferFullSemHandle, osWaitForever);
 8004ccc:	e7d4      	b.n	8004c78 <StartTask03+0xc>
 8004cce:	bf00      	nop
 8004cd0:	200007fc 	.word	0x200007fc
 8004cd4:	2001c82a 	.word	0x2001c82a
 8004cd8:	20000804 	.word	0x20000804
 8004cdc:	20008804 	.word	0x20008804
 8004ce0:	20000800 	.word	0x20000800

08004ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ce8:	b672      	cpsid	i
}
 8004cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <Error_Handler+0x8>

08004cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf6:	4b11      	ldr	r3, [pc, #68]	@ (8004d3c <HAL_MspInit+0x4c>)
 8004cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfa:	4a10      	ldr	r2, [pc, #64]	@ (8004d3c <HAL_MspInit+0x4c>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d02:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <HAL_MspInit+0x4c>)
 8004d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_MspInit+0x4c>)
 8004d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d12:	4a0a      	ldr	r2, [pc, #40]	@ (8004d3c <HAL_MspInit+0x4c>)
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d1a:	4b08      	ldr	r3, [pc, #32]	@ (8004d3c <HAL_MspInit+0x4c>)
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	210f      	movs	r1, #15
 8004d2a:	f06f 0001 	mvn.w	r0, #1
 8004d2e:	f001 fda4 	bl	800687a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000

08004d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	@ 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d48:	f107 0314 	add.w	r3, r7, #20
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a15      	ldr	r2, [pc, #84]	@ (8004db4 <HAL_ADC_MspInit+0x74>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d123      	bne.n	8004daa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004d62:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d66:	4a14      	ldr	r2, [pc, #80]	@ (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d6e:	4b12      	ldr	r3, [pc, #72]	@ (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d86:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <HAL_ADC_MspInit+0x78>)
 8004d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8004d92:	233f      	movs	r3, #63	@ 0x3f
 8004d94:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004d96:	230b      	movs	r3, #11
 8004d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d9e:	f107 0314 	add.w	r3, r7, #20
 8004da2:	4619      	mov	r1, r3
 8004da4:	4805      	ldr	r0, [pc, #20]	@ (8004dbc <HAL_ADC_MspInit+0x7c>)
 8004da6:	f002 fb4d 	bl	8007444 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004daa:	bf00      	nop
 8004dac:	3728      	adds	r7, #40	@ 0x28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	50040000 	.word	0x50040000
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	48000800 	.word	0x48000800

08004dc0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b0ae      	sub	sp, #184	@ 0xb8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dd8:	f107 0310 	add.w	r3, r7, #16
 8004ddc:	2294      	movs	r2, #148	@ 0x94
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f009 ff5d 	bl	800eca0 <memset>
  if(DFSDM1_Init == 0)
 8004de6:	4b45      	ldr	r3, [pc, #276]	@ (8004efc <HAL_DFSDM_FilterMspInit+0x13c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d14b      	bne.n	8004e86 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8004dee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004df2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dfa:	f107 0310 	add.w	r3, r7, #16
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f004 faa6 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8004e0a:	f7ff ff6b 	bl	8004ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8004e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f00 <HAL_DFSDM_FilterMspInit+0x140>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3301      	adds	r3, #1
 8004e14:	4a3a      	ldr	r2, [pc, #232]	@ (8004f00 <HAL_DFSDM_FilterMspInit+0x140>)
 8004e16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8004e18:	4b39      	ldr	r3, [pc, #228]	@ (8004f00 <HAL_DFSDM_FilterMspInit+0x140>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10b      	bne.n	8004e38 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004e20:	4b38      	ldr	r3, [pc, #224]	@ (8004f04 <HAL_DFSDM_FilterMspInit+0x144>)
 8004e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e24:	4a37      	ldr	r2, [pc, #220]	@ (8004f04 <HAL_DFSDM_FilterMspInit+0x144>)
 8004e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e2c:	4b35      	ldr	r3, [pc, #212]	@ (8004f04 <HAL_DFSDM_FilterMspInit+0x144>)
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e38:	4b32      	ldr	r3, [pc, #200]	@ (8004f04 <HAL_DFSDM_FilterMspInit+0x144>)
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3c:	4a31      	ldr	r2, [pc, #196]	@ (8004f04 <HAL_DFSDM_FilterMspInit+0x144>)
 8004e3e:	f043 0310 	orr.w	r3, r3, #16
 8004e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e44:	4b2f      	ldr	r3, [pc, #188]	@ (8004f04 <HAL_DFSDM_FilterMspInit+0x144>)
 8004e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004e50:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8004e54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004e6a:	2306      	movs	r3, #6
 8004e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4824      	ldr	r0, [pc, #144]	@ (8004f08 <HAL_DFSDM_FilterMspInit+0x148>)
 8004e78:	f002 fae4 	bl	8007444 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8004e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004efc <HAL_DFSDM_FilterMspInit+0x13c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	4a1e      	ldr	r2, [pc, #120]	@ (8004efc <HAL_DFSDM_FilterMspInit+0x13c>)
 8004e84:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a20      	ldr	r2, [pc, #128]	@ (8004f0c <HAL_DFSDM_FilterMspInit+0x14c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d130      	bne.n	8004ef2 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8004e90:	4b1f      	ldr	r3, [pc, #124]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004e92:	4a20      	ldr	r2, [pc, #128]	@ (8004f14 <HAL_DFSDM_FilterMspInit+0x154>)
 8004e94:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8004e96:	4b1e      	ldr	r3, [pc, #120]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004e98:	2256      	movs	r2, #86	@ 0x56
 8004e9a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8004ea8:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004eaa:	2280      	movs	r2, #128	@ 0x80
 8004eac:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004eae:	4b18      	ldr	r3, [pc, #96]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eb4:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004eb6:	4b16      	ldr	r3, [pc, #88]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004eb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ebc:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8004ebe:	4b14      	ldr	r3, [pc, #80]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8004eca:	4811      	ldr	r0, [pc, #68]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004ecc:	f002 f848 	bl	8006f60 <HAL_DMA_Init>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8004ed6:	f7ff ff05 	bl	8004ce4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a0c      	ldr	r2, [pc, #48]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004ede:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a09      	ldr	r2, [pc, #36]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28
 8004eec:	4a08      	ldr	r2, [pc, #32]	@ (8004f10 <HAL_DFSDM_FilterMspInit+0x150>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8004ef2:	bf00      	nop
 8004ef4:	37b8      	adds	r7, #184	@ 0xb8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	2001c838 	.word	0x2001c838
 8004f00:	2001c834 	.word	0x2001c834
 8004f04:	40021000 	.word	0x40021000
 8004f08:	48001000 	.word	0x48001000
 8004f0c:	40016100 	.word	0x40016100
 8004f10:	2000037c 	.word	0x2000037c
 8004f14:	40020044 	.word	0x40020044

08004f18 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b0ae      	sub	sp, #184	@ 0xb8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	2294      	movs	r2, #148	@ 0x94
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f009 feb1 	bl	800eca0 <memset>
  if(DFSDM1_Init == 0)
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d14b      	bne.n	8004fde <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8004f46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f52:	f107 0310 	add.w	r3, r7, #16
 8004f56:	4618      	mov	r0, r3
 8004f58:	f004 f9fa 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8004f62:	f7ff febf 	bl	8004ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8004f66:	4b21      	ldr	r3, [pc, #132]	@ (8004fec <HAL_DFSDM_ChannelMspInit+0xd4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fec <HAL_DFSDM_ChannelMspInit+0xd4>)
 8004f6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8004f70:	4b1e      	ldr	r3, [pc, #120]	@ (8004fec <HAL_DFSDM_ChannelMspInit+0xd4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d10b      	bne.n	8004f90 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004f78:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f82:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f84:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f90:	4b17      	ldr	r3, [pc, #92]	@ (8004ff0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f94:	4a16      	ldr	r2, [pc, #88]	@ (8004ff0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004f96:	f043 0310 	orr.w	r3, r3, #16
 8004f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ff0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004fa8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8004fac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4809      	ldr	r0, [pc, #36]	@ (8004ff4 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8004fd0:	f002 fa38 	bl	8007444 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8004fd4:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4a03      	ldr	r2, [pc, #12]	@ (8004fe8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8004fdc:	6013      	str	r3, [r2, #0]
  }

}
 8004fde:	bf00      	nop
 8004fe0:	37b8      	adds	r7, #184	@ 0xb8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	2001c838 	.word	0x2001c838
 8004fec:	2001c834 	.word	0x2001c834
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	48001000 	.word	0x48001000

08004ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b0b0      	sub	sp, #192	@ 0xc0
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005000:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005010:	f107 0318 	add.w	r3, r7, #24
 8005014:	2294      	movs	r2, #148	@ 0x94
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f009 fe41 	bl	800eca0 <memset>
  if(hi2c->Instance==I2C1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a42      	ldr	r2, [pc, #264]	@ (800512c <HAL_I2C_MspInit+0x134>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d13c      	bne.n	80050a2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005028:	2340      	movs	r3, #64	@ 0x40
 800502a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800502c:	2300      	movs	r3, #0
 800502e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005030:	f107 0318 	add.w	r3, r7, #24
 8005034:	4618      	mov	r0, r3
 8005036:	f004 f98b 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005040:	f7ff fe50 	bl	8004ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005044:	4b3a      	ldr	r3, [pc, #232]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 8005046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005048:	4a39      	ldr	r2, [pc, #228]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 800504a:	f043 0302 	orr.w	r3, r3, #2
 800504e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005050:	4b37      	ldr	r3, [pc, #220]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 8005052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800505c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005060:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005064:	2312      	movs	r3, #18
 8005066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800506a:	2301      	movs	r3, #1
 800506c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005070:	2303      	movs	r3, #3
 8005072:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005076:	2304      	movs	r3, #4
 8005078:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005080:	4619      	mov	r1, r3
 8005082:	482c      	ldr	r0, [pc, #176]	@ (8005134 <HAL_I2C_MspInit+0x13c>)
 8005084:	f002 f9de 	bl	8007444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005088:	4b29      	ldr	r3, [pc, #164]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508c:	4a28      	ldr	r2, [pc, #160]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 800508e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005092:	6593      	str	r3, [r2, #88]	@ 0x58
 8005094:	4b26      	ldr	r3, [pc, #152]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80050a0:	e040      	b.n	8005124 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a24      	ldr	r2, [pc, #144]	@ (8005138 <HAL_I2C_MspInit+0x140>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d13b      	bne.n	8005124 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80050ac:	2380      	movs	r3, #128	@ 0x80
 80050ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80050b0:	2300      	movs	r3, #0
 80050b2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050b4:	f107 0318 	add.w	r3, r7, #24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f004 f949 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80050c4:	f7ff fe0e 	bl	8004ce4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c8:	4b19      	ldr	r3, [pc, #100]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 80050ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050cc:	4a18      	ldr	r2, [pc, #96]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 80050ce:	f043 0302 	orr.w	r3, r3, #2
 80050d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050d4:	4b16      	ldr	r3, [pc, #88]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 80050d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80050e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80050e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050e8:	2312      	movs	r3, #18
 80050ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f4:	2303      	movs	r3, #3
 80050f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80050fa:	2304      	movs	r3, #4
 80050fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005100:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005104:	4619      	mov	r1, r3
 8005106:	480b      	ldr	r0, [pc, #44]	@ (8005134 <HAL_I2C_MspInit+0x13c>)
 8005108:	f002 f99c 	bl	8007444 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800510c:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005110:	4a07      	ldr	r2, [pc, #28]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 8005112:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005116:	6593      	str	r3, [r2, #88]	@ 0x58
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <HAL_I2C_MspInit+0x138>)
 800511a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
}
 8005124:	bf00      	nop
 8005126:	37c0      	adds	r7, #192	@ 0xc0
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40005400 	.word	0x40005400
 8005130:	40021000 	.word	0x40021000
 8005134:	48000400 	.word	0x48000400
 8005138:	40005800 	.word	0x40005800

0800513c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b0b0      	sub	sp, #192	@ 0xc0
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005144:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	605a      	str	r2, [r3, #4]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005154:	f107 0318 	add.w	r3, r7, #24
 8005158:	2294      	movs	r2, #148	@ 0x94
 800515a:	2100      	movs	r1, #0
 800515c:	4618      	mov	r0, r3
 800515e:	f009 fd9f 	bl	800eca0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a28      	ldr	r2, [pc, #160]	@ (8005208 <HAL_OSPI_MspInit+0xcc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d149      	bne.n	8005200 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800516c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005170:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8005172:	2300      	movs	r3, #0
 8005174:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005178:	f107 0318 	add.w	r3, r7, #24
 800517c:	4618      	mov	r0, r3
 800517e:	f004 f8e7 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8005188:	f7ff fdac 	bl	8004ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800518c:	4b1f      	ldr	r3, [pc, #124]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 800518e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005190:	4a1e      	ldr	r2, [pc, #120]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 8005192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005198:	4b1c      	ldr	r3, [pc, #112]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 800519a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80051a4:	4b19      	ldr	r3, [pc, #100]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 80051a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a8:	4a18      	ldr	r2, [pc, #96]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 80051aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80051b0:	4b16      	ldr	r3, [pc, #88]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 80051b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051bc:	4b13      	ldr	r3, [pc, #76]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 80051be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c0:	4a12      	ldr	r2, [pc, #72]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 80051c2:	f043 0310 	orr.w	r3, r3, #16
 80051c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051c8:	4b10      	ldr	r3, [pc, #64]	@ (800520c <HAL_OSPI_MspInit+0xd0>)
 80051ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80051d4:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80051d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051dc:	2302      	movs	r3, #2
 80051de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e8:	2303      	movs	r3, #3
 80051ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80051ee:	230a      	movs	r3, #10
 80051f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80051f8:	4619      	mov	r1, r3
 80051fa:	4805      	ldr	r0, [pc, #20]	@ (8005210 <HAL_OSPI_MspInit+0xd4>)
 80051fc:	f002 f922 	bl	8007444 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8005200:	bf00      	nop
 8005202:	37c0      	adds	r7, #192	@ 0xc0
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	a0001000 	.word	0xa0001000
 800520c:	40021000 	.word	0x40021000
 8005210:	48001000 	.word	0x48001000

08005214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08c      	sub	sp, #48	@ 0x30
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	f107 031c 	add.w	r3, r7, #28
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2f      	ldr	r2, [pc, #188]	@ (80052f0 <HAL_SPI_MspInit+0xdc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d129      	bne.n	800528a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005236:	4b2f      	ldr	r3, [pc, #188]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 8005238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523a:	4a2e      	ldr	r2, [pc, #184]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 800523c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005240:	6613      	str	r3, [r2, #96]	@ 0x60
 8005242:	4b2c      	ldr	r3, [pc, #176]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 8005244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800524e:	4b29      	ldr	r3, [pc, #164]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 8005250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005252:	4a28      	ldr	r2, [pc, #160]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800525a:	4b26      	ldr	r3, [pc, #152]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 800525c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8005266:	23e0      	movs	r3, #224	@ 0xe0
 8005268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526a:	2302      	movs	r3, #2
 800526c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005272:	2303      	movs	r3, #3
 8005274:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005276:	2305      	movs	r3, #5
 8005278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527a:	f107 031c 	add.w	r3, r7, #28
 800527e:	4619      	mov	r1, r3
 8005280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005284:	f002 f8de 	bl	8007444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005288:	e02d      	b.n	80052e6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1a      	ldr	r2, [pc, #104]	@ (80052f8 <HAL_SPI_MspInit+0xe4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d128      	bne.n	80052e6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005294:	4b17      	ldr	r3, [pc, #92]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 8005296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005298:	4a16      	ldr	r2, [pc, #88]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 800529a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800529e:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a0:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 80052a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052ac:	4b11      	ldr	r3, [pc, #68]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 80052ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b0:	4a10      	ldr	r2, [pc, #64]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052b8:	4b0e      	ldr	r3, [pc, #56]	@ (80052f4 <HAL_SPI_MspInit+0xe0>)
 80052ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80052c4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80052c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ca:	2302      	movs	r3, #2
 80052cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d2:	2303      	movs	r3, #3
 80052d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80052d6:	2306      	movs	r3, #6
 80052d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052da:	f107 031c 	add.w	r3, r7, #28
 80052de:	4619      	mov	r1, r3
 80052e0:	4806      	ldr	r0, [pc, #24]	@ (80052fc <HAL_SPI_MspInit+0xe8>)
 80052e2:	f002 f8af 	bl	8007444 <HAL_GPIO_Init>
}
 80052e6:	bf00      	nop
 80052e8:	3730      	adds	r7, #48	@ 0x30
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40013000 	.word	0x40013000
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40003c00 	.word	0x40003c00
 80052fc:	48000800 	.word	0x48000800

08005300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b0b4      	sub	sp, #208	@ 0xd0
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005308:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005318:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800531c:	2294      	movs	r2, #148	@ 0x94
 800531e:	2100      	movs	r1, #0
 8005320:	4618      	mov	r0, r3
 8005322:	f009 fcbd 	bl	800eca0 <memset>
  if(huart->Instance==UART4)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a83      	ldr	r2, [pc, #524]	@ (8005538 <HAL_UART_MspInit+0x238>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d13c      	bne.n	80053aa <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005330:	2308      	movs	r3, #8
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005334:	2300      	movs	r3, #0
 8005336:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005338:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800533c:	4618      	mov	r0, r3
 800533e:	f004 f807 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005348:	f7ff fccc 	bl	8004ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800534c:	4b7b      	ldr	r3, [pc, #492]	@ (800553c <HAL_UART_MspInit+0x23c>)
 800534e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005350:	4a7a      	ldr	r2, [pc, #488]	@ (800553c <HAL_UART_MspInit+0x23c>)
 8005352:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005356:	6593      	str	r3, [r2, #88]	@ 0x58
 8005358:	4b78      	ldr	r3, [pc, #480]	@ (800553c <HAL_UART_MspInit+0x23c>)
 800535a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005364:	4b75      	ldr	r3, [pc, #468]	@ (800553c <HAL_UART_MspInit+0x23c>)
 8005366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005368:	4a74      	ldr	r2, [pc, #464]	@ (800553c <HAL_UART_MspInit+0x23c>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005370:	4b72      	ldr	r3, [pc, #456]	@ (800553c <HAL_UART_MspInit+0x23c>)
 8005372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800537c:	2303      	movs	r3, #3
 800537e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005382:	2302      	movs	r3, #2
 8005384:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005388:	2300      	movs	r3, #0
 800538a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538e:	2303      	movs	r3, #3
 8005390:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005394:	2308      	movs	r3, #8
 8005396:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800539a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800539e:	4619      	mov	r1, r3
 80053a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053a4:	f002 f84e 	bl	8007444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80053a8:	e0c2      	b.n	8005530 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a64      	ldr	r2, [pc, #400]	@ (8005540 <HAL_UART_MspInit+0x240>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d13b      	bne.n	800542c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80053b4:	2301      	movs	r3, #1
 80053b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80053b8:	2300      	movs	r3, #0
 80053ba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053c0:	4618      	mov	r0, r3
 80053c2:	f003 ffc5 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80053cc:	f7ff fc8a 	bl	8004ce4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80053d0:	4b5a      	ldr	r3, [pc, #360]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80053d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d4:	4a59      	ldr	r2, [pc, #356]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80053d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053da:	6613      	str	r3, [r2, #96]	@ 0x60
 80053dc:	4b57      	ldr	r3, [pc, #348]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80053de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e8:	4b54      	ldr	r3, [pc, #336]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80053ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ec:	4a53      	ldr	r2, [pc, #332]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80053ee:	f043 0302 	orr.w	r3, r3, #2
 80053f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053f4:	4b51      	ldr	r3, [pc, #324]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80053f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8005400:	23c0      	movs	r3, #192	@ 0xc0
 8005402:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005406:	2302      	movs	r3, #2
 8005408:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005412:	2303      	movs	r3, #3
 8005414:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005418:	2307      	movs	r3, #7
 800541a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800541e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8005422:	4619      	mov	r1, r3
 8005424:	4847      	ldr	r0, [pc, #284]	@ (8005544 <HAL_UART_MspInit+0x244>)
 8005426:	f002 f80d 	bl	8007444 <HAL_GPIO_Init>
}
 800542a:	e081      	b.n	8005530 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a45      	ldr	r2, [pc, #276]	@ (8005548 <HAL_UART_MspInit+0x248>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d13b      	bne.n	80054ae <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005436:	2302      	movs	r3, #2
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800543a:	2300      	movs	r3, #0
 800543c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800543e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005442:	4618      	mov	r0, r3
 8005444:	f003 ff84 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_MspInit+0x152>
      Error_Handler();
 800544e:	f7ff fc49 	bl	8004ce4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005452:	4b3a      	ldr	r3, [pc, #232]	@ (800553c <HAL_UART_MspInit+0x23c>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005456:	4a39      	ldr	r2, [pc, #228]	@ (800553c <HAL_UART_MspInit+0x23c>)
 8005458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545c:	6593      	str	r3, [r2, #88]	@ 0x58
 800545e:	4b37      	ldr	r3, [pc, #220]	@ (800553c <HAL_UART_MspInit+0x23c>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800546a:	4b34      	ldr	r3, [pc, #208]	@ (800553c <HAL_UART_MspInit+0x23c>)
 800546c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546e:	4a33      	ldr	r2, [pc, #204]	@ (800553c <HAL_UART_MspInit+0x23c>)
 8005470:	f043 0308 	orr.w	r3, r3, #8
 8005474:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005476:	4b31      	ldr	r3, [pc, #196]	@ (800553c <HAL_UART_MspInit+0x23c>)
 8005478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8005482:	2378      	movs	r3, #120	@ 0x78
 8005484:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005488:	2302      	movs	r3, #2
 800548a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548e:	2300      	movs	r3, #0
 8005490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005494:	2303      	movs	r3, #3
 8005496:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800549a:	2307      	movs	r3, #7
 800549c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054a0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80054a4:	4619      	mov	r1, r3
 80054a6:	4829      	ldr	r0, [pc, #164]	@ (800554c <HAL_UART_MspInit+0x24c>)
 80054a8:	f001 ffcc 	bl	8007444 <HAL_GPIO_Init>
}
 80054ac:	e040      	b.n	8005530 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a27      	ldr	r2, [pc, #156]	@ (8005550 <HAL_UART_MspInit+0x250>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d13b      	bne.n	8005530 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80054b8:	2304      	movs	r3, #4
 80054ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80054bc:	2300      	movs	r3, #0
 80054be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054c4:	4618      	mov	r0, r3
 80054c6:	f003 ff43 	bl	8009350 <HAL_RCCEx_PeriphCLKConfig>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80054d0:	f7ff fc08 	bl	8004ce4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054d4:	4b19      	ldr	r3, [pc, #100]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d8:	4a18      	ldr	r2, [pc, #96]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80054da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054de:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e0:	4b16      	ldr	r3, [pc, #88]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80054e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ec:	4b13      	ldr	r3, [pc, #76]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80054ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054f0:	4a12      	ldr	r2, [pc, #72]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80054f2:	f043 0308 	orr.w	r3, r3, #8
 80054f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054f8:	4b10      	ldr	r3, [pc, #64]	@ (800553c <HAL_UART_MspInit+0x23c>)
 80054fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005504:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005508:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550c:	2302      	movs	r3, #2
 800550e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	2300      	movs	r3, #0
 8005514:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005518:	2303      	movs	r3, #3
 800551a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800551e:	2307      	movs	r3, #7
 8005520:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005524:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8005528:	4619      	mov	r1, r3
 800552a:	4808      	ldr	r0, [pc, #32]	@ (800554c <HAL_UART_MspInit+0x24c>)
 800552c:	f001 ff8a 	bl	8007444 <HAL_GPIO_Init>
}
 8005530:	bf00      	nop
 8005532:	37d0      	adds	r7, #208	@ 0xd0
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40004c00 	.word	0x40004c00
 800553c:	40021000 	.word	0x40021000
 8005540:	40013800 	.word	0x40013800
 8005544:	48000400 	.word	0x48000400
 8005548:	40004400 	.word	0x40004400
 800554c:	48000c00 	.word	0x48000c00
 8005550:	40004800 	.word	0x40004800

08005554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <NMI_Handler+0x4>

0800555c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <HardFault_Handler+0x4>

08005564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <MemManage_Handler+0x4>

0800556c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005570:	bf00      	nop
 8005572:	e7fd      	b.n	8005570 <BusFault_Handler+0x4>

08005574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <UsageFault_Handler+0x4>

0800557c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800558e:	f000 f997 	bl	80058c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005592:	f007 fcdd 	bl	800cf50 <xTaskGetSchedulerState>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d001      	beq.n	80055a0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800559c:	f008 fbd4 	bl	800dd48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055a0:	bf00      	nop
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80055a8:	4802      	ldr	r0, [pc, #8]	@ (80055b4 <DMA1_Channel4_IRQHandler+0x10>)
 80055aa:	f001 fdfc 	bl	80071a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80055ae:	bf00      	nop
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	2000037c 	.word	0x2000037c

080055b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80055bc:	2020      	movs	r0, #32
 80055be:	f002 f8eb 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80055c2:	2040      	movs	r0, #64	@ 0x40
 80055c4:	f002 f8e8 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80055c8:	2080      	movs	r0, #128	@ 0x80
 80055ca:	f002 f8e5 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80055ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80055d2:	f002 f8e1 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80055d6:	bf00      	nop
 80055d8:	bd80      	pop	{r7, pc}

080055da <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80055de:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80055e2:	f002 f8d9 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80055e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80055ea:	f002 f8d5 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80055ee:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80055f2:	f002 f8d1 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80055f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80055fa:	f002 f8cd 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80055fe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005602:	f002 f8c9 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8005606:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800560a:	f002 f8c5 	bl	8007798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800560e:	bf00      	nop
 8005610:	bd80      	pop	{r7, pc}

08005612 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  return 1;
 8005616:	2301      	movs	r3, #1
}
 8005618:	4618      	mov	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <_kill>:

int _kill(int pid, int sig)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800562c:	f009 fb44 	bl	800ecb8 <__errno>
 8005630:	4603      	mov	r3, r0
 8005632:	2216      	movs	r2, #22
 8005634:	601a      	str	r2, [r3, #0]
  return -1;
 8005636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <_exit>:

void _exit (int status)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800564a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ffe7 	bl	8005622 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <_exit+0x12>

08005658 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e00a      	b.n	8005680 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800566a:	f3af 8000 	nop.w
 800566e:	4601      	mov	r1, r0
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	60ba      	str	r2, [r7, #8]
 8005676:	b2ca      	uxtb	r2, r1
 8005678:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	3301      	adds	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	dbf0      	blt.n	800566a <_read+0x12>
  }

  return len;
 8005688:	687b      	ldr	r3, [r7, #4]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b086      	sub	sp, #24
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e009      	b.n	80056b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	60ba      	str	r2, [r7, #8]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fe fbd9 	bl	8003e64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	3301      	adds	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	429a      	cmp	r2, r3
 80056be:	dbf1      	blt.n	80056a4 <_write+0x12>
  }
  return len;
 80056c0:	687b      	ldr	r3, [r7, #4]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_close>:

int _close(int file)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80056d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056f2:	605a      	str	r2, [r3, #4]
  return 0;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <_isatty>:

int _isatty(int file)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800570a:	2301      	movs	r3, #1
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800573c:	4a14      	ldr	r2, [pc, #80]	@ (8005790 <_sbrk+0x5c>)
 800573e:	4b15      	ldr	r3, [pc, #84]	@ (8005794 <_sbrk+0x60>)
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005748:	4b13      	ldr	r3, [pc, #76]	@ (8005798 <_sbrk+0x64>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005750:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <_sbrk+0x64>)
 8005752:	4a12      	ldr	r2, [pc, #72]	@ (800579c <_sbrk+0x68>)
 8005754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005756:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <_sbrk+0x64>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d207      	bcs.n	8005774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005764:	f009 faa8 	bl	800ecb8 <__errno>
 8005768:	4603      	mov	r3, r0
 800576a:	220c      	movs	r2, #12
 800576c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800576e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005772:	e009      	b.n	8005788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005774:	4b08      	ldr	r3, [pc, #32]	@ (8005798 <_sbrk+0x64>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800577a:	4b07      	ldr	r3, [pc, #28]	@ (8005798 <_sbrk+0x64>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	4a05      	ldr	r2, [pc, #20]	@ (8005798 <_sbrk+0x64>)
 8005784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	200a0000 	.word	0x200a0000
 8005794:	00000400 	.word	0x00000400
 8005798:	2001c83c 	.word	0x2001c83c
 800579c:	2001e2c0 	.word	0x2001e2c0

080057a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80057a4:	4b06      	ldr	r3, [pc, #24]	@ (80057c0 <SystemInit+0x20>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057aa:	4a05      	ldr	r2, [pc, #20]	@ (80057c0 <SystemInit+0x20>)
 80057ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	e000ed00 	.word	0xe000ed00

080057c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80057c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80057fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80057c8:	f7ff ffea 	bl	80057a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80057cc:	480c      	ldr	r0, [pc, #48]	@ (8005800 <LoopForever+0x6>)
  ldr r1, =_edata
 80057ce:	490d      	ldr	r1, [pc, #52]	@ (8005804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80057d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005808 <LoopForever+0xe>)
  movs r3, #0
 80057d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057d4:	e002      	b.n	80057dc <LoopCopyDataInit>

080057d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057da:	3304      	adds	r3, #4

080057dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057e0:	d3f9      	bcc.n	80057d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057e2:	4a0a      	ldr	r2, [pc, #40]	@ (800580c <LoopForever+0x12>)
  ldr r4, =_ebss
 80057e4:	4c0a      	ldr	r4, [pc, #40]	@ (8005810 <LoopForever+0x16>)
  movs r3, #0
 80057e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057e8:	e001      	b.n	80057ee <LoopFillZerobss>

080057ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057ec:	3204      	adds	r2, #4

080057ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057f0:	d3fb      	bcc.n	80057ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057f2:	f009 fa67 	bl	800ecc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80057f6:	f7fe fb47 	bl	8003e88 <main>

080057fa <LoopForever>:

LoopForever:
    b LoopForever
 80057fa:	e7fe      	b.n	80057fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80057fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005804:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8005808:	08024fe0 	.word	0x08024fe0
  ldr r2, =_sbss
 800580c:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8005810:	2001e2bc 	.word	0x2001e2bc

08005814 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005814:	e7fe      	b.n	8005814 <ADC1_IRQHandler>

08005816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005820:	2003      	movs	r0, #3
 8005822:	f001 f81f 	bl	8006864 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005826:	200f      	movs	r0, #15
 8005828:	f000 f80e 	bl	8005848 <HAL_InitTick>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	71fb      	strb	r3, [r7, #7]
 8005836:	e001      	b.n	800583c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005838:	f7ff fa5a 	bl	8004cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800583c:	79fb      	ldrb	r3, [r7, #7]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005854:	4b17      	ldr	r3, [pc, #92]	@ (80058b4 <HAL_InitTick+0x6c>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d023      	beq.n	80058a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800585c:	4b16      	ldr	r3, [pc, #88]	@ (80058b8 <HAL_InitTick+0x70>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <HAL_InitTick+0x6c>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800586a:	fbb3 f3f1 	udiv	r3, r3, r1
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	4618      	mov	r0, r3
 8005874:	f001 f82b 	bl	80068ce <HAL_SYSTICK_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b0f      	cmp	r3, #15
 8005882:	d809      	bhi.n	8005898 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005884:	2200      	movs	r2, #0
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800588c:	f000 fff5 	bl	800687a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005890:	4a0a      	ldr	r2, [pc, #40]	@ (80058bc <HAL_InitTick+0x74>)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e007      	b.n	80058a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
 800589c:	e004      	b.n	80058a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	73fb      	strb	r3, [r7, #15]
 80058a2:	e001      	b.n	80058a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	2000009c 	.word	0x2000009c
 80058b8:	20000094 	.word	0x20000094
 80058bc:	20000098 	.word	0x20000098

080058c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80058c4:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <HAL_IncTick+0x20>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <HAL_IncTick+0x24>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4413      	add	r3, r2
 80058d0:	4a04      	ldr	r2, [pc, #16]	@ (80058e4 <HAL_IncTick+0x24>)
 80058d2:	6013      	str	r3, [r2, #0]
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	2000009c 	.word	0x2000009c
 80058e4:	2001c840 	.word	0x2001c840

080058e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  return uwTick;
 80058ec:	4b03      	ldr	r3, [pc, #12]	@ (80058fc <HAL_GetTick+0x14>)
 80058ee:	681b      	ldr	r3, [r3, #0]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	2001c840 	.word	0x2001c840

08005900 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	609a      	str	r2, [r3, #8]
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	609a      	str	r2, [r3, #8]
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3360      	adds	r3, #96	@ 0x60
 800597a:	461a      	mov	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	4b08      	ldr	r3, [pc, #32]	@ (80059ac <LL_ADC_SetOffset+0x44>)
 800598a:	4013      	ands	r3, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	03fff000 	.word	0x03fff000

080059b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3360      	adds	r3, #96	@ 0x60
 80059be:	461a      	mov	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3360      	adds	r3, #96	@ 0x60
 80059ec:	461a      	mov	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	615a      	str	r2, [r3, #20]
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3330      	adds	r3, #48	@ 0x30
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	f003 030c 	and.w	r3, r3, #12
 8005a54:	4413      	add	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	211f      	movs	r1, #31
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	0e9b      	lsrs	r3, r3, #26
 8005a70:	f003 011f 	and.w	r1, r3, #31
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3314      	adds	r3, #20
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	0e5b      	lsrs	r3, r3, #25
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	4413      	add	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	0d1b      	lsrs	r3, r3, #20
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	2107      	movs	r1, #7
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	401a      	ands	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	0d1b      	lsrs	r3, r3, #20
 8005aca:	f003 031f 	and.w	r3, r3, #31
 8005ace:	6879      	ldr	r1, [r7, #4]
 8005ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0318 	and.w	r3, r3, #24
 8005b0a:	4908      	ldr	r1, [pc, #32]	@ (8005b2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005b0c:	40d9      	lsrs	r1, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	400b      	ands	r3, r1
 8005b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b16:	431a      	orrs	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005b1e:	bf00      	nop
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	0007ffff 	.word	0x0007ffff

08005b30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005b40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6093      	str	r3, [r2, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b68:	d101      	bne.n	8005b6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005b8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bb8:	d101      	bne.n	8005bbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <LL_ADC_IsEnabled+0x18>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <LL_ADC_IsEnabled+0x1a>
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d101      	bne.n	8005c0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d101      	bne.n	8005c30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e129      	b.n	8005eae <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff f869 	bl	8004d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff ff67 	bl	8005b54 <LL_ADC_IsDeepPowerDownEnabled>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ff4d 	bl	8005b30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff ff82 	bl	8005ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d115      	bne.n	8005cd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff ff66 	bl	8005b7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cb0:	4b81      	ldr	r3, [pc, #516]	@ (8005eb8 <HAL_ADC_Init+0x278>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	099b      	lsrs	r3, r3, #6
 8005cb6:	4a81      	ldr	r2, [pc, #516]	@ (8005ebc <HAL_ADC_Init+0x27c>)
 8005cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cbc:	099b      	lsrs	r3, r3, #6
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005cc4:	e002      	b.n	8005ccc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f9      	bne.n	8005cc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff ff64 	bl	8005ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10d      	bne.n	8005cfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce6:	f043 0210 	orr.w	r2, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf2:	f043 0201 	orr.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff ff75 	bl	8005bf2 <LL_ADC_REG_IsConversionOngoing>
 8005d08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 80c2 	bne.w	8005e9c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 80be 	bne.w	8005e9c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005d28:	f043 0202 	orr.w	r2, r3, #2
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff ff49 	bl	8005bcc <LL_ADC_IsEnabled>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d40:	485f      	ldr	r0, [pc, #380]	@ (8005ec0 <HAL_ADC_Init+0x280>)
 8005d42:	f7ff ff43 	bl	8005bcc <LL_ADC_IsEnabled>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4619      	mov	r1, r3
 8005d52:	485c      	ldr	r0, [pc, #368]	@ (8005ec4 <HAL_ADC_Init+0x284>)
 8005d54:	f7ff fdd4 	bl	8005900 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	7e5b      	ldrb	r3, [r3, #25]
 8005d5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005d68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005d6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d106      	bne.n	8005d94 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	045b      	lsls	r3, r3, #17
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	4b44      	ldr	r3, [pc, #272]	@ (8005ec8 <HAL_ADC_Init+0x288>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	69b9      	ldr	r1, [r7, #24]
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff ff25 	bl	8005c18 <LL_ADC_INJ_IsConversionOngoing>
 8005dce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d140      	bne.n	8005e58 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d13d      	bne.n	8005e58 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	7e1b      	ldrb	r3, [r3, #24]
 8005de4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005de6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005dee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dfe:	f023 0306 	bic.w	r3, r3, #6
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	69b9      	ldr	r1, [r7, #24]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d118      	bne.n	8005e48 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e20:	f023 0304 	bic.w	r3, r3, #4
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005e2c:	4311      	orrs	r1, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005e32:	4311      	orrs	r1, r2
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	611a      	str	r2, [r3, #16]
 8005e46:	e007      	b.n	8005e58 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0201 	bic.w	r2, r2, #1
 8005e56:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d10c      	bne.n	8005e7a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	f023 010f 	bic.w	r1, r3, #15
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	1e5a      	subs	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e78:	e007      	b.n	8005e8a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 020f 	bic.w	r2, r2, #15
 8005e88:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e9a:	e007      	b.n	8005eac <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea0:	f043 0210 	orr.w	r2, r3, #16
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000094 	.word	0x20000094
 8005ebc:	053e2d63 	.word	0x053e2d63
 8005ec0:	50040000 	.word	0x50040000
 8005ec4:	50040300 	.word	0x50040300
 8005ec8:	fff0c007 	.word	0xfff0c007

08005ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b0b6      	sub	sp, #216	@ 0xd8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_ADC_ConfigChannel+0x22>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e3d5      	b.n	800669a <HAL_ADC_ConfigChannel+0x7ce>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fe79 	bl	8005bf2 <LL_ADC_REG_IsConversionOngoing>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 83ba 	bne.w	800667c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d824      	bhi.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	3b02      	subs	r3, #2
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d81b      	bhi.n	8005f5a <HAL_ADC_ConfigChannel+0x8e>
 8005f22:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <HAL_ADC_ConfigChannel+0x5c>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f39 	.word	0x08005f39
 8005f2c:	08005f41 	.word	0x08005f41
 8005f30:	08005f49 	.word	0x08005f49
 8005f34:	08005f51 	.word	0x08005f51
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005f38:	230c      	movs	r3, #12
 8005f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f3e:	e010      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005f40:	2312      	movs	r3, #18
 8005f42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f46:	e00c      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005f48:	2318      	movs	r3, #24
 8005f4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f4e:	e008      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f58:	e003      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005f5a:	2306      	movs	r3, #6
 8005f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f60:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005f70:	f7ff fd62 	bl	8005a38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fe3a 	bl	8005bf2 <LL_ADC_REG_IsConversionOngoing>
 8005f7e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff fe46 	bl	8005c18 <LL_ADC_INJ_IsConversionOngoing>
 8005f8c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 81bf 	bne.w	8006318 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 81ba 	bne.w	8006318 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fac:	d10f      	bne.n	8005fce <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f7ff fd69 	bl	8005a90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fd23 	bl	8005a12 <LL_ADC_SetSamplingTimeCommonConfig>
 8005fcc:	e00e      	b.n	8005fec <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6819      	ldr	r1, [r3, #0]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7ff fd58 	bl	8005a90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fd13 	bl	8005a12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	08db      	lsrs	r3, r3, #3
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b04      	cmp	r3, #4
 800600c:	d00a      	beq.n	8006024 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6919      	ldr	r1, [r3, #16]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800601e:	f7ff fca3 	bl	8005968 <LL_ADC_SetOffset>
 8006022:	e179      	b.n	8006318 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fcc0 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 8006030:	4603      	mov	r3, r0
 8006032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <HAL_ADC_ConfigChannel+0x184>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2100      	movs	r1, #0
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fcb5 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 8006046:	4603      	mov	r3, r0
 8006048:	0e9b      	lsrs	r3, r3, #26
 800604a:	f003 021f 	and.w	r2, r3, #31
 800604e:	e01e      	b.n	800608e <HAL_ADC_ConfigChannel+0x1c2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fcaa 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 800605c:	4603      	mov	r3, r0
 800605e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006066:	fa93 f3a3 	rbit	r3, r3
 800606a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800606e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006072:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006076:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800607e:	2320      	movs	r3, #32
 8006080:	e004      	b.n	800608c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8006082:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006086:	fab3 f383 	clz	r3, r3
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006096:	2b00      	cmp	r3, #0
 8006098:	d105      	bne.n	80060a6 <HAL_ADC_ConfigChannel+0x1da>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	0e9b      	lsrs	r3, r3, #26
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	e018      	b.n	80060d8 <HAL_ADC_ConfigChannel+0x20c>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060b2:	fa93 f3a3 	rbit	r3, r3
 80060b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80060ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80060c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80060ca:	2320      	movs	r3, #32
 80060cc:	e004      	b.n	80060d8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80060ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060d2:	fab3 f383 	clz	r3, r3
 80060d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80060d8:	429a      	cmp	r2, r3
 80060da:	d106      	bne.n	80060ea <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2200      	movs	r2, #0
 80060e2:	2100      	movs	r1, #0
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fc79 	bl	80059dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2101      	movs	r1, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fc5d 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x24a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2101      	movs	r1, #1
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fc52 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 800610c:	4603      	mov	r3, r0
 800610e:	0e9b      	lsrs	r3, r3, #26
 8006110:	f003 021f 	and.w	r2, r3, #31
 8006114:	e01e      	b.n	8006154 <HAL_ADC_ConfigChannel+0x288>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2101      	movs	r1, #1
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fc47 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 8006122:	4603      	mov	r3, r0
 8006124:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800612c:	fa93 f3a3 	rbit	r3, r3
 8006130:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006138:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800613c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8006144:	2320      	movs	r3, #32
 8006146:	e004      	b.n	8006152 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8006148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800614c:	fab3 f383 	clz	r3, r3
 8006150:	b2db      	uxtb	r3, r3
 8006152:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <HAL_ADC_ConfigChannel+0x2a0>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	0e9b      	lsrs	r3, r3, #26
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	e018      	b.n	800619e <HAL_ADC_ConfigChannel+0x2d2>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006174:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006178:	fa93 f3a3 	rbit	r3, r3
 800617c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006180:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006188:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8006190:	2320      	movs	r3, #32
 8006192:	e004      	b.n	800619e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8006194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006198:	fab3 f383 	clz	r3, r3
 800619c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800619e:	429a      	cmp	r2, r3
 80061a0:	d106      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2200      	movs	r2, #0
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fc16 	bl	80059dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2102      	movs	r1, #2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff fbfa 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 80061bc:	4603      	mov	r3, r0
 80061be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x310>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2102      	movs	r1, #2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fbef 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 80061d2:	4603      	mov	r3, r0
 80061d4:	0e9b      	lsrs	r3, r3, #26
 80061d6:	f003 021f 	and.w	r2, r3, #31
 80061da:	e01e      	b.n	800621a <HAL_ADC_ConfigChannel+0x34e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2102      	movs	r1, #2
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fbe4 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061f2:	fa93 f3a3 	rbit	r3, r3
 80061f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80061fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800620a:	2320      	movs	r3, #32
 800620c:	e004      	b.n	8006218 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800620e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006212:	fab3 f383 	clz	r3, r3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <HAL_ADC_ConfigChannel+0x366>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	0e9b      	lsrs	r3, r3, #26
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	e014      	b.n	800625c <HAL_ADC_ConfigChannel+0x390>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006238:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800623a:	fa93 f3a3 	rbit	r3, r3
 800623e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006246:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800624e:	2320      	movs	r3, #32
 8006250:	e004      	b.n	800625c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8006252:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006256:	fab3 f383 	clz	r3, r3
 800625a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800625c:	429a      	cmp	r2, r3
 800625e:	d106      	bne.n	800626e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2200      	movs	r2, #0
 8006266:	2102      	movs	r1, #2
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fbb7 	bl	80059dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2103      	movs	r1, #3
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fb9b 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 800627a:	4603      	mov	r3, r0
 800627c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <HAL_ADC_ConfigChannel+0x3ce>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2103      	movs	r1, #3
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fb90 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 8006290:	4603      	mov	r3, r0
 8006292:	0e9b      	lsrs	r3, r3, #26
 8006294:	f003 021f 	and.w	r2, r3, #31
 8006298:	e017      	b.n	80062ca <HAL_ADC_ConfigChannel+0x3fe>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2103      	movs	r1, #3
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fb85 	bl	80059b0 <LL_ADC_GetOffsetChannel>
 80062a6:	4603      	mov	r3, r0
 80062a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062ac:	fa93 f3a3 	rbit	r3, r3
 80062b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80062b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062b4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80062b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80062bc:	2320      	movs	r3, #32
 80062be:	e003      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80062c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062c2:	fab3 f383 	clz	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d105      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0x416>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	0e9b      	lsrs	r3, r3, #26
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	e011      	b.n	8006306 <HAL_ADC_ConfigChannel+0x43a>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062ea:	fa93 f3a3 	rbit	r3, r3
 80062ee:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80062f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80062f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80062fa:	2320      	movs	r3, #32
 80062fc:	e003      	b.n	8006306 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80062fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006300:	fab3 f383 	clz	r3, r3
 8006304:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006306:	429a      	cmp	r2, r3
 8006308:	d106      	bne.n	8006318 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2200      	movs	r2, #0
 8006310:	2103      	movs	r1, #3
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fb62 	bl	80059dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fc55 	bl	8005bcc <LL_ADC_IsEnabled>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 813f 	bne.w	80065a8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6819      	ldr	r1, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	461a      	mov	r2, r3
 8006338:	f7ff fbd6 	bl	8005ae8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4a8e      	ldr	r2, [pc, #568]	@ (800657c <HAL_ADC_ConfigChannel+0x6b0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	f040 8130 	bne.w	80065a8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <HAL_ADC_ConfigChannel+0x4a4>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	0e9b      	lsrs	r3, r3, #26
 800635e:	3301      	adds	r3, #1
 8006360:	f003 031f 	and.w	r3, r3, #31
 8006364:	2b09      	cmp	r3, #9
 8006366:	bf94      	ite	ls
 8006368:	2301      	movls	r3, #1
 800636a:	2300      	movhi	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e019      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x4d8>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006378:	fa93 f3a3 	rbit	r3, r3
 800637c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800637e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006380:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8006388:	2320      	movs	r3, #32
 800638a:	e003      	b.n	8006394 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800638c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800638e:	fab3 f383 	clz	r3, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3301      	adds	r3, #1
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2b09      	cmp	r3, #9
 800639c:	bf94      	ite	ls
 800639e:	2301      	movls	r3, #1
 80063a0:	2300      	movhi	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d079      	beq.n	800649c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d107      	bne.n	80063c4 <HAL_ADC_ConfigChannel+0x4f8>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	0e9b      	lsrs	r3, r3, #26
 80063ba:	3301      	adds	r3, #1
 80063bc:	069b      	lsls	r3, r3, #26
 80063be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063c2:	e015      	b.n	80063f0 <HAL_ADC_ConfigChannel+0x524>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063cc:	fa93 f3a3 	rbit	r3, r3
 80063d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80063d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80063d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80063dc:	2320      	movs	r3, #32
 80063de:	e003      	b.n	80063e8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80063e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063e2:	fab3 f383 	clz	r3, r3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	3301      	adds	r3, #1
 80063ea:	069b      	lsls	r3, r3, #26
 80063ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <HAL_ADC_ConfigChannel+0x544>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	0e9b      	lsrs	r3, r3, #26
 8006402:	3301      	adds	r3, #1
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	2101      	movs	r1, #1
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	e017      	b.n	8006440 <HAL_ADC_ConfigChannel+0x574>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006418:	fa93 f3a3 	rbit	r3, r3
 800641c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800641e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006420:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8006428:	2320      	movs	r3, #32
 800642a:	e003      	b.n	8006434 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800642c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800642e:	fab3 f383 	clz	r3, r3
 8006432:	b2db      	uxtb	r3, r3
 8006434:	3301      	adds	r3, #1
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	2101      	movs	r1, #1
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	ea42 0103 	orr.w	r1, r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <HAL_ADC_ConfigChannel+0x59a>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	0e9b      	lsrs	r3, r3, #26
 8006456:	3301      	adds	r3, #1
 8006458:	f003 021f 	and.w	r2, r3, #31
 800645c:	4613      	mov	r3, r2
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	4413      	add	r3, r2
 8006462:	051b      	lsls	r3, r3, #20
 8006464:	e018      	b.n	8006498 <HAL_ADC_ConfigChannel+0x5cc>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800647e:	2320      	movs	r3, #32
 8006480:	e003      	b.n	800648a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8006482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006484:	fab3 f383 	clz	r3, r3
 8006488:	b2db      	uxtb	r3, r3
 800648a:	3301      	adds	r3, #1
 800648c:	f003 021f 	and.w	r2, r3, #31
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006498:	430b      	orrs	r3, r1
 800649a:	e080      	b.n	800659e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d107      	bne.n	80064b8 <HAL_ADC_ConfigChannel+0x5ec>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	0e9b      	lsrs	r3, r3, #26
 80064ae:	3301      	adds	r3, #1
 80064b0:	069b      	lsls	r3, r3, #26
 80064b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064b6:	e015      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x618>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c0:	fa93 f3a3 	rbit	r3, r3
 80064c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80064ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80064d0:	2320      	movs	r3, #32
 80064d2:	e003      	b.n	80064dc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	fab3 f383 	clz	r3, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	3301      	adds	r3, #1
 80064de:	069b      	lsls	r3, r3, #26
 80064e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <HAL_ADC_ConfigChannel+0x638>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	0e9b      	lsrs	r3, r3, #26
 80064f6:	3301      	adds	r3, #1
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2101      	movs	r1, #1
 80064fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006502:	e017      	b.n	8006534 <HAL_ADC_ConfigChannel+0x668>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	fa93 f3a3 	rbit	r3, r3
 8006510:	61bb      	str	r3, [r7, #24]
  return result;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800651c:	2320      	movs	r3, #32
 800651e:	e003      	b.n	8006528 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	fab3 f383 	clz	r3, r3
 8006526:	b2db      	uxtb	r3, r3
 8006528:	3301      	adds	r3, #1
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	2101      	movs	r1, #1
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	ea42 0103 	orr.w	r1, r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10d      	bne.n	8006560 <HAL_ADC_ConfigChannel+0x694>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	0e9b      	lsrs	r3, r3, #26
 800654a:	3301      	adds	r3, #1
 800654c:	f003 021f 	and.w	r2, r3, #31
 8006550:	4613      	mov	r3, r2
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	4413      	add	r3, r2
 8006556:	3b1e      	subs	r3, #30
 8006558:	051b      	lsls	r3, r3, #20
 800655a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800655e:	e01d      	b.n	800659c <HAL_ADC_ConfigChannel+0x6d0>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	fa93 f3a3 	rbit	r3, r3
 800656c:	60fb      	str	r3, [r7, #12]
  return result;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d103      	bne.n	8006580 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006578:	2320      	movs	r3, #32
 800657a:	e005      	b.n	8006588 <HAL_ADC_ConfigChannel+0x6bc>
 800657c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	fab3 f383 	clz	r3, r3
 8006586:	b2db      	uxtb	r3, r3
 8006588:	3301      	adds	r3, #1
 800658a:	f003 021f 	and.w	r2, r3, #31
 800658e:	4613      	mov	r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	4413      	add	r3, r2
 8006594:	3b1e      	subs	r3, #30
 8006596:	051b      	lsls	r3, r3, #20
 8006598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800659c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065a2:	4619      	mov	r1, r3
 80065a4:	f7ff fa74 	bl	8005a90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	4b3d      	ldr	r3, [pc, #244]	@ (80066a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d06c      	beq.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065b4:	483c      	ldr	r0, [pc, #240]	@ (80066a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80065b6:	f7ff f9c9 	bl	800594c <LL_ADC_GetCommonPathInternalCh>
 80065ba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3a      	ldr	r2, [pc, #232]	@ (80066ac <HAL_ADC_ConfigChannel+0x7e0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d127      	bne.n	8006618 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d121      	bne.n	8006618 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a35      	ldr	r2, [pc, #212]	@ (80066b0 <HAL_ADC_ConfigChannel+0x7e4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d157      	bne.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065e6:	4619      	mov	r1, r3
 80065e8:	482f      	ldr	r0, [pc, #188]	@ (80066a8 <HAL_ADC_ConfigChannel+0x7dc>)
 80065ea:	f7ff f99c 	bl	8005926 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065ee:	4b31      	ldr	r3, [pc, #196]	@ (80066b4 <HAL_ADC_ConfigChannel+0x7e8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	099b      	lsrs	r3, r3, #6
 80065f4:	4a30      	ldr	r2, [pc, #192]	@ (80066b8 <HAL_ADC_ConfigChannel+0x7ec>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	099b      	lsrs	r3, r3, #6
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	4613      	mov	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006608:	e002      	b.n	8006610 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	3b01      	subs	r3, #1
 800660e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f9      	bne.n	800660a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006616:	e03a      	b.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a27      	ldr	r2, [pc, #156]	@ (80066bc <HAL_ADC_ConfigChannel+0x7f0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d113      	bne.n	800664a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006626:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10d      	bne.n	800664a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1f      	ldr	r2, [pc, #124]	@ (80066b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d12a      	bne.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006638:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800663c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006640:	4619      	mov	r1, r3
 8006642:	4819      	ldr	r0, [pc, #100]	@ (80066a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8006644:	f7ff f96f 	bl	8005926 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006648:	e021      	b.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	@ (80066c0 <HAL_ADC_ConfigChannel+0x7f4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d11c      	bne.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d116      	bne.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a12      	ldr	r2, [pc, #72]	@ (80066b0 <HAL_ADC_ConfigChannel+0x7e4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d111      	bne.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800666a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800666e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006672:	4619      	mov	r1, r3
 8006674:	480c      	ldr	r0, [pc, #48]	@ (80066a8 <HAL_ADC_ConfigChannel+0x7dc>)
 8006676:	f7ff f956 	bl	8005926 <LL_ADC_SetCommonPathInternalCh>
 800667a:	e008      	b.n	800668e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006680:	f043 0220 	orr.w	r2, r3, #32
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006696:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800669a:	4618      	mov	r0, r3
 800669c:	37d8      	adds	r7, #216	@ 0xd8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	80080000 	.word	0x80080000
 80066a8:	50040300 	.word	0x50040300
 80066ac:	c7520000 	.word	0xc7520000
 80066b0:	50040000 	.word	0x50040000
 80066b4:	20000094 	.word	0x20000094
 80066b8:	053e2d63 	.word	0x053e2d63
 80066bc:	cb840000 	.word	0xcb840000
 80066c0:	80000001 	.word	0x80000001

080066c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006708 <__NVIC_SetPriorityGrouping+0x44>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066e0:	4013      	ands	r3, r2
 80066e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066f6:	4a04      	ldr	r2, [pc, #16]	@ (8006708 <__NVIC_SetPriorityGrouping+0x44>)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	60d3      	str	r3, [r2, #12]
}
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	e000ed00 	.word	0xe000ed00

0800670c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006710:	4b04      	ldr	r3, [pc, #16]	@ (8006724 <__NVIC_GetPriorityGrouping+0x18>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	f003 0307 	and.w	r3, r3, #7
}
 800671a:	4618      	mov	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006736:	2b00      	cmp	r3, #0
 8006738:	db0b      	blt.n	8006752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	f003 021f 	and.w	r2, r3, #31
 8006740:	4907      	ldr	r1, [pc, #28]	@ (8006760 <__NVIC_EnableIRQ+0x38>)
 8006742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	2001      	movs	r0, #1
 800674a:	fa00 f202 	lsl.w	r2, r0, r2
 800674e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	e000e100 	.word	0xe000e100

08006764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	6039      	str	r1, [r7, #0]
 800676e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006774:	2b00      	cmp	r3, #0
 8006776:	db0a      	blt.n	800678e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	b2da      	uxtb	r2, r3
 800677c:	490c      	ldr	r1, [pc, #48]	@ (80067b0 <__NVIC_SetPriority+0x4c>)
 800677e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006782:	0112      	lsls	r2, r2, #4
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	440b      	add	r3, r1
 8006788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800678c:	e00a      	b.n	80067a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	4908      	ldr	r1, [pc, #32]	@ (80067b4 <__NVIC_SetPriority+0x50>)
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	3b04      	subs	r3, #4
 800679c:	0112      	lsls	r2, r2, #4
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	440b      	add	r3, r1
 80067a2:	761a      	strb	r2, [r3, #24]
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	e000e100 	.word	0xe000e100
 80067b4:	e000ed00 	.word	0xe000ed00

080067b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b089      	sub	sp, #36	@ 0x24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f1c3 0307 	rsb	r3, r3, #7
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	bf28      	it	cs
 80067d6:	2304      	movcs	r3, #4
 80067d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3304      	adds	r3, #4
 80067de:	2b06      	cmp	r3, #6
 80067e0:	d902      	bls.n	80067e8 <NVIC_EncodePriority+0x30>
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	3b03      	subs	r3, #3
 80067e6:	e000      	b.n	80067ea <NVIC_EncodePriority+0x32>
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	43da      	mvns	r2, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	401a      	ands	r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006800:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	fa01 f303 	lsl.w	r3, r1, r3
 800680a:	43d9      	mvns	r1, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006810:	4313      	orrs	r3, r2
         );
}
 8006812:	4618      	mov	r0, r3
 8006814:	3724      	adds	r7, #36	@ 0x24
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3b01      	subs	r3, #1
 800682c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006830:	d301      	bcc.n	8006836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006832:	2301      	movs	r3, #1
 8006834:	e00f      	b.n	8006856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006836:	4a0a      	ldr	r2, [pc, #40]	@ (8006860 <SysTick_Config+0x40>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3b01      	subs	r3, #1
 800683c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800683e:	210f      	movs	r1, #15
 8006840:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006844:	f7ff ff8e 	bl	8006764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <SysTick_Config+0x40>)
 800684a:	2200      	movs	r2, #0
 800684c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800684e:	4b04      	ldr	r3, [pc, #16]	@ (8006860 <SysTick_Config+0x40>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	e000e010 	.word	0xe000e010

08006864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ff29 	bl	80066c4 <__NVIC_SetPriorityGrouping>
}
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	4603      	mov	r3, r0
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006888:	2300      	movs	r3, #0
 800688a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800688c:	f7ff ff3e 	bl	800670c <__NVIC_GetPriorityGrouping>
 8006890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	6978      	ldr	r0, [r7, #20]
 8006898:	f7ff ff8e 	bl	80067b8 <NVIC_EncodePriority>
 800689c:	4602      	mov	r2, r0
 800689e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff ff5d 	bl	8006764 <__NVIC_SetPriority>
}
 80068aa:	bf00      	nop
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	4603      	mov	r3, r0
 80068ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff ff31 	bl	8006728 <__NVIC_EnableIRQ>
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff ffa2 	bl	8006820 <SysTick_Config>
 80068dc:	4603      	mov	r3, r0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e0ac      	b.n	8006a54 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fa8c 	bl	8006e1c <DFSDM_GetChannelFromInstance>
 8006904:	4603      	mov	r3, r0
 8006906:	4a55      	ldr	r2, [pc, #340]	@ (8006a5c <HAL_DFSDM_ChannelInit+0x174>)
 8006908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e09f      	b.n	8006a54 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7fe faff 	bl	8004f18 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800691a:	4b51      	ldr	r3, [pc, #324]	@ (8006a60 <HAL_DFSDM_ChannelInit+0x178>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3301      	adds	r3, #1
 8006920:	4a4f      	ldr	r2, [pc, #316]	@ (8006a60 <HAL_DFSDM_ChannelInit+0x178>)
 8006922:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8006924:	4b4e      	ldr	r3, [pc, #312]	@ (8006a60 <HAL_DFSDM_ChannelInit+0x178>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d125      	bne.n	8006978 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800692c:	4b4d      	ldr	r3, [pc, #308]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a4c      	ldr	r2, [pc, #304]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 8006932:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006936:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8006938:	4b4a      	ldr	r3, [pc, #296]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	4948      	ldr	r1, [pc, #288]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8006946:	4b47      	ldr	r3, [pc, #284]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a46      	ldr	r2, [pc, #280]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 800694c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8006950:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	791b      	ldrb	r3, [r3, #4]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d108      	bne.n	800696c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800695a:	4b42      	ldr	r3, [pc, #264]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	3b01      	subs	r3, #1
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	493f      	ldr	r1, [pc, #252]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800696c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a3c      	ldr	r2, [pc, #240]	@ (8006a64 <HAL_DFSDM_ChannelInit+0x17c>)
 8006972:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006976:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8006986:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6819      	ldr	r1, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006996:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800699c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 020f 	bic.w	r2, r2, #15
 80069b4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6819      	ldr	r1, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80069dc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6899      	ldr	r1, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	3b01      	subs	r3, #1
 80069ee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f002 0207 	and.w	r2, r2, #7
 8006a08:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6859      	ldr	r1, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006a34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f9ea 	bl	8006e1c <DFSDM_GetChannelFromInstance>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	4904      	ldr	r1, [pc, #16]	@ (8006a5c <HAL_DFSDM_ChannelInit+0x174>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	2001c848 	.word	0x2001c848
 8006a60:	2001c844 	.word	0x2001c844
 8006a64:	40016000 	.word	0x40016000

08006a68 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e0ca      	b.n	8006c10 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a66      	ldr	r2, [pc, #408]	@ (8006c18 <HAL_DFSDM_FilterInit+0x1b0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d109      	bne.n	8006a98 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d003      	beq.n	8006a94 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0bb      	b.n	8006c10 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7fe f985 	bl	8004dc0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8006ac4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7a1b      	ldrb	r3, [r3, #8]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d108      	bne.n	8006ae0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e007      	b.n	8006af0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8006aee:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7a5b      	ldrb	r3, [r3, #9]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d108      	bne.n	8006b0a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	e007      	b.n	8006b1a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8006b18:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b28:	f023 0308 	bic.w	r3, r3, #8
 8006b2c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d108      	bne.n	8006b48 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6819      	ldr	r1, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695a      	ldr	r2, [r3, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	7c1b      	ldrb	r3, [r3, #16]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d108      	bne.n	8006b62 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0210 	orr.w	r2, r2, #16
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	e007      	b.n	8006b72 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0210 	bic.w	r2, r2, #16
 8006b70:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7c5b      	ldrb	r3, [r3, #17]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d108      	bne.n	8006b8c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0220 	orr.w	r2, r2, #32
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e007      	b.n	8006b9c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0220 	bic.w	r2, r2, #32
 8006b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8006baa:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8006bae:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6959      	ldr	r1, [r3, #20]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006bc2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8006bca:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7c1a      	ldrb	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40016100 	.word	0x40016100

08006c1c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d02e      	beq.n	8006c94 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8006c3c:	2bff      	cmp	r3, #255	@ 0xff
 8006c3e:	d029      	beq.n	8006c94 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c52:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d10d      	bne.n	8006c76 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e00a      	b.n	8006c8c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6819      	ldr	r1, [r3, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c92:	e001      	b.n	8006c98 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
 8006cc8:	e064      	b.n	8006d94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006cd8:	d002      	beq.n	8006ce0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	75fb      	strb	r3, [r7, #23]
 8006cde:	e059      	b.n	8006d94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10e      	bne.n	8006d06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d105      	bne.n	8006d06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d002      	beq.n	8006d06 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	75fb      	strb	r3, [r7, #23]
 8006d04:	e046      	b.n	8006d94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10b      	bne.n	8006d26 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d107      	bne.n	8006d26 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d102      	bne.n	8006d26 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
 8006d24:	e036      	b.n	8006d94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d004      	beq.n	8006d3a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d12a      	bne.n	8006d90 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3e:	4a18      	ldr	r2, [pc, #96]	@ (8006da0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8006d40:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d46:	4a17      	ldr	r2, [pc, #92]	@ (8006da4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8006d48:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	d101      	bne.n	8006d58 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8006d54:	4a14      	ldr	r2, [pc, #80]	@ (8006da8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8006d56:	e000      	b.n	8006d5a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8006d58:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	331c      	adds	r3, #28
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f000 f99e 	bl	80070b0 <HAL_DMA_Start_IT>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d006      	beq.n	8006d88 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	22ff      	movs	r2, #255	@ 0xff
 8006d7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006d86:	e005      	b.n	8006d94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f893 	bl	8006eb4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8006d8e:	e001      	b.n	8006d94 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	08006ddd 	.word	0x08006ddd
 8006da4:	08006df9 	.word	0x08006df9
 8006da8:	08006dc1 	.word	0x08006dc1

08006dac <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7fd fe30 	bl	8004a34 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7fd fe36 	bl	8004a5c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2203      	movs	r2, #3
 8006e0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff ffcd 	bl	8006dac <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a1c      	ldr	r2, [pc, #112]	@ (8006e98 <DFSDM_GetChannelFromInstance+0x7c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d102      	bne.n	8006e32 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e02b      	b.n	8006e8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a19      	ldr	r2, [pc, #100]	@ (8006e9c <DFSDM_GetChannelFromInstance+0x80>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d102      	bne.n	8006e40 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e024      	b.n	8006e8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a17      	ldr	r2, [pc, #92]	@ (8006ea0 <DFSDM_GetChannelFromInstance+0x84>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d102      	bne.n	8006e4e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e01d      	b.n	8006e8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a14      	ldr	r2, [pc, #80]	@ (8006ea4 <DFSDM_GetChannelFromInstance+0x88>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d102      	bne.n	8006e5c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8006e56:	2304      	movs	r3, #4
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e016      	b.n	8006e8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a12      	ldr	r2, [pc, #72]	@ (8006ea8 <DFSDM_GetChannelFromInstance+0x8c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d102      	bne.n	8006e6a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8006e64:	2305      	movs	r3, #5
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e00f      	b.n	8006e8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8006eac <DFSDM_GetChannelFromInstance+0x90>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d102      	bne.n	8006e78 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8006e72:	2306      	movs	r3, #6
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	e008      	b.n	8006e8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb0 <DFSDM_GetChannelFromInstance+0x94>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d102      	bne.n	8006e86 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8006e80:	2307      	movs	r3, #7
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	e001      	b.n	8006e8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8006e86:	2303      	movs	r3, #3
 8006e88:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40016000 	.word	0x40016000
 8006e9c:	40016020 	.word	0x40016020
 8006ea0:	40016040 	.word	0x40016040
 8006ea4:	40016080 	.word	0x40016080
 8006ea8:	400160a0 	.word	0x400160a0
 8006eac:	400160c0 	.word	0x400160c0
 8006eb0:	400160e0 	.word	0x400160e0

08006eb4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e033      	b.n	8006f3e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8006ef4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0201 	orr.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d116      	bne.n	8006f3e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d107      	bne.n	8006f28 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0202 	orr.w	r2, r2, #2
 8006f26:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d102      	bne.n	8006f38 <DFSDM_RegConvStart+0x84>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f36:	e000      	b.n	8006f3a <DFSDM_RegConvStart+0x86>
 8006f38:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <DFSDM_RegConvStart+0x98>
 8006f48:	2202      	movs	r2, #2
 8006f4a:	e000      	b.n	8006f4e <DFSDM_RegConvStart+0x9a>
 8006f4c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e08d      	b.n	800708e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	4b47      	ldr	r3, [pc, #284]	@ (8007098 <HAL_DMA_Init+0x138>)
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d80f      	bhi.n	8006f9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	4b45      	ldr	r3, [pc, #276]	@ (800709c <HAL_DMA_Init+0x13c>)
 8006f86:	4413      	add	r3, r2
 8006f88:	4a45      	ldr	r2, [pc, #276]	@ (80070a0 <HAL_DMA_Init+0x140>)
 8006f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8e:	091b      	lsrs	r3, r3, #4
 8006f90:	009a      	lsls	r2, r3, #2
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a42      	ldr	r2, [pc, #264]	@ (80070a4 <HAL_DMA_Init+0x144>)
 8006f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f9c:	e00e      	b.n	8006fbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4b40      	ldr	r3, [pc, #256]	@ (80070a8 <HAL_DMA_Init+0x148>)
 8006fa6:	4413      	add	r3, r2
 8006fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80070a0 <HAL_DMA_Init+0x140>)
 8006faa:	fba2 2303 	umull	r2, r3, r2, r3
 8006fae:	091b      	lsrs	r3, r3, #4
 8006fb0:	009a      	lsls	r2, r3, #2
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80070ac <HAL_DMA_Init+0x14c>)
 8006fba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f9b6 	bl	8007380 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800701c:	d102      	bne.n	8007024 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007038:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d010      	beq.n	8007064 <HAL_DMA_Init+0x104>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b04      	cmp	r3, #4
 8007048:	d80c      	bhi.n	8007064 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f9d6 	bl	80073fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007060:	605a      	str	r2, [r3, #4]
 8007062:	e008      	b.n	8007076 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40020407 	.word	0x40020407
 800709c:	bffdfff8 	.word	0xbffdfff8
 80070a0:	cccccccd 	.word	0xcccccccd
 80070a4:	40020000 	.word	0x40020000
 80070a8:	bffdfbf8 	.word	0xbffdfbf8
 80070ac:	40020400 	.word	0x40020400

080070b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_DMA_Start_IT+0x20>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e066      	b.n	800719e <HAL_DMA_Start_IT+0xee>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d155      	bne.n	8007190 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f8fb 	bl	8007304 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f042 020e 	orr.w	r2, r2, #14
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e00f      	b.n	8007148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0204 	bic.w	r2, r2, #4
 8007136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 020a 	orr.w	r2, r2, #10
 8007146:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d007      	beq.n	8007166 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007164:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800717c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0201 	orr.w	r2, r2, #1
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	e005      	b.n	800719c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007198:	2302      	movs	r3, #2
 800719a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c2:	f003 031c 	and.w	r3, r3, #28
 80071c6:	2204      	movs	r2, #4
 80071c8:	409a      	lsls	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d026      	beq.n	8007220 <HAL_DMA_IRQHandler+0x7a>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d021      	beq.n	8007220 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d107      	bne.n	80071fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0204 	bic.w	r2, r2, #4
 80071f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	f003 021c 	and.w	r2, r3, #28
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007206:	2104      	movs	r1, #4
 8007208:	fa01 f202 	lsl.w	r2, r1, r2
 800720c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007212:	2b00      	cmp	r3, #0
 8007214:	d071      	beq.n	80072fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800721e:	e06c      	b.n	80072fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007224:	f003 031c 	and.w	r3, r3, #28
 8007228:	2202      	movs	r2, #2
 800722a:	409a      	lsls	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d02e      	beq.n	8007292 <HAL_DMA_IRQHandler+0xec>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d029      	beq.n	8007292 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 020a 	bic.w	r2, r2, #10
 800725a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007268:	f003 021c 	and.w	r2, r3, #28
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007270:	2102      	movs	r1, #2
 8007272:	fa01 f202 	lsl.w	r2, r1, r2
 8007276:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d038      	beq.n	80072fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007290:	e033      	b.n	80072fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007296:	f003 031c 	and.w	r3, r3, #28
 800729a:	2208      	movs	r2, #8
 800729c:	409a      	lsls	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4013      	ands	r3, r2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d02a      	beq.n	80072fc <HAL_DMA_IRQHandler+0x156>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d025      	beq.n	80072fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 020e 	bic.w	r2, r2, #14
 80072be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c4:	f003 021c 	and.w	r2, r3, #28
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072cc:	2101      	movs	r1, #1
 80072ce:	fa01 f202 	lsl.w	r2, r1, r2
 80072d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
}
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800731a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007320:	2b00      	cmp	r3, #0
 8007322:	d004      	beq.n	800732e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800732c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007332:	f003 021c 	and.w	r2, r3, #28
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	2101      	movs	r1, #1
 800733c:	fa01 f202 	lsl.w	r2, r1, r2
 8007340:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b10      	cmp	r3, #16
 8007350:	d108      	bne.n	8007364 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007362:	e007      	b.n	8007374 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	60da      	str	r2, [r3, #12]
}
 8007374:	bf00      	nop
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	4b17      	ldr	r3, [pc, #92]	@ (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007390:	429a      	cmp	r2, r3
 8007392:	d80a      	bhi.n	80073aa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007398:	089b      	lsrs	r3, r3, #2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073a0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6493      	str	r3, [r2, #72]	@ 0x48
 80073a8:	e007      	b.n	80073ba <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ae:	089b      	lsrs	r3, r3, #2
 80073b0:	009a      	lsls	r2, r3, #2
 80073b2:	4b0f      	ldr	r3, [pc, #60]	@ (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80073b4:	4413      	add	r3, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	3b08      	subs	r3, #8
 80073c2:	4a0c      	ldr	r2, [pc, #48]	@ (80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	091b      	lsrs	r3, r3, #4
 80073ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a0a      	ldr	r2, [pc, #40]	@ (80073f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80073d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2201      	movs	r2, #1
 80073da:	409a      	lsls	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	40020407 	.word	0x40020407
 80073f0:	4002081c 	.word	0x4002081c
 80073f4:	cccccccd 	.word	0xcccccccd
 80073f8:	40020880 	.word	0x40020880

080073fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4b0b      	ldr	r3, [pc, #44]	@ (800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	461a      	mov	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a08      	ldr	r2, [pc, #32]	@ (8007440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800741e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3b01      	subs	r3, #1
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	2201      	movs	r2, #1
 800742a:	409a      	lsls	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	1000823f 	.word	0x1000823f
 8007440:	40020940 	.word	0x40020940

08007444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007452:	e166      	b.n	8007722 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	2101      	movs	r1, #1
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	fa01 f303 	lsl.w	r3, r1, r3
 8007460:	4013      	ands	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 8158 	beq.w	800771c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f003 0303 	and.w	r3, r3, #3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d005      	beq.n	8007484 <HAL_GPIO_Init+0x40>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d130      	bne.n	80074e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	2203      	movs	r2, #3
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	43db      	mvns	r3, r3
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4013      	ands	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074ba:	2201      	movs	r2, #1
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	43db      	mvns	r3, r3
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4013      	ands	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	091b      	lsrs	r3, r3, #4
 80074d0:	f003 0201 	and.w	r2, r3, #1
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d017      	beq.n	8007522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	2203      	movs	r2, #3
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43db      	mvns	r3, r3
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4013      	ands	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d123      	bne.n	8007576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	08da      	lsrs	r2, r3, #3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3208      	adds	r2, #8
 8007536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	220f      	movs	r2, #15
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	43db      	mvns	r3, r3
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4013      	ands	r3, r2
 8007550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	08da      	lsrs	r2, r3, #3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3208      	adds	r2, #8
 8007570:	6939      	ldr	r1, [r7, #16]
 8007572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	2203      	movs	r2, #3
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4013      	ands	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f003 0203 	and.w	r2, r3, #3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80b2 	beq.w	800771c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075b8:	4b61      	ldr	r3, [pc, #388]	@ (8007740 <HAL_GPIO_Init+0x2fc>)
 80075ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075bc:	4a60      	ldr	r2, [pc, #384]	@ (8007740 <HAL_GPIO_Init+0x2fc>)
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80075c4:	4b5e      	ldr	r3, [pc, #376]	@ (8007740 <HAL_GPIO_Init+0x2fc>)
 80075c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80075d0:	4a5c      	ldr	r2, [pc, #368]	@ (8007744 <HAL_GPIO_Init+0x300>)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	089b      	lsrs	r3, r3, #2
 80075d6:	3302      	adds	r3, #2
 80075d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f003 0303 	and.w	r3, r3, #3
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	220f      	movs	r2, #15
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	43db      	mvns	r3, r3
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	4013      	ands	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80075fa:	d02b      	beq.n	8007654 <HAL_GPIO_Init+0x210>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a52      	ldr	r2, [pc, #328]	@ (8007748 <HAL_GPIO_Init+0x304>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d025      	beq.n	8007650 <HAL_GPIO_Init+0x20c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a51      	ldr	r2, [pc, #324]	@ (800774c <HAL_GPIO_Init+0x308>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d01f      	beq.n	800764c <HAL_GPIO_Init+0x208>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a50      	ldr	r2, [pc, #320]	@ (8007750 <HAL_GPIO_Init+0x30c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d019      	beq.n	8007648 <HAL_GPIO_Init+0x204>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a4f      	ldr	r2, [pc, #316]	@ (8007754 <HAL_GPIO_Init+0x310>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d013      	beq.n	8007644 <HAL_GPIO_Init+0x200>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a4e      	ldr	r2, [pc, #312]	@ (8007758 <HAL_GPIO_Init+0x314>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00d      	beq.n	8007640 <HAL_GPIO_Init+0x1fc>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a4d      	ldr	r2, [pc, #308]	@ (800775c <HAL_GPIO_Init+0x318>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d007      	beq.n	800763c <HAL_GPIO_Init+0x1f8>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a4c      	ldr	r2, [pc, #304]	@ (8007760 <HAL_GPIO_Init+0x31c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d101      	bne.n	8007638 <HAL_GPIO_Init+0x1f4>
 8007634:	2307      	movs	r3, #7
 8007636:	e00e      	b.n	8007656 <HAL_GPIO_Init+0x212>
 8007638:	2308      	movs	r3, #8
 800763a:	e00c      	b.n	8007656 <HAL_GPIO_Init+0x212>
 800763c:	2306      	movs	r3, #6
 800763e:	e00a      	b.n	8007656 <HAL_GPIO_Init+0x212>
 8007640:	2305      	movs	r3, #5
 8007642:	e008      	b.n	8007656 <HAL_GPIO_Init+0x212>
 8007644:	2304      	movs	r3, #4
 8007646:	e006      	b.n	8007656 <HAL_GPIO_Init+0x212>
 8007648:	2303      	movs	r3, #3
 800764a:	e004      	b.n	8007656 <HAL_GPIO_Init+0x212>
 800764c:	2302      	movs	r3, #2
 800764e:	e002      	b.n	8007656 <HAL_GPIO_Init+0x212>
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <HAL_GPIO_Init+0x212>
 8007654:	2300      	movs	r3, #0
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	f002 0203 	and.w	r2, r2, #3
 800765c:	0092      	lsls	r2, r2, #2
 800765e:	4093      	lsls	r3, r2
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007666:	4937      	ldr	r1, [pc, #220]	@ (8007744 <HAL_GPIO_Init+0x300>)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	089b      	lsrs	r3, r3, #2
 800766c:	3302      	adds	r3, #2
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007674:	4b3b      	ldr	r3, [pc, #236]	@ (8007764 <HAL_GPIO_Init+0x320>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	43db      	mvns	r3, r3
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4013      	ands	r3, r2
 8007682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007698:	4a32      	ldr	r2, [pc, #200]	@ (8007764 <HAL_GPIO_Init+0x320>)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800769e:	4b31      	ldr	r3, [pc, #196]	@ (8007764 <HAL_GPIO_Init+0x320>)
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	43db      	mvns	r3, r3
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4013      	ands	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80076c2:	4a28      	ldr	r2, [pc, #160]	@ (8007764 <HAL_GPIO_Init+0x320>)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80076c8:	4b26      	ldr	r3, [pc, #152]	@ (8007764 <HAL_GPIO_Init+0x320>)
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	43db      	mvns	r3, r3
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4013      	ands	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80076ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007764 <HAL_GPIO_Init+0x320>)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80076f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007764 <HAL_GPIO_Init+0x320>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	43db      	mvns	r3, r3
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4013      	ands	r3, r2
 8007700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007716:	4a13      	ldr	r2, [pc, #76]	@ (8007764 <HAL_GPIO_Init+0x320>)
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3301      	adds	r3, #1
 8007720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	f47f ae91 	bne.w	8007454 <HAL_GPIO_Init+0x10>
  }
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	40021000 	.word	0x40021000
 8007744:	40010000 	.word	0x40010000
 8007748:	48000400 	.word	0x48000400
 800774c:	48000800 	.word	0x48000800
 8007750:	48000c00 	.word	0x48000c00
 8007754:	48001000 	.word	0x48001000
 8007758:	48001400 	.word	0x48001400
 800775c:	48001800 	.word	0x48001800
 8007760:	48001c00 	.word	0x48001c00
 8007764:	40010400 	.word	0x40010400

08007768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	807b      	strh	r3, [r7, #2]
 8007774:	4613      	mov	r3, r2
 8007776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007778:	787b      	ldrb	r3, [r7, #1]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800777e:	887a      	ldrh	r2, [r7, #2]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007784:	e002      	b.n	800778c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007786:	887a      	ldrh	r2, [r7, #2]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80077a2:	4b08      	ldr	r3, [pc, #32]	@ (80077c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077a4:	695a      	ldr	r2, [r3, #20]
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	4013      	ands	r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d006      	beq.n	80077bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80077ae:	4a05      	ldr	r2, [pc, #20]	@ (80077c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077b0:	88fb      	ldrh	r3, [r7, #6]
 80077b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f806 	bl	80077c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40010400 	.word	0x40010400

080077c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e08d      	b.n	800790c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d106      	bne.n	800780a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fd fbf7 	bl	8004ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2224      	movs	r2, #36	@ 0x24
 800780e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800782e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800783e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d107      	bne.n	8007858 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007854:	609a      	str	r2, [r3, #8]
 8007856:	e006      	b.n	8007866 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007864:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d108      	bne.n	8007880 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	e007      	b.n	8007890 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800788e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800789e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69d9      	ldr	r1, [r3, #28]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1a      	ldr	r2, [r3, #32]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b20      	cmp	r3, #32
 8007928:	d138      	bne.n	800799c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007934:	2302      	movs	r3, #2
 8007936:	e032      	b.n	800799e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2224      	movs	r2, #36	@ 0x24
 8007944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6819      	ldr	r1, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	e000      	b.n	800799e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800799c:	2302      	movs	r3, #2
  }
}
 800799e:	4618      	mov	r0, r3
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b20      	cmp	r3, #32
 80079be:	d139      	bne.n	8007a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e033      	b.n	8007a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2224      	movs	r2, #36	@ 0x24
 80079da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	021b      	lsls	r3, r3, #8
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0201 	orr.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e000      	b.n	8007a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a34:	2302      	movs	r3, #2
  }
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007a50:	f7fd ff4a 	bl	80058e8 <HAL_GetTick>
 8007a54:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73fb      	strb	r3, [r7, #15]
 8007a60:	e092      	b.n	8007b88 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 808b 	bne.w	8007b88 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fd fb62 	bl	800513c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8007a78:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f88b 	bl	8007b98 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	4b42      	ldr	r3, [pc, #264]	@ (8007b94 <HAL_OSPI_Init+0x150>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	68d1      	ldr	r1, [r2, #12]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6912      	ldr	r2, [r2, #16]
 8007a94:	3a01      	subs	r2, #1
 8007a96:	0412      	lsls	r2, r2, #16
 8007a98:	4311      	orrs	r1, r2
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6952      	ldr	r2, [r2, #20]
 8007a9e:	3a01      	subs	r2, #1
 8007aa0:	0212      	lsls	r2, r2, #8
 8007aa2:	4311      	orrs	r1, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007aa8:	4311      	orrs	r1, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	69d2      	ldr	r2, [r2, #28]
 8007aae:	4311      	orrs	r1, r2
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	430b      	orrs	r3, r1
 8007ab6:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	0412      	lsls	r2, r2, #16
 8007ac2:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	021a      	lsls	r2, r3, #8
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2120      	movs	r1, #32
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fb9c 	bl	8008228 <OSPI_WaitFlagStateUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d146      	bne.n	8007b88 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	1e5a      	subs	r2, r3, #1
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007b30:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0201 	orr.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d107      	bne.n	8007b70 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0202 	orr.w	r2, r2, #2
 8007b6e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b78:	d103      	bne.n	8007b82 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007b80:	e002      	b.n	8007b88 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2202      	movs	r2, #2
 8007b86:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	f8e0f8f4 	.word	0xf8e0f8f4

08007b98 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b092      	sub	sp, #72	@ 0x48
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a08      	ldr	r2, [pc, #32]	@ (8007bf8 <HAL_OSPIM_Config+0x40>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d105      	bne.n	8007be6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8007bde:	2301      	movs	r3, #1
 8007be0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8007be4:	e004      	b.n	8007bf0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8007be6:	2301      	movs	r3, #1
 8007be8:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007bf6:	e01f      	b.n	8007c38 <HAL_OSPIM_Config+0x80>
 8007bf8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8007bfc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c00:	3301      	adds	r3, #1
 8007c02:	b2d8      	uxtb	r0, r3
 8007c04:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007c08:	f107 0114 	add.w	r1, r7, #20
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	440b      	add	r3, r1
 8007c16:	4619      	mov	r1, r3
 8007c18:	f000 fb3e 	bl	8008298 <OSPIM_GetConfig>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007c2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c32:	3301      	adds	r3, #1
 8007c34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007c38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d9dd      	bls.n	8007bfc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8007c40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f040 82e3 	bne.w	8008210 <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007c4a:	4bc5      	ldr	r3, [pc, #788]	@ (8007f60 <HAL_OSPIM_Config+0x3a8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00b      	beq.n	8007c6e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007c56:	4bc2      	ldr	r3, [pc, #776]	@ (8007f60 <HAL_OSPIM_Config+0x3a8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4ac1      	ldr	r2, [pc, #772]	@ (8007f60 <HAL_OSPIM_Config+0x3a8>)
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007c62:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007c6e:	4bbd      	ldr	r3, [pc, #756]	@ (8007f64 <HAL_OSPIM_Config+0x3ac>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007c7a:	4bba      	ldr	r3, [pc, #744]	@ (8007f64 <HAL_OSPIM_Config+0x3ac>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4ab9      	ldr	r2, [pc, #740]	@ (8007f64 <HAL_OSPIM_Config+0x3ac>)
 8007c80:	f023 0301 	bic.w	r3, r3, #1
 8007c84:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8007c86:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007c8a:	f043 0302 	orr.w	r3, r3, #2
 8007c8e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007c92:	49b5      	ldr	r1, [pc, #724]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007c94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	3348      	adds	r3, #72	@ 0x48
 8007ca0:	443b      	add	r3, r7
 8007ca2:	3b2c      	subs	r3, #44	@ 0x2c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	6859      	ldr	r1, [r3, #4]
 8007cae:	48ae      	ldr	r0, [pc, #696]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	3348      	adds	r3, #72	@ 0x48
 8007cbc:	443b      	add	r3, r7
 8007cbe:	3b2c      	subs	r3, #44	@ 0x2c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4403      	add	r3, r0
 8007ccc:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8007cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	3348      	adds	r3, #72	@ 0x48
 8007cda:	443b      	add	r3, r7
 8007cdc:	3b34      	subs	r3, #52	@ 0x34
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80a1 	beq.w	8007e28 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007ce6:	49a0      	ldr	r1, [pc, #640]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	3348      	adds	r3, #72	@ 0x48
 8007cf4:	443b      	add	r3, r7
 8007cf6:	3b34      	subs	r3, #52	@ 0x34
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	6859      	ldr	r1, [r3, #4]
 8007d02:	4899      	ldr	r0, [pc, #612]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007d04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	3348      	adds	r3, #72	@ 0x48
 8007d10:	443b      	add	r3, r7
 8007d12:	3b34      	subs	r3, #52	@ 0x34
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	f021 0201 	bic.w	r2, r1, #1
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4403      	add	r3, r0
 8007d20:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007d22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	3348      	adds	r3, #72	@ 0x48
 8007d2e:	443b      	add	r3, r7
 8007d30:	3b30      	subs	r3, #48	@ 0x30
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01d      	beq.n	8007d74 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007d38:	498b      	ldr	r1, [pc, #556]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007d3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	3348      	adds	r3, #72	@ 0x48
 8007d46:	443b      	add	r3, r7
 8007d48:	3b30      	subs	r3, #48	@ 0x30
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	6859      	ldr	r1, [r3, #4]
 8007d54:	4884      	ldr	r0, [pc, #528]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	3348      	adds	r3, #72	@ 0x48
 8007d62:	443b      	add	r3, r7
 8007d64:	3b30      	subs	r3, #48	@ 0x30
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	f021 0210 	bic.w	r2, r1, #16
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4403      	add	r3, r0
 8007d72:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007d74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	3348      	adds	r3, #72	@ 0x48
 8007d80:	443b      	add	r3, r7
 8007d82:	3b28      	subs	r3, #40	@ 0x28
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d021      	beq.n	8007dce <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007d8a:	4977      	ldr	r1, [pc, #476]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007d8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	3348      	adds	r3, #72	@ 0x48
 8007d98:	443b      	add	r3, r7
 8007d9a:	3b28      	subs	r3, #40	@ 0x28
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	6859      	ldr	r1, [r3, #4]
 8007daa:	486f      	ldr	r0, [pc, #444]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007dac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	3348      	adds	r3, #72	@ 0x48
 8007db8:	443b      	add	r3, r7
 8007dba:	3b28      	subs	r3, #40	@ 0x28
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4403      	add	r3, r0
 8007dcc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	3348      	adds	r3, #72	@ 0x48
 8007dda:	443b      	add	r3, r7
 8007ddc:	3b24      	subs	r3, #36	@ 0x24
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d021      	beq.n	8007e28 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007de4:	4960      	ldr	r1, [pc, #384]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007de6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007de8:	4613      	mov	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	3348      	adds	r3, #72	@ 0x48
 8007df2:	443b      	add	r3, r7
 8007df4:	3b24      	subs	r3, #36	@ 0x24
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	6859      	ldr	r1, [r3, #4]
 8007e04:	4858      	ldr	r0, [pc, #352]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	3348      	adds	r3, #72	@ 0x48
 8007e12:	443b      	add	r3, r7
 8007e14:	3b24      	subs	r3, #36	@ 0x24
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4403      	add	r3, r0
 8007e26:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6819      	ldr	r1, [r3, #0]
 8007e2c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007e30:	4613      	mov	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	3348      	adds	r3, #72	@ 0x48
 8007e3a:	443b      	add	r3, r7
 8007e3c:	3b34      	subs	r3, #52	@ 0x34
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4299      	cmp	r1, r3
 8007e42:	d03c      	beq.n	8007ebe <HAL_OSPIM_Config+0x306>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6899      	ldr	r1, [r3, #8]
 8007e48:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	3348      	adds	r3, #72	@ 0x48
 8007e56:	443b      	add	r3, r7
 8007e58:	3b2c      	subs	r3, #44	@ 0x2c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4299      	cmp	r1, r3
 8007e5e:	d02e      	beq.n	8007ebe <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	6859      	ldr	r1, [r3, #4]
 8007e64:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	3348      	adds	r3, #72	@ 0x48
 8007e72:	443b      	add	r3, r7
 8007e74:	3b30      	subs	r3, #48	@ 0x30
 8007e76:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8007e78:	4299      	cmp	r1, r3
 8007e7a:	d103      	bne.n	8007e84 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11c      	bne.n	8007ebe <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	68d9      	ldr	r1, [r3, #12]
 8007e88:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	3348      	adds	r3, #72	@ 0x48
 8007e96:	443b      	add	r3, r7
 8007e98:	3b28      	subs	r3, #40	@ 0x28
 8007e9a:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8007e9c:	4299      	cmp	r1, r3
 8007e9e:	d00e      	beq.n	8007ebe <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6919      	ldr	r1, [r3, #16]
 8007ea4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	3348      	adds	r3, #72	@ 0x48
 8007eb2:	443b      	add	r3, r7
 8007eb4:	3b24      	subs	r3, #36	@ 0x24
 8007eb6:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	f040 80d4 	bne.w	8008066 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007ebe:	492a      	ldr	r1, [pc, #168]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007ec0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	3348      	adds	r3, #72	@ 0x48
 8007ece:	443b      	add	r3, r7
 8007ed0:	3b34      	subs	r3, #52	@ 0x34
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	6859      	ldr	r1, [r3, #4]
 8007edc:	4822      	ldr	r0, [pc, #136]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007ede:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	3348      	adds	r3, #72	@ 0x48
 8007eec:	443b      	add	r3, r7
 8007eee:	3b34      	subs	r3, #52	@ 0x34
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	f021 0201 	bic.w	r2, r1, #1
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4403      	add	r3, r0
 8007efc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007efe:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007f02:	4613      	mov	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	3348      	adds	r3, #72	@ 0x48
 8007f0c:	443b      	add	r3, r7
 8007f0e:	3b30      	subs	r3, #48	@ 0x30
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01f      	beq.n	8007f56 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007f16:	4914      	ldr	r1, [pc, #80]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007f18:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	3348      	adds	r3, #72	@ 0x48
 8007f26:	443b      	add	r3, r7
 8007f28:	3b30      	subs	r3, #48	@ 0x30
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	6859      	ldr	r1, [r3, #4]
 8007f34:	480c      	ldr	r0, [pc, #48]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007f36:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	3348      	adds	r3, #72	@ 0x48
 8007f44:	443b      	add	r3, r7
 8007f46:	3b30      	subs	r3, #48	@ 0x30
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	f021 0210 	bic.w	r2, r1, #16
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4403      	add	r3, r0
 8007f54:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007f56:	4904      	ldr	r1, [pc, #16]	@ (8007f68 <HAL_OSPIM_Config+0x3b0>)
 8007f58:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007f5c:	e006      	b.n	8007f6c <HAL_OSPIM_Config+0x3b4>
 8007f5e:	bf00      	nop
 8007f60:	a0001000 	.word	0xa0001000
 8007f64:	a0001400 	.word	0xa0001400
 8007f68:	50061c00 	.word	0x50061c00
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	3348      	adds	r3, #72	@ 0x48
 8007f76:	443b      	add	r3, r7
 8007f78:	3b2c      	subs	r3, #44	@ 0x2c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	440b      	add	r3, r1
 8007f82:	6859      	ldr	r1, [r3, #4]
 8007f84:	48a5      	ldr	r0, [pc, #660]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8007f86:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	3348      	adds	r3, #72	@ 0x48
 8007f94:	443b      	add	r3, r7
 8007f96:	3b2c      	subs	r3, #44	@ 0x2c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4403      	add	r3, r0
 8007fa4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007fa6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	3348      	adds	r3, #72	@ 0x48
 8007fb4:	443b      	add	r3, r7
 8007fb6:	3b28      	subs	r3, #40	@ 0x28
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d023      	beq.n	8008006 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007fbe:	4997      	ldr	r1, [pc, #604]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8007fc0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	3348      	adds	r3, #72	@ 0x48
 8007fce:	443b      	add	r3, r7
 8007fd0:	3b28      	subs	r3, #40	@ 0x28
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	6859      	ldr	r1, [r3, #4]
 8007fe0:	488e      	ldr	r0, [pc, #568]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8007fe2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	3348      	adds	r3, #72	@ 0x48
 8007ff0:	443b      	add	r3, r7
 8007ff2:	3b28      	subs	r3, #40	@ 0x28
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4403      	add	r3, r0
 8008004:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8008006:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	3348      	adds	r3, #72	@ 0x48
 8008014:	443b      	add	r3, r7
 8008016:	3b24      	subs	r3, #36	@ 0x24
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d023      	beq.n	8008066 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800801e:	497f      	ldr	r1, [pc, #508]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008020:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	3348      	adds	r3, #72	@ 0x48
 800802e:	443b      	add	r3, r7
 8008030:	3b24      	subs	r3, #36	@ 0x24
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3b01      	subs	r3, #1
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	6859      	ldr	r1, [r3, #4]
 8008040:	4876      	ldr	r0, [pc, #472]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008042:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	3348      	adds	r3, #72	@ 0x48
 8008050:	443b      	add	r3, r7
 8008052:	3b24      	subs	r3, #36	@ 0x24
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3b01      	subs	r3, #1
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4403      	add	r3, r0
 8008064:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8008066:	4a6d      	ldr	r2, [pc, #436]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	3b01      	subs	r3, #1
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800807a:	025b      	lsls	r3, r3, #9
 800807c:	431a      	orrs	r2, r3
 800807e:	4967      	ldr	r1, [pc, #412]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	3b01      	subs	r3, #1
 8008086:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8008090:	4a62      	ldr	r2, [pc, #392]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3b01      	subs	r3, #1
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f023 0203 	bic.w	r2, r3, #3
 80080a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	431a      	orrs	r2, r3
 80080a8:	495c      	ldr	r1, [pc, #368]	@ (800821c <HAL_OSPIM_Config+0x664>)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	f042 0201 	orr.w	r2, r2, #1
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d014      	beq.n	80080ec <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80080c2:	4a56      	ldr	r2, [pc, #344]	@ (800821c <HAL_OSPIM_Config+0x664>)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80080d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d6:	015b      	lsls	r3, r3, #5
 80080d8:	431a      	orrs	r2, r3
 80080da:	4950      	ldr	r1, [pc, #320]	@ (800821c <HAL_OSPIM_Config+0x664>)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	f042 0210 	orr.w	r2, r2, #16
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d019      	beq.n	800812c <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80080f8:	4a48      	ldr	r2, [pc, #288]	@ (800821c <HAL_OSPIM_Config+0x664>)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	3b01      	subs	r3, #1
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800810e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008110:	049b      	lsls	r3, r3, #18
 8008112:	431a      	orrs	r2, r3
 8008114:	4941      	ldr	r1, [pc, #260]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	3b01      	subs	r3, #1
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	605a      	str	r2, [r3, #4]
 800812a:	e01c      	b.n	8008166 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d018      	beq.n	8008166 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008134:	4a39      	ldr	r2, [pc, #228]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	3b01      	subs	r3, #1
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800814a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800814c:	069b      	lsls	r3, r3, #26
 800814e:	431a      	orrs	r2, r3
 8008150:	4932      	ldr	r1, [pc, #200]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	3b01      	subs	r3, #1
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d019      	beq.n	80081a6 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008172:	4a2a      	ldr	r2, [pc, #168]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	3b01      	subs	r3, #1
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8008188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800818a:	049b      	lsls	r3, r3, #18
 800818c:	431a      	orrs	r2, r3
 800818e:	4923      	ldr	r1, [pc, #140]	@ (800821c <HAL_OSPIM_Config+0x664>)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	3b01      	subs	r3, #1
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	605a      	str	r2, [r3, #4]
 80081a4:	e01c      	b.n	80081e0 <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d018      	beq.n	80081e0 <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80081ae:	4a1b      	ldr	r2, [pc, #108]	@ (800821c <HAL_OSPIM_Config+0x664>)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80081c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081c6:	069b      	lsls	r3, r3, #26
 80081c8:	431a      	orrs	r2, r3
 80081ca:	4914      	ldr	r1, [pc, #80]	@ (800821c <HAL_OSPIM_Config+0x664>)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	440b      	add	r3, r1
 80081de:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80081e0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80081ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <HAL_OSPIM_Config+0x668>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008220 <HAL_OSPIM_Config+0x668>)
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80081f8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8008204:	4b07      	ldr	r3, [pc, #28]	@ (8008224 <HAL_OSPIM_Config+0x66c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a06      	ldr	r2, [pc, #24]	@ (8008224 <HAL_OSPIM_Config+0x66c>)
 800820a:	f043 0301 	orr.w	r3, r3, #1
 800820e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8008210:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008214:	4618      	mov	r0, r3
 8008216:	3748      	adds	r7, #72	@ 0x48
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	50061c00 	.word	0x50061c00
 8008220:	a0001000 	.word	0xa0001000
 8008224:	a0001400 	.word	0xa0001400

08008228 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008238:	e01a      	b.n	8008270 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008240:	d016      	beq.n	8008270 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008242:	f7fd fb51 	bl	80058e8 <HAL_GetTick>
 8008246:	4602      	mov	r2, r0
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	429a      	cmp	r2, r3
 8008250:	d302      	bcc.n	8008258 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10b      	bne.n	8008270 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800825e:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008264:	f043 0201 	orr.w	r2, r3, #1
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e00e      	b.n	800828e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6a1a      	ldr	r2, [r3, #32]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4013      	ands	r3, r2
 800827a:	2b00      	cmp	r3, #0
 800827c:	bf14      	ite	ne
 800827e:	2301      	movne	r3, #1
 8008280:	2300      	moveq	r3, #0
 8008282:	b2db      	uxtb	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	429a      	cmp	r2, r3
 800828a:	d1d6      	bne.n	800823a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80082a8:	2300      	movs	r3, #0
 80082aa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <OSPIM_GetConfig+0x26>
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d802      	bhi.n	80082be <OSPIM_GetConfig+0x26>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d102      	bne.n	80082c4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]
 80082c2:	e08e      	b.n	80083e2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2200      	movs	r2, #0
 80082ce:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2200      	movs	r2, #0
 80082d4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2200      	movs	r2, #0
 80082da:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2200      	movs	r2, #0
 80082e0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d101      	bne.n	80082ec <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80082e8:	4b41      	ldr	r3, [pc, #260]	@ (80083f0 <OSPIM_GetConfig+0x158>)
 80082ea:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e074      	b.n	80083dc <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80082f2:	4a40      	ldr	r2, [pc, #256]	@ (80083f4 <OSPIM_GetConfig+0x15c>)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	4053      	eors	r3, r2
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f003 0310 	and.w	r3, r3, #16
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	4053      	eors	r3, r2
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d103      	bne.n	800833e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00a      	beq.n	800835e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	4053      	eors	r3, r2
 800834e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d018      	beq.n	800839a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	4053      	eors	r3, r2
 800836e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d111      	bne.n	800839a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d106      	bne.n	800838e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	60da      	str	r2, [r3, #12]
 800838c:	e005      	b.n	800839a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3301      	adds	r3, #1
 8008392:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d018      	beq.n	80083d6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	4053      	eors	r3, r2
 80083aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d111      	bne.n	80083d6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	611a      	str	r2, [r3, #16]
 80083c8:	e005      	b.n	80083d6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d987      	bls.n	80082f2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	371c      	adds	r7, #28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	04040222 	.word	0x04040222
 80083f4:	50061c00 	.word	0x50061c00

080083f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083fc:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a04      	ldr	r2, [pc, #16]	@ (8008414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008406:	6013      	str	r3, [r2, #0]
}
 8008408:	bf00      	nop
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40007000 	.word	0x40007000

08008418 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800841c:	4b0d      	ldr	r3, [pc, #52]	@ (8008454 <HAL_PWREx_GetVoltageRange+0x3c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008428:	d102      	bne.n	8008430 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800842a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800842e:	e00b      	b.n	8008448 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008430:	4b08      	ldr	r3, [pc, #32]	@ (8008454 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800843a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843e:	d102      	bne.n	8008446 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008444:	e000      	b.n	8008448 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8008446:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008448:	4618      	mov	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40007000 	.word	0x40007000

08008458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d141      	bne.n	80084ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008466:	4b4b      	ldr	r3, [pc, #300]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800846e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008472:	d131      	bne.n	80084d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008474:	4b47      	ldr	r3, [pc, #284]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800847a:	4a46      	ldr	r2, [pc, #280]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800847c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008484:	4b43      	ldr	r3, [pc, #268]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800848c:	4a41      	ldr	r2, [pc, #260]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800848e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008494:	4b40      	ldr	r3, [pc, #256]	@ (8008598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2232      	movs	r2, #50	@ 0x32
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	4a3f      	ldr	r2, [pc, #252]	@ (800859c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80084a0:	fba2 2303 	umull	r2, r3, r2, r3
 80084a4:	0c9b      	lsrs	r3, r3, #18
 80084a6:	3301      	adds	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084aa:	e002      	b.n	80084b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084b2:	4b38      	ldr	r3, [pc, #224]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084be:	d102      	bne.n	80084c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f2      	bne.n	80084ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084c6:	4b33      	ldr	r3, [pc, #204]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d2:	d158      	bne.n	8008586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e057      	b.n	8008588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084de:	4a2d      	ldr	r2, [pc, #180]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80084e8:	e04d      	b.n	8008586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084f0:	d141      	bne.n	8008576 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80084f2:	4b28      	ldr	r3, [pc, #160]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084fe:	d131      	bne.n	8008564 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008500:	4b24      	ldr	r3, [pc, #144]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008506:	4a23      	ldr	r2, [pc, #140]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800850c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008510:	4b20      	ldr	r3, [pc, #128]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008518:	4a1e      	ldr	r2, [pc, #120]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800851a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800851e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008520:	4b1d      	ldr	r3, [pc, #116]	@ (8008598 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2232      	movs	r2, #50	@ 0x32
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	4a1c      	ldr	r2, [pc, #112]	@ (800859c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800852c:	fba2 2303 	umull	r2, r3, r2, r3
 8008530:	0c9b      	lsrs	r3, r3, #18
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008536:	e002      	b.n	800853e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3b01      	subs	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800853e:	4b15      	ldr	r3, [pc, #84]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800854a:	d102      	bne.n	8008552 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f2      	bne.n	8008538 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008552:	4b10      	ldr	r3, [pc, #64]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800855a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800855e:	d112      	bne.n	8008586 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e011      	b.n	8008588 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008564:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856a:	4a0a      	ldr	r2, [pc, #40]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800856c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008574:	e007      	b.n	8008586 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008576:	4b07      	ldr	r3, [pc, #28]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800857e:	4a05      	ldr	r2, [pc, #20]	@ (8008594 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008580:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008584:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	40007000 	.word	0x40007000
 8008598:	20000094 	.word	0x20000094
 800859c:	431bde83 	.word	0x431bde83

080085a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f000 bc08 	b.w	8008dc4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085b4:	4b96      	ldr	r3, [pc, #600]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f003 030c 	and.w	r3, r3, #12
 80085bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085be:	4b94      	ldr	r3, [pc, #592]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 80e4 	beq.w	800879e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <HAL_RCC_OscConfig+0x4c>
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	2b0c      	cmp	r3, #12
 80085e0:	f040 808b 	bne.w	80086fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	f040 8087 	bne.w	80086fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085ec:	4b88      	ldr	r3, [pc, #544]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_RCC_OscConfig+0x64>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e3df      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1a      	ldr	r2, [r3, #32]
 8008608:	4b81      	ldr	r3, [pc, #516]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0308 	and.w	r3, r3, #8
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <HAL_RCC_OscConfig+0x7e>
 8008614:	4b7e      	ldr	r3, [pc, #504]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800861c:	e005      	b.n	800862a <HAL_RCC_OscConfig+0x8a>
 800861e:	4b7c      	ldr	r3, [pc, #496]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008624:	091b      	lsrs	r3, r3, #4
 8008626:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800862a:	4293      	cmp	r3, r2
 800862c:	d223      	bcs.n	8008676 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fdcc 	bl	80091d0 <RCC_SetFlashLatencyFromMSIRange>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e3c0      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008642:	4b73      	ldr	r3, [pc, #460]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a72      	ldr	r2, [pc, #456]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008648:	f043 0308 	orr.w	r3, r3, #8
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	4b70      	ldr	r3, [pc, #448]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	496d      	ldr	r1, [pc, #436]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 800865c:	4313      	orrs	r3, r2
 800865e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008660:	4b6b      	ldr	r3, [pc, #428]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	4968      	ldr	r1, [pc, #416]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008670:	4313      	orrs	r3, r2
 8008672:	604b      	str	r3, [r1, #4]
 8008674:	e025      	b.n	80086c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008676:	4b66      	ldr	r3, [pc, #408]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a65      	ldr	r2, [pc, #404]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 800867c:	f043 0308 	orr.w	r3, r3, #8
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	4b63      	ldr	r3, [pc, #396]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	4960      	ldr	r1, [pc, #384]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008690:	4313      	orrs	r3, r2
 8008692:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008694:	4b5e      	ldr	r3, [pc, #376]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	021b      	lsls	r3, r3, #8
 80086a2:	495b      	ldr	r1, [pc, #364]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fd8c 	bl	80091d0 <RCC_SetFlashLatencyFromMSIRange>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e380      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086c2:	f000 fcc1 	bl	8009048 <HAL_RCC_GetSysClockFreq>
 80086c6:	4602      	mov	r2, r0
 80086c8:	4b51      	ldr	r3, [pc, #324]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	091b      	lsrs	r3, r3, #4
 80086ce:	f003 030f 	and.w	r3, r3, #15
 80086d2:	4950      	ldr	r1, [pc, #320]	@ (8008814 <HAL_RCC_OscConfig+0x274>)
 80086d4:	5ccb      	ldrb	r3, [r1, r3]
 80086d6:	f003 031f 	and.w	r3, r3, #31
 80086da:	fa22 f303 	lsr.w	r3, r2, r3
 80086de:	4a4e      	ldr	r2, [pc, #312]	@ (8008818 <HAL_RCC_OscConfig+0x278>)
 80086e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80086e2:	4b4e      	ldr	r3, [pc, #312]	@ (800881c <HAL_RCC_OscConfig+0x27c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fd f8ae 	bl	8005848 <HAL_InitTick>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d052      	beq.n	800879c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	e364      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d032      	beq.n	8008768 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008702:	4b43      	ldr	r3, [pc, #268]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a42      	ldr	r2, [pc, #264]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008708:	f043 0301 	orr.w	r3, r3, #1
 800870c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800870e:	f7fd f8eb 	bl	80058e8 <HAL_GetTick>
 8008712:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008716:	f7fd f8e7 	bl	80058e8 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e34d      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008728:	4b39      	ldr	r3, [pc, #228]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0f0      	beq.n	8008716 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008734:	4b36      	ldr	r3, [pc, #216]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a35      	ldr	r2, [pc, #212]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 800873a:	f043 0308 	orr.w	r3, r3, #8
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	4b33      	ldr	r3, [pc, #204]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	4930      	ldr	r1, [pc, #192]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 800874e:	4313      	orrs	r3, r2
 8008750:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008752:	4b2f      	ldr	r3, [pc, #188]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	021b      	lsls	r3, r3, #8
 8008760:	492b      	ldr	r1, [pc, #172]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008762:	4313      	orrs	r3, r2
 8008764:	604b      	str	r3, [r1, #4]
 8008766:	e01a      	b.n	800879e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008768:	4b29      	ldr	r3, [pc, #164]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a28      	ldr	r2, [pc, #160]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008774:	f7fd f8b8 	bl	80058e8 <HAL_GetTick>
 8008778:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800877c:	f7fd f8b4 	bl	80058e8 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e31a      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800878e:	4b20      	ldr	r3, [pc, #128]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1f0      	bne.n	800877c <HAL_RCC_OscConfig+0x1dc>
 800879a:	e000      	b.n	800879e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800879c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d073      	beq.n	8008892 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d005      	beq.n	80087bc <HAL_RCC_OscConfig+0x21c>
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	2b0c      	cmp	r3, #12
 80087b4:	d10e      	bne.n	80087d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d10b      	bne.n	80087d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087bc:	4b14      	ldr	r3, [pc, #80]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d063      	beq.n	8008890 <HAL_RCC_OscConfig+0x2f0>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d15f      	bne.n	8008890 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e2f7      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087dc:	d106      	bne.n	80087ec <HAL_RCC_OscConfig+0x24c>
 80087de:	4b0c      	ldr	r3, [pc, #48]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a0b      	ldr	r2, [pc, #44]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80087e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	e025      	b.n	8008838 <HAL_RCC_OscConfig+0x298>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087f4:	d114      	bne.n	8008820 <HAL_RCC_OscConfig+0x280>
 80087f6:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a05      	ldr	r2, [pc, #20]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 80087fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	4b03      	ldr	r3, [pc, #12]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a02      	ldr	r2, [pc, #8]	@ (8008810 <HAL_RCC_OscConfig+0x270>)
 8008808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	e013      	b.n	8008838 <HAL_RCC_OscConfig+0x298>
 8008810:	40021000 	.word	0x40021000
 8008814:	08024bf0 	.word	0x08024bf0
 8008818:	20000094 	.word	0x20000094
 800881c:	20000098 	.word	0x20000098
 8008820:	4ba0      	ldr	r3, [pc, #640]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a9f      	ldr	r2, [pc, #636]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	4b9d      	ldr	r3, [pc, #628]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a9c      	ldr	r2, [pc, #624]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d013      	beq.n	8008868 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008840:	f7fd f852 	bl	80058e8 <HAL_GetTick>
 8008844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008848:	f7fd f84e 	bl	80058e8 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b64      	cmp	r3, #100	@ 0x64
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e2b4      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800885a:	4b92      	ldr	r3, [pc, #584]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0f0      	beq.n	8008848 <HAL_RCC_OscConfig+0x2a8>
 8008866:	e014      	b.n	8008892 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008868:	f7fd f83e 	bl	80058e8 <HAL_GetTick>
 800886c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800886e:	e008      	b.n	8008882 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008870:	f7fd f83a 	bl	80058e8 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b64      	cmp	r3, #100	@ 0x64
 800887c:	d901      	bls.n	8008882 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e2a0      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008882:	4b88      	ldr	r3, [pc, #544]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1f0      	bne.n	8008870 <HAL_RCC_OscConfig+0x2d0>
 800888e:	e000      	b.n	8008892 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d060      	beq.n	8008960 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d005      	beq.n	80088b0 <HAL_RCC_OscConfig+0x310>
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	2b0c      	cmp	r3, #12
 80088a8:	d119      	bne.n	80088de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d116      	bne.n	80088de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088b0:	4b7c      	ldr	r3, [pc, #496]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_RCC_OscConfig+0x328>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e27d      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088c8:	4b76      	ldr	r3, [pc, #472]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	061b      	lsls	r3, r3, #24
 80088d6:	4973      	ldr	r1, [pc, #460]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088dc:	e040      	b.n	8008960 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d023      	beq.n	800892e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088e6:	4b6f      	ldr	r3, [pc, #444]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a6e      	ldr	r2, [pc, #440]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80088ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f2:	f7fc fff9 	bl	80058e8 <HAL_GetTick>
 80088f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088f8:	e008      	b.n	800890c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088fa:	f7fc fff5 	bl	80058e8 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d901      	bls.n	800890c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e25b      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800890c:	4b65      	ldr	r3, [pc, #404]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0f0      	beq.n	80088fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008918:	4b62      	ldr	r3, [pc, #392]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	061b      	lsls	r3, r3, #24
 8008926:	495f      	ldr	r1, [pc, #380]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008928:	4313      	orrs	r3, r2
 800892a:	604b      	str	r3, [r1, #4]
 800892c:	e018      	b.n	8008960 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800892e:	4b5d      	ldr	r3, [pc, #372]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a5c      	ldr	r2, [pc, #368]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800893a:	f7fc ffd5 	bl	80058e8 <HAL_GetTick>
 800893e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008940:	e008      	b.n	8008954 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008942:	f7fc ffd1 	bl	80058e8 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b02      	cmp	r3, #2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e237      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008954:	4b53      	ldr	r3, [pc, #332]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1f0      	bne.n	8008942 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	2b00      	cmp	r3, #0
 800896a:	d03c      	beq.n	80089e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01c      	beq.n	80089ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008974:	4b4b      	ldr	r3, [pc, #300]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800897a:	4a4a      	ldr	r2, [pc, #296]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008984:	f7fc ffb0 	bl	80058e8 <HAL_GetTick>
 8008988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800898c:	f7fc ffac 	bl	80058e8 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e212      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800899e:	4b41      	ldr	r3, [pc, #260]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80089a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0ef      	beq.n	800898c <HAL_RCC_OscConfig+0x3ec>
 80089ac:	e01b      	b.n	80089e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089ae:	4b3d      	ldr	r3, [pc, #244]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80089b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089b4:	4a3b      	ldr	r2, [pc, #236]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80089b6:	f023 0301 	bic.w	r3, r3, #1
 80089ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089be:	f7fc ff93 	bl	80058e8 <HAL_GetTick>
 80089c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089c4:	e008      	b.n	80089d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089c6:	f7fc ff8f 	bl	80058e8 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d901      	bls.n	80089d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e1f5      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089d8:	4b32      	ldr	r3, [pc, #200]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80089da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1ef      	bne.n	80089c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 80a6 	beq.w	8008b40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089f4:	2300      	movs	r3, #0
 80089f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80089f8:	4b2a      	ldr	r3, [pc, #168]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 80089fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a04:	4b27      	ldr	r3, [pc, #156]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a08:	4a26      	ldr	r2, [pc, #152]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a10:	4b24      	ldr	r3, [pc, #144]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a20:	4b21      	ldr	r3, [pc, #132]	@ (8008aa8 <HAL_RCC_OscConfig+0x508>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d118      	bne.n	8008a5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008aa8 <HAL_RCC_OscConfig+0x508>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa8 <HAL_RCC_OscConfig+0x508>)
 8008a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a38:	f7fc ff56 	bl	80058e8 <HAL_GetTick>
 8008a3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a3e:	e008      	b.n	8008a52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a40:	f7fc ff52 	bl	80058e8 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e1b8      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a52:	4b15      	ldr	r3, [pc, #84]	@ (8008aa8 <HAL_RCC_OscConfig+0x508>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0f0      	beq.n	8008a40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d108      	bne.n	8008a78 <HAL_RCC_OscConfig+0x4d8>
 8008a66:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a6e:	f043 0301 	orr.w	r3, r3, #1
 8008a72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a76:	e029      	b.n	8008acc <HAL_RCC_OscConfig+0x52c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2b05      	cmp	r3, #5
 8008a7e:	d115      	bne.n	8008aac <HAL_RCC_OscConfig+0x50c>
 8008a80:	4b08      	ldr	r3, [pc, #32]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a86:	4a07      	ldr	r2, [pc, #28]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a88:	f043 0304 	orr.w	r3, r3, #4
 8008a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a90:	4b04      	ldr	r3, [pc, #16]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a96:	4a03      	ldr	r2, [pc, #12]	@ (8008aa4 <HAL_RCC_OscConfig+0x504>)
 8008a98:	f043 0301 	orr.w	r3, r3, #1
 8008a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008aa0:	e014      	b.n	8008acc <HAL_RCC_OscConfig+0x52c>
 8008aa2:	bf00      	nop
 8008aa4:	40021000 	.word	0x40021000
 8008aa8:	40007000 	.word	0x40007000
 8008aac:	4b9d      	ldr	r3, [pc, #628]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab2:	4a9c      	ldr	r2, [pc, #624]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008ab4:	f023 0301 	bic.w	r3, r3, #1
 8008ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008abc:	4b99      	ldr	r3, [pc, #612]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac2:	4a98      	ldr	r2, [pc, #608]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008ac4:	f023 0304 	bic.w	r3, r3, #4
 8008ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d016      	beq.n	8008b02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad4:	f7fc ff08 	bl	80058e8 <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ada:	e00a      	b.n	8008af2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008adc:	f7fc ff04 	bl	80058e8 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e168      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008af2:	4b8c      	ldr	r3, [pc, #560]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0ed      	beq.n	8008adc <HAL_RCC_OscConfig+0x53c>
 8008b00:	e015      	b.n	8008b2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b02:	f7fc fef1 	bl	80058e8 <HAL_GetTick>
 8008b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b08:	e00a      	b.n	8008b20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b0a:	f7fc feed 	bl	80058e8 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e151      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b20:	4b80      	ldr	r3, [pc, #512]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1ed      	bne.n	8008b0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b2e:	7ffb      	ldrb	r3, [r7, #31]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d105      	bne.n	8008b40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b34:	4b7b      	ldr	r3, [pc, #492]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b38:	4a7a      	ldr	r2, [pc, #488]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d03c      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d01c      	beq.n	8008b8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b54:	4b73      	ldr	r3, [pc, #460]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b5a:	4a72      	ldr	r2, [pc, #456]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008b5c:	f043 0301 	orr.w	r3, r3, #1
 8008b60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b64:	f7fc fec0 	bl	80058e8 <HAL_GetTick>
 8008b68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b6c:	f7fc febc 	bl	80058e8 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e122      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b7e:	4b69      	ldr	r3, [pc, #420]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0ef      	beq.n	8008b6c <HAL_RCC_OscConfig+0x5cc>
 8008b8c:	e01b      	b.n	8008bc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b8e:	4b65      	ldr	r3, [pc, #404]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b94:	4a63      	ldr	r2, [pc, #396]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008b96:	f023 0301 	bic.w	r3, r3, #1
 8008b9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b9e:	f7fc fea3 	bl	80058e8 <HAL_GetTick>
 8008ba2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ba4:	e008      	b.n	8008bb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ba6:	f7fc fe9f 	bl	80058e8 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e105      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1ef      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 80f9 	beq.w	8008dc2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	f040 80cf 	bne.w	8008d78 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008bda:	4b52      	ldr	r3, [pc, #328]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f003 0203 	and.w	r2, r3, #3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d12c      	bne.n	8008c48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d123      	bne.n	8008c48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d11b      	bne.n	8008c48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d113      	bne.n	8008c48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c2a:	085b      	lsrs	r3, r3, #1
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d109      	bne.n	8008c48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	3b01      	subs	r3, #1
 8008c42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d071      	beq.n	8008d2c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	2b0c      	cmp	r3, #12
 8008c4c:	d068      	beq.n	8008d20 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008c4e:	4b35      	ldr	r3, [pc, #212]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008c5a:	4b32      	ldr	r3, [pc, #200]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e0ac      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008c70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c76:	f7fc fe37 	bl	80058e8 <HAL_GetTick>
 8008c7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c7c:	e008      	b.n	8008c90 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c7e:	f7fc fe33 	bl	80058e8 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d901      	bls.n	8008c90 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e099      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c90:	4b24      	ldr	r3, [pc, #144]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1f0      	bne.n	8008c7e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c9c:	4b21      	ldr	r3, [pc, #132]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	4b21      	ldr	r3, [pc, #132]	@ (8008d28 <HAL_RCC_OscConfig+0x788>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008cac:	3a01      	subs	r2, #1
 8008cae:	0112      	lsls	r2, r2, #4
 8008cb0:	4311      	orrs	r1, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008cb6:	0212      	lsls	r2, r2, #8
 8008cb8:	4311      	orrs	r1, r2
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008cbe:	0852      	lsrs	r2, r2, #1
 8008cc0:	3a01      	subs	r2, #1
 8008cc2:	0552      	lsls	r2, r2, #21
 8008cc4:	4311      	orrs	r1, r2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008cca:	0852      	lsrs	r2, r2, #1
 8008ccc:	3a01      	subs	r2, #1
 8008cce:	0652      	lsls	r2, r2, #25
 8008cd0:	4311      	orrs	r1, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008cd6:	06d2      	lsls	r2, r2, #27
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	4912      	ldr	r1, [pc, #72]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008ce0:	4b10      	ldr	r3, [pc, #64]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cec:	4b0d      	ldr	r3, [pc, #52]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008cf8:	f7fc fdf6 	bl	80058e8 <HAL_GetTick>
 8008cfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cfe:	e008      	b.n	8008d12 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d00:	f7fc fdf2 	bl	80058e8 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e058      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d12:	4b04      	ldr	r3, [pc, #16]	@ (8008d24 <HAL_RCC_OscConfig+0x784>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0f0      	beq.n	8008d00 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d1e:	e050      	b.n	8008dc2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e04f      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
 8008d24:	40021000 	.word	0x40021000
 8008d28:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d2c:	4b27      	ldr	r3, [pc, #156]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d144      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008d38:	4b24      	ldr	r3, [pc, #144]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a23      	ldr	r2, [pc, #140]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d44:	4b21      	ldr	r3, [pc, #132]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	4a20      	ldr	r2, [pc, #128]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008d4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d50:	f7fc fdca 	bl	80058e8 <HAL_GetTick>
 8008d54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d56:	e008      	b.n	8008d6a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d58:	f7fc fdc6 	bl	80058e8 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e02c      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d6a:	4b18      	ldr	r3, [pc, #96]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d0f0      	beq.n	8008d58 <HAL_RCC_OscConfig+0x7b8>
 8008d76:	e024      	b.n	8008dc2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b0c      	cmp	r3, #12
 8008d7c:	d01f      	beq.n	8008dbe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d7e:	4b13      	ldr	r3, [pc, #76]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a12      	ldr	r2, [pc, #72]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008d84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8a:	f7fc fdad 	bl	80058e8 <HAL_GetTick>
 8008d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d90:	e008      	b.n	8008da4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d92:	f7fc fda9 	bl	80058e8 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d901      	bls.n	8008da4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e00f      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008da4:	4b09      	ldr	r3, [pc, #36]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1f0      	bne.n	8008d92 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008db0:	4b06      	ldr	r3, [pc, #24]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	4905      	ldr	r1, [pc, #20]	@ (8008dcc <HAL_RCC_OscConfig+0x82c>)
 8008db6:	4b06      	ldr	r3, [pc, #24]	@ (8008dd0 <HAL_RCC_OscConfig+0x830>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	60cb      	str	r3, [r1, #12]
 8008dbc:	e001      	b.n	8008dc2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	40021000 	.word	0x40021000
 8008dd0:	feeefffc 	.word	0xfeeefffc

08008dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d101      	bne.n	8008dec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e11d      	b.n	8009028 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008dec:	4b90      	ldr	r3, [pc, #576]	@ (8009030 <HAL_RCC_ClockConfig+0x25c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 030f 	and.w	r3, r3, #15
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d910      	bls.n	8008e1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8009030 <HAL_RCC_ClockConfig+0x25c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f023 020f 	bic.w	r2, r3, #15
 8008e02:	498b      	ldr	r1, [pc, #556]	@ (8009030 <HAL_RCC_ClockConfig+0x25c>)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e0a:	4b89      	ldr	r3, [pc, #548]	@ (8009030 <HAL_RCC_ClockConfig+0x25c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 030f 	and.w	r3, r3, #15
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d001      	beq.n	8008e1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e105      	b.n	8009028 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d010      	beq.n	8008e4a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	4b81      	ldr	r3, [pc, #516]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d908      	bls.n	8008e4a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e38:	4b7e      	ldr	r3, [pc, #504]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	497b      	ldr	r1, [pc, #492]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d079      	beq.n	8008f4a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d11e      	bne.n	8008e9c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e5e:	4b75      	ldr	r3, [pc, #468]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e0dc      	b.n	8009028 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008e6e:	f000 fa09 	bl	8009284 <RCC_GetSysClockFreqFromPLLSource>
 8008e72:	4603      	mov	r3, r0
 8008e74:	4a70      	ldr	r2, [pc, #448]	@ (8009038 <HAL_RCC_ClockConfig+0x264>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d946      	bls.n	8008f08 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008e7a:	4b6e      	ldr	r3, [pc, #440]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d140      	bne.n	8008f08 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e86:	4b6b      	ldr	r3, [pc, #428]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e8e:	4a69      	ldr	r2, [pc, #420]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008e96:	2380      	movs	r3, #128	@ 0x80
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	e035      	b.n	8008f08 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d107      	bne.n	8008eb4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ea4:	4b63      	ldr	r3, [pc, #396]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d115      	bne.n	8008edc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e0b9      	b.n	8009028 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d107      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0302 	and.w	r3, r3, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d109      	bne.n	8008edc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0ad      	b.n	8009028 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ecc:	4b59      	ldr	r3, [pc, #356]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0a5      	b.n	8009028 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008edc:	f000 f8b4 	bl	8009048 <HAL_RCC_GetSysClockFreq>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	4a55      	ldr	r2, [pc, #340]	@ (8009038 <HAL_RCC_ClockConfig+0x264>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d90f      	bls.n	8008f08 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008ee8:	4b52      	ldr	r3, [pc, #328]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008efc:	4a4d      	ldr	r2, [pc, #308]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f02:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f04:	2380      	movs	r3, #128	@ 0x80
 8008f06:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f08:	4b4a      	ldr	r3, [pc, #296]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f023 0203 	bic.w	r2, r3, #3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	4947      	ldr	r1, [pc, #284]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f1a:	f7fc fce5 	bl	80058e8 <HAL_GetTick>
 8008f1e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f20:	e00a      	b.n	8008f38 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f22:	f7fc fce1 	bl	80058e8 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d901      	bls.n	8008f38 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e077      	b.n	8009028 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f38:	4b3e      	ldr	r3, [pc, #248]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 020c 	and.w	r2, r3, #12
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d1eb      	bne.n	8008f22 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b80      	cmp	r3, #128	@ 0x80
 8008f4e:	d105      	bne.n	8008f5c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008f50:	4b38      	ldr	r3, [pc, #224]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	4a37      	ldr	r2, [pc, #220]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f5a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d010      	beq.n	8008f8a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689a      	ldr	r2, [r3, #8]
 8008f6c:	4b31      	ldr	r3, [pc, #196]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d208      	bcs.n	8008f8a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f78:	4b2e      	ldr	r3, [pc, #184]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	492b      	ldr	r1, [pc, #172]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f8a:	4b29      	ldr	r3, [pc, #164]	@ (8009030 <HAL_RCC_ClockConfig+0x25c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d210      	bcs.n	8008fba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f98:	4b25      	ldr	r3, [pc, #148]	@ (8009030 <HAL_RCC_ClockConfig+0x25c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f023 020f 	bic.w	r2, r3, #15
 8008fa0:	4923      	ldr	r1, [pc, #140]	@ (8009030 <HAL_RCC_ClockConfig+0x25c>)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fa8:	4b21      	ldr	r3, [pc, #132]	@ (8009030 <HAL_RCC_ClockConfig+0x25c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d001      	beq.n	8008fba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e036      	b.n	8009028 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d008      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	4918      	ldr	r1, [pc, #96]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0308 	and.w	r3, r3, #8
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d009      	beq.n	8008ff8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fe4:	4b13      	ldr	r3, [pc, #76]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	4910      	ldr	r1, [pc, #64]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008ff8:	f000 f826 	bl	8009048 <HAL_RCC_GetSysClockFreq>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8009034 <HAL_RCC_ClockConfig+0x260>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	091b      	lsrs	r3, r3, #4
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	490c      	ldr	r1, [pc, #48]	@ (800903c <HAL_RCC_ClockConfig+0x268>)
 800900a:	5ccb      	ldrb	r3, [r1, r3]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	fa22 f303 	lsr.w	r3, r2, r3
 8009014:	4a0a      	ldr	r2, [pc, #40]	@ (8009040 <HAL_RCC_ClockConfig+0x26c>)
 8009016:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009018:	4b0a      	ldr	r3, [pc, #40]	@ (8009044 <HAL_RCC_ClockConfig+0x270>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4618      	mov	r0, r3
 800901e:	f7fc fc13 	bl	8005848 <HAL_InitTick>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]

  return status;
 8009026:	7bfb      	ldrb	r3, [r7, #15]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	40022000 	.word	0x40022000
 8009034:	40021000 	.word	0x40021000
 8009038:	04c4b400 	.word	0x04c4b400
 800903c:	08024bf0 	.word	0x08024bf0
 8009040:	20000094 	.word	0x20000094
 8009044:	20000098 	.word	0x20000098

08009048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009048:	b480      	push	{r7}
 800904a:	b089      	sub	sp, #36	@ 0x24
 800904c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	61fb      	str	r3, [r7, #28]
 8009052:	2300      	movs	r3, #0
 8009054:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009056:	4b3e      	ldr	r3, [pc, #248]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f003 030c 	and.w	r3, r3, #12
 800905e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009060:	4b3b      	ldr	r3, [pc, #236]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f003 0303 	and.w	r3, r3, #3
 8009068:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <HAL_RCC_GetSysClockFreq+0x34>
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	2b0c      	cmp	r3, #12
 8009074:	d121      	bne.n	80090ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d11e      	bne.n	80090ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800907c:	4b34      	ldr	r3, [pc, #208]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d107      	bne.n	8009098 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009088:	4b31      	ldr	r3, [pc, #196]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 800908a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800908e:	0a1b      	lsrs	r3, r3, #8
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	61fb      	str	r3, [r7, #28]
 8009096:	e005      	b.n	80090a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009098:	4b2d      	ldr	r3, [pc, #180]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	091b      	lsrs	r3, r3, #4
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80090a4:	4a2b      	ldr	r2, [pc, #172]	@ (8009154 <HAL_RCC_GetSysClockFreq+0x10c>)
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10d      	bne.n	80090d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80090b8:	e00a      	b.n	80090d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d102      	bne.n	80090c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80090c0:	4b25      	ldr	r3, [pc, #148]	@ (8009158 <HAL_RCC_GetSysClockFreq+0x110>)
 80090c2:	61bb      	str	r3, [r7, #24]
 80090c4:	e004      	b.n	80090d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d101      	bne.n	80090d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80090cc:	4b23      	ldr	r3, [pc, #140]	@ (800915c <HAL_RCC_GetSysClockFreq+0x114>)
 80090ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b0c      	cmp	r3, #12
 80090d4:	d134      	bne.n	8009140 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f003 0303 	and.w	r3, r3, #3
 80090de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d003      	beq.n	80090ee <HAL_RCC_GetSysClockFreq+0xa6>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d003      	beq.n	80090f4 <HAL_RCC_GetSysClockFreq+0xac>
 80090ec:	e005      	b.n	80090fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80090ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009158 <HAL_RCC_GetSysClockFreq+0x110>)
 80090f0:	617b      	str	r3, [r7, #20]
      break;
 80090f2:	e005      	b.n	8009100 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80090f4:	4b19      	ldr	r3, [pc, #100]	@ (800915c <HAL_RCC_GetSysClockFreq+0x114>)
 80090f6:	617b      	str	r3, [r7, #20]
      break;
 80090f8:	e002      	b.n	8009100 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	617b      	str	r3, [r7, #20]
      break;
 80090fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009100:	4b13      	ldr	r3, [pc, #76]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	091b      	lsrs	r3, r3, #4
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	3301      	adds	r3, #1
 800910c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800910e:	4b10      	ldr	r3, [pc, #64]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	0a1b      	lsrs	r3, r3, #8
 8009114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	fb03 f202 	mul.w	r2, r3, r2
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	fbb2 f3f3 	udiv	r3, r2, r3
 8009124:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009126:	4b0a      	ldr	r3, [pc, #40]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x108>)
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	0e5b      	lsrs	r3, r3, #25
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	3301      	adds	r3, #1
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	fbb2 f3f3 	udiv	r3, r2, r3
 800913e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009140:	69bb      	ldr	r3, [r7, #24]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3724      	adds	r7, #36	@ 0x24
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	40021000 	.word	0x40021000
 8009154:	08024c08 	.word	0x08024c08
 8009158:	00f42400 	.word	0x00f42400
 800915c:	007a1200 	.word	0x007a1200

08009160 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009164:	4b03      	ldr	r3, [pc, #12]	@ (8009174 <HAL_RCC_GetHCLKFreq+0x14>)
 8009166:	681b      	ldr	r3, [r3, #0]
}
 8009168:	4618      	mov	r0, r3
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20000094 	.word	0x20000094

08009178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800917c:	f7ff fff0 	bl	8009160 <HAL_RCC_GetHCLKFreq>
 8009180:	4602      	mov	r2, r0
 8009182:	4b06      	ldr	r3, [pc, #24]	@ (800919c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	0a1b      	lsrs	r3, r3, #8
 8009188:	f003 0307 	and.w	r3, r3, #7
 800918c:	4904      	ldr	r1, [pc, #16]	@ (80091a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800918e:	5ccb      	ldrb	r3, [r1, r3]
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009198:	4618      	mov	r0, r3
 800919a:	bd80      	pop	{r7, pc}
 800919c:	40021000 	.word	0x40021000
 80091a0:	08024c00 	.word	0x08024c00

080091a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80091a8:	f7ff ffda 	bl	8009160 <HAL_RCC_GetHCLKFreq>
 80091ac:	4602      	mov	r2, r0
 80091ae:	4b06      	ldr	r3, [pc, #24]	@ (80091c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	0adb      	lsrs	r3, r3, #11
 80091b4:	f003 0307 	and.w	r3, r3, #7
 80091b8:	4904      	ldr	r1, [pc, #16]	@ (80091cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80091ba:	5ccb      	ldrb	r3, [r1, r3]
 80091bc:	f003 031f 	and.w	r3, r3, #31
 80091c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	40021000 	.word	0x40021000
 80091cc:	08024c00 	.word	0x08024c00

080091d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80091d8:	2300      	movs	r3, #0
 80091da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80091dc:	4b27      	ldr	r3, [pc, #156]	@ (800927c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80091de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80091e8:	f7ff f916 	bl	8008418 <HAL_PWREx_GetVoltageRange>
 80091ec:	6178      	str	r0, [r7, #20]
 80091ee:	e014      	b.n	800921a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80091f0:	4b22      	ldr	r3, [pc, #136]	@ (800927c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80091f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091f4:	4a21      	ldr	r2, [pc, #132]	@ (800927c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80091f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80091fc:	4b1f      	ldr	r3, [pc, #124]	@ (800927c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80091fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009208:	f7ff f906 	bl	8008418 <HAL_PWREx_GetVoltageRange>
 800920c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800920e:	4b1b      	ldr	r3, [pc, #108]	@ (800927c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009212:	4a1a      	ldr	r2, [pc, #104]	@ (800927c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009218:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009220:	d10b      	bne.n	800923a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b80      	cmp	r3, #128	@ 0x80
 8009226:	d913      	bls.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2ba0      	cmp	r3, #160	@ 0xa0
 800922c:	d902      	bls.n	8009234 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800922e:	2302      	movs	r3, #2
 8009230:	613b      	str	r3, [r7, #16]
 8009232:	e00d      	b.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009234:	2301      	movs	r3, #1
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	e00a      	b.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b7f      	cmp	r3, #127	@ 0x7f
 800923e:	d902      	bls.n	8009246 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009240:	2302      	movs	r3, #2
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	e004      	b.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b70      	cmp	r3, #112	@ 0x70
 800924a:	d101      	bne.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800924c:	2301      	movs	r3, #1
 800924e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009250:	4b0b      	ldr	r3, [pc, #44]	@ (8009280 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f023 020f 	bic.w	r2, r3, #15
 8009258:	4909      	ldr	r1, [pc, #36]	@ (8009280 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	4313      	orrs	r3, r2
 800925e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009260:	4b07      	ldr	r3, [pc, #28]	@ (8009280 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	429a      	cmp	r2, r3
 800926c:	d001      	beq.n	8009272 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	40021000 	.word	0x40021000
 8009280:	40022000 	.word	0x40022000

08009284 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800928a:	4b2d      	ldr	r3, [pc, #180]	@ (8009340 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b03      	cmp	r3, #3
 8009298:	d00b      	beq.n	80092b2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b03      	cmp	r3, #3
 800929e:	d825      	bhi.n	80092ec <RCC_GetSysClockFreqFromPLLSource+0x68>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d008      	beq.n	80092b8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d11f      	bne.n	80092ec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80092ac:	4b25      	ldr	r3, [pc, #148]	@ (8009344 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80092ae:	613b      	str	r3, [r7, #16]
    break;
 80092b0:	e01f      	b.n	80092f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80092b2:	4b25      	ldr	r3, [pc, #148]	@ (8009348 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80092b4:	613b      	str	r3, [r7, #16]
    break;
 80092b6:	e01c      	b.n	80092f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80092b8:	4b21      	ldr	r3, [pc, #132]	@ (8009340 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0308 	and.w	r3, r3, #8
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d107      	bne.n	80092d4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80092c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009340 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80092c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092ca:	0a1b      	lsrs	r3, r3, #8
 80092cc:	f003 030f 	and.w	r3, r3, #15
 80092d0:	617b      	str	r3, [r7, #20]
 80092d2:	e005      	b.n	80092e0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80092d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009340 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	091b      	lsrs	r3, r3, #4
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80092e0:	4a1a      	ldr	r2, [pc, #104]	@ (800934c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092e8:	613b      	str	r3, [r7, #16]
    break;
 80092ea:	e002      	b.n	80092f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	613b      	str	r3, [r7, #16]
    break;
 80092f0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092f2:	4b13      	ldr	r3, [pc, #76]	@ (8009340 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	091b      	lsrs	r3, r3, #4
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	3301      	adds	r3, #1
 80092fe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009300:	4b0f      	ldr	r3, [pc, #60]	@ (8009340 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	0a1b      	lsrs	r3, r3, #8
 8009306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	fb03 f202 	mul.w	r2, r3, r2
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	fbb2 f3f3 	udiv	r3, r2, r3
 8009316:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009318:	4b09      	ldr	r3, [pc, #36]	@ (8009340 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	0e5b      	lsrs	r3, r3, #25
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	3301      	adds	r3, #1
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009330:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009332:	683b      	ldr	r3, [r7, #0]
}
 8009334:	4618      	mov	r0, r3
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	40021000 	.word	0x40021000
 8009344:	00f42400 	.word	0x00f42400
 8009348:	007a1200 	.word	0x007a1200
 800934c:	08024c08 	.word	0x08024c08

08009350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009358:	2300      	movs	r3, #0
 800935a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800935c:	2300      	movs	r3, #0
 800935e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009368:	2b00      	cmp	r3, #0
 800936a:	d040      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009370:	2b80      	cmp	r3, #128	@ 0x80
 8009372:	d02a      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009374:	2b80      	cmp	r3, #128	@ 0x80
 8009376:	d825      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009378:	2b60      	cmp	r3, #96	@ 0x60
 800937a:	d026      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800937c:	2b60      	cmp	r3, #96	@ 0x60
 800937e:	d821      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009380:	2b40      	cmp	r3, #64	@ 0x40
 8009382:	d006      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009384:	2b40      	cmp	r3, #64	@ 0x40
 8009386:	d81d      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009388:	2b00      	cmp	r3, #0
 800938a:	d009      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800938c:	2b20      	cmp	r3, #32
 800938e:	d010      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009390:	e018      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009392:	4b89      	ldr	r3, [pc, #548]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	4a88      	ldr	r2, [pc, #544]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800939c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800939e:	e015      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3304      	adds	r3, #4
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fb12 	bl	80099d0 <RCCEx_PLLSAI1_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093b0:	e00c      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3320      	adds	r3, #32
 80093b6:	2100      	movs	r1, #0
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fbfd 	bl	8009bb8 <RCCEx_PLLSAI2_Config>
 80093be:	4603      	mov	r3, r0
 80093c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80093c2:	e003      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	74fb      	strb	r3, [r7, #19]
      break;
 80093c8:	e000      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80093ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093cc:	7cfb      	ldrb	r3, [r7, #19]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10b      	bne.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093d2:	4b79      	ldr	r3, [pc, #484]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80093d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093d8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093e0:	4975      	ldr	r1, [pc, #468]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80093e8:	e001      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ea:	7cfb      	ldrb	r3, [r7, #19]
 80093ec:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d047      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009402:	d030      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009408:	d82a      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800940a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800940e:	d02a      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009414:	d824      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800941a:	d008      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800941c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009420:	d81e      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800942a:	d010      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800942c:	e018      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800942e:	4b62      	ldr	r3, [pc, #392]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	4a61      	ldr	r2, [pc, #388]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009438:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800943a:	e015      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	2100      	movs	r1, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fac4 	bl	80099d0 <RCCEx_PLLSAI1_Config>
 8009448:	4603      	mov	r3, r0
 800944a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800944c:	e00c      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3320      	adds	r3, #32
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fbaf 	bl	8009bb8 <RCCEx_PLLSAI2_Config>
 800945a:	4603      	mov	r3, r0
 800945c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800945e:	e003      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	74fb      	strb	r3, [r7, #19]
      break;
 8009464:	e000      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009468:	7cfb      	ldrb	r3, [r7, #19]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10b      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800946e:	4b52      	ldr	r3, [pc, #328]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009470:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009474:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800947c:	494e      	ldr	r1, [pc, #312]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800947e:	4313      	orrs	r3, r2
 8009480:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8009484:	e001      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009486:	7cfb      	ldrb	r3, [r7, #19]
 8009488:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 809f 	beq.w	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009498:	2300      	movs	r3, #0
 800949a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800949c:	4b46      	ldr	r3, [pc, #280]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800949e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e000      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80094ac:	2300      	movs	r3, #0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094b2:	4b41      	ldr	r3, [pc, #260]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80094b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b6:	4a40      	ldr	r2, [pc, #256]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80094b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80094be:	4b3e      	ldr	r3, [pc, #248]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80094c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094c6:	60bb      	str	r3, [r7, #8]
 80094c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80094ca:	2301      	movs	r3, #1
 80094cc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094ce:	4b3b      	ldr	r3, [pc, #236]	@ (80095bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a3a      	ldr	r2, [pc, #232]	@ (80095bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80094d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094da:	f7fc fa05 	bl	80058e8 <HAL_GetTick>
 80094de:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80094e0:	e009      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094e2:	f7fc fa01 	bl	80058e8 <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d902      	bls.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	74fb      	strb	r3, [r7, #19]
        break;
 80094f4:	e005      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80094f6:	4b31      	ldr	r3, [pc, #196]	@ (80095bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0ef      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009502:	7cfb      	ldrb	r3, [r7, #19]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d15b      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009508:	4b2b      	ldr	r3, [pc, #172]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800950a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800950e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009512:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d01f      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	429a      	cmp	r2, r3
 8009524:	d019      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009526:	4b24      	ldr	r3, [pc, #144]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009530:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009532:	4b21      	ldr	r3, [pc, #132]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009538:	4a1f      	ldr	r2, [pc, #124]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800953a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800953e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009542:	4b1d      	ldr	r3, [pc, #116]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009548:	4a1b      	ldr	r2, [pc, #108]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800954a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800954e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009552:	4a19      	ldr	r2, [pc, #100]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d016      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009564:	f7fc f9c0 	bl	80058e8 <HAL_GetTick>
 8009568:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800956a:	e00b      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800956c:	f7fc f9bc 	bl	80058e8 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800957a:	4293      	cmp	r3, r2
 800957c:	d902      	bls.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	74fb      	strb	r3, [r7, #19]
            break;
 8009582:	e006      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009584:	4b0c      	ldr	r3, [pc, #48]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0ec      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009592:	7cfb      	ldrb	r3, [r7, #19]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10c      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009598:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800959a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800959e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a8:	4903      	ldr	r1, [pc, #12]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80095b0:	e008      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095b2:	7cfb      	ldrb	r3, [r7, #19]
 80095b4:	74bb      	strb	r3, [r7, #18]
 80095b6:	e005      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80095b8:	40021000 	.word	0x40021000
 80095bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c0:	7cfb      	ldrb	r3, [r7, #19]
 80095c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80095c4:	7c7b      	ldrb	r3, [r7, #17]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d105      	bne.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095ca:	4ba0      	ldr	r3, [pc, #640]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ce:	4a9f      	ldr	r2, [pc, #636]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095e2:	4b9a      	ldr	r3, [pc, #616]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e8:	f023 0203 	bic.w	r2, r3, #3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f0:	4996      	ldr	r1, [pc, #600]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00a      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009604:	4b91      	ldr	r3, [pc, #580]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800960a:	f023 020c 	bic.w	r2, r3, #12
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009612:	498e      	ldr	r1, [pc, #568]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009614:	4313      	orrs	r3, r2
 8009616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0304 	and.w	r3, r3, #4
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009626:	4b89      	ldr	r3, [pc, #548]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009634:	4985      	ldr	r1, [pc, #532]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009636:	4313      	orrs	r3, r2
 8009638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00a      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009648:	4b80      	ldr	r3, [pc, #512]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800964a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009656:	497d      	ldr	r1, [pc, #500]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009658:	4313      	orrs	r3, r2
 800965a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0310 	and.w	r3, r3, #16
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800966a:	4b78      	ldr	r3, [pc, #480]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800966c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009678:	4974      	ldr	r1, [pc, #464]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800967a:	4313      	orrs	r3, r2
 800967c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800968c:	4b6f      	ldr	r3, [pc, #444]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800968e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009692:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800969a:	496c      	ldr	r1, [pc, #432]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800969c:	4313      	orrs	r3, r2
 800969e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096ae:	4b67      	ldr	r3, [pc, #412]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096bc:	4963      	ldr	r1, [pc, #396]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00a      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80096d0:	4b5e      	ldr	r3, [pc, #376]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096de:	495b      	ldr	r1, [pc, #364]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096e0:	4313      	orrs	r3, r2
 80096e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80096f2:	4b56      	ldr	r3, [pc, #344]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009700:	4952      	ldr	r1, [pc, #328]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009702:	4313      	orrs	r3, r2
 8009704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00a      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009714:	4b4d      	ldr	r3, [pc, #308]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800971a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009722:	494a      	ldr	r1, [pc, #296]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009724:	4313      	orrs	r3, r2
 8009726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009736:	4b45      	ldr	r3, [pc, #276]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800973c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009744:	4941      	ldr	r1, [pc, #260]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009746:	4313      	orrs	r3, r2
 8009748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00a      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009758:	4b3c      	ldr	r3, [pc, #240]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800975a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800975e:	f023 0203 	bic.w	r2, r3, #3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009766:	4939      	ldr	r1, [pc, #228]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009768:	4313      	orrs	r3, r2
 800976a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d028      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800977a:	4b34      	ldr	r3, [pc, #208]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800977c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009780:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009788:	4930      	ldr	r1, [pc, #192]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800978a:	4313      	orrs	r3, r2
 800978c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009798:	d106      	bne.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800979a:	4b2c      	ldr	r3, [pc, #176]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	4a2b      	ldr	r2, [pc, #172]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097a4:	60d3      	str	r3, [r2, #12]
 80097a6:	e011      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097b0:	d10c      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	3304      	adds	r3, #4
 80097b6:	2101      	movs	r1, #1
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f909 	bl	80099d0 <RCCEx_PLLSAI1_Config>
 80097be:	4603      	mov	r3, r0
 80097c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80097c2:	7cfb      	ldrb	r3, [r7, #19]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80097c8:	7cfb      	ldrb	r3, [r7, #19]
 80097ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d04d      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097e0:	d108      	bne.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80097e2:	4b1a      	ldr	r3, [pc, #104]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097e8:	4a18      	ldr	r2, [pc, #96]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097ee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80097f2:	e012      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80097f4:	4b15      	ldr	r3, [pc, #84]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097fa:	4a14      	ldr	r2, [pc, #80]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009800:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8009804:	4b11      	ldr	r3, [pc, #68]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009812:	490e      	ldr	r1, [pc, #56]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009814:	4313      	orrs	r3, r2
 8009816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800981e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009822:	d106      	bne.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009824:	4b09      	ldr	r3, [pc, #36]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	4a08      	ldr	r2, [pc, #32]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800982a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800982e:	60d3      	str	r3, [r2, #12]
 8009830:	e020      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009836:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800983a:	d109      	bne.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800983c:	4b03      	ldr	r3, [pc, #12]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	4a02      	ldr	r2, [pc, #8]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009846:	60d3      	str	r3, [r2, #12]
 8009848:	e014      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800984a:	bf00      	nop
 800984c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009858:	d10c      	bne.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3304      	adds	r3, #4
 800985e:	2101      	movs	r1, #1
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f8b5 	bl	80099d0 <RCCEx_PLLSAI1_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800986a:	7cfb      	ldrb	r3, [r7, #19]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009870:	7cfb      	ldrb	r3, [r7, #19]
 8009872:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d028      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009880:	4b4a      	ldr	r3, [pc, #296]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009886:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800988e:	4947      	ldr	r1, [pc, #284]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009890:	4313      	orrs	r3, r2
 8009892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800989a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800989e:	d106      	bne.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098a0:	4b42      	ldr	r3, [pc, #264]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	4a41      	ldr	r2, [pc, #260]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098aa:	60d3      	str	r3, [r2, #12]
 80098ac:	e011      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098b6:	d10c      	bne.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3304      	adds	r3, #4
 80098bc:	2101      	movs	r1, #1
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f886 	bl	80099d0 <RCCEx_PLLSAI1_Config>
 80098c4:	4603      	mov	r3, r0
 80098c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80098c8:	7cfb      	ldrb	r3, [r7, #19]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80098ce:	7cfb      	ldrb	r3, [r7, #19]
 80098d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d01e      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098de:	4b33      	ldr	r3, [pc, #204]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ee:	492f      	ldr	r1, [pc, #188]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009900:	d10c      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3304      	adds	r3, #4
 8009906:	2102      	movs	r1, #2
 8009908:	4618      	mov	r0, r3
 800990a:	f000 f861 	bl	80099d0 <RCCEx_PLLSAI1_Config>
 800990e:	4603      	mov	r3, r0
 8009910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009912:	7cfb      	ldrb	r3, [r7, #19]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009918:	7cfb      	ldrb	r3, [r7, #19]
 800991a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00b      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009928:	4b20      	ldr	r3, [pc, #128]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800992a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800992e:	f023 0204 	bic.w	r2, r3, #4
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009938:	491c      	ldr	r1, [pc, #112]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800993a:	4313      	orrs	r3, r2
 800993c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00b      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800994c:	4b17      	ldr	r3, [pc, #92]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800994e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009952:	f023 0218 	bic.w	r2, r3, #24
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800995c:	4913      	ldr	r1, [pc, #76]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800995e:	4313      	orrs	r3, r2
 8009960:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d017      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009970:	4b0e      	ldr	r3, [pc, #56]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009972:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009976:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009980:	490a      	ldr	r1, [pc, #40]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009982:	4313      	orrs	r3, r2
 8009984:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800998e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009992:	d105      	bne.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009994:	4b05      	ldr	r3, [pc, #20]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	4a04      	ldr	r2, [pc, #16]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800999a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800999e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80099a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	40021000 	.word	0x40021000

080099b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80099b4:	4b05      	ldr	r3, [pc, #20]	@ (80099cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a04      	ldr	r2, [pc, #16]	@ (80099cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80099ba:	f043 0304 	orr.w	r3, r3, #4
 80099be:	6013      	str	r3, [r2, #0]
}
 80099c0:	bf00      	nop
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40021000 	.word	0x40021000

080099d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80099de:	4b72      	ldr	r3, [pc, #456]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f003 0303 	and.w	r3, r3, #3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00e      	beq.n	8009a08 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80099ea:	4b6f      	ldr	r3, [pc, #444]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f003 0203 	and.w	r2, r3, #3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d103      	bne.n	8009a02 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
       ||
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d142      	bne.n	8009a88 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	73fb      	strb	r3, [r7, #15]
 8009a06:	e03f      	b.n	8009a88 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d018      	beq.n	8009a42 <RCCEx_PLLSAI1_Config+0x72>
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d825      	bhi.n	8009a60 <RCCEx_PLLSAI1_Config+0x90>
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d002      	beq.n	8009a1e <RCCEx_PLLSAI1_Config+0x4e>
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d009      	beq.n	8009a30 <RCCEx_PLLSAI1_Config+0x60>
 8009a1c:	e020      	b.n	8009a60 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009a1e:	4b62      	ldr	r3, [pc, #392]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d11d      	bne.n	8009a66 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a2e:	e01a      	b.n	8009a66 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009a30:	4b5d      	ldr	r3, [pc, #372]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d116      	bne.n	8009a6a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a40:	e013      	b.n	8009a6a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009a42:	4b59      	ldr	r3, [pc, #356]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10f      	bne.n	8009a6e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009a4e:	4b56      	ldr	r3, [pc, #344]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d109      	bne.n	8009a6e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a5e:	e006      	b.n	8009a6e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	73fb      	strb	r3, [r7, #15]
      break;
 8009a64:	e004      	b.n	8009a70 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009a66:	bf00      	nop
 8009a68:	e002      	b.n	8009a70 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009a6a:	bf00      	nop
 8009a6c:	e000      	b.n	8009a70 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009a6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d108      	bne.n	8009a88 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009a76:	4b4c      	ldr	r3, [pc, #304]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f023 0203 	bic.w	r2, r3, #3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4949      	ldr	r1, [pc, #292]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f040 8086 	bne.w	8009b9c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009a90:	4b45      	ldr	r3, [pc, #276]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a44      	ldr	r2, [pc, #272]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009a96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a9c:	f7fb ff24 	bl	80058e8 <HAL_GetTick>
 8009aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009aa2:	e009      	b.n	8009ab8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009aa4:	f7fb ff20 	bl	80058e8 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d902      	bls.n	8009ab8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8009ab6:	e005      	b.n	8009ac4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1ef      	bne.n	8009aa4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d168      	bne.n	8009b9c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d113      	bne.n	8009af8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009ad0:	4b35      	ldr	r3, [pc, #212]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ad2:	691a      	ldr	r2, [r3, #16]
 8009ad4:	4b35      	ldr	r3, [pc, #212]	@ (8009bac <RCCEx_PLLSAI1_Config+0x1dc>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6892      	ldr	r2, [r2, #8]
 8009adc:	0211      	lsls	r1, r2, #8
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	68d2      	ldr	r2, [r2, #12]
 8009ae2:	06d2      	lsls	r2, r2, #27
 8009ae4:	4311      	orrs	r1, r2
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6852      	ldr	r2, [r2, #4]
 8009aea:	3a01      	subs	r2, #1
 8009aec:	0112      	lsls	r2, r2, #4
 8009aee:	430a      	orrs	r2, r1
 8009af0:	492d      	ldr	r1, [pc, #180]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	610b      	str	r3, [r1, #16]
 8009af6:	e02d      	b.n	8009b54 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d115      	bne.n	8009b2a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009afe:	4b2a      	ldr	r3, [pc, #168]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b00:	691a      	ldr	r2, [r3, #16]
 8009b02:	4b2b      	ldr	r3, [pc, #172]	@ (8009bb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	6892      	ldr	r2, [r2, #8]
 8009b0a:	0211      	lsls	r1, r2, #8
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6912      	ldr	r2, [r2, #16]
 8009b10:	0852      	lsrs	r2, r2, #1
 8009b12:	3a01      	subs	r2, #1
 8009b14:	0552      	lsls	r2, r2, #21
 8009b16:	4311      	orrs	r1, r2
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	6852      	ldr	r2, [r2, #4]
 8009b1c:	3a01      	subs	r2, #1
 8009b1e:	0112      	lsls	r2, r2, #4
 8009b20:	430a      	orrs	r2, r1
 8009b22:	4921      	ldr	r1, [pc, #132]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	610b      	str	r3, [r1, #16]
 8009b28:	e014      	b.n	8009b54 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b2c:	691a      	ldr	r2, [r3, #16]
 8009b2e:	4b21      	ldr	r3, [pc, #132]	@ (8009bb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	6892      	ldr	r2, [r2, #8]
 8009b36:	0211      	lsls	r1, r2, #8
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6952      	ldr	r2, [r2, #20]
 8009b3c:	0852      	lsrs	r2, r2, #1
 8009b3e:	3a01      	subs	r2, #1
 8009b40:	0652      	lsls	r2, r2, #25
 8009b42:	4311      	orrs	r1, r2
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	6852      	ldr	r2, [r2, #4]
 8009b48:	3a01      	subs	r2, #1
 8009b4a:	0112      	lsls	r2, r2, #4
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	4916      	ldr	r1, [pc, #88]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009b54:	4b14      	ldr	r3, [pc, #80]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a13      	ldr	r2, [pc, #76]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b60:	f7fb fec2 	bl	80058e8 <HAL_GetTick>
 8009b64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009b66:	e009      	b.n	8009b7c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b68:	f7fb febe 	bl	80058e8 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d902      	bls.n	8009b7c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	73fb      	strb	r3, [r7, #15]
          break;
 8009b7a:	e005      	b.n	8009b88 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0ef      	beq.n	8009b68 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009b8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b90:	691a      	ldr	r2, [r3, #16]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	4904      	ldr	r1, [pc, #16]	@ (8009ba8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40021000 	.word	0x40021000
 8009bac:	07ff800f 	.word	0x07ff800f
 8009bb0:	ff9f800f 	.word	0xff9f800f
 8009bb4:	f9ff800f 	.word	0xf9ff800f

08009bb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009bc6:	4b72      	ldr	r3, [pc, #456]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00e      	beq.n	8009bf0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f003 0203 	and.w	r2, r3, #3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d103      	bne.n	8009bea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
       ||
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d142      	bne.n	8009c70 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	73fb      	strb	r3, [r7, #15]
 8009bee:	e03f      	b.n	8009c70 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d018      	beq.n	8009c2a <RCCEx_PLLSAI2_Config+0x72>
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d825      	bhi.n	8009c48 <RCCEx_PLLSAI2_Config+0x90>
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d002      	beq.n	8009c06 <RCCEx_PLLSAI2_Config+0x4e>
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d009      	beq.n	8009c18 <RCCEx_PLLSAI2_Config+0x60>
 8009c04:	e020      	b.n	8009c48 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009c06:	4b62      	ldr	r3, [pc, #392]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d11d      	bne.n	8009c4e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c16:	e01a      	b.n	8009c4e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009c18:	4b5d      	ldr	r3, [pc, #372]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d116      	bne.n	8009c52 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c28:	e013      	b.n	8009c52 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009c2a:	4b59      	ldr	r3, [pc, #356]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10f      	bne.n	8009c56 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009c36:	4b56      	ldr	r3, [pc, #344]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d109      	bne.n	8009c56 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c46:	e006      	b.n	8009c56 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c4c:	e004      	b.n	8009c58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009c4e:	bf00      	nop
 8009c50:	e002      	b.n	8009c58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009c52:	bf00      	nop
 8009c54:	e000      	b.n	8009c58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009c56:	bf00      	nop
    }

    if(status == HAL_OK)
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d108      	bne.n	8009c70 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	f023 0203 	bic.w	r2, r3, #3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4949      	ldr	r1, [pc, #292]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f040 8086 	bne.w	8009d84 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009c78:	4b45      	ldr	r3, [pc, #276]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a44      	ldr	r2, [pc, #272]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c84:	f7fb fe30 	bl	80058e8 <HAL_GetTick>
 8009c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009c8a:	e009      	b.n	8009ca0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009c8c:	f7fb fe2c 	bl	80058e8 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d902      	bls.n	8009ca0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8009c9e:	e005      	b.n	8009cac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1ef      	bne.n	8009c8c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d168      	bne.n	8009d84 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d113      	bne.n	8009ce0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009cb8:	4b35      	ldr	r3, [pc, #212]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009cba:	695a      	ldr	r2, [r3, #20]
 8009cbc:	4b35      	ldr	r3, [pc, #212]	@ (8009d94 <RCCEx_PLLSAI2_Config+0x1dc>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6892      	ldr	r2, [r2, #8]
 8009cc4:	0211      	lsls	r1, r2, #8
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	68d2      	ldr	r2, [r2, #12]
 8009cca:	06d2      	lsls	r2, r2, #27
 8009ccc:	4311      	orrs	r1, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6852      	ldr	r2, [r2, #4]
 8009cd2:	3a01      	subs	r2, #1
 8009cd4:	0112      	lsls	r2, r2, #4
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	492d      	ldr	r1, [pc, #180]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	614b      	str	r3, [r1, #20]
 8009cde:	e02d      	b.n	8009d3c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d115      	bne.n	8009d12 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ce8:	695a      	ldr	r2, [r3, #20]
 8009cea:	4b2b      	ldr	r3, [pc, #172]	@ (8009d98 <RCCEx_PLLSAI2_Config+0x1e0>)
 8009cec:	4013      	ands	r3, r2
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	6892      	ldr	r2, [r2, #8]
 8009cf2:	0211      	lsls	r1, r2, #8
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	6912      	ldr	r2, [r2, #16]
 8009cf8:	0852      	lsrs	r2, r2, #1
 8009cfa:	3a01      	subs	r2, #1
 8009cfc:	0552      	lsls	r2, r2, #21
 8009cfe:	4311      	orrs	r1, r2
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	6852      	ldr	r2, [r2, #4]
 8009d04:	3a01      	subs	r2, #1
 8009d06:	0112      	lsls	r2, r2, #4
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	4921      	ldr	r1, [pc, #132]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	614b      	str	r3, [r1, #20]
 8009d10:	e014      	b.n	8009d3c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009d12:	4b1f      	ldr	r3, [pc, #124]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d14:	695a      	ldr	r2, [r3, #20]
 8009d16:	4b21      	ldr	r3, [pc, #132]	@ (8009d9c <RCCEx_PLLSAI2_Config+0x1e4>)
 8009d18:	4013      	ands	r3, r2
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	6892      	ldr	r2, [r2, #8]
 8009d1e:	0211      	lsls	r1, r2, #8
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	6952      	ldr	r2, [r2, #20]
 8009d24:	0852      	lsrs	r2, r2, #1
 8009d26:	3a01      	subs	r2, #1
 8009d28:	0652      	lsls	r2, r2, #25
 8009d2a:	4311      	orrs	r1, r2
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	6852      	ldr	r2, [r2, #4]
 8009d30:	3a01      	subs	r2, #1
 8009d32:	0112      	lsls	r2, r2, #4
 8009d34:	430a      	orrs	r2, r1
 8009d36:	4916      	ldr	r1, [pc, #88]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009d3c:	4b14      	ldr	r3, [pc, #80]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a13      	ldr	r2, [pc, #76]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d48:	f7fb fdce 	bl	80058e8 <HAL_GetTick>
 8009d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009d4e:	e009      	b.n	8009d64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009d50:	f7fb fdca 	bl	80058e8 <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d902      	bls.n	8009d64 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	73fb      	strb	r3, [r7, #15]
          break;
 8009d62:	e005      	b.n	8009d70 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009d64:	4b0a      	ldr	r3, [pc, #40]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0ef      	beq.n	8009d50 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d106      	bne.n	8009d84 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009d76:	4b06      	ldr	r3, [pc, #24]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d78:	695a      	ldr	r2, [r3, #20]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	4904      	ldr	r1, [pc, #16]	@ (8009d90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	40021000 	.word	0x40021000
 8009d94:	07ff800f 	.word	0x07ff800f
 8009d98:	ff9f800f 	.word	0xff9f800f
 8009d9c:	f9ff800f 	.word	0xf9ff800f

08009da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e095      	b.n	8009ede <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d108      	bne.n	8009dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009dc2:	d009      	beq.n	8009dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	61da      	str	r2, [r3, #28]
 8009dca:	e005      	b.n	8009dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d106      	bne.n	8009df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fb fa0e 	bl	8005214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e18:	d902      	bls.n	8009e20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	e002      	b.n	8009e26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009e2e:	d007      	beq.n	8009e40 <HAL_SPI_Init+0xa0>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e38:	d002      	beq.n	8009e40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009e50:	431a      	orrs	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	431a      	orrs	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e82:	ea42 0103 	orr.w	r1, r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	0c1b      	lsrs	r3, r3, #16
 8009e9c:	f003 0204 	and.w	r2, r3, #4
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea4:	f003 0310 	and.w	r3, r3, #16
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eae:	f003 0308 	and.w	r3, r3, #8
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009ebc:	ea42 0103 	orr.w	r1, r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e042      	b.n	8009f7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7fb f9f8 	bl	8005300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2224      	movs	r2, #36	@ 0x24
 8009f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0201 	bic.w	r2, r2, #1
 8009f26:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fbb3 	bl	800a69c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f8b4 	bl	800a0a4 <UART_SetConfig>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d101      	bne.n	8009f46 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e01b      	b.n	8009f7e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f042 0201 	orr.w	r2, r2, #1
 8009f74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fc32 	bl	800a7e0 <UART_CheckIdleState>
 8009f7c:	4603      	mov	r3, r0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b08a      	sub	sp, #40	@ 0x28
 8009f8a:	af02      	add	r7, sp, #8
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	603b      	str	r3, [r7, #0]
 8009f92:	4613      	mov	r3, r2
 8009f94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f9c:	2b20      	cmp	r3, #32
 8009f9e:	d17b      	bne.n	800a098 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d002      	beq.n	8009fac <HAL_UART_Transmit+0x26>
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e074      	b.n	800a09a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2221      	movs	r2, #33	@ 0x21
 8009fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fc0:	f7fb fc92 	bl	80058e8 <HAL_GetTick>
 8009fc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	88fa      	ldrh	r2, [r7, #6]
 8009fca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	88fa      	ldrh	r2, [r7, #6]
 8009fd2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fde:	d108      	bne.n	8009ff2 <HAL_UART_Transmit+0x6c>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d104      	bne.n	8009ff2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	61bb      	str	r3, [r7, #24]
 8009ff0:	e003      	b.n	8009ffa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ffa:	e030      	b.n	800a05e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	2180      	movs	r1, #128	@ 0x80
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fc94 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2220      	movs	r2, #32
 800a016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e03d      	b.n	800a09a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10b      	bne.n	800a03c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	881a      	ldrh	r2, [r3, #0]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a030:	b292      	uxth	r2, r2
 800a032:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	3302      	adds	r3, #2
 800a038:	61bb      	str	r3, [r7, #24]
 800a03a:	e007      	b.n	800a04c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	781a      	ldrb	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	3301      	adds	r3, #1
 800a04a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a052:	b29b      	uxth	r3, r3
 800a054:	3b01      	subs	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a064:	b29b      	uxth	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1c8      	bne.n	8009ffc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2200      	movs	r2, #0
 800a072:	2140      	movs	r1, #64	@ 0x40
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 fc5d 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2220      	movs	r2, #32
 800a084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	e006      	b.n	800a09a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2220      	movs	r2, #32
 800a090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	e000      	b.n	800a09a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a098:	2302      	movs	r3, #2
  }
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0a8:	b08c      	sub	sp, #48	@ 0x30
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	689a      	ldr	r2, [r3, #8]
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	431a      	orrs	r2, r3
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	4baa      	ldr	r3, [pc, #680]	@ (800a37c <UART_SetConfig+0x2d8>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a9f      	ldr	r2, [pc, #636]	@ (800a380 <UART_SetConfig+0x2dc>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d004      	beq.n	800a110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a10c:	4313      	orrs	r3, r2
 800a10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a11a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	6812      	ldr	r2, [r2, #0]
 800a122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a124:	430b      	orrs	r3, r1
 800a126:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12e:	f023 010f 	bic.w	r1, r3, #15
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	430a      	orrs	r2, r1
 800a13c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a90      	ldr	r2, [pc, #576]	@ (800a384 <UART_SetConfig+0x2e0>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d125      	bne.n	800a194 <UART_SetConfig+0xf0>
 800a148:	4b8f      	ldr	r3, [pc, #572]	@ (800a388 <UART_SetConfig+0x2e4>)
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a14e:	f003 0303 	and.w	r3, r3, #3
 800a152:	2b03      	cmp	r3, #3
 800a154:	d81a      	bhi.n	800a18c <UART_SetConfig+0xe8>
 800a156:	a201      	add	r2, pc, #4	@ (adr r2, 800a15c <UART_SetConfig+0xb8>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a16d 	.word	0x0800a16d
 800a160:	0800a17d 	.word	0x0800a17d
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a185 	.word	0x0800a185
 800a16c:	2301      	movs	r3, #1
 800a16e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a172:	e116      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a174:	2302      	movs	r3, #2
 800a176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a17a:	e112      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a17c:	2304      	movs	r3, #4
 800a17e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a182:	e10e      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a184:	2308      	movs	r3, #8
 800a186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a18a:	e10a      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a18c:	2310      	movs	r3, #16
 800a18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a192:	e106      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a7c      	ldr	r2, [pc, #496]	@ (800a38c <UART_SetConfig+0x2e8>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d138      	bne.n	800a210 <UART_SetConfig+0x16c>
 800a19e:	4b7a      	ldr	r3, [pc, #488]	@ (800a388 <UART_SetConfig+0x2e4>)
 800a1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a4:	f003 030c 	and.w	r3, r3, #12
 800a1a8:	2b0c      	cmp	r3, #12
 800a1aa:	d82d      	bhi.n	800a208 <UART_SetConfig+0x164>
 800a1ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b4 <UART_SetConfig+0x110>)
 800a1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b2:	bf00      	nop
 800a1b4:	0800a1e9 	.word	0x0800a1e9
 800a1b8:	0800a209 	.word	0x0800a209
 800a1bc:	0800a209 	.word	0x0800a209
 800a1c0:	0800a209 	.word	0x0800a209
 800a1c4:	0800a1f9 	.word	0x0800a1f9
 800a1c8:	0800a209 	.word	0x0800a209
 800a1cc:	0800a209 	.word	0x0800a209
 800a1d0:	0800a209 	.word	0x0800a209
 800a1d4:	0800a1f1 	.word	0x0800a1f1
 800a1d8:	0800a209 	.word	0x0800a209
 800a1dc:	0800a209 	.word	0x0800a209
 800a1e0:	0800a209 	.word	0x0800a209
 800a1e4:	0800a201 	.word	0x0800a201
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1ee:	e0d8      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f6:	e0d4      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1fe:	e0d0      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a200:	2308      	movs	r3, #8
 800a202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a206:	e0cc      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a208:	2310      	movs	r3, #16
 800a20a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a20e:	e0c8      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a5e      	ldr	r2, [pc, #376]	@ (800a390 <UART_SetConfig+0x2ec>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d125      	bne.n	800a266 <UART_SetConfig+0x1c2>
 800a21a:	4b5b      	ldr	r3, [pc, #364]	@ (800a388 <UART_SetConfig+0x2e4>)
 800a21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a220:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a224:	2b30      	cmp	r3, #48	@ 0x30
 800a226:	d016      	beq.n	800a256 <UART_SetConfig+0x1b2>
 800a228:	2b30      	cmp	r3, #48	@ 0x30
 800a22a:	d818      	bhi.n	800a25e <UART_SetConfig+0x1ba>
 800a22c:	2b20      	cmp	r3, #32
 800a22e:	d00a      	beq.n	800a246 <UART_SetConfig+0x1a2>
 800a230:	2b20      	cmp	r3, #32
 800a232:	d814      	bhi.n	800a25e <UART_SetConfig+0x1ba>
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <UART_SetConfig+0x19a>
 800a238:	2b10      	cmp	r3, #16
 800a23a:	d008      	beq.n	800a24e <UART_SetConfig+0x1aa>
 800a23c:	e00f      	b.n	800a25e <UART_SetConfig+0x1ba>
 800a23e:	2300      	movs	r3, #0
 800a240:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a244:	e0ad      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a246:	2302      	movs	r3, #2
 800a248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a24c:	e0a9      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a24e:	2304      	movs	r3, #4
 800a250:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a254:	e0a5      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a256:	2308      	movs	r3, #8
 800a258:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a25c:	e0a1      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a25e:	2310      	movs	r3, #16
 800a260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a264:	e09d      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a4a      	ldr	r2, [pc, #296]	@ (800a394 <UART_SetConfig+0x2f0>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d125      	bne.n	800a2bc <UART_SetConfig+0x218>
 800a270:	4b45      	ldr	r3, [pc, #276]	@ (800a388 <UART_SetConfig+0x2e4>)
 800a272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a276:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a27a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a27c:	d016      	beq.n	800a2ac <UART_SetConfig+0x208>
 800a27e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a280:	d818      	bhi.n	800a2b4 <UART_SetConfig+0x210>
 800a282:	2b80      	cmp	r3, #128	@ 0x80
 800a284:	d00a      	beq.n	800a29c <UART_SetConfig+0x1f8>
 800a286:	2b80      	cmp	r3, #128	@ 0x80
 800a288:	d814      	bhi.n	800a2b4 <UART_SetConfig+0x210>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d002      	beq.n	800a294 <UART_SetConfig+0x1f0>
 800a28e:	2b40      	cmp	r3, #64	@ 0x40
 800a290:	d008      	beq.n	800a2a4 <UART_SetConfig+0x200>
 800a292:	e00f      	b.n	800a2b4 <UART_SetConfig+0x210>
 800a294:	2300      	movs	r3, #0
 800a296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a29a:	e082      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a29c:	2302      	movs	r3, #2
 800a29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a2:	e07e      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a2a4:	2304      	movs	r3, #4
 800a2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2aa:	e07a      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a2ac:	2308      	movs	r3, #8
 800a2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b2:	e076      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a2b4:	2310      	movs	r3, #16
 800a2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ba:	e072      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a35      	ldr	r2, [pc, #212]	@ (800a398 <UART_SetConfig+0x2f4>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d12a      	bne.n	800a31c <UART_SetConfig+0x278>
 800a2c6:	4b30      	ldr	r3, [pc, #192]	@ (800a388 <UART_SetConfig+0x2e4>)
 800a2c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2d4:	d01a      	beq.n	800a30c <UART_SetConfig+0x268>
 800a2d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2da:	d81b      	bhi.n	800a314 <UART_SetConfig+0x270>
 800a2dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e0:	d00c      	beq.n	800a2fc <UART_SetConfig+0x258>
 800a2e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e6:	d815      	bhi.n	800a314 <UART_SetConfig+0x270>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <UART_SetConfig+0x250>
 800a2ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2f0:	d008      	beq.n	800a304 <UART_SetConfig+0x260>
 800a2f2:	e00f      	b.n	800a314 <UART_SetConfig+0x270>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fa:	e052      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a302:	e04e      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a304:	2304      	movs	r3, #4
 800a306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a30a:	e04a      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a30c:	2308      	movs	r3, #8
 800a30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a312:	e046      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a314:	2310      	movs	r3, #16
 800a316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a31a:	e042      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a17      	ldr	r2, [pc, #92]	@ (800a380 <UART_SetConfig+0x2dc>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d13a      	bne.n	800a39c <UART_SetConfig+0x2f8>
 800a326:	4b18      	ldr	r3, [pc, #96]	@ (800a388 <UART_SetConfig+0x2e4>)
 800a328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a32c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a330:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a334:	d01a      	beq.n	800a36c <UART_SetConfig+0x2c8>
 800a336:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a33a:	d81b      	bhi.n	800a374 <UART_SetConfig+0x2d0>
 800a33c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a340:	d00c      	beq.n	800a35c <UART_SetConfig+0x2b8>
 800a342:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a346:	d815      	bhi.n	800a374 <UART_SetConfig+0x2d0>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <UART_SetConfig+0x2b0>
 800a34c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a350:	d008      	beq.n	800a364 <UART_SetConfig+0x2c0>
 800a352:	e00f      	b.n	800a374 <UART_SetConfig+0x2d0>
 800a354:	2300      	movs	r3, #0
 800a356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35a:	e022      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a35c:	2302      	movs	r3, #2
 800a35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a362:	e01e      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a364:	2304      	movs	r3, #4
 800a366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a36a:	e01a      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a36c:	2308      	movs	r3, #8
 800a36e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a372:	e016      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a374:	2310      	movs	r3, #16
 800a376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a37a:	e012      	b.n	800a3a2 <UART_SetConfig+0x2fe>
 800a37c:	cfff69f3 	.word	0xcfff69f3
 800a380:	40008000 	.word	0x40008000
 800a384:	40013800 	.word	0x40013800
 800a388:	40021000 	.word	0x40021000
 800a38c:	40004400 	.word	0x40004400
 800a390:	40004800 	.word	0x40004800
 800a394:	40004c00 	.word	0x40004c00
 800a398:	40005000 	.word	0x40005000
 800a39c:	2310      	movs	r3, #16
 800a39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4aae      	ldr	r2, [pc, #696]	@ (800a660 <UART_SetConfig+0x5bc>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	f040 8097 	bne.w	800a4dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3b2:	2b08      	cmp	r3, #8
 800a3b4:	d823      	bhi.n	800a3fe <UART_SetConfig+0x35a>
 800a3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3bc <UART_SetConfig+0x318>)
 800a3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3bc:	0800a3e1 	.word	0x0800a3e1
 800a3c0:	0800a3ff 	.word	0x0800a3ff
 800a3c4:	0800a3e9 	.word	0x0800a3e9
 800a3c8:	0800a3ff 	.word	0x0800a3ff
 800a3cc:	0800a3ef 	.word	0x0800a3ef
 800a3d0:	0800a3ff 	.word	0x0800a3ff
 800a3d4:	0800a3ff 	.word	0x0800a3ff
 800a3d8:	0800a3ff 	.word	0x0800a3ff
 800a3dc:	0800a3f7 	.word	0x0800a3f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3e0:	f7fe feca 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800a3e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3e6:	e010      	b.n	800a40a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3e8:	4b9e      	ldr	r3, [pc, #632]	@ (800a664 <UART_SetConfig+0x5c0>)
 800a3ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3ec:	e00d      	b.n	800a40a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3ee:	f7fe fe2b 	bl	8009048 <HAL_RCC_GetSysClockFreq>
 800a3f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3f4:	e009      	b.n	800a40a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3fc:	e005      	b.n	800a40a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8130 	beq.w	800a672 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a416:	4a94      	ldr	r2, [pc, #592]	@ (800a668 <UART_SetConfig+0x5c4>)
 800a418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a41c:	461a      	mov	r2, r3
 800a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a420:	fbb3 f3f2 	udiv	r3, r3, r2
 800a424:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	4613      	mov	r3, r2
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	4413      	add	r3, r2
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	429a      	cmp	r2, r3
 800a434:	d305      	bcc.n	800a442 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d903      	bls.n	800a44a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a448:	e113      	b.n	800a672 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44c:	2200      	movs	r2, #0
 800a44e:	60bb      	str	r3, [r7, #8]
 800a450:	60fa      	str	r2, [r7, #12]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a456:	4a84      	ldr	r2, [pc, #528]	@ (800a668 <UART_SetConfig+0x5c4>)
 800a458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	2200      	movs	r2, #0
 800a460:	603b      	str	r3, [r7, #0]
 800a462:	607a      	str	r2, [r7, #4]
 800a464:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a46c:	f7f6 fc04 	bl	8000c78 <__aeabi_uldivmod>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4610      	mov	r0, r2
 800a476:	4619      	mov	r1, r3
 800a478:	f04f 0200 	mov.w	r2, #0
 800a47c:	f04f 0300 	mov.w	r3, #0
 800a480:	020b      	lsls	r3, r1, #8
 800a482:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a486:	0202      	lsls	r2, r0, #8
 800a488:	6979      	ldr	r1, [r7, #20]
 800a48a:	6849      	ldr	r1, [r1, #4]
 800a48c:	0849      	lsrs	r1, r1, #1
 800a48e:	2000      	movs	r0, #0
 800a490:	460c      	mov	r4, r1
 800a492:	4605      	mov	r5, r0
 800a494:	eb12 0804 	adds.w	r8, r2, r4
 800a498:	eb43 0905 	adc.w	r9, r3, r5
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	469a      	mov	sl, r3
 800a4a4:	4693      	mov	fp, r2
 800a4a6:	4652      	mov	r2, sl
 800a4a8:	465b      	mov	r3, fp
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	f7f6 fbe3 	bl	8000c78 <__aeabi_uldivmod>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4c0:	d308      	bcc.n	800a4d4 <UART_SetConfig+0x430>
 800a4c2:	6a3b      	ldr	r3, [r7, #32]
 800a4c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4c8:	d204      	bcs.n	800a4d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6a3a      	ldr	r2, [r7, #32]
 800a4d0:	60da      	str	r2, [r3, #12]
 800a4d2:	e0ce      	b.n	800a672 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4da:	e0ca      	b.n	800a672 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4e4:	d166      	bne.n	800a5b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a4e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a4ea:	2b08      	cmp	r3, #8
 800a4ec:	d827      	bhi.n	800a53e <UART_SetConfig+0x49a>
 800a4ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f4 <UART_SetConfig+0x450>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a519 	.word	0x0800a519
 800a4f8:	0800a521 	.word	0x0800a521
 800a4fc:	0800a529 	.word	0x0800a529
 800a500:	0800a53f 	.word	0x0800a53f
 800a504:	0800a52f 	.word	0x0800a52f
 800a508:	0800a53f 	.word	0x0800a53f
 800a50c:	0800a53f 	.word	0x0800a53f
 800a510:	0800a53f 	.word	0x0800a53f
 800a514:	0800a537 	.word	0x0800a537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a518:	f7fe fe2e 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800a51c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a51e:	e014      	b.n	800a54a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a520:	f7fe fe40 	bl	80091a4 <HAL_RCC_GetPCLK2Freq>
 800a524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a526:	e010      	b.n	800a54a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a528:	4b4e      	ldr	r3, [pc, #312]	@ (800a664 <UART_SetConfig+0x5c0>)
 800a52a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a52c:	e00d      	b.n	800a54a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a52e:	f7fe fd8b 	bl	8009048 <HAL_RCC_GetSysClockFreq>
 800a532:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a534:	e009      	b.n	800a54a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a53a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a53c:	e005      	b.n	800a54a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a53e:	2300      	movs	r3, #0
 800a540:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 8090 	beq.w	800a672 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a556:	4a44      	ldr	r2, [pc, #272]	@ (800a668 <UART_SetConfig+0x5c4>)
 800a558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a55c:	461a      	mov	r2, r3
 800a55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a560:	fbb3 f3f2 	udiv	r3, r3, r2
 800a564:	005a      	lsls	r2, r3, #1
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	085b      	lsrs	r3, r3, #1
 800a56c:	441a      	add	r2, r3
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	fbb2 f3f3 	udiv	r3, r2, r3
 800a576:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a578:	6a3b      	ldr	r3, [r7, #32]
 800a57a:	2b0f      	cmp	r3, #15
 800a57c:	d916      	bls.n	800a5ac <UART_SetConfig+0x508>
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a584:	d212      	bcs.n	800a5ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	f023 030f 	bic.w	r3, r3, #15
 800a58e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a590:	6a3b      	ldr	r3, [r7, #32]
 800a592:	085b      	lsrs	r3, r3, #1
 800a594:	b29b      	uxth	r3, r3
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	8bfb      	ldrh	r3, [r7, #30]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	8bfa      	ldrh	r2, [r7, #30]
 800a5a8:	60da      	str	r2, [r3, #12]
 800a5aa:	e062      	b.n	800a672 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a5b2:	e05e      	b.n	800a672 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a5b8:	2b08      	cmp	r3, #8
 800a5ba:	d828      	bhi.n	800a60e <UART_SetConfig+0x56a>
 800a5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c4 <UART_SetConfig+0x520>)
 800a5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c2:	bf00      	nop
 800a5c4:	0800a5e9 	.word	0x0800a5e9
 800a5c8:	0800a5f1 	.word	0x0800a5f1
 800a5cc:	0800a5f9 	.word	0x0800a5f9
 800a5d0:	0800a60f 	.word	0x0800a60f
 800a5d4:	0800a5ff 	.word	0x0800a5ff
 800a5d8:	0800a60f 	.word	0x0800a60f
 800a5dc:	0800a60f 	.word	0x0800a60f
 800a5e0:	0800a60f 	.word	0x0800a60f
 800a5e4:	0800a607 	.word	0x0800a607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5e8:	f7fe fdc6 	bl	8009178 <HAL_RCC_GetPCLK1Freq>
 800a5ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5ee:	e014      	b.n	800a61a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5f0:	f7fe fdd8 	bl	80091a4 <HAL_RCC_GetPCLK2Freq>
 800a5f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5f6:	e010      	b.n	800a61a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a664 <UART_SetConfig+0x5c0>)
 800a5fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5fc:	e00d      	b.n	800a61a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5fe:	f7fe fd23 	bl	8009048 <HAL_RCC_GetSysClockFreq>
 800a602:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a604:	e009      	b.n	800a61a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a60a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a60c:	e005      	b.n	800a61a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a60e:	2300      	movs	r3, #0
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a618:	bf00      	nop
    }

    if (pclk != 0U)
 800a61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d028      	beq.n	800a672 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a624:	4a10      	ldr	r2, [pc, #64]	@ (800a668 <UART_SetConfig+0x5c4>)
 800a626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	085b      	lsrs	r3, r3, #1
 800a638:	441a      	add	r2, r3
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a642:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	2b0f      	cmp	r3, #15
 800a648:	d910      	bls.n	800a66c <UART_SetConfig+0x5c8>
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a650:	d20c      	bcs.n	800a66c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	b29a      	uxth	r2, r3
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60da      	str	r2, [r3, #12]
 800a65c:	e009      	b.n	800a672 <UART_SetConfig+0x5ce>
 800a65e:	bf00      	nop
 800a660:	40008000 	.word	0x40008000
 800a664:	00f42400 	.word	0x00f42400
 800a668:	08024c38 	.word	0x08024c38
      }
      else
      {
        ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2201      	movs	r2, #1
 800a676:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	2200      	movs	r2, #0
 800a686:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2200      	movs	r2, #0
 800a68c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a68e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a692:	4618      	mov	r0, r3
 800a694:	3730      	adds	r7, #48	@ 0x30
 800a696:	46bd      	mov	sp, r7
 800a698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a69c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a8:	f003 0308 	and.w	r3, r3, #8
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00a      	beq.n	800a6c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	430a      	orrs	r2, r1
 800a6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00a      	beq.n	800a70a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	430a      	orrs	r2, r1
 800a72a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00a      	beq.n	800a74e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	430a      	orrs	r2, r1
 800a76e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01a      	beq.n	800a7b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a79a:	d10a      	bne.n	800a7b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	605a      	str	r2, [r3, #4]
  }
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b098      	sub	sp, #96	@ 0x60
 800a7e4:	af02      	add	r7, sp, #8
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7f0:	f7fb f87a 	bl	80058e8 <HAL_GetTick>
 800a7f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0308 	and.w	r3, r3, #8
 800a800:	2b08      	cmp	r3, #8
 800a802:	d12f      	bne.n	800a864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a804:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a80c:	2200      	movs	r2, #0
 800a80e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f88e 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d022      	beq.n	800a864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a832:	653b      	str	r3, [r7, #80]	@ 0x50
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	461a      	mov	r2, r3
 800a83a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a83c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a83e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e6      	bne.n	800a81e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2220      	movs	r2, #32
 800a854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e063      	b.n	800a92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 0304 	and.w	r3, r3, #4
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d149      	bne.n	800a906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a872:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a87a:	2200      	movs	r2, #0
 800a87c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f857 	bl	800a934 <UART_WaitOnFlagUntilTimeout>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d03c      	beq.n	800a906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a894:	e853 3f00 	ldrex	r3, [r3]
 800a898:	623b      	str	r3, [r7, #32]
   return(result);
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b2:	e841 2300 	strex	r3, r2, [r1]
 800a8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1e6      	bne.n	800a88c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f023 0301 	bic.w	r3, r3, #1
 800a8d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8de:	61fa      	str	r2, [r7, #28]
 800a8e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	69b9      	ldr	r1, [r7, #24]
 800a8e4:	69fa      	ldr	r2, [r7, #28]
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e5      	bne.n	800a8be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e012      	b.n	800a92c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2220      	movs	r2, #32
 800a90a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2220      	movs	r2, #32
 800a912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3758      	adds	r7, #88	@ 0x58
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	4613      	mov	r3, r2
 800a942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a944:	e04f      	b.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a94c:	d04b      	beq.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a94e:	f7fa ffcb 	bl	80058e8 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d302      	bcc.n	800a964 <UART_WaitOnFlagUntilTimeout+0x30>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e04e      	b.n	800aa06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0304 	and.w	r3, r3, #4
 800a972:	2b00      	cmp	r3, #0
 800a974:	d037      	beq.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2b80      	cmp	r3, #128	@ 0x80
 800a97a:	d034      	beq.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2b40      	cmp	r3, #64	@ 0x40
 800a980:	d031      	beq.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69db      	ldr	r3, [r3, #28]
 800a988:	f003 0308 	and.w	r3, r3, #8
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d110      	bne.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2208      	movs	r2, #8
 800a996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f838 	bl	800aa0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2208      	movs	r2, #8
 800a9a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e029      	b.n	800aa06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9c0:	d111      	bne.n	800a9e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 f81e 	bl	800aa0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e00f      	b.n	800aa06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	69da      	ldr	r2, [r3, #28]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	bf0c      	ite	eq
 800a9f6:	2301      	moveq	r3, #1
 800a9f8:	2300      	movne	r3, #0
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d0a0      	beq.n	800a946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b095      	sub	sp, #84	@ 0x54
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	461a      	mov	r2, r3
 800aa32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa34:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa3c:	e841 2300 	strex	r3, r2, [r1]
 800aa40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1e6      	bne.n	800aa16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	6a3b      	ldr	r3, [r7, #32]
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa5e:	f023 0301 	bic.w	r3, r3, #1
 800aa62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3308      	adds	r3, #8
 800aa6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e3      	bne.n	800aa48 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d118      	bne.n	800aaba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f023 0310 	bic.w	r3, r3, #16
 800aa9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaa6:	61bb      	str	r3, [r7, #24]
 800aaa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaaa:	6979      	ldr	r1, [r7, #20]
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	e841 2300 	strex	r3, r2, [r1]
 800aab2:	613b      	str	r3, [r7, #16]
   return(result);
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1e6      	bne.n	800aa88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aace:	bf00      	nop
 800aad0:	3754      	adds	r7, #84	@ 0x54
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aada:	b480      	push	{r7}
 800aadc:	b085      	sub	sp, #20
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d101      	bne.n	800aaf0 <HAL_UARTEx_DisableFifoMode+0x16>
 800aaec:	2302      	movs	r3, #2
 800aaee:	e027      	b.n	800ab40 <HAL_UARTEx_DisableFifoMode+0x66>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2224      	movs	r2, #36	@ 0x24
 800aafc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f022 0201 	bic.w	r2, r2, #1
 800ab16:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2220      	movs	r2, #32
 800ab32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d101      	bne.n	800ab64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab60:	2302      	movs	r3, #2
 800ab62:	e02d      	b.n	800abc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2224      	movs	r2, #36	@ 0x24
 800ab70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f022 0201 	bic.w	r2, r2, #1
 800ab8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f84f 	bl	800ac44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2220      	movs	r2, #32
 800abb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d101      	bne.n	800abe0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800abdc:	2302      	movs	r3, #2
 800abde:	e02d      	b.n	800ac3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2224      	movs	r2, #36	@ 0x24
 800abec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f022 0201 	bic.w	r2, r2, #1
 800ac06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f811 	bl	800ac44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2220      	movs	r2, #32
 800ac2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d108      	bne.n	800ac66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac64:	e031      	b.n	800acca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac66:	2308      	movs	r3, #8
 800ac68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	0e5b      	lsrs	r3, r3, #25
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	f003 0307 	and.w	r3, r3, #7
 800ac7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	0f5b      	lsrs	r3, r3, #29
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	7b3a      	ldrb	r2, [r7, #12]
 800ac92:	4911      	ldr	r1, [pc, #68]	@ (800acd8 <UARTEx_SetNbDataToProcess+0x94>)
 800ac94:	5c8a      	ldrb	r2, [r1, r2]
 800ac96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac9a:	7b3a      	ldrb	r2, [r7, #12]
 800ac9c:	490f      	ldr	r1, [pc, #60]	@ (800acdc <UARTEx_SetNbDataToProcess+0x98>)
 800ac9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aca0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acac:	7bfb      	ldrb	r3, [r7, #15]
 800acae:	7b7a      	ldrb	r2, [r7, #13]
 800acb0:	4909      	ldr	r1, [pc, #36]	@ (800acd8 <UARTEx_SetNbDataToProcess+0x94>)
 800acb2:	5c8a      	ldrb	r2, [r1, r2]
 800acb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800acb8:	7b7a      	ldrb	r2, [r7, #13]
 800acba:	4908      	ldr	r1, [pc, #32]	@ (800acdc <UARTEx_SetNbDataToProcess+0x98>)
 800acbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	08024c50 	.word	0x08024c50
 800acdc:	08024c58 	.word	0x08024c58

0800ace0 <__NVIC_SetPriority>:
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	6039      	str	r1, [r7, #0]
 800acea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	db0a      	blt.n	800ad0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	490c      	ldr	r1, [pc, #48]	@ (800ad2c <__NVIC_SetPriority+0x4c>)
 800acfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acfe:	0112      	lsls	r2, r2, #4
 800ad00:	b2d2      	uxtb	r2, r2
 800ad02:	440b      	add	r3, r1
 800ad04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ad08:	e00a      	b.n	800ad20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	4908      	ldr	r1, [pc, #32]	@ (800ad30 <__NVIC_SetPriority+0x50>)
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	3b04      	subs	r3, #4
 800ad18:	0112      	lsls	r2, r2, #4
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	761a      	strb	r2, [r3, #24]
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	e000e100 	.word	0xe000e100
 800ad30:	e000ed00 	.word	0xe000ed00

0800ad34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad38:	2100      	movs	r1, #0
 800ad3a:	f06f 0004 	mvn.w	r0, #4
 800ad3e:	f7ff ffcf 	bl	800ace0 <__NVIC_SetPriority>
#endif
}
 800ad42:	bf00      	nop
 800ad44:	bd80      	pop	{r7, pc}
	...

0800ad48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad4e:	f3ef 8305 	mrs	r3, IPSR
 800ad52:	603b      	str	r3, [r7, #0]
  return(result);
 800ad54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad5a:	f06f 0305 	mvn.w	r3, #5
 800ad5e:	607b      	str	r3, [r7, #4]
 800ad60:	e00c      	b.n	800ad7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad62:	4b0a      	ldr	r3, [pc, #40]	@ (800ad8c <osKernelInitialize+0x44>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d105      	bne.n	800ad76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad6a:	4b08      	ldr	r3, [pc, #32]	@ (800ad8c <osKernelInitialize+0x44>)
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	607b      	str	r3, [r7, #4]
 800ad74:	e002      	b.n	800ad7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad7c:	687b      	ldr	r3, [r7, #4]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	2001c868 	.word	0x2001c868

0800ad90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad96:	f3ef 8305 	mrs	r3, IPSR
 800ad9a:	603b      	str	r3, [r7, #0]
  return(result);
 800ad9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d003      	beq.n	800adaa <osKernelStart+0x1a>
    stat = osErrorISR;
 800ada2:	f06f 0305 	mvn.w	r3, #5
 800ada6:	607b      	str	r3, [r7, #4]
 800ada8:	e010      	b.n	800adcc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800adaa:	4b0b      	ldr	r3, [pc, #44]	@ (800add8 <osKernelStart+0x48>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d109      	bne.n	800adc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800adb2:	f7ff ffbf 	bl	800ad34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800adb6:	4b08      	ldr	r3, [pc, #32]	@ (800add8 <osKernelStart+0x48>)
 800adb8:	2202      	movs	r2, #2
 800adba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800adbc:	f001 fc7a 	bl	800c6b4 <vTaskStartScheduler>
      stat = osOK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	607b      	str	r3, [r7, #4]
 800adc4:	e002      	b.n	800adcc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800adc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800adcc:	687b      	ldr	r3, [r7, #4]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	2001c868 	.word	0x2001c868

0800addc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800addc:	b580      	push	{r7, lr}
 800adde:	b08e      	sub	sp, #56	@ 0x38
 800ade0:	af04      	add	r7, sp, #16
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adec:	f3ef 8305 	mrs	r3, IPSR
 800adf0:	617b      	str	r3, [r7, #20]
  return(result);
 800adf2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d17e      	bne.n	800aef6 <osThreadNew+0x11a>
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d07b      	beq.n	800aef6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800adfe:	2380      	movs	r3, #128	@ 0x80
 800ae00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae02:	2318      	movs	r3, #24
 800ae04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ae0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d045      	beq.n	800aea2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d002      	beq.n	800ae24 <osThreadNew+0x48>
        name = attr->name;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d008      	beq.n	800ae4a <osThreadNew+0x6e>
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	2b38      	cmp	r3, #56	@ 0x38
 800ae3c:	d805      	bhi.n	800ae4a <osThreadNew+0x6e>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <osThreadNew+0x72>
        return (NULL);
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e054      	b.n	800aef8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	089b      	lsrs	r3, r3, #2
 800ae5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00e      	beq.n	800ae84 <osThreadNew+0xa8>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	2b5b      	cmp	r3, #91	@ 0x5b
 800ae6c:	d90a      	bls.n	800ae84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d006      	beq.n	800ae84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d002      	beq.n	800ae84 <osThreadNew+0xa8>
        mem = 1;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	61bb      	str	r3, [r7, #24]
 800ae82:	e010      	b.n	800aea6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10c      	bne.n	800aea6 <osThreadNew+0xca>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d108      	bne.n	800aea6 <osThreadNew+0xca>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <osThreadNew+0xca>
          mem = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	e001      	b.n	800aea6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d110      	bne.n	800aece <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aeb4:	9202      	str	r2, [sp, #8]
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	6a3a      	ldr	r2, [r7, #32]
 800aec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f001 fa50 	bl	800c368 <xTaskCreateStatic>
 800aec8:	4603      	mov	r3, r0
 800aeca:	613b      	str	r3, [r7, #16]
 800aecc:	e013      	b.n	800aef6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d110      	bne.n	800aef6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	f107 0310 	add.w	r3, r7, #16
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f001 fa9e 	bl	800c428 <xTaskCreate>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d001      	beq.n	800aef6 <osThreadNew+0x11a>
            hTask = NULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aef6:	693b      	ldr	r3, [r7, #16]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3728      	adds	r7, #40	@ 0x28
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800af00:	b580      	push	{r7, lr}
 800af02:	b08a      	sub	sp, #40	@ 0x28
 800af04:	af02      	add	r7, sp, #8
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800af0c:	2300      	movs	r3, #0
 800af0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af10:	f3ef 8305 	mrs	r3, IPSR
 800af14:	613b      	str	r3, [r7, #16]
  return(result);
 800af16:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d175      	bne.n	800b008 <osSemaphoreNew+0x108>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d072      	beq.n	800b008 <osSemaphoreNew+0x108>
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	429a      	cmp	r2, r3
 800af28:	d86e      	bhi.n	800b008 <osSemaphoreNew+0x108>
    mem = -1;
 800af2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d015      	beq.n	800af62 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d006      	beq.n	800af4c <osSemaphoreNew+0x4c>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	2b4f      	cmp	r3, #79	@ 0x4f
 800af44:	d902      	bls.n	800af4c <osSemaphoreNew+0x4c>
        mem = 1;
 800af46:	2301      	movs	r3, #1
 800af48:	61bb      	str	r3, [r7, #24]
 800af4a:	e00c      	b.n	800af66 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d108      	bne.n	800af66 <osSemaphoreNew+0x66>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d104      	bne.n	800af66 <osSemaphoreNew+0x66>
          mem = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	61bb      	str	r3, [r7, #24]
 800af60:	e001      	b.n	800af66 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af6c:	d04c      	beq.n	800b008 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d128      	bne.n	800afc6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d10a      	bne.n	800af90 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	2203      	movs	r2, #3
 800af80:	9200      	str	r2, [sp, #0]
 800af82:	2200      	movs	r2, #0
 800af84:	2100      	movs	r1, #0
 800af86:	2001      	movs	r0, #1
 800af88:	f000 fa2c 	bl	800b3e4 <xQueueGenericCreateStatic>
 800af8c:	61f8      	str	r0, [r7, #28]
 800af8e:	e005      	b.n	800af9c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800af90:	2203      	movs	r2, #3
 800af92:	2100      	movs	r1, #0
 800af94:	2001      	movs	r0, #1
 800af96:	f000 faa2 	bl	800b4de <xQueueGenericCreate>
 800af9a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d022      	beq.n	800afe8 <osSemaphoreNew+0xe8>
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d01f      	beq.n	800afe8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800afa8:	2300      	movs	r3, #0
 800afaa:	2200      	movs	r2, #0
 800afac:	2100      	movs	r1, #0
 800afae:	69f8      	ldr	r0, [r7, #28]
 800afb0:	f000 fb62 	bl	800b678 <xQueueGenericSend>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d016      	beq.n	800afe8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800afba:	69f8      	ldr	r0, [r7, #28]
 800afbc:	f001 f800 	bl	800bfc0 <vQueueDelete>
            hSemaphore = NULL;
 800afc0:	2300      	movs	r3, #0
 800afc2:	61fb      	str	r3, [r7, #28]
 800afc4:	e010      	b.n	800afe8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d108      	bne.n	800afde <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	461a      	mov	r2, r3
 800afd2:	68b9      	ldr	r1, [r7, #8]
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 fae0 	bl	800b59a <xQueueCreateCountingSemaphoreStatic>
 800afda:	61f8      	str	r0, [r7, #28]
 800afdc:	e004      	b.n	800afe8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800afde:	68b9      	ldr	r1, [r7, #8]
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 fb13 	bl	800b60c <xQueueCreateCountingSemaphore>
 800afe6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00c      	beq.n	800b008 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d003      	beq.n	800affc <osSemaphoreNew+0xfc>
          name = attr->name;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	617b      	str	r3, [r7, #20]
 800affa:	e001      	b.n	800b000 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800affc:	2300      	movs	r3, #0
 800affe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b000:	6979      	ldr	r1, [r7, #20]
 800b002:	69f8      	ldr	r0, [r7, #28]
 800b004:	f001 f928 	bl	800c258 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b008:	69fb      	ldr	r3, [r7, #28]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3720      	adds	r7, #32
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d103      	bne.n	800b034 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b02c:	f06f 0303 	mvn.w	r3, #3
 800b030:	617b      	str	r3, [r7, #20]
 800b032:	e039      	b.n	800b0a8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b034:	f3ef 8305 	mrs	r3, IPSR
 800b038:	60fb      	str	r3, [r7, #12]
  return(result);
 800b03a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d022      	beq.n	800b086 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b046:	f06f 0303 	mvn.w	r3, #3
 800b04a:	617b      	str	r3, [r7, #20]
 800b04c:	e02c      	b.n	800b0a8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b04e:	2300      	movs	r3, #0
 800b050:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b052:	f107 0308 	add.w	r3, r7, #8
 800b056:	461a      	mov	r2, r3
 800b058:	2100      	movs	r1, #0
 800b05a:	6938      	ldr	r0, [r7, #16]
 800b05c:	f000 ff2e 	bl	800bebc <xQueueReceiveFromISR>
 800b060:	4603      	mov	r3, r0
 800b062:	2b01      	cmp	r3, #1
 800b064:	d003      	beq.n	800b06e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b066:	f06f 0302 	mvn.w	r3, #2
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	e01c      	b.n	800b0a8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d019      	beq.n	800b0a8 <osSemaphoreAcquire+0x94>
 800b074:	4b0f      	ldr	r3, [pc, #60]	@ (800b0b4 <osSemaphoreAcquire+0xa0>)
 800b076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	e010      	b.n	800b0a8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6938      	ldr	r0, [r7, #16]
 800b08a:	f000 fe07 	bl	800bc9c <xQueueSemaphoreTake>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b01      	cmp	r3, #1
 800b092:	d009      	beq.n	800b0a8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b09a:	f06f 0301 	mvn.w	r3, #1
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e002      	b.n	800b0a8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b0a2:	f06f 0302 	mvn.w	r3, #2
 800b0a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b0a8:	697b      	ldr	r3, [r7, #20]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	e000ed04 	.word	0xe000ed04

0800b0b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d103      	bne.n	800b0d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b0ce:	f06f 0303 	mvn.w	r3, #3
 800b0d2:	617b      	str	r3, [r7, #20]
 800b0d4:	e02c      	b.n	800b130 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0d6:	f3ef 8305 	mrs	r3, IPSR
 800b0da:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d01a      	beq.n	800b118 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b0e6:	f107 0308 	add.w	r3, r7, #8
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6938      	ldr	r0, [r7, #16]
 800b0ee:	f000 fc63 	bl	800b9b8 <xQueueGiveFromISR>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d003      	beq.n	800b100 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b0f8:	f06f 0302 	mvn.w	r3, #2
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	e017      	b.n	800b130 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d014      	beq.n	800b130 <osSemaphoreRelease+0x78>
 800b106:	4b0d      	ldr	r3, [pc, #52]	@ (800b13c <osSemaphoreRelease+0x84>)
 800b108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	e00b      	b.n	800b130 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b118:	2300      	movs	r3, #0
 800b11a:	2200      	movs	r2, #0
 800b11c:	2100      	movs	r1, #0
 800b11e:	6938      	ldr	r0, [r7, #16]
 800b120:	f000 faaa 	bl	800b678 <xQueueGenericSend>
 800b124:	4603      	mov	r3, r0
 800b126:	2b01      	cmp	r3, #1
 800b128:	d002      	beq.n	800b130 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b12a:	f06f 0302 	mvn.w	r3, #2
 800b12e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b130:	697b      	ldr	r3, [r7, #20]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	e000ed04 	.word	0xe000ed04

0800b140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4a07      	ldr	r2, [pc, #28]	@ (800b16c <vApplicationGetIdleTaskMemory+0x2c>)
 800b150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	4a06      	ldr	r2, [pc, #24]	@ (800b170 <vApplicationGetIdleTaskMemory+0x30>)
 800b156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2280      	movs	r2, #128	@ 0x80
 800b15c:	601a      	str	r2, [r3, #0]
}
 800b15e:	bf00      	nop
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	2001c86c 	.word	0x2001c86c
 800b170:	2001c8c8 	.word	0x2001c8c8

0800b174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4a07      	ldr	r2, [pc, #28]	@ (800b1a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	4a06      	ldr	r2, [pc, #24]	@ (800b1a4 <vApplicationGetTimerTaskMemory+0x30>)
 800b18a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b192:	601a      	str	r2, [r3, #0]
}
 800b194:	bf00      	nop
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	2001cac8 	.word	0x2001cac8
 800b1a4:	2001cb24 	.word	0x2001cb24

0800b1a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f103 0208 	add.w	r2, r3, #8
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f103 0208 	add.w	r2, r3, #8
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f103 0208 	add.w	r2, r3, #8
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b1f6:	bf00      	nop
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b202:	b480      	push	{r7}
 800b204:	b085      	sub	sp, #20
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	1c5a      	adds	r2, r3, #1
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	601a      	str	r2, [r3, #0]
}
 800b23e:	bf00      	nop
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b24a:	b480      	push	{r7}
 800b24c:	b085      	sub	sp, #20
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b260:	d103      	bne.n	800b26a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	e00c      	b.n	800b284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3308      	adds	r3, #8
 800b26e:	60fb      	str	r3, [r7, #12]
 800b270:	e002      	b.n	800b278 <vListInsert+0x2e>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	429a      	cmp	r2, r3
 800b282:	d2f6      	bcs.n	800b272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	683a      	ldr	r2, [r7, #0]
 800b292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	601a      	str	r2, [r3, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	6892      	ldr	r2, [r2, #8]
 800b2d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	6852      	ldr	r2, [r2, #4]
 800b2dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d103      	bne.n	800b2f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689a      	ldr	r2, [r3, #8]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	1e5a      	subs	r2, r3, #1
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10b      	bne.n	800b33c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b336:	bf00      	nop
 800b338:	bf00      	nop
 800b33a:	e7fd      	b.n	800b338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b33c:	f002 fc74 	bl	800dc28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b348:	68f9      	ldr	r1, [r7, #12]
 800b34a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b34c:	fb01 f303 	mul.w	r3, r1, r3
 800b350:	441a      	add	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b36c:	3b01      	subs	r3, #1
 800b36e:	68f9      	ldr	r1, [r7, #12]
 800b370:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b372:	fb01 f303 	mul.w	r3, r1, r3
 800b376:	441a      	add	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	22ff      	movs	r2, #255	@ 0xff
 800b380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	22ff      	movs	r2, #255	@ 0xff
 800b388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d114      	bne.n	800b3bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d01a      	beq.n	800b3d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3310      	adds	r3, #16
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f001 fc16 	bl	800cbd0 <xTaskRemoveFromEventList>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d012      	beq.n	800b3d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <xQueueGenericReset+0xd0>)
 800b3ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	e009      	b.n	800b3d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	3310      	adds	r3, #16
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff fef1 	bl	800b1a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3324      	adds	r3, #36	@ 0x24
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff feec 	bl	800b1a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b3d0:	f002 fc5c 	bl	800dc8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b3d4:	2301      	movs	r3, #1
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	e000ed04 	.word	0xe000ed04

0800b3e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b08e      	sub	sp, #56	@ 0x38
 800b3e8:	af02      	add	r7, sp, #8
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
 800b3f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10b      	bne.n	800b410 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b40a:	bf00      	nop
 800b40c:	bf00      	nop
 800b40e:	e7fd      	b.n	800b40c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d10b      	bne.n	800b42e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41a:	f383 8811 	msr	BASEPRI, r3
 800b41e:	f3bf 8f6f 	isb	sy
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	e7fd      	b.n	800b42a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <xQueueGenericCreateStatic+0x56>
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <xQueueGenericCreateStatic+0x5a>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <xQueueGenericCreateStatic+0x5c>
 800b43e:	2300      	movs	r3, #0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10b      	bne.n	800b45c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	623b      	str	r3, [r7, #32]
}
 800b456:	bf00      	nop
 800b458:	bf00      	nop
 800b45a:	e7fd      	b.n	800b458 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d102      	bne.n	800b468 <xQueueGenericCreateStatic+0x84>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <xQueueGenericCreateStatic+0x88>
 800b468:	2301      	movs	r3, #1
 800b46a:	e000      	b.n	800b46e <xQueueGenericCreateStatic+0x8a>
 800b46c:	2300      	movs	r3, #0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	61fb      	str	r3, [r7, #28]
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	e7fd      	b.n	800b486 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b48a:	2350      	movs	r3, #80	@ 0x50
 800b48c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	2b50      	cmp	r3, #80	@ 0x50
 800b492:	d00b      	beq.n	800b4ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b498:	f383 8811 	msr	BASEPRI, r3
 800b49c:	f3bf 8f6f 	isb	sy
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	61bb      	str	r3, [r7, #24]
}
 800b4a6:	bf00      	nop
 800b4a8:	bf00      	nop
 800b4aa:	e7fd      	b.n	800b4a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b4ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00d      	beq.n	800b4d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	68b9      	ldr	r1, [r7, #8]
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 f840 	bl	800b554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3730      	adds	r7, #48	@ 0x30
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b08a      	sub	sp, #40	@ 0x28
 800b4e2:	af02      	add	r7, sp, #8
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10b      	bne.n	800b50a <xQueueGenericCreate+0x2c>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	613b      	str	r3, [r7, #16]
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	e7fd      	b.n	800b506 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	fb02 f303 	mul.w	r3, r2, r3
 800b512:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	3350      	adds	r3, #80	@ 0x50
 800b518:	4618      	mov	r0, r3
 800b51a:	f002 fca7 	bl	800de6c <pvPortMalloc>
 800b51e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d011      	beq.n	800b54a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	3350      	adds	r3, #80	@ 0x50
 800b52e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b538:	79fa      	ldrb	r2, [r7, #7]
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	4613      	mov	r3, r2
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	68b9      	ldr	r1, [r7, #8]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 f805 	bl	800b554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b54a:	69bb      	ldr	r3, [r7, #24]
	}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3720      	adds	r7, #32
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d103      	bne.n	800b570 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	e002      	b.n	800b576 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b582:	2101      	movs	r1, #1
 800b584:	69b8      	ldr	r0, [r7, #24]
 800b586:	f7ff fec3 	bl	800b310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	78fa      	ldrb	r2, [r7, #3]
 800b58e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b08a      	sub	sp, #40	@ 0x28
 800b59e:	af02      	add	r7, sp, #8
 800b5a0:	60f8      	str	r0, [r7, #12]
 800b5a2:	60b9      	str	r1, [r7, #8]
 800b5a4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10b      	bne.n	800b5c4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	61bb      	str	r3, [r7, #24]
}
 800b5be:	bf00      	nop
 800b5c0:	bf00      	nop
 800b5c2:	e7fd      	b.n	800b5c0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d90b      	bls.n	800b5e4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	617b      	str	r3, [r7, #20]
}
 800b5de:	bf00      	nop
 800b5e0:	bf00      	nop
 800b5e2:	e7fd      	b.n	800b5e0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7ff fef8 	bl	800b3e4 <xQueueGenericCreateStatic>
 800b5f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b602:	69fb      	ldr	r3, [r7, #28]
	}
 800b604:	4618      	mov	r0, r3
 800b606:	3720      	adds	r7, #32
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10b      	bne.n	800b634 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b620:	f383 8811 	msr	BASEPRI, r3
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	f3bf 8f4f 	dsb	sy
 800b62c:	613b      	str	r3, [r7, #16]
}
 800b62e:	bf00      	nop
 800b630:	bf00      	nop
 800b632:	e7fd      	b.n	800b630 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d90b      	bls.n	800b654 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	60fb      	str	r3, [r7, #12]
}
 800b64e:	bf00      	nop
 800b650:	bf00      	nop
 800b652:	e7fd      	b.n	800b650 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b654:	2202      	movs	r2, #2
 800b656:	2100      	movs	r1, #0
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff ff40 	bl	800b4de <xQueueGenericCreate>
 800b65e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b66c:	697b      	ldr	r3, [r7, #20]
	}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08e      	sub	sp, #56	@ 0x38
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b686:	2300      	movs	r3, #0
 800b688:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10b      	bne.n	800b6ac <xQueueGenericSend+0x34>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	e7fd      	b.n	800b6a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d103      	bne.n	800b6ba <xQueueGenericSend+0x42>
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <xQueueGenericSend+0x46>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e000      	b.n	800b6c0 <xQueueGenericSend+0x48>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10b      	bne.n	800b6dc <xQueueGenericSend+0x64>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d103      	bne.n	800b6ea <xQueueGenericSend+0x72>
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d101      	bne.n	800b6ee <xQueueGenericSend+0x76>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <xQueueGenericSend+0x78>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10b      	bne.n	800b70c <xQueueGenericSend+0x94>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	623b      	str	r3, [r7, #32]
}
 800b706:	bf00      	nop
 800b708:	bf00      	nop
 800b70a:	e7fd      	b.n	800b708 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b70c:	f001 fc20 	bl	800cf50 <xTaskGetSchedulerState>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d102      	bne.n	800b71c <xQueueGenericSend+0xa4>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d101      	bne.n	800b720 <xQueueGenericSend+0xa8>
 800b71c:	2301      	movs	r3, #1
 800b71e:	e000      	b.n	800b722 <xQueueGenericSend+0xaa>
 800b720:	2300      	movs	r3, #0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10b      	bne.n	800b73e <xQueueGenericSend+0xc6>
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	61fb      	str	r3, [r7, #28]
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	e7fd      	b.n	800b73a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b73e:	f002 fa73 	bl	800dc28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d302      	bcc.n	800b754 <xQueueGenericSend+0xdc>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b02      	cmp	r3, #2
 800b752:	d129      	bne.n	800b7a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b75a:	f000 fc6d 	bl	800c038 <prvCopyDataToQueue>
 800b75e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b764:	2b00      	cmp	r3, #0
 800b766:	d010      	beq.n	800b78a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76a:	3324      	adds	r3, #36	@ 0x24
 800b76c:	4618      	mov	r0, r3
 800b76e:	f001 fa2f 	bl	800cbd0 <xTaskRemoveFromEventList>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d013      	beq.n	800b7a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b778:	4b3f      	ldr	r3, [pc, #252]	@ (800b878 <xQueueGenericSend+0x200>)
 800b77a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	e00a      	b.n	800b7a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d007      	beq.n	800b7a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b790:	4b39      	ldr	r3, [pc, #228]	@ (800b878 <xQueueGenericSend+0x200>)
 800b792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7a0:	f002 fa74 	bl	800dc8c <vPortExitCritical>
				return pdPASS;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e063      	b.n	800b870 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d103      	bne.n	800b7b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7ae:	f002 fa6d 	bl	800dc8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e05c      	b.n	800b870 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d106      	bne.n	800b7ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7bc:	f107 0314 	add.w	r3, r7, #20
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f001 fa69 	bl	800cc98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7ca:	f002 fa5f 	bl	800dc8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7ce:	f000 ffd9 	bl	800c784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7d2:	f002 fa29 	bl	800dc28 <vPortEnterCritical>
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7dc:	b25b      	sxtb	r3, r3
 800b7de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7e2:	d103      	bne.n	800b7ec <xQueueGenericSend+0x174>
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7f2:	b25b      	sxtb	r3, r3
 800b7f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7f8:	d103      	bne.n	800b802 <xQueueGenericSend+0x18a>
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b802:	f002 fa43 	bl	800dc8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b806:	1d3a      	adds	r2, r7, #4
 800b808:	f107 0314 	add.w	r3, r7, #20
 800b80c:	4611      	mov	r1, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	f001 fa58 	bl	800ccc4 <xTaskCheckForTimeOut>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d124      	bne.n	800b864 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b81a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b81c:	f000 fd04 	bl	800c228 <prvIsQueueFull>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d018      	beq.n	800b858 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b828:	3310      	adds	r3, #16
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	4611      	mov	r1, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f001 f97c 	bl	800cb2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b836:	f000 fc8f 	bl	800c158 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b83a:	f000 ffb1 	bl	800c7a0 <xTaskResumeAll>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	f47f af7c 	bne.w	800b73e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b846:	4b0c      	ldr	r3, [pc, #48]	@ (800b878 <xQueueGenericSend+0x200>)
 800b848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	e772      	b.n	800b73e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b85a:	f000 fc7d 	bl	800c158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b85e:	f000 ff9f 	bl	800c7a0 <xTaskResumeAll>
 800b862:	e76c      	b.n	800b73e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b866:	f000 fc77 	bl	800c158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b86a:	f000 ff99 	bl	800c7a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b86e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b870:	4618      	mov	r0, r3
 800b872:	3738      	adds	r7, #56	@ 0x38
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	e000ed04 	.word	0xe000ed04

0800b87c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b090      	sub	sp, #64	@ 0x40
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10b      	bne.n	800b8ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b8a6:	bf00      	nop
 800b8a8:	bf00      	nop
 800b8aa:	e7fd      	b.n	800b8a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d103      	bne.n	800b8ba <xQueueGenericSendFromISR+0x3e>
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <xQueueGenericSendFromISR+0x42>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e000      	b.n	800b8c0 <xQueueGenericSendFromISR+0x44>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10b      	bne.n	800b8dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b8d6:	bf00      	nop
 800b8d8:	bf00      	nop
 800b8da:	e7fd      	b.n	800b8d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d103      	bne.n	800b8ea <xQueueGenericSendFromISR+0x6e>
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d101      	bne.n	800b8ee <xQueueGenericSendFromISR+0x72>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e000      	b.n	800b8f0 <xQueueGenericSendFromISR+0x74>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10b      	bne.n	800b90c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	623b      	str	r3, [r7, #32]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b90c:	f002 fa6c 	bl	800dde8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b910:	f3ef 8211 	mrs	r2, BASEPRI
 800b914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	61fa      	str	r2, [r7, #28]
 800b926:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b928:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b92a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b934:	429a      	cmp	r2, r3
 800b936:	d302      	bcc.n	800b93e <xQueueGenericSendFromISR+0xc2>
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d12f      	bne.n	800b99e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b940:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b944:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	68b9      	ldr	r1, [r7, #8]
 800b952:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b954:	f000 fb70 	bl	800c038 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b958:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b95c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b960:	d112      	bne.n	800b988 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b966:	2b00      	cmp	r3, #0
 800b968:	d016      	beq.n	800b998 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96c:	3324      	adds	r3, #36	@ 0x24
 800b96e:	4618      	mov	r0, r3
 800b970:	f001 f92e 	bl	800cbd0 <xTaskRemoveFromEventList>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00e      	beq.n	800b998 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00b      	beq.n	800b998 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	e007      	b.n	800b998 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b988:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b98c:	3301      	adds	r3, #1
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	b25a      	sxtb	r2, r3
 800b992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b998:	2301      	movs	r3, #1
 800b99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b99c:	e001      	b.n	800b9a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b9ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3740      	adds	r7, #64	@ 0x40
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08e      	sub	sp, #56	@ 0x38
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10b      	bne.n	800b9e4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	623b      	str	r3, [r7, #32]
}
 800b9de:	bf00      	nop
 800b9e0:	bf00      	nop
 800b9e2:	e7fd      	b.n	800b9e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00b      	beq.n	800ba04 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	61fb      	str	r3, [r7, #28]
}
 800b9fe:	bf00      	nop
 800ba00:	bf00      	nop
 800ba02:	e7fd      	b.n	800ba00 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ba04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d103      	bne.n	800ba14 <xQueueGiveFromISR+0x5c>
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <xQueueGiveFromISR+0x60>
 800ba14:	2301      	movs	r3, #1
 800ba16:	e000      	b.n	800ba1a <xQueueGiveFromISR+0x62>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10b      	bne.n	800ba36 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	61bb      	str	r3, [r7, #24]
}
 800ba30:	bf00      	nop
 800ba32:	bf00      	nop
 800ba34:	e7fd      	b.n	800ba32 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba36:	f002 f9d7 	bl	800dde8 <vPortValidateInterruptPriority>
	__asm volatile
 800ba3a:	f3ef 8211 	mrs	r2, BASEPRI
 800ba3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	617a      	str	r2, [r7, #20]
 800ba50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ba52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d22b      	bcs.n	800babe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ba7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba80:	d112      	bne.n	800baa8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d016      	beq.n	800bab8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8c:	3324      	adds	r3, #36	@ 0x24
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f001 f89e 	bl	800cbd0 <xTaskRemoveFromEventList>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00e      	beq.n	800bab8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	2201      	movs	r2, #1
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	e007      	b.n	800bab8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800baa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baac:	3301      	adds	r3, #1
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	b25a      	sxtb	r2, r3
 800bab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bab8:	2301      	movs	r3, #1
 800baba:	637b      	str	r3, [r7, #52]	@ 0x34
 800babc:	e001      	b.n	800bac2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f383 8811 	msr	BASEPRI, r3
}
 800bacc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3738      	adds	r7, #56	@ 0x38
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b08c      	sub	sp, #48	@ 0x30
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800baec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10b      	bne.n	800bb0a <xQueueReceive+0x32>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	623b      	str	r3, [r7, #32]
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	e7fd      	b.n	800bb06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d103      	bne.n	800bb18 <xQueueReceive+0x40>
 800bb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <xQueueReceive+0x44>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e000      	b.n	800bb1e <xQueueReceive+0x46>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10b      	bne.n	800bb3a <xQueueReceive+0x62>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	61fb      	str	r3, [r7, #28]
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop
 800bb38:	e7fd      	b.n	800bb36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb3a:	f001 fa09 	bl	800cf50 <xTaskGetSchedulerState>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <xQueueReceive+0x72>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <xQueueReceive+0x76>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <xQueueReceive+0x78>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10b      	bne.n	800bb6c <xQueueReceive+0x94>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	61bb      	str	r3, [r7, #24]
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	e7fd      	b.n	800bb68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb6c:	f002 f85c 	bl	800dc28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d01f      	beq.n	800bbbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb7c:	68b9      	ldr	r1, [r7, #8]
 800bb7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb80:	f000 fac4 	bl	800c10c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	1e5a      	subs	r2, r3, #1
 800bb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00f      	beq.n	800bbb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb96:	3310      	adds	r3, #16
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f001 f819 	bl	800cbd0 <xTaskRemoveFromEventList>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d007      	beq.n	800bbb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bba4:	4b3c      	ldr	r3, [pc, #240]	@ (800bc98 <xQueueReceive+0x1c0>)
 800bba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbb4:	f002 f86a 	bl	800dc8c <vPortExitCritical>
				return pdPASS;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e069      	b.n	800bc90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d103      	bne.n	800bbca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbc2:	f002 f863 	bl	800dc8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e062      	b.n	800bc90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d106      	bne.n	800bbde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbd0:	f107 0310 	add.w	r3, r7, #16
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 f85f 	bl	800cc98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbde:	f002 f855 	bl	800dc8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbe2:	f000 fdcf 	bl	800c784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbe6:	f002 f81f 	bl	800dc28 <vPortEnterCritical>
 800bbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbf0:	b25b      	sxtb	r3, r3
 800bbf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbf6:	d103      	bne.n	800bc00 <xQueueReceive+0x128>
 800bbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc06:	b25b      	sxtb	r3, r3
 800bc08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc0c:	d103      	bne.n	800bc16 <xQueueReceive+0x13e>
 800bc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc16:	f002 f839 	bl	800dc8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc1a:	1d3a      	adds	r2, r7, #4
 800bc1c:	f107 0310 	add.w	r3, r7, #16
 800bc20:	4611      	mov	r1, r2
 800bc22:	4618      	mov	r0, r3
 800bc24:	f001 f84e 	bl	800ccc4 <xTaskCheckForTimeOut>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d123      	bne.n	800bc76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc30:	f000 fae4 	bl	800c1fc <prvIsQueueEmpty>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d017      	beq.n	800bc6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3c:	3324      	adds	r3, #36	@ 0x24
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 ff72 	bl	800cb2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc4a:	f000 fa85 	bl	800c158 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc4e:	f000 fda7 	bl	800c7a0 <xTaskResumeAll>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d189      	bne.n	800bb6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bc58:	4b0f      	ldr	r3, [pc, #60]	@ (800bc98 <xQueueReceive+0x1c0>)
 800bc5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc5e:	601a      	str	r2, [r3, #0]
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	e780      	b.n	800bb6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc6c:	f000 fa74 	bl	800c158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc70:	f000 fd96 	bl	800c7a0 <xTaskResumeAll>
 800bc74:	e77a      	b.n	800bb6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc78:	f000 fa6e 	bl	800c158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc7c:	f000 fd90 	bl	800c7a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc82:	f000 fabb 	bl	800c1fc <prvIsQueueEmpty>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f43f af6f 	beq.w	800bb6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3730      	adds	r7, #48	@ 0x30
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	e000ed04 	.word	0xe000ed04

0800bc9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08e      	sub	sp, #56	@ 0x38
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bca6:	2300      	movs	r3, #0
 800bca8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10b      	bne.n	800bcd0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bcb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcbc:	f383 8811 	msr	BASEPRI, r3
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	623b      	str	r3, [r7, #32]
}
 800bcca:	bf00      	nop
 800bccc:	bf00      	nop
 800bcce:	e7fd      	b.n	800bccc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00b      	beq.n	800bcf0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800bcd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	61fb      	str	r3, [r7, #28]
}
 800bcea:	bf00      	nop
 800bcec:	bf00      	nop
 800bcee:	e7fd      	b.n	800bcec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcf0:	f001 f92e 	bl	800cf50 <xTaskGetSchedulerState>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d102      	bne.n	800bd00 <xQueueSemaphoreTake+0x64>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d101      	bne.n	800bd04 <xQueueSemaphoreTake+0x68>
 800bd00:	2301      	movs	r3, #1
 800bd02:	e000      	b.n	800bd06 <xQueueSemaphoreTake+0x6a>
 800bd04:	2300      	movs	r3, #0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	61bb      	str	r3, [r7, #24]
}
 800bd1c:	bf00      	nop
 800bd1e:	bf00      	nop
 800bd20:	e7fd      	b.n	800bd1e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd22:	f001 ff81 	bl	800dc28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d024      	beq.n	800bd7c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd34:	1e5a      	subs	r2, r3, #1
 800bd36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d104      	bne.n	800bd4c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd42:	f001 fa7f 	bl	800d244 <pvTaskIncrementMutexHeldCount>
 800bd46:	4602      	mov	r2, r0
 800bd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00f      	beq.n	800bd74 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd56:	3310      	adds	r3, #16
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 ff39 	bl	800cbd0 <xTaskRemoveFromEventList>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d007      	beq.n	800bd74 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd64:	4b54      	ldr	r3, [pc, #336]	@ (800beb8 <xQueueSemaphoreTake+0x21c>)
 800bd66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd74:	f001 ff8a 	bl	800dc8c <vPortExitCritical>
				return pdPASS;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e098      	b.n	800beae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d112      	bne.n	800bda8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00b      	beq.n	800bda0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd8c:	f383 8811 	msr	BASEPRI, r3
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	617b      	str	r3, [r7, #20]
}
 800bd9a:	bf00      	nop
 800bd9c:	bf00      	nop
 800bd9e:	e7fd      	b.n	800bd9c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bda0:	f001 ff74 	bl	800dc8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bda4:	2300      	movs	r3, #0
 800bda6:	e082      	b.n	800beae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bda8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d106      	bne.n	800bdbc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdae:	f107 030c 	add.w	r3, r7, #12
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 ff70 	bl	800cc98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdbc:	f001 ff66 	bl	800dc8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdc0:	f000 fce0 	bl	800c784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdc4:	f001 ff30 	bl	800dc28 <vPortEnterCritical>
 800bdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bdce:	b25b      	sxtb	r3, r3
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bdd4:	d103      	bne.n	800bdde <xQueueSemaphoreTake+0x142>
 800bdd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bde4:	b25b      	sxtb	r3, r3
 800bde6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bdea:	d103      	bne.n	800bdf4 <xQueueSemaphoreTake+0x158>
 800bdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bdf4:	f001 ff4a 	bl	800dc8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdf8:	463a      	mov	r2, r7
 800bdfa:	f107 030c 	add.w	r3, r7, #12
 800bdfe:	4611      	mov	r1, r2
 800be00:	4618      	mov	r0, r3
 800be02:	f000 ff5f 	bl	800ccc4 <xTaskCheckForTimeOut>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d132      	bne.n	800be72 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be0e:	f000 f9f5 	bl	800c1fc <prvIsQueueEmpty>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d026      	beq.n	800be66 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d109      	bne.n	800be34 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800be20:	f001 ff02 	bl	800dc28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 f8af 	bl	800cf8c <xTaskPriorityInherit>
 800be2e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800be30:	f001 ff2c 	bl	800dc8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be36:	3324      	adds	r3, #36	@ 0x24
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 fe75 	bl	800cb2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be44:	f000 f988 	bl	800c158 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be48:	f000 fcaa 	bl	800c7a0 <xTaskResumeAll>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f47f af67 	bne.w	800bd22 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800be54:	4b18      	ldr	r3, [pc, #96]	@ (800beb8 <xQueueSemaphoreTake+0x21c>)
 800be56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	e75d      	b.n	800bd22 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be68:	f000 f976 	bl	800c158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be6c:	f000 fc98 	bl	800c7a0 <xTaskResumeAll>
 800be70:	e757      	b.n	800bd22 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be74:	f000 f970 	bl	800c158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be78:	f000 fc92 	bl	800c7a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be7e:	f000 f9bd 	bl	800c1fc <prvIsQueueEmpty>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	f43f af4c 	beq.w	800bd22 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800be8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00d      	beq.n	800beac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800be90:	f001 feca 	bl	800dc28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be96:	f000 f8b7 	bl	800c008 <prvGetDisinheritPriorityAfterTimeout>
 800be9a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800be9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 f94a 	bl	800d13c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bea8:	f001 fef0 	bl	800dc8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800beac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3738      	adds	r7, #56	@ 0x38
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	e000ed04 	.word	0xe000ed04

0800bebc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08e      	sub	sp, #56	@ 0x38
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800becc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10b      	bne.n	800beea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	623b      	str	r3, [r7, #32]
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop
 800bee8:	e7fd      	b.n	800bee6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d103      	bne.n	800bef8 <xQueueReceiveFromISR+0x3c>
 800bef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d101      	bne.n	800befc <xQueueReceiveFromISR+0x40>
 800bef8:	2301      	movs	r3, #1
 800befa:	e000      	b.n	800befe <xQueueReceiveFromISR+0x42>
 800befc:	2300      	movs	r3, #0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10b      	bne.n	800bf1a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800bf02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf06:	f383 8811 	msr	BASEPRI, r3
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	61fb      	str	r3, [r7, #28]
}
 800bf14:	bf00      	nop
 800bf16:	bf00      	nop
 800bf18:	e7fd      	b.n	800bf16 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf1a:	f001 ff65 	bl	800dde8 <vPortValidateInterruptPriority>
	__asm volatile
 800bf1e:	f3ef 8211 	mrs	r2, BASEPRI
 800bf22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	61ba      	str	r2, [r7, #24]
 800bf34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bf36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf3e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d02f      	beq.n	800bfa6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf50:	68b9      	ldr	r1, [r7, #8]
 800bf52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf54:	f000 f8da 	bl	800c10c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5a:	1e5a      	subs	r2, r3, #1
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bf60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bf64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf68:	d112      	bne.n	800bf90 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d016      	beq.n	800bfa0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf74:	3310      	adds	r3, #16
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 fe2a 	bl	800cbd0 <xTaskRemoveFromEventList>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00e      	beq.n	800bfa0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00b      	beq.n	800bfa0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	e007      	b.n	800bfa0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bf90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf94:	3301      	adds	r3, #1
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	b25a      	sxtb	r2, r3
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfa4:	e001      	b.n	800bfaa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	f383 8811 	msr	BASEPRI, r3
}
 800bfb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3738      	adds	r7, #56	@ 0x38
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10b      	bne.n	800bfea <vQueueDelete+0x2a>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	60bb      	str	r3, [r7, #8]
}
 800bfe4:	bf00      	nop
 800bfe6:	bf00      	nop
 800bfe8:	e7fd      	b.n	800bfe6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f95e 	bl	800c2ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d102      	bne.n	800c000 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f002 f804 	bl	800e008 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c000:	bf00      	nop
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	e001      	b.n	800c02a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c026:	2300      	movs	r3, #0
 800c028:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c02a:	68fb      	ldr	r3, [r7, #12]
	}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c044:	2300      	movs	r3, #0
 800c046:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c04c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10d      	bne.n	800c072 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d14d      	bne.n	800c0fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fffa 	bl	800d05c <xTaskPriorityDisinherit>
 800c068:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	609a      	str	r2, [r3, #8]
 800c070:	e043      	b.n	800c0fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d119      	bne.n	800c0ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6858      	ldr	r0, [r3, #4]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c080:	461a      	mov	r2, r3
 800c082:	68b9      	ldr	r1, [r7, #8]
 800c084:	f002 fe45 	bl	800ed12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c090:	441a      	add	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	685a      	ldr	r2, [r3, #4]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d32b      	bcc.n	800c0fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	605a      	str	r2, [r3, #4]
 800c0aa:	e026      	b.n	800c0fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	68d8      	ldr	r0, [r3, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	f002 fe2b 	bl	800ed12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	68da      	ldr	r2, [r3, #12]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c4:	425b      	negs	r3, r3
 800c0c6:	441a      	add	r2, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d207      	bcs.n	800c0e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	689a      	ldr	r2, [r3, #8]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e0:	425b      	negs	r3, r3
 800c0e2:	441a      	add	r2, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d105      	bne.n	800c0fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	1c5a      	adds	r2, r3, #1
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c102:	697b      	ldr	r3, [r7, #20]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d018      	beq.n	800c150 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	68da      	ldr	r2, [r3, #12]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c126:	441a      	add	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68da      	ldr	r2, [r3, #12]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	429a      	cmp	r2, r3
 800c136:	d303      	bcc.n	800c140 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68d9      	ldr	r1, [r3, #12]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c148:	461a      	mov	r2, r3
 800c14a:	6838      	ldr	r0, [r7, #0]
 800c14c:	f002 fde1 	bl	800ed12 <memcpy>
	}
}
 800c150:	bf00      	nop
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c160:	f001 fd62 	bl	800dc28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c16a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c16c:	e011      	b.n	800c192 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c172:	2b00      	cmp	r3, #0
 800c174:	d012      	beq.n	800c19c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3324      	adds	r3, #36	@ 0x24
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 fd28 	bl	800cbd0 <xTaskRemoveFromEventList>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c186:	f000 fe01 	bl	800cd8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c18a:	7bfb      	ldrb	r3, [r7, #15]
 800c18c:	3b01      	subs	r3, #1
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c196:	2b00      	cmp	r3, #0
 800c198:	dce9      	bgt.n	800c16e <prvUnlockQueue+0x16>
 800c19a:	e000      	b.n	800c19e <prvUnlockQueue+0x46>
					break;
 800c19c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	22ff      	movs	r2, #255	@ 0xff
 800c1a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c1a6:	f001 fd71 	bl	800dc8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c1aa:	f001 fd3d 	bl	800dc28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c1b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1b6:	e011      	b.n	800c1dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d012      	beq.n	800c1e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	3310      	adds	r3, #16
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fd03 	bl	800cbd0 <xTaskRemoveFromEventList>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d001      	beq.n	800c1d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c1d0:	f000 fddc 	bl	800cd8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	dce9      	bgt.n	800c1b8 <prvUnlockQueue+0x60>
 800c1e4:	e000      	b.n	800c1e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c1e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	22ff      	movs	r2, #255	@ 0xff
 800c1ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c1f0:	f001 fd4c 	bl	800dc8c <vPortExitCritical>
}
 800c1f4:	bf00      	nop
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c204:	f001 fd10 	bl	800dc28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d102      	bne.n	800c216 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c210:	2301      	movs	r3, #1
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	e001      	b.n	800c21a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c216:	2300      	movs	r3, #0
 800c218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c21a:	f001 fd37 	bl	800dc8c <vPortExitCritical>

	return xReturn;
 800c21e:	68fb      	ldr	r3, [r7, #12]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c230:	f001 fcfa 	bl	800dc28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d102      	bne.n	800c246 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c240:	2301      	movs	r3, #1
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	e001      	b.n	800c24a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c246:	2300      	movs	r3, #0
 800c248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c24a:	f001 fd1f 	bl	800dc8c <vPortExitCritical>

	return xReturn;
 800c24e:	68fb      	ldr	r3, [r7, #12]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c262:	2300      	movs	r3, #0
 800c264:	60fb      	str	r3, [r7, #12]
 800c266:	e014      	b.n	800c292 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c268:	4a0f      	ldr	r2, [pc, #60]	@ (800c2a8 <vQueueAddToRegistry+0x50>)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10b      	bne.n	800c28c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c274:	490c      	ldr	r1, [pc, #48]	@ (800c2a8 <vQueueAddToRegistry+0x50>)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	683a      	ldr	r2, [r7, #0]
 800c27a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c27e:	4a0a      	ldr	r2, [pc, #40]	@ (800c2a8 <vQueueAddToRegistry+0x50>)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	4413      	add	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c28a:	e006      	b.n	800c29a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	60fb      	str	r3, [r7, #12]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b07      	cmp	r3, #7
 800c296:	d9e7      	bls.n	800c268 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	3714      	adds	r7, #20
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	2001cf24 	.word	0x2001cf24

0800c2ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	e016      	b.n	800c2e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c2ba:	4a10      	ldr	r2, [pc, #64]	@ (800c2fc <vQueueUnregisterQueue+0x50>)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	00db      	lsls	r3, r3, #3
 800c2c0:	4413      	add	r3, r2
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d10b      	bne.n	800c2e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c2ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c2fc <vQueueUnregisterQueue+0x50>)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c2d4:	4a09      	ldr	r2, [pc, #36]	@ (800c2fc <vQueueUnregisterQueue+0x50>)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	4413      	add	r3, r2
 800c2dc:	2200      	movs	r2, #0
 800c2de:	605a      	str	r2, [r3, #4]
				break;
 800c2e0:	e006      	b.n	800c2f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b07      	cmp	r3, #7
 800c2ec:	d9e5      	bls.n	800c2ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c2ee:	bf00      	nop
 800c2f0:	bf00      	nop
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	2001cf24 	.word	0x2001cf24

0800c300 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c310:	f001 fc8a 	bl	800dc28 <vPortEnterCritical>
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c31a:	b25b      	sxtb	r3, r3
 800c31c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c320:	d103      	bne.n	800c32a <vQueueWaitForMessageRestricted+0x2a>
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c330:	b25b      	sxtb	r3, r3
 800c332:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c336:	d103      	bne.n	800c340 <vQueueWaitForMessageRestricted+0x40>
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c340:	f001 fca4 	bl	800dc8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d106      	bne.n	800c35a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	3324      	adds	r3, #36	@ 0x24
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fc0f 	bl	800cb78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c35a:	6978      	ldr	r0, [r7, #20]
 800c35c:	f7ff fefc 	bl	800c158 <prvUnlockQueue>
	}
 800c360:	bf00      	nop
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b08e      	sub	sp, #56	@ 0x38
 800c36c:	af04      	add	r7, sp, #16
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10b      	bne.n	800c394 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	623b      	str	r3, [r7, #32]
}
 800c38e:	bf00      	nop
 800c390:	bf00      	nop
 800c392:	e7fd      	b.n	800c390 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10b      	bne.n	800c3b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	61fb      	str	r3, [r7, #28]
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	e7fd      	b.n	800c3ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c3b2:	235c      	movs	r3, #92	@ 0x5c
 800c3b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c3ba:	d00b      	beq.n	800c3d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	61bb      	str	r3, [r7, #24]
}
 800c3ce:	bf00      	nop
 800c3d0:	bf00      	nop
 800c3d2:	e7fd      	b.n	800c3d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c3d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d01e      	beq.n	800c41a <xTaskCreateStatic+0xb2>
 800c3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d01b      	beq.n	800c41a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9303      	str	r3, [sp, #12]
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fa:	9302      	str	r3, [sp, #8]
 800c3fc:	f107 0314 	add.w	r3, r7, #20
 800c400:	9301      	str	r3, [sp, #4]
 800c402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	68b9      	ldr	r1, [r7, #8]
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f000 f850 	bl	800c4b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c412:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c414:	f000 f8de 	bl	800c5d4 <prvAddNewTaskToReadyList>
 800c418:	e001      	b.n	800c41e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c41e:	697b      	ldr	r3, [r7, #20]
	}
 800c420:	4618      	mov	r0, r3
 800c422:	3728      	adds	r7, #40	@ 0x28
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08c      	sub	sp, #48	@ 0x30
 800c42c:	af04      	add	r7, sp, #16
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	603b      	str	r3, [r7, #0]
 800c434:	4613      	mov	r3, r2
 800c436:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c438:	88fb      	ldrh	r3, [r7, #6]
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 fd15 	bl	800de6c <pvPortMalloc>
 800c442:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00e      	beq.n	800c468 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c44a:	205c      	movs	r0, #92	@ 0x5c
 800c44c:	f001 fd0e 	bl	800de6c <pvPortMalloc>
 800c450:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d003      	beq.n	800c460 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c45e:	e005      	b.n	800c46c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c460:	6978      	ldr	r0, [r7, #20]
 800c462:	f001 fdd1 	bl	800e008 <vPortFree>
 800c466:	e001      	b.n	800c46c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c468:	2300      	movs	r3, #0
 800c46a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d017      	beq.n	800c4a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c47a:	88fa      	ldrh	r2, [r7, #6]
 800c47c:	2300      	movs	r3, #0
 800c47e:	9303      	str	r3, [sp, #12]
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	9302      	str	r3, [sp, #8]
 800c484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f000 f80e 	bl	800c4b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c496:	69f8      	ldr	r0, [r7, #28]
 800c498:	f000 f89c 	bl	800c5d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c49c:	2301      	movs	r3, #1
 800c49e:	61bb      	str	r3, [r7, #24]
 800c4a0:	e002      	b.n	800c4a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c4a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c4a8:	69bb      	ldr	r3, [r7, #24]
	}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3720      	adds	r7, #32
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b088      	sub	sp, #32
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	60f8      	str	r0, [r7, #12]
 800c4ba:	60b9      	str	r1, [r7, #8]
 800c4bc:	607a      	str	r2, [r7, #4]
 800c4be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	21a5      	movs	r1, #165	@ 0xa5
 800c4cc:	f002 fbe8 	bl	800eca0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	f023 0307 	bic.w	r3, r3, #7
 800c4e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	f003 0307 	and.w	r3, r3, #7
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00b      	beq.n	800c50c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	617b      	str	r3, [r7, #20]
}
 800c506:	bf00      	nop
 800c508:	bf00      	nop
 800c50a:	e7fd      	b.n	800c508 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d01f      	beq.n	800c552 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c512:	2300      	movs	r3, #0
 800c514:	61fb      	str	r3, [r7, #28]
 800c516:	e012      	b.n	800c53e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	4413      	add	r3, r2
 800c51e:	7819      	ldrb	r1, [r3, #0]
 800c520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	4413      	add	r3, r2
 800c526:	3334      	adds	r3, #52	@ 0x34
 800c528:	460a      	mov	r2, r1
 800c52a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	4413      	add	r3, r2
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d006      	beq.n	800c546 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	3301      	adds	r3, #1
 800c53c:	61fb      	str	r3, [r7, #28]
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	2b0f      	cmp	r3, #15
 800c542:	d9e9      	bls.n	800c518 <prvInitialiseNewTask+0x66>
 800c544:	e000      	b.n	800c548 <prvInitialiseNewTask+0x96>
			{
				break;
 800c546:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c550:	e003      	b.n	800c55a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c554:	2200      	movs	r2, #0
 800c556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55c:	2b37      	cmp	r3, #55	@ 0x37
 800c55e:	d901      	bls.n	800c564 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c560:	2337      	movs	r3, #55	@ 0x37
 800c562:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c568:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c56e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c572:	2200      	movs	r2, #0
 800c574:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c578:	3304      	adds	r3, #4
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fe fe34 	bl	800b1e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c582:	3318      	adds	r3, #24
 800c584:	4618      	mov	r0, r3
 800c586:	f7fe fe2f 	bl	800b1e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c58e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c592:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c598:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c59e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	68f9      	ldr	r1, [r7, #12]
 800c5b2:	69b8      	ldr	r0, [r7, #24]
 800c5b4:	f001 fa08 	bl	800d9c8 <pxPortInitialiseStack>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5ca:	bf00      	nop
 800c5cc:	3720      	adds	r7, #32
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
	...

0800c5d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5dc:	f001 fb24 	bl	800dc28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5e0:	4b2d      	ldr	r3, [pc, #180]	@ (800c698 <prvAddNewTaskToReadyList+0xc4>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	4a2c      	ldr	r2, [pc, #176]	@ (800c698 <prvAddNewTaskToReadyList+0xc4>)
 800c5e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5ea:	4b2c      	ldr	r3, [pc, #176]	@ (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d109      	bne.n	800c606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5f2:	4a2a      	ldr	r2, [pc, #168]	@ (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5f8:	4b27      	ldr	r3, [pc, #156]	@ (800c698 <prvAddNewTaskToReadyList+0xc4>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d110      	bne.n	800c622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c600:	f000 fbe8 	bl	800cdd4 <prvInitialiseTaskLists>
 800c604:	e00d      	b.n	800c622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c606:	4b26      	ldr	r3, [pc, #152]	@ (800c6a0 <prvAddNewTaskToReadyList+0xcc>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c60e:	4b23      	ldr	r3, [pc, #140]	@ (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c618:	429a      	cmp	r2, r3
 800c61a:	d802      	bhi.n	800c622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c61c:	4a1f      	ldr	r2, [pc, #124]	@ (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c622:	4b20      	ldr	r3, [pc, #128]	@ (800c6a4 <prvAddNewTaskToReadyList+0xd0>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3301      	adds	r3, #1
 800c628:	4a1e      	ldr	r2, [pc, #120]	@ (800c6a4 <prvAddNewTaskToReadyList+0xd0>)
 800c62a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c62c:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a4 <prvAddNewTaskToReadyList+0xd0>)
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c638:	4b1b      	ldr	r3, [pc, #108]	@ (800c6a8 <prvAddNewTaskToReadyList+0xd4>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d903      	bls.n	800c648 <prvAddNewTaskToReadyList+0x74>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c644:	4a18      	ldr	r2, [pc, #96]	@ (800c6a8 <prvAddNewTaskToReadyList+0xd4>)
 800c646:	6013      	str	r3, [r2, #0]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4a15      	ldr	r2, [pc, #84]	@ (800c6ac <prvAddNewTaskToReadyList+0xd8>)
 800c656:	441a      	add	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	3304      	adds	r3, #4
 800c65c:	4619      	mov	r1, r3
 800c65e:	4610      	mov	r0, r2
 800c660:	f7fe fdcf 	bl	800b202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c664:	f001 fb12 	bl	800dc8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c668:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a0 <prvAddNewTaskToReadyList+0xcc>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00e      	beq.n	800c68e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c670:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <prvAddNewTaskToReadyList+0xc8>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d207      	bcs.n	800c68e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c67e:	4b0c      	ldr	r3, [pc, #48]	@ (800c6b0 <prvAddNewTaskToReadyList+0xdc>)
 800c680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c68e:	bf00      	nop
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	2001d438 	.word	0x2001d438
 800c69c:	2001cf64 	.word	0x2001cf64
 800c6a0:	2001d444 	.word	0x2001d444
 800c6a4:	2001d454 	.word	0x2001d454
 800c6a8:	2001d440 	.word	0x2001d440
 800c6ac:	2001cf68 	.word	0x2001cf68
 800c6b0:	e000ed04 	.word	0xe000ed04

0800c6b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b08a      	sub	sp, #40	@ 0x28
 800c6b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6c2:	463a      	mov	r2, r7
 800c6c4:	1d39      	adds	r1, r7, #4
 800c6c6:	f107 0308 	add.w	r3, r7, #8
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe fd38 	bl	800b140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c6d0:	6839      	ldr	r1, [r7, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	9202      	str	r2, [sp, #8]
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	460a      	mov	r2, r1
 800c6e2:	4922      	ldr	r1, [pc, #136]	@ (800c76c <vTaskStartScheduler+0xb8>)
 800c6e4:	4822      	ldr	r0, [pc, #136]	@ (800c770 <vTaskStartScheduler+0xbc>)
 800c6e6:	f7ff fe3f 	bl	800c368 <xTaskCreateStatic>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4a21      	ldr	r2, [pc, #132]	@ (800c774 <vTaskStartScheduler+0xc0>)
 800c6ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6f0:	4b20      	ldr	r3, [pc, #128]	@ (800c774 <vTaskStartScheduler+0xc0>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	617b      	str	r3, [r7, #20]
 800c6fc:	e001      	b.n	800c702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d102      	bne.n	800c70e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c708:	f000 fe04 	bl	800d314 <xTimerCreateTimerTask>
 800c70c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d116      	bne.n	800c742 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c718:	f383 8811 	msr	BASEPRI, r3
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	613b      	str	r3, [r7, #16]
}
 800c726:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c728:	4b13      	ldr	r3, [pc, #76]	@ (800c778 <vTaskStartScheduler+0xc4>)
 800c72a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c72e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c730:	4b12      	ldr	r3, [pc, #72]	@ (800c77c <vTaskStartScheduler+0xc8>)
 800c732:	2201      	movs	r2, #1
 800c734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c736:	4b12      	ldr	r3, [pc, #72]	@ (800c780 <vTaskStartScheduler+0xcc>)
 800c738:	2200      	movs	r2, #0
 800c73a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c73c:	f001 f9d0 	bl	800dae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c740:	e00f      	b.n	800c762 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c748:	d10b      	bne.n	800c762 <vTaskStartScheduler+0xae>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	60fb      	str	r3, [r7, #12]
}
 800c75c:	bf00      	nop
 800c75e:	bf00      	nop
 800c760:	e7fd      	b.n	800c75e <vTaskStartScheduler+0xaa>
}
 800c762:	bf00      	nop
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	08010cb0 	.word	0x08010cb0
 800c770:	0800cda5 	.word	0x0800cda5
 800c774:	2001d45c 	.word	0x2001d45c
 800c778:	2001d458 	.word	0x2001d458
 800c77c:	2001d444 	.word	0x2001d444
 800c780:	2001d43c 	.word	0x2001d43c

0800c784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c784:	b480      	push	{r7}
 800c786:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c788:	4b04      	ldr	r3, [pc, #16]	@ (800c79c <vTaskSuspendAll+0x18>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3301      	adds	r3, #1
 800c78e:	4a03      	ldr	r2, [pc, #12]	@ (800c79c <vTaskSuspendAll+0x18>)
 800c790:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c792:	bf00      	nop
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	2001d460 	.word	0x2001d460

0800c7a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7ae:	4b42      	ldr	r3, [pc, #264]	@ (800c8b8 <xTaskResumeAll+0x118>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10b      	bne.n	800c7ce <xTaskResumeAll+0x2e>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	603b      	str	r3, [r7, #0]
}
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
 800c7cc:	e7fd      	b.n	800c7ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c7ce:	f001 fa2b 	bl	800dc28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c7d2:	4b39      	ldr	r3, [pc, #228]	@ (800c8b8 <xTaskResumeAll+0x118>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	4a37      	ldr	r2, [pc, #220]	@ (800c8b8 <xTaskResumeAll+0x118>)
 800c7da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7dc:	4b36      	ldr	r3, [pc, #216]	@ (800c8b8 <xTaskResumeAll+0x118>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d162      	bne.n	800c8aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c7e4:	4b35      	ldr	r3, [pc, #212]	@ (800c8bc <xTaskResumeAll+0x11c>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d05e      	beq.n	800c8aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7ec:	e02f      	b.n	800c84e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ee:	4b34      	ldr	r3, [pc, #208]	@ (800c8c0 <xTaskResumeAll+0x120>)
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	3318      	adds	r3, #24
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe fd5e 	bl	800b2bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	3304      	adds	r3, #4
 800c804:	4618      	mov	r0, r3
 800c806:	f7fe fd59 	bl	800b2bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c80e:	4b2d      	ldr	r3, [pc, #180]	@ (800c8c4 <xTaskResumeAll+0x124>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	429a      	cmp	r2, r3
 800c814:	d903      	bls.n	800c81e <xTaskResumeAll+0x7e>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c81a:	4a2a      	ldr	r2, [pc, #168]	@ (800c8c4 <xTaskResumeAll+0x124>)
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c822:	4613      	mov	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4413      	add	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4a27      	ldr	r2, [pc, #156]	@ (800c8c8 <xTaskResumeAll+0x128>)
 800c82c:	441a      	add	r2, r3
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3304      	adds	r3, #4
 800c832:	4619      	mov	r1, r3
 800c834:	4610      	mov	r0, r2
 800c836:	f7fe fce4 	bl	800b202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c83e:	4b23      	ldr	r3, [pc, #140]	@ (800c8cc <xTaskResumeAll+0x12c>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c844:	429a      	cmp	r2, r3
 800c846:	d302      	bcc.n	800c84e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c848:	4b21      	ldr	r3, [pc, #132]	@ (800c8d0 <xTaskResumeAll+0x130>)
 800c84a:	2201      	movs	r2, #1
 800c84c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c84e:	4b1c      	ldr	r3, [pc, #112]	@ (800c8c0 <xTaskResumeAll+0x120>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1cb      	bne.n	800c7ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c85c:	f000 fb58 	bl	800cf10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c860:	4b1c      	ldr	r3, [pc, #112]	@ (800c8d4 <xTaskResumeAll+0x134>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d010      	beq.n	800c88e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c86c:	f000 f846 	bl	800c8fc <xTaskIncrementTick>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c876:	4b16      	ldr	r3, [pc, #88]	@ (800c8d0 <xTaskResumeAll+0x130>)
 800c878:	2201      	movs	r2, #1
 800c87a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	3b01      	subs	r3, #1
 800c880:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1f1      	bne.n	800c86c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c888:	4b12      	ldr	r3, [pc, #72]	@ (800c8d4 <xTaskResumeAll+0x134>)
 800c88a:	2200      	movs	r2, #0
 800c88c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c88e:	4b10      	ldr	r3, [pc, #64]	@ (800c8d0 <xTaskResumeAll+0x130>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d009      	beq.n	800c8aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c896:	2301      	movs	r3, #1
 800c898:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c89a:	4b0f      	ldr	r3, [pc, #60]	@ (800c8d8 <xTaskResumeAll+0x138>)
 800c89c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8aa:	f001 f9ef 	bl	800dc8c <vPortExitCritical>

	return xAlreadyYielded;
 800c8ae:	68bb      	ldr	r3, [r7, #8]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	2001d460 	.word	0x2001d460
 800c8bc:	2001d438 	.word	0x2001d438
 800c8c0:	2001d3f8 	.word	0x2001d3f8
 800c8c4:	2001d440 	.word	0x2001d440
 800c8c8:	2001cf68 	.word	0x2001cf68
 800c8cc:	2001cf64 	.word	0x2001cf64
 800c8d0:	2001d44c 	.word	0x2001d44c
 800c8d4:	2001d448 	.word	0x2001d448
 800c8d8:	e000ed04 	.word	0xe000ed04

0800c8dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8e2:	4b05      	ldr	r3, [pc, #20]	@ (800c8f8 <xTaskGetTickCount+0x1c>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c8e8:	687b      	ldr	r3, [r7, #4]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	2001d43c 	.word	0x2001d43c

0800c8fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b086      	sub	sp, #24
 800c900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c902:	2300      	movs	r3, #0
 800c904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c906:	4b4f      	ldr	r3, [pc, #316]	@ (800ca44 <xTaskIncrementTick+0x148>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f040 8090 	bne.w	800ca30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c910:	4b4d      	ldr	r3, [pc, #308]	@ (800ca48 <xTaskIncrementTick+0x14c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	3301      	adds	r3, #1
 800c916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c918:	4a4b      	ldr	r2, [pc, #300]	@ (800ca48 <xTaskIncrementTick+0x14c>)
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d121      	bne.n	800c968 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c924:	4b49      	ldr	r3, [pc, #292]	@ (800ca4c <xTaskIncrementTick+0x150>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00b      	beq.n	800c946 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	603b      	str	r3, [r7, #0]
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	e7fd      	b.n	800c942 <xTaskIncrementTick+0x46>
 800c946:	4b41      	ldr	r3, [pc, #260]	@ (800ca4c <xTaskIncrementTick+0x150>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	4b40      	ldr	r3, [pc, #256]	@ (800ca50 <xTaskIncrementTick+0x154>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a3e      	ldr	r2, [pc, #248]	@ (800ca4c <xTaskIncrementTick+0x150>)
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	4a3e      	ldr	r2, [pc, #248]	@ (800ca50 <xTaskIncrementTick+0x154>)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6013      	str	r3, [r2, #0]
 800c95a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca54 <xTaskIncrementTick+0x158>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3301      	adds	r3, #1
 800c960:	4a3c      	ldr	r2, [pc, #240]	@ (800ca54 <xTaskIncrementTick+0x158>)
 800c962:	6013      	str	r3, [r2, #0]
 800c964:	f000 fad4 	bl	800cf10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c968:	4b3b      	ldr	r3, [pc, #236]	@ (800ca58 <xTaskIncrementTick+0x15c>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d349      	bcc.n	800ca06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c972:	4b36      	ldr	r3, [pc, #216]	@ (800ca4c <xTaskIncrementTick+0x150>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d104      	bne.n	800c986 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c97c:	4b36      	ldr	r3, [pc, #216]	@ (800ca58 <xTaskIncrementTick+0x15c>)
 800c97e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c982:	601a      	str	r2, [r3, #0]
					break;
 800c984:	e03f      	b.n	800ca06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c986:	4b31      	ldr	r3, [pc, #196]	@ (800ca4c <xTaskIncrementTick+0x150>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d203      	bcs.n	800c9a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c99e:	4a2e      	ldr	r2, [pc, #184]	@ (800ca58 <xTaskIncrementTick+0x15c>)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9a4:	e02f      	b.n	800ca06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fe fc86 	bl	800b2bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d004      	beq.n	800c9c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	3318      	adds	r3, #24
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fe fc7d 	bl	800b2bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9c6:	4b25      	ldr	r3, [pc, #148]	@ (800ca5c <xTaskIncrementTick+0x160>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d903      	bls.n	800c9d6 <xTaskIncrementTick+0xda>
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d2:	4a22      	ldr	r2, [pc, #136]	@ (800ca5c <xTaskIncrementTick+0x160>)
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9da:	4613      	mov	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4a1f      	ldr	r2, [pc, #124]	@ (800ca60 <xTaskIncrementTick+0x164>)
 800c9e4:	441a      	add	r2, r3
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	f7fe fc08 	bl	800b202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9f6:	4b1b      	ldr	r3, [pc, #108]	@ (800ca64 <xTaskIncrementTick+0x168>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d3b8      	bcc.n	800c972 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ca00:	2301      	movs	r3, #1
 800ca02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca04:	e7b5      	b.n	800c972 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca06:	4b17      	ldr	r3, [pc, #92]	@ (800ca64 <xTaskIncrementTick+0x168>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca0c:	4914      	ldr	r1, [pc, #80]	@ (800ca60 <xTaskIncrementTick+0x164>)
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	440b      	add	r3, r1
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d901      	bls.n	800ca22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca22:	4b11      	ldr	r3, [pc, #68]	@ (800ca68 <xTaskIncrementTick+0x16c>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d007      	beq.n	800ca3a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	617b      	str	r3, [r7, #20]
 800ca2e:	e004      	b.n	800ca3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca30:	4b0e      	ldr	r3, [pc, #56]	@ (800ca6c <xTaskIncrementTick+0x170>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	3301      	adds	r3, #1
 800ca36:	4a0d      	ldr	r2, [pc, #52]	@ (800ca6c <xTaskIncrementTick+0x170>)
 800ca38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca3a:	697b      	ldr	r3, [r7, #20]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3718      	adds	r7, #24
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	2001d460 	.word	0x2001d460
 800ca48:	2001d43c 	.word	0x2001d43c
 800ca4c:	2001d3f0 	.word	0x2001d3f0
 800ca50:	2001d3f4 	.word	0x2001d3f4
 800ca54:	2001d450 	.word	0x2001d450
 800ca58:	2001d458 	.word	0x2001d458
 800ca5c:	2001d440 	.word	0x2001d440
 800ca60:	2001cf68 	.word	0x2001cf68
 800ca64:	2001cf64 	.word	0x2001cf64
 800ca68:	2001d44c 	.word	0x2001d44c
 800ca6c:	2001d448 	.word	0x2001d448

0800ca70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca76:	4b28      	ldr	r3, [pc, #160]	@ (800cb18 <vTaskSwitchContext+0xa8>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca7e:	4b27      	ldr	r3, [pc, #156]	@ (800cb1c <vTaskSwitchContext+0xac>)
 800ca80:	2201      	movs	r2, #1
 800ca82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca84:	e042      	b.n	800cb0c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ca86:	4b25      	ldr	r3, [pc, #148]	@ (800cb1c <vTaskSwitchContext+0xac>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca8c:	4b24      	ldr	r3, [pc, #144]	@ (800cb20 <vTaskSwitchContext+0xb0>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	60fb      	str	r3, [r7, #12]
 800ca92:	e011      	b.n	800cab8 <vTaskSwitchContext+0x48>
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10b      	bne.n	800cab2 <vTaskSwitchContext+0x42>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	607b      	str	r3, [r7, #4]
}
 800caac:	bf00      	nop
 800caae:	bf00      	nop
 800cab0:	e7fd      	b.n	800caae <vTaskSwitchContext+0x3e>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3b01      	subs	r3, #1
 800cab6:	60fb      	str	r3, [r7, #12]
 800cab8:	491a      	ldr	r1, [pc, #104]	@ (800cb24 <vTaskSwitchContext+0xb4>)
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	4613      	mov	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4413      	add	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	440b      	add	r3, r1
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d0e3      	beq.n	800ca94 <vTaskSwitchContext+0x24>
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4a13      	ldr	r2, [pc, #76]	@ (800cb24 <vTaskSwitchContext+0xb4>)
 800cad8:	4413      	add	r3, r2
 800cada:	60bb      	str	r3, [r7, #8]
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	605a      	str	r2, [r3, #4]
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	3308      	adds	r3, #8
 800caee:	429a      	cmp	r2, r3
 800caf0:	d104      	bne.n	800cafc <vTaskSwitchContext+0x8c>
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	605a      	str	r2, [r3, #4]
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	4a09      	ldr	r2, [pc, #36]	@ (800cb28 <vTaskSwitchContext+0xb8>)
 800cb04:	6013      	str	r3, [r2, #0]
 800cb06:	4a06      	ldr	r2, [pc, #24]	@ (800cb20 <vTaskSwitchContext+0xb0>)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6013      	str	r3, [r2, #0]
}
 800cb0c:	bf00      	nop
 800cb0e:	3714      	adds	r7, #20
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr
 800cb18:	2001d460 	.word	0x2001d460
 800cb1c:	2001d44c 	.word	0x2001d44c
 800cb20:	2001d440 	.word	0x2001d440
 800cb24:	2001cf68 	.word	0x2001cf68
 800cb28:	2001cf64 	.word	0x2001cf64

0800cb2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10b      	bne.n	800cb54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	60fb      	str	r3, [r7, #12]
}
 800cb4e:	bf00      	nop
 800cb50:	bf00      	nop
 800cb52:	e7fd      	b.n	800cb50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb54:	4b07      	ldr	r3, [pc, #28]	@ (800cb74 <vTaskPlaceOnEventList+0x48>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3318      	adds	r3, #24
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7fe fb74 	bl	800b24a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb62:	2101      	movs	r1, #1
 800cb64:	6838      	ldr	r0, [r7, #0]
 800cb66:	f000 fb81 	bl	800d26c <prvAddCurrentTaskToDelayedList>
}
 800cb6a:	bf00      	nop
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	2001cf64 	.word	0x2001cf64

0800cb78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10b      	bne.n	800cba2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	617b      	str	r3, [r7, #20]
}
 800cb9c:	bf00      	nop
 800cb9e:	bf00      	nop
 800cba0:	e7fd      	b.n	800cb9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cba2:	4b0a      	ldr	r3, [pc, #40]	@ (800cbcc <vTaskPlaceOnEventListRestricted+0x54>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3318      	adds	r3, #24
 800cba8:	4619      	mov	r1, r3
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f7fe fb29 	bl	800b202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cbb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	68b8      	ldr	r0, [r7, #8]
 800cbc0:	f000 fb54 	bl	800d26c <prvAddCurrentTaskToDelayedList>
	}
 800cbc4:	bf00      	nop
 800cbc6:	3718      	adds	r7, #24
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	2001cf64 	.word	0x2001cf64

0800cbd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10b      	bne.n	800cbfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbea:	f383 8811 	msr	BASEPRI, r3
 800cbee:	f3bf 8f6f 	isb	sy
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	60fb      	str	r3, [r7, #12]
}
 800cbf8:	bf00      	nop
 800cbfa:	bf00      	nop
 800cbfc:	e7fd      	b.n	800cbfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3318      	adds	r3, #24
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe fb5a 	bl	800b2bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc08:	4b1d      	ldr	r3, [pc, #116]	@ (800cc80 <xTaskRemoveFromEventList+0xb0>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d11d      	bne.n	800cc4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	3304      	adds	r3, #4
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fe fb51 	bl	800b2bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc1e:	4b19      	ldr	r3, [pc, #100]	@ (800cc84 <xTaskRemoveFromEventList+0xb4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d903      	bls.n	800cc2e <xTaskRemoveFromEventList+0x5e>
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc2a:	4a16      	ldr	r2, [pc, #88]	@ (800cc84 <xTaskRemoveFromEventList+0xb4>)
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc32:	4613      	mov	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4a13      	ldr	r2, [pc, #76]	@ (800cc88 <xTaskRemoveFromEventList+0xb8>)
 800cc3c:	441a      	add	r2, r3
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	3304      	adds	r3, #4
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f7fe fadc 	bl	800b202 <vListInsertEnd>
 800cc4a:	e005      	b.n	800cc58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	3318      	adds	r3, #24
 800cc50:	4619      	mov	r1, r3
 800cc52:	480e      	ldr	r0, [pc, #56]	@ (800cc8c <xTaskRemoveFromEventList+0xbc>)
 800cc54:	f7fe fad5 	bl	800b202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc5c:	4b0c      	ldr	r3, [pc, #48]	@ (800cc90 <xTaskRemoveFromEventList+0xc0>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d905      	bls.n	800cc72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc94 <xTaskRemoveFromEventList+0xc4>)
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	601a      	str	r2, [r3, #0]
 800cc70:	e001      	b.n	800cc76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cc72:	2300      	movs	r3, #0
 800cc74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc76:	697b      	ldr	r3, [r7, #20]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	2001d460 	.word	0x2001d460
 800cc84:	2001d440 	.word	0x2001d440
 800cc88:	2001cf68 	.word	0x2001cf68
 800cc8c:	2001d3f8 	.word	0x2001d3f8
 800cc90:	2001cf64 	.word	0x2001cf64
 800cc94:	2001d44c 	.word	0x2001d44c

0800cc98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cca0:	4b06      	ldr	r3, [pc, #24]	@ (800ccbc <vTaskInternalSetTimeOutState+0x24>)
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cca8:	4b05      	ldr	r3, [pc, #20]	@ (800ccc0 <vTaskInternalSetTimeOutState+0x28>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	605a      	str	r2, [r3, #4]
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	2001d450 	.word	0x2001d450
 800ccc0:	2001d43c 	.word	0x2001d43c

0800ccc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b088      	sub	sp, #32
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10b      	bne.n	800ccec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	613b      	str	r3, [r7, #16]
}
 800cce6:	bf00      	nop
 800cce8:	bf00      	nop
 800ccea:	e7fd      	b.n	800cce8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10b      	bne.n	800cd0a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	60fb      	str	r3, [r7, #12]
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop
 800cd08:	e7fd      	b.n	800cd06 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cd0a:	f000 ff8d 	bl	800dc28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd0e:	4b1d      	ldr	r3, [pc, #116]	@ (800cd84 <xTaskCheckForTimeOut+0xc0>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	69ba      	ldr	r2, [r7, #24]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd26:	d102      	bne.n	800cd2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	61fb      	str	r3, [r7, #28]
 800cd2c:	e023      	b.n	800cd76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	4b15      	ldr	r3, [pc, #84]	@ (800cd88 <xTaskCheckForTimeOut+0xc4>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d007      	beq.n	800cd4a <xTaskCheckForTimeOut+0x86>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	69ba      	ldr	r2, [r7, #24]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d302      	bcc.n	800cd4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd44:	2301      	movs	r3, #1
 800cd46:	61fb      	str	r3, [r7, #28]
 800cd48:	e015      	b.n	800cd76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d20b      	bcs.n	800cd6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	1ad2      	subs	r2, r2, r3
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7ff ff99 	bl	800cc98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd66:	2300      	movs	r3, #0
 800cd68:	61fb      	str	r3, [r7, #28]
 800cd6a:	e004      	b.n	800cd76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd72:	2301      	movs	r3, #1
 800cd74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd76:	f000 ff89 	bl	800dc8c <vPortExitCritical>

	return xReturn;
 800cd7a:	69fb      	ldr	r3, [r7, #28]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3720      	adds	r7, #32
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	2001d43c 	.word	0x2001d43c
 800cd88:	2001d450 	.word	0x2001d450

0800cd8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd90:	4b03      	ldr	r3, [pc, #12]	@ (800cda0 <vTaskMissedYield+0x14>)
 800cd92:	2201      	movs	r2, #1
 800cd94:	601a      	str	r2, [r3, #0]
}
 800cd96:	bf00      	nop
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	2001d44c 	.word	0x2001d44c

0800cda4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cdac:	f000 f852 	bl	800ce54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cdb0:	4b06      	ldr	r3, [pc, #24]	@ (800cdcc <prvIdleTask+0x28>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d9f9      	bls.n	800cdac <prvIdleTask+0x8>
			{
				taskYIELD();
 800cdb8:	4b05      	ldr	r3, [pc, #20]	@ (800cdd0 <prvIdleTask+0x2c>)
 800cdba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cdc8:	e7f0      	b.n	800cdac <prvIdleTask+0x8>
 800cdca:	bf00      	nop
 800cdcc:	2001cf68 	.word	0x2001cf68
 800cdd0:	e000ed04 	.word	0xe000ed04

0800cdd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdda:	2300      	movs	r3, #0
 800cddc:	607b      	str	r3, [r7, #4]
 800cdde:	e00c      	b.n	800cdfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	4613      	mov	r3, r2
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4a12      	ldr	r2, [pc, #72]	@ (800ce34 <prvInitialiseTaskLists+0x60>)
 800cdec:	4413      	add	r3, r2
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fe f9da 	bl	800b1a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	607b      	str	r3, [r7, #4]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b37      	cmp	r3, #55	@ 0x37
 800cdfe:	d9ef      	bls.n	800cde0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce00:	480d      	ldr	r0, [pc, #52]	@ (800ce38 <prvInitialiseTaskLists+0x64>)
 800ce02:	f7fe f9d1 	bl	800b1a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce06:	480d      	ldr	r0, [pc, #52]	@ (800ce3c <prvInitialiseTaskLists+0x68>)
 800ce08:	f7fe f9ce 	bl	800b1a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce0c:	480c      	ldr	r0, [pc, #48]	@ (800ce40 <prvInitialiseTaskLists+0x6c>)
 800ce0e:	f7fe f9cb 	bl	800b1a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce12:	480c      	ldr	r0, [pc, #48]	@ (800ce44 <prvInitialiseTaskLists+0x70>)
 800ce14:	f7fe f9c8 	bl	800b1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce18:	480b      	ldr	r0, [pc, #44]	@ (800ce48 <prvInitialiseTaskLists+0x74>)
 800ce1a:	f7fe f9c5 	bl	800b1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce4c <prvInitialiseTaskLists+0x78>)
 800ce20:	4a05      	ldr	r2, [pc, #20]	@ (800ce38 <prvInitialiseTaskLists+0x64>)
 800ce22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce24:	4b0a      	ldr	r3, [pc, #40]	@ (800ce50 <prvInitialiseTaskLists+0x7c>)
 800ce26:	4a05      	ldr	r2, [pc, #20]	@ (800ce3c <prvInitialiseTaskLists+0x68>)
 800ce28:	601a      	str	r2, [r3, #0]
}
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	2001cf68 	.word	0x2001cf68
 800ce38:	2001d3c8 	.word	0x2001d3c8
 800ce3c:	2001d3dc 	.word	0x2001d3dc
 800ce40:	2001d3f8 	.word	0x2001d3f8
 800ce44:	2001d40c 	.word	0x2001d40c
 800ce48:	2001d424 	.word	0x2001d424
 800ce4c:	2001d3f0 	.word	0x2001d3f0
 800ce50:	2001d3f4 	.word	0x2001d3f4

0800ce54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce5a:	e019      	b.n	800ce90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce5c:	f000 fee4 	bl	800dc28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce60:	4b10      	ldr	r3, [pc, #64]	@ (800cea4 <prvCheckTasksWaitingTermination+0x50>)
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe fa25 	bl	800b2bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce72:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <prvCheckTasksWaitingTermination+0x54>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	4a0b      	ldr	r2, [pc, #44]	@ (800cea8 <prvCheckTasksWaitingTermination+0x54>)
 800ce7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce7c:	4b0b      	ldr	r3, [pc, #44]	@ (800ceac <prvCheckTasksWaitingTermination+0x58>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	4a0a      	ldr	r2, [pc, #40]	@ (800ceac <prvCheckTasksWaitingTermination+0x58>)
 800ce84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce86:	f000 ff01 	bl	800dc8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 f810 	bl	800ceb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce90:	4b06      	ldr	r3, [pc, #24]	@ (800ceac <prvCheckTasksWaitingTermination+0x58>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e1      	bne.n	800ce5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce98:	bf00      	nop
 800ce9a:	bf00      	nop
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	2001d40c 	.word	0x2001d40c
 800cea8:	2001d438 	.word	0x2001d438
 800ceac:	2001d420 	.word	0x2001d420

0800ceb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d108      	bne.n	800ced4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cec6:	4618      	mov	r0, r3
 800cec8:	f001 f89e 	bl	800e008 <vPortFree>
				vPortFree( pxTCB );
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f001 f89b 	bl	800e008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ced2:	e019      	b.n	800cf08 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d103      	bne.n	800cee6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f001 f892 	bl	800e008 <vPortFree>
	}
 800cee4:	e010      	b.n	800cf08 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d00b      	beq.n	800cf08 <prvDeleteTCB+0x58>
	__asm volatile
 800cef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef4:	f383 8811 	msr	BASEPRI, r3
 800cef8:	f3bf 8f6f 	isb	sy
 800cefc:	f3bf 8f4f 	dsb	sy
 800cf00:	60fb      	str	r3, [r7, #12]
}
 800cf02:	bf00      	nop
 800cf04:	bf00      	nop
 800cf06:	e7fd      	b.n	800cf04 <prvDeleteTCB+0x54>
	}
 800cf08:	bf00      	nop
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf16:	4b0c      	ldr	r3, [pc, #48]	@ (800cf48 <prvResetNextTaskUnblockTime+0x38>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d104      	bne.n	800cf2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf20:	4b0a      	ldr	r3, [pc, #40]	@ (800cf4c <prvResetNextTaskUnblockTime+0x3c>)
 800cf22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf28:	e008      	b.n	800cf3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf2a:	4b07      	ldr	r3, [pc, #28]	@ (800cf48 <prvResetNextTaskUnblockTime+0x38>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	4a04      	ldr	r2, [pc, #16]	@ (800cf4c <prvResetNextTaskUnblockTime+0x3c>)
 800cf3a:	6013      	str	r3, [r2, #0]
}
 800cf3c:	bf00      	nop
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	2001d3f0 	.word	0x2001d3f0
 800cf4c:	2001d458 	.word	0x2001d458

0800cf50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf56:	4b0b      	ldr	r3, [pc, #44]	@ (800cf84 <xTaskGetSchedulerState+0x34>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d102      	bne.n	800cf64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	607b      	str	r3, [r7, #4]
 800cf62:	e008      	b.n	800cf76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf64:	4b08      	ldr	r3, [pc, #32]	@ (800cf88 <xTaskGetSchedulerState+0x38>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d102      	bne.n	800cf72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	607b      	str	r3, [r7, #4]
 800cf70:	e001      	b.n	800cf76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf72:	2300      	movs	r3, #0
 800cf74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf76:	687b      	ldr	r3, [r7, #4]
	}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr
 800cf84:	2001d444 	.word	0x2001d444
 800cf88:	2001d460 	.word	0x2001d460

0800cf8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d051      	beq.n	800d046 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfa6:	4b2a      	ldr	r3, [pc, #168]	@ (800d050 <xTaskPriorityInherit+0xc4>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d241      	bcs.n	800d034 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	db06      	blt.n	800cfc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfb8:	4b25      	ldr	r3, [pc, #148]	@ (800d050 <xTaskPriorityInherit+0xc4>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfbe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	6959      	ldr	r1, [r3, #20]
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfce:	4613      	mov	r3, r2
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	4413      	add	r3, r2
 800cfd4:	009b      	lsls	r3, r3, #2
 800cfd6:	4a1f      	ldr	r2, [pc, #124]	@ (800d054 <xTaskPriorityInherit+0xc8>)
 800cfd8:	4413      	add	r3, r2
 800cfda:	4299      	cmp	r1, r3
 800cfdc:	d122      	bne.n	800d024 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fe f96a 	bl	800b2bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cfe8:	4b19      	ldr	r3, [pc, #100]	@ (800d050 <xTaskPriorityInherit+0xc4>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cff6:	4b18      	ldr	r3, [pc, #96]	@ (800d058 <xTaskPriorityInherit+0xcc>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d903      	bls.n	800d006 <xTaskPriorityInherit+0x7a>
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d002:	4a15      	ldr	r2, [pc, #84]	@ (800d058 <xTaskPriorityInherit+0xcc>)
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d00a:	4613      	mov	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4a10      	ldr	r2, [pc, #64]	@ (800d054 <xTaskPriorityInherit+0xc8>)
 800d014:	441a      	add	r2, r3
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	3304      	adds	r3, #4
 800d01a:	4619      	mov	r1, r3
 800d01c:	4610      	mov	r0, r2
 800d01e:	f7fe f8f0 	bl	800b202 <vListInsertEnd>
 800d022:	e004      	b.n	800d02e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d024:	4b0a      	ldr	r3, [pc, #40]	@ (800d050 <xTaskPriorityInherit+0xc4>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d02e:	2301      	movs	r3, #1
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	e008      	b.n	800d046 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d038:	4b05      	ldr	r3, [pc, #20]	@ (800d050 <xTaskPriorityInherit+0xc4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d03e:	429a      	cmp	r2, r3
 800d040:	d201      	bcs.n	800d046 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d042:	2301      	movs	r3, #1
 800d044:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d046:	68fb      	ldr	r3, [r7, #12]
	}
 800d048:	4618      	mov	r0, r3
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	2001cf64 	.word	0x2001cf64
 800d054:	2001cf68 	.word	0x2001cf68
 800d058:	2001d440 	.word	0x2001d440

0800d05c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d068:	2300      	movs	r3, #0
 800d06a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d058      	beq.n	800d124 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d072:	4b2f      	ldr	r3, [pc, #188]	@ (800d130 <xTaskPriorityDisinherit+0xd4>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	693a      	ldr	r2, [r7, #16]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d00b      	beq.n	800d094 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	60fb      	str	r3, [r7, #12]
}
 800d08e:	bf00      	nop
 800d090:	bf00      	nop
 800d092:	e7fd      	b.n	800d090 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10b      	bne.n	800d0b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60bb      	str	r3, [r7, #8]
}
 800d0ae:	bf00      	nop
 800d0b0:	bf00      	nop
 800d0b2:	e7fd      	b.n	800d0b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0b8:	1e5a      	subs	r2, r3, #1
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d02c      	beq.n	800d124 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d128      	bne.n	800d124 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fe f8f0 	bl	800b2bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0f4:	4b0f      	ldr	r3, [pc, #60]	@ (800d134 <xTaskPriorityDisinherit+0xd8>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d903      	bls.n	800d104 <xTaskPriorityDisinherit+0xa8>
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d100:	4a0c      	ldr	r2, [pc, #48]	@ (800d134 <xTaskPriorityDisinherit+0xd8>)
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d108:	4613      	mov	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4a09      	ldr	r2, [pc, #36]	@ (800d138 <xTaskPriorityDisinherit+0xdc>)
 800d112:	441a      	add	r2, r3
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	3304      	adds	r3, #4
 800d118:	4619      	mov	r1, r3
 800d11a:	4610      	mov	r0, r2
 800d11c:	f7fe f871 	bl	800b202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d120:	2301      	movs	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d124:	697b      	ldr	r3, [r7, #20]
	}
 800d126:	4618      	mov	r0, r3
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	2001cf64 	.word	0x2001cf64
 800d134:	2001d440 	.word	0x2001d440
 800d138:	2001cf68 	.word	0x2001cf68

0800d13c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b088      	sub	sp, #32
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d14a:	2301      	movs	r3, #1
 800d14c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d06c      	beq.n	800d22e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10b      	bne.n	800d174 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	60fb      	str	r3, [r7, #12]
}
 800d16e:	bf00      	nop
 800d170:	bf00      	nop
 800d172:	e7fd      	b.n	800d170 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d178:	683a      	ldr	r2, [r7, #0]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d902      	bls.n	800d184 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	61fb      	str	r3, [r7, #28]
 800d182:	e002      	b.n	800d18a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d188:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d18e:	69fa      	ldr	r2, [r7, #28]
 800d190:	429a      	cmp	r2, r3
 800d192:	d04c      	beq.n	800d22e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d147      	bne.n	800d22e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d19e:	4b26      	ldr	r3, [pc, #152]	@ (800d238 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	69ba      	ldr	r2, [r7, #24]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d10b      	bne.n	800d1c0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	60bb      	str	r3, [r7, #8]
}
 800d1ba:	bf00      	nop
 800d1bc:	bf00      	nop
 800d1be:	e7fd      	b.n	800d1bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	69fa      	ldr	r2, [r7, #28]
 800d1ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	699b      	ldr	r3, [r3, #24]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	db04      	blt.n	800d1de <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	6959      	ldr	r1, [r3, #20]
 800d1e2:	693a      	ldr	r2, [r7, #16]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	4413      	add	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4a13      	ldr	r2, [pc, #76]	@ (800d23c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d1ee:	4413      	add	r3, r2
 800d1f0:	4299      	cmp	r1, r3
 800d1f2:	d11c      	bne.n	800d22e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe f85f 	bl	800b2bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d202:	4b0f      	ldr	r3, [pc, #60]	@ (800d240 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	429a      	cmp	r2, r3
 800d208:	d903      	bls.n	800d212 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d20e:	4a0c      	ldr	r2, [pc, #48]	@ (800d240 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d210:	6013      	str	r3, [r2, #0]
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d216:	4613      	mov	r3, r2
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	4413      	add	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4a07      	ldr	r2, [pc, #28]	@ (800d23c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d220:	441a      	add	r2, r3
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	3304      	adds	r3, #4
 800d226:	4619      	mov	r1, r3
 800d228:	4610      	mov	r0, r2
 800d22a:	f7fd ffea 	bl	800b202 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d22e:	bf00      	nop
 800d230:	3720      	adds	r7, #32
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	2001cf64 	.word	0x2001cf64
 800d23c:	2001cf68 	.word	0x2001cf68
 800d240:	2001d440 	.word	0x2001d440

0800d244 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d244:	b480      	push	{r7}
 800d246:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d248:	4b07      	ldr	r3, [pc, #28]	@ (800d268 <pvTaskIncrementMutexHeldCount+0x24>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d250:	4b05      	ldr	r3, [pc, #20]	@ (800d268 <pvTaskIncrementMutexHeldCount+0x24>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d256:	3201      	adds	r2, #1
 800d258:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d25a:	4b03      	ldr	r3, [pc, #12]	@ (800d268 <pvTaskIncrementMutexHeldCount+0x24>)
 800d25c:	681b      	ldr	r3, [r3, #0]
	}
 800d25e:	4618      	mov	r0, r3
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	2001cf64 	.word	0x2001cf64

0800d26c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d276:	4b21      	ldr	r3, [pc, #132]	@ (800d2fc <prvAddCurrentTaskToDelayedList+0x90>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d27c:	4b20      	ldr	r3, [pc, #128]	@ (800d300 <prvAddCurrentTaskToDelayedList+0x94>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3304      	adds	r3, #4
 800d282:	4618      	mov	r0, r3
 800d284:	f7fe f81a 	bl	800b2bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d28e:	d10a      	bne.n	800d2a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d007      	beq.n	800d2a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d296:	4b1a      	ldr	r3, [pc, #104]	@ (800d300 <prvAddCurrentTaskToDelayedList+0x94>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3304      	adds	r3, #4
 800d29c:	4619      	mov	r1, r3
 800d29e:	4819      	ldr	r0, [pc, #100]	@ (800d304 <prvAddCurrentTaskToDelayedList+0x98>)
 800d2a0:	f7fd ffaf 	bl	800b202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d2a4:	e026      	b.n	800d2f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d2ae:	4b14      	ldr	r3, [pc, #80]	@ (800d300 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d2b6:	68ba      	ldr	r2, [r7, #8]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d209      	bcs.n	800d2d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2be:	4b12      	ldr	r3, [pc, #72]	@ (800d308 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d300 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	f7fd ffbd 	bl	800b24a <vListInsert>
}
 800d2d0:	e010      	b.n	800d2f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d30c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d300 <prvAddCurrentTaskToDelayedList+0x94>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	4619      	mov	r1, r3
 800d2de:	4610      	mov	r0, r2
 800d2e0:	f7fd ffb3 	bl	800b24a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d310 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d202      	bcs.n	800d2f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d2ee:	4a08      	ldr	r2, [pc, #32]	@ (800d310 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	6013      	str	r3, [r2, #0]
}
 800d2f4:	bf00      	nop
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	2001d43c 	.word	0x2001d43c
 800d300:	2001cf64 	.word	0x2001cf64
 800d304:	2001d424 	.word	0x2001d424
 800d308:	2001d3f4 	.word	0x2001d3f4
 800d30c:	2001d3f0 	.word	0x2001d3f0
 800d310:	2001d458 	.word	0x2001d458

0800d314 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08a      	sub	sp, #40	@ 0x28
 800d318:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d31a:	2300      	movs	r3, #0
 800d31c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d31e:	f000 fb13 	bl	800d948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d322:	4b1d      	ldr	r3, [pc, #116]	@ (800d398 <xTimerCreateTimerTask+0x84>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d021      	beq.n	800d36e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d32a:	2300      	movs	r3, #0
 800d32c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d32e:	2300      	movs	r3, #0
 800d330:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d332:	1d3a      	adds	r2, r7, #4
 800d334:	f107 0108 	add.w	r1, r7, #8
 800d338:	f107 030c 	add.w	r3, r7, #12
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fd ff19 	bl	800b174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	9202      	str	r2, [sp, #8]
 800d34a:	9301      	str	r3, [sp, #4]
 800d34c:	2302      	movs	r3, #2
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	2300      	movs	r3, #0
 800d352:	460a      	mov	r2, r1
 800d354:	4911      	ldr	r1, [pc, #68]	@ (800d39c <xTimerCreateTimerTask+0x88>)
 800d356:	4812      	ldr	r0, [pc, #72]	@ (800d3a0 <xTimerCreateTimerTask+0x8c>)
 800d358:	f7ff f806 	bl	800c368 <xTaskCreateStatic>
 800d35c:	4603      	mov	r3, r0
 800d35e:	4a11      	ldr	r2, [pc, #68]	@ (800d3a4 <xTimerCreateTimerTask+0x90>)
 800d360:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d362:	4b10      	ldr	r3, [pc, #64]	@ (800d3a4 <xTimerCreateTimerTask+0x90>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d001      	beq.n	800d36e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d36a:	2301      	movs	r3, #1
 800d36c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10b      	bne.n	800d38c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d378:	f383 8811 	msr	BASEPRI, r3
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	613b      	str	r3, [r7, #16]
}
 800d386:	bf00      	nop
 800d388:	bf00      	nop
 800d38a:	e7fd      	b.n	800d388 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d38c:	697b      	ldr	r3, [r7, #20]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	2001d494 	.word	0x2001d494
 800d39c:	08010cb8 	.word	0x08010cb8
 800d3a0:	0800d4e1 	.word	0x0800d4e1
 800d3a4:	2001d498 	.word	0x2001d498

0800d3a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b08a      	sub	sp, #40	@ 0x28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10b      	bne.n	800d3d8 <xTimerGenericCommand+0x30>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	623b      	str	r3, [r7, #32]
}
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	e7fd      	b.n	800d3d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d3d8:	4b19      	ldr	r3, [pc, #100]	@ (800d440 <xTimerGenericCommand+0x98>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d02a      	beq.n	800d436 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2b05      	cmp	r3, #5
 800d3f0:	dc18      	bgt.n	800d424 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d3f2:	f7ff fdad 	bl	800cf50 <xTaskGetSchedulerState>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d109      	bne.n	800d410 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d3fc:	4b10      	ldr	r3, [pc, #64]	@ (800d440 <xTimerGenericCommand+0x98>)
 800d3fe:	6818      	ldr	r0, [r3, #0]
 800d400:	f107 0110 	add.w	r1, r7, #16
 800d404:	2300      	movs	r3, #0
 800d406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d408:	f7fe f936 	bl	800b678 <xQueueGenericSend>
 800d40c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d40e:	e012      	b.n	800d436 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d410:	4b0b      	ldr	r3, [pc, #44]	@ (800d440 <xTimerGenericCommand+0x98>)
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	f107 0110 	add.w	r1, r7, #16
 800d418:	2300      	movs	r3, #0
 800d41a:	2200      	movs	r2, #0
 800d41c:	f7fe f92c 	bl	800b678 <xQueueGenericSend>
 800d420:	6278      	str	r0, [r7, #36]	@ 0x24
 800d422:	e008      	b.n	800d436 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d424:	4b06      	ldr	r3, [pc, #24]	@ (800d440 <xTimerGenericCommand+0x98>)
 800d426:	6818      	ldr	r0, [r3, #0]
 800d428:	f107 0110 	add.w	r1, r7, #16
 800d42c:	2300      	movs	r3, #0
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	f7fe fa24 	bl	800b87c <xQueueGenericSendFromISR>
 800d434:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3728      	adds	r7, #40	@ 0x28
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	2001d494 	.word	0x2001d494

0800d444 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b088      	sub	sp, #32
 800d448:	af02      	add	r7, sp, #8
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d44e:	4b23      	ldr	r3, [pc, #140]	@ (800d4dc <prvProcessExpiredTimer+0x98>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	3304      	adds	r3, #4
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fd ff2d 	bl	800b2bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d468:	f003 0304 	and.w	r3, r3, #4
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d023      	beq.n	800d4b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	699a      	ldr	r2, [r3, #24]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	18d1      	adds	r1, r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	6978      	ldr	r0, [r7, #20]
 800d47e:	f000 f8d5 	bl	800d62c <prvInsertTimerInActiveList>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d020      	beq.n	800d4ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d488:	2300      	movs	r3, #0
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	2300      	movs	r3, #0
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	2100      	movs	r1, #0
 800d492:	6978      	ldr	r0, [r7, #20]
 800d494:	f7ff ff88 	bl	800d3a8 <xTimerGenericCommand>
 800d498:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d114      	bne.n	800d4ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	60fb      	str	r3, [r7, #12]
}
 800d4b2:	bf00      	nop
 800d4b4:	bf00      	nop
 800d4b6:	e7fd      	b.n	800d4b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4be:	f023 0301 	bic.w	r3, r3, #1
 800d4c2:	b2da      	uxtb	r2, r3
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	6a1b      	ldr	r3, [r3, #32]
 800d4ce:	6978      	ldr	r0, [r7, #20]
 800d4d0:	4798      	blx	r3
}
 800d4d2:	bf00      	nop
 800d4d4:	3718      	adds	r7, #24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	2001d48c 	.word	0x2001d48c

0800d4e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4e8:	f107 0308 	add.w	r3, r7, #8
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f000 f859 	bl	800d5a4 <prvGetNextExpireTime>
 800d4f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f000 f805 	bl	800d508 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d4fe:	f000 f8d7 	bl	800d6b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d502:	bf00      	nop
 800d504:	e7f0      	b.n	800d4e8 <prvTimerTask+0x8>
	...

0800d508 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d512:	f7ff f937 	bl	800c784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d516:	f107 0308 	add.w	r3, r7, #8
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 f866 	bl	800d5ec <prvSampleTimeNow>
 800d520:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d130      	bne.n	800d58a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d10a      	bne.n	800d544 <prvProcessTimerOrBlockTask+0x3c>
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	429a      	cmp	r2, r3
 800d534:	d806      	bhi.n	800d544 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d536:	f7ff f933 	bl	800c7a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d53a:	68f9      	ldr	r1, [r7, #12]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff ff81 	bl	800d444 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d542:	e024      	b.n	800d58e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d008      	beq.n	800d55c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d54a:	4b13      	ldr	r3, [pc, #76]	@ (800d598 <prvProcessTimerOrBlockTask+0x90>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <prvProcessTimerOrBlockTask+0x50>
 800d554:	2301      	movs	r3, #1
 800d556:	e000      	b.n	800d55a <prvProcessTimerOrBlockTask+0x52>
 800d558:	2300      	movs	r3, #0
 800d55a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d55c:	4b0f      	ldr	r3, [pc, #60]	@ (800d59c <prvProcessTimerOrBlockTask+0x94>)
 800d55e:	6818      	ldr	r0, [r3, #0]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	4619      	mov	r1, r3
 800d56a:	f7fe fec9 	bl	800c300 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d56e:	f7ff f917 	bl	800c7a0 <xTaskResumeAll>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10a      	bne.n	800d58e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d578:	4b09      	ldr	r3, [pc, #36]	@ (800d5a0 <prvProcessTimerOrBlockTask+0x98>)
 800d57a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	f3bf 8f6f 	isb	sy
}
 800d588:	e001      	b.n	800d58e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d58a:	f7ff f909 	bl	800c7a0 <xTaskResumeAll>
}
 800d58e:	bf00      	nop
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	2001d490 	.word	0x2001d490
 800d59c:	2001d494 	.word	0x2001d494
 800d5a0:	e000ed04 	.word	0xe000ed04

0800d5a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d5ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d5e8 <prvGetNextExpireTime+0x44>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d101      	bne.n	800d5ba <prvGetNextExpireTime+0x16>
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	e000      	b.n	800d5bc <prvGetNextExpireTime+0x18>
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d105      	bne.n	800d5d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5c8:	4b07      	ldr	r3, [pc, #28]	@ (800d5e8 <prvGetNextExpireTime+0x44>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	60fb      	str	r3, [r7, #12]
 800d5d2:	e001      	b.n	800d5d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3714      	adds	r7, #20
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	2001d48c 	.word	0x2001d48c

0800d5ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d5f4:	f7ff f972 	bl	800c8dc <xTaskGetTickCount>
 800d5f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d628 <prvSampleTimeNow+0x3c>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68fa      	ldr	r2, [r7, #12]
 800d600:	429a      	cmp	r2, r3
 800d602:	d205      	bcs.n	800d610 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d604:	f000 f93a 	bl	800d87c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	e002      	b.n	800d616 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d616:	4a04      	ldr	r2, [pc, #16]	@ (800d628 <prvSampleTimeNow+0x3c>)
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d61c:	68fb      	ldr	r3, [r7, #12]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	2001d49c 	.word	0x2001d49c

0800d62c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
 800d638:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d63a:	2300      	movs	r3, #0
 800d63c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d812      	bhi.n	800d678 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	1ad2      	subs	r2, r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d302      	bcc.n	800d666 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d660:	2301      	movs	r3, #1
 800d662:	617b      	str	r3, [r7, #20]
 800d664:	e01b      	b.n	800d69e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d666:	4b10      	ldr	r3, [pc, #64]	@ (800d6a8 <prvInsertTimerInActiveList+0x7c>)
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	3304      	adds	r3, #4
 800d66e:	4619      	mov	r1, r3
 800d670:	4610      	mov	r0, r2
 800d672:	f7fd fdea 	bl	800b24a <vListInsert>
 800d676:	e012      	b.n	800d69e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d206      	bcs.n	800d68e <prvInsertTimerInActiveList+0x62>
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	429a      	cmp	r2, r3
 800d686:	d302      	bcc.n	800d68e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d688:	2301      	movs	r3, #1
 800d68a:	617b      	str	r3, [r7, #20]
 800d68c:	e007      	b.n	800d69e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d68e:	4b07      	ldr	r3, [pc, #28]	@ (800d6ac <prvInsertTimerInActiveList+0x80>)
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	3304      	adds	r3, #4
 800d696:	4619      	mov	r1, r3
 800d698:	4610      	mov	r0, r2
 800d69a:	f7fd fdd6 	bl	800b24a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d69e:	697b      	ldr	r3, [r7, #20]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3718      	adds	r7, #24
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	2001d490 	.word	0x2001d490
 800d6ac:	2001d48c 	.word	0x2001d48c

0800d6b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08e      	sub	sp, #56	@ 0x38
 800d6b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6b6:	e0ce      	b.n	800d856 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	da19      	bge.n	800d6f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d6be:	1d3b      	adds	r3, r7, #4
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d10b      	bne.n	800d6e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ce:	f383 8811 	msr	BASEPRI, r3
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	f3bf 8f4f 	dsb	sy
 800d6da:	61fb      	str	r3, [r7, #28]
}
 800d6dc:	bf00      	nop
 800d6de:	bf00      	nop
 800d6e0:	e7fd      	b.n	800d6de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6e8:	6850      	ldr	r0, [r2, #4]
 800d6ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6ec:	6892      	ldr	r2, [r2, #8]
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f2c0 80ae 	blt.w	800d856 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d700:	695b      	ldr	r3, [r3, #20]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d004      	beq.n	800d710 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d708:	3304      	adds	r3, #4
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fd fdd6 	bl	800b2bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d710:	463b      	mov	r3, r7
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff ff6a 	bl	800d5ec <prvSampleTimeNow>
 800d718:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b09      	cmp	r3, #9
 800d71e:	f200 8097 	bhi.w	800d850 <prvProcessReceivedCommands+0x1a0>
 800d722:	a201      	add	r2, pc, #4	@ (adr r2, 800d728 <prvProcessReceivedCommands+0x78>)
 800d724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d728:	0800d751 	.word	0x0800d751
 800d72c:	0800d751 	.word	0x0800d751
 800d730:	0800d751 	.word	0x0800d751
 800d734:	0800d7c7 	.word	0x0800d7c7
 800d738:	0800d7db 	.word	0x0800d7db
 800d73c:	0800d827 	.word	0x0800d827
 800d740:	0800d751 	.word	0x0800d751
 800d744:	0800d751 	.word	0x0800d751
 800d748:	0800d7c7 	.word	0x0800d7c7
 800d74c:	0800d7db 	.word	0x0800d7db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d752:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d756:	f043 0301 	orr.w	r3, r3, #1
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d762:	68ba      	ldr	r2, [r7, #8]
 800d764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	18d1      	adds	r1, r2, r3
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d76e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d770:	f7ff ff5c 	bl	800d62c <prvInsertTimerInActiveList>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d06c      	beq.n	800d854 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d784:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d061      	beq.n	800d854 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d794:	699b      	ldr	r3, [r3, #24]
 800d796:	441a      	add	r2, r3
 800d798:	2300      	movs	r3, #0
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	2300      	movs	r3, #0
 800d79e:	2100      	movs	r1, #0
 800d7a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7a2:	f7ff fe01 	bl	800d3a8 <xTimerGenericCommand>
 800d7a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d152      	bne.n	800d854 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	61bb      	str	r3, [r7, #24]
}
 800d7c0:	bf00      	nop
 800d7c2:	bf00      	nop
 800d7c4:	e7fd      	b.n	800d7c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7cc:	f023 0301 	bic.w	r3, r3, #1
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d7d8:	e03d      	b.n	800d856 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7e0:	f043 0301 	orr.w	r3, r3, #1
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d7ec:	68ba      	ldr	r2, [r7, #8]
 800d7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10b      	bne.n	800d812 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	617b      	str	r3, [r7, #20]
}
 800d80c:	bf00      	nop
 800d80e:	bf00      	nop
 800d810:	e7fd      	b.n	800d80e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d814:	699a      	ldr	r2, [r3, #24]
 800d816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d818:	18d1      	adds	r1, r2, r3
 800d81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d81e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d820:	f7ff ff04 	bl	800d62c <prvInsertTimerInActiveList>
					break;
 800d824:	e017      	b.n	800d856 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d82c:	f003 0302 	and.w	r3, r3, #2
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d834:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d836:	f000 fbe7 	bl	800e008 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d83a:	e00c      	b.n	800d856 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d842:	f023 0301 	bic.w	r3, r3, #1
 800d846:	b2da      	uxtb	r2, r3
 800d848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d84a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d84e:	e002      	b.n	800d856 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d850:	bf00      	nop
 800d852:	e000      	b.n	800d856 <prvProcessReceivedCommands+0x1a6>
					break;
 800d854:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d856:	4b08      	ldr	r3, [pc, #32]	@ (800d878 <prvProcessReceivedCommands+0x1c8>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	1d39      	adds	r1, r7, #4
 800d85c:	2200      	movs	r2, #0
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe f93a 	bl	800bad8 <xQueueReceive>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	f47f af26 	bne.w	800d6b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d86c:	bf00      	nop
 800d86e:	bf00      	nop
 800d870:	3730      	adds	r7, #48	@ 0x30
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	2001d494 	.word	0x2001d494

0800d87c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d882:	e049      	b.n	800d918 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d884:	4b2e      	ldr	r3, [pc, #184]	@ (800d940 <prvSwitchTimerLists+0xc4>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d88e:	4b2c      	ldr	r3, [pc, #176]	@ (800d940 <prvSwitchTimerLists+0xc4>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	3304      	adds	r3, #4
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fd fd0d 	bl	800b2bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6a1b      	ldr	r3, [r3, #32]
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8b0:	f003 0304 	and.w	r3, r3, #4
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d02f      	beq.n	800d918 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	699b      	ldr	r3, [r3, #24]
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	4413      	add	r3, r2
 800d8c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d90e      	bls.n	800d8e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d8d6:	4b1a      	ldr	r3, [pc, #104]	@ (800d940 <prvSwitchTimerLists+0xc4>)
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f7fd fcb2 	bl	800b24a <vListInsert>
 800d8e6:	e017      	b.n	800d918 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	68f8      	ldr	r0, [r7, #12]
 800d8f4:	f7ff fd58 	bl	800d3a8 <xTimerGenericCommand>
 800d8f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10b      	bne.n	800d918 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	603b      	str	r3, [r7, #0]
}
 800d912:	bf00      	nop
 800d914:	bf00      	nop
 800d916:	e7fd      	b.n	800d914 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d918:	4b09      	ldr	r3, [pc, #36]	@ (800d940 <prvSwitchTimerLists+0xc4>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1b0      	bne.n	800d884 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d922:	4b07      	ldr	r3, [pc, #28]	@ (800d940 <prvSwitchTimerLists+0xc4>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d928:	4b06      	ldr	r3, [pc, #24]	@ (800d944 <prvSwitchTimerLists+0xc8>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a04      	ldr	r2, [pc, #16]	@ (800d940 <prvSwitchTimerLists+0xc4>)
 800d92e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d930:	4a04      	ldr	r2, [pc, #16]	@ (800d944 <prvSwitchTimerLists+0xc8>)
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	6013      	str	r3, [r2, #0]
}
 800d936:	bf00      	nop
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	2001d48c 	.word	0x2001d48c
 800d944:	2001d490 	.word	0x2001d490

0800d948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d94e:	f000 f96b 	bl	800dc28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d952:	4b15      	ldr	r3, [pc, #84]	@ (800d9a8 <prvCheckForValidListAndQueue+0x60>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d120      	bne.n	800d99c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d95a:	4814      	ldr	r0, [pc, #80]	@ (800d9ac <prvCheckForValidListAndQueue+0x64>)
 800d95c:	f7fd fc24 	bl	800b1a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d960:	4813      	ldr	r0, [pc, #76]	@ (800d9b0 <prvCheckForValidListAndQueue+0x68>)
 800d962:	f7fd fc21 	bl	800b1a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d966:	4b13      	ldr	r3, [pc, #76]	@ (800d9b4 <prvCheckForValidListAndQueue+0x6c>)
 800d968:	4a10      	ldr	r2, [pc, #64]	@ (800d9ac <prvCheckForValidListAndQueue+0x64>)
 800d96a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d96c:	4b12      	ldr	r3, [pc, #72]	@ (800d9b8 <prvCheckForValidListAndQueue+0x70>)
 800d96e:	4a10      	ldr	r2, [pc, #64]	@ (800d9b0 <prvCheckForValidListAndQueue+0x68>)
 800d970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d972:	2300      	movs	r3, #0
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	4b11      	ldr	r3, [pc, #68]	@ (800d9bc <prvCheckForValidListAndQueue+0x74>)
 800d978:	4a11      	ldr	r2, [pc, #68]	@ (800d9c0 <prvCheckForValidListAndQueue+0x78>)
 800d97a:	2110      	movs	r1, #16
 800d97c:	200a      	movs	r0, #10
 800d97e:	f7fd fd31 	bl	800b3e4 <xQueueGenericCreateStatic>
 800d982:	4603      	mov	r3, r0
 800d984:	4a08      	ldr	r2, [pc, #32]	@ (800d9a8 <prvCheckForValidListAndQueue+0x60>)
 800d986:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d988:	4b07      	ldr	r3, [pc, #28]	@ (800d9a8 <prvCheckForValidListAndQueue+0x60>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d005      	beq.n	800d99c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d990:	4b05      	ldr	r3, [pc, #20]	@ (800d9a8 <prvCheckForValidListAndQueue+0x60>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	490b      	ldr	r1, [pc, #44]	@ (800d9c4 <prvCheckForValidListAndQueue+0x7c>)
 800d996:	4618      	mov	r0, r3
 800d998:	f7fe fc5e 	bl	800c258 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d99c:	f000 f976 	bl	800dc8c <vPortExitCritical>
}
 800d9a0:	bf00      	nop
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	2001d494 	.word	0x2001d494
 800d9ac:	2001d464 	.word	0x2001d464
 800d9b0:	2001d478 	.word	0x2001d478
 800d9b4:	2001d48c 	.word	0x2001d48c
 800d9b8:	2001d490 	.word	0x2001d490
 800d9bc:	2001d540 	.word	0x2001d540
 800d9c0:	2001d4a0 	.word	0x2001d4a0
 800d9c4:	08010cc0 	.word	0x08010cc0

0800d9c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	3b04      	subs	r3, #4
 800d9d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d9e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3b04      	subs	r3, #4
 800d9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	f023 0201 	bic.w	r2, r3, #1
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	3b04      	subs	r3, #4
 800d9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d9f8:	4a0c      	ldr	r2, [pc, #48]	@ (800da2c <pxPortInitialiseStack+0x64>)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3b14      	subs	r3, #20
 800da02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3b04      	subs	r3, #4
 800da0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f06f 0202 	mvn.w	r2, #2
 800da16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	3b20      	subs	r3, #32
 800da1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800da1e:	68fb      	ldr	r3, [r7, #12]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3714      	adds	r7, #20
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr
 800da2c:	0800da31 	.word	0x0800da31

0800da30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800da3a:	4b13      	ldr	r3, [pc, #76]	@ (800da88 <prvTaskExitError+0x58>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da42:	d00b      	beq.n	800da5c <prvTaskExitError+0x2c>
	__asm volatile
 800da44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	60fb      	str	r3, [r7, #12]
}
 800da56:	bf00      	nop
 800da58:	bf00      	nop
 800da5a:	e7fd      	b.n	800da58 <prvTaskExitError+0x28>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	60bb      	str	r3, [r7, #8]
}
 800da6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da70:	bf00      	nop
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0fc      	beq.n	800da72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da78:	bf00      	nop
 800da7a:	bf00      	nop
 800da7c:	3714      	adds	r7, #20
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	200000a0 	.word	0x200000a0
 800da8c:	00000000 	.word	0x00000000

0800da90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da90:	4b07      	ldr	r3, [pc, #28]	@ (800dab0 <pxCurrentTCBConst2>)
 800da92:	6819      	ldr	r1, [r3, #0]
 800da94:	6808      	ldr	r0, [r1, #0]
 800da96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9a:	f380 8809 	msr	PSP, r0
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f04f 0000 	mov.w	r0, #0
 800daa6:	f380 8811 	msr	BASEPRI, r0
 800daaa:	4770      	bx	lr
 800daac:	f3af 8000 	nop.w

0800dab0 <pxCurrentTCBConst2>:
 800dab0:	2001cf64 	.word	0x2001cf64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dab4:	bf00      	nop
 800dab6:	bf00      	nop

0800dab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dab8:	4808      	ldr	r0, [pc, #32]	@ (800dadc <prvPortStartFirstTask+0x24>)
 800daba:	6800      	ldr	r0, [r0, #0]
 800dabc:	6800      	ldr	r0, [r0, #0]
 800dabe:	f380 8808 	msr	MSP, r0
 800dac2:	f04f 0000 	mov.w	r0, #0
 800dac6:	f380 8814 	msr	CONTROL, r0
 800daca:	b662      	cpsie	i
 800dacc:	b661      	cpsie	f
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	df00      	svc	0
 800dad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dada:	bf00      	nop
 800dadc:	e000ed08 	.word	0xe000ed08

0800dae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dae6:	4b47      	ldr	r3, [pc, #284]	@ (800dc04 <xPortStartScheduler+0x124>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a47      	ldr	r2, [pc, #284]	@ (800dc08 <xPortStartScheduler+0x128>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d10b      	bne.n	800db08 <xPortStartScheduler+0x28>
	__asm volatile
 800daf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf4:	f383 8811 	msr	BASEPRI, r3
 800daf8:	f3bf 8f6f 	isb	sy
 800dafc:	f3bf 8f4f 	dsb	sy
 800db00:	613b      	str	r3, [r7, #16]
}
 800db02:	bf00      	nop
 800db04:	bf00      	nop
 800db06:	e7fd      	b.n	800db04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800db08:	4b3e      	ldr	r3, [pc, #248]	@ (800dc04 <xPortStartScheduler+0x124>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a3f      	ldr	r2, [pc, #252]	@ (800dc0c <xPortStartScheduler+0x12c>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d10b      	bne.n	800db2a <xPortStartScheduler+0x4a>
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	60fb      	str	r3, [r7, #12]
}
 800db24:	bf00      	nop
 800db26:	bf00      	nop
 800db28:	e7fd      	b.n	800db26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db2a:	4b39      	ldr	r3, [pc, #228]	@ (800dc10 <xPortStartScheduler+0x130>)
 800db2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	b2db      	uxtb	r3, r3
 800db34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	22ff      	movs	r2, #255	@ 0xff
 800db3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	b2db      	uxtb	r3, r3
 800db42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db44:	78fb      	ldrb	r3, [r7, #3]
 800db46:	b2db      	uxtb	r3, r3
 800db48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	4b31      	ldr	r3, [pc, #196]	@ (800dc14 <xPortStartScheduler+0x134>)
 800db50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db52:	4b31      	ldr	r3, [pc, #196]	@ (800dc18 <xPortStartScheduler+0x138>)
 800db54:	2207      	movs	r2, #7
 800db56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db58:	e009      	b.n	800db6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800db5a:	4b2f      	ldr	r3, [pc, #188]	@ (800dc18 <xPortStartScheduler+0x138>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	3b01      	subs	r3, #1
 800db60:	4a2d      	ldr	r2, [pc, #180]	@ (800dc18 <xPortStartScheduler+0x138>)
 800db62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db64:	78fb      	ldrb	r3, [r7, #3]
 800db66:	b2db      	uxtb	r3, r3
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db6e:	78fb      	ldrb	r3, [r7, #3]
 800db70:	b2db      	uxtb	r3, r3
 800db72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db76:	2b80      	cmp	r3, #128	@ 0x80
 800db78:	d0ef      	beq.n	800db5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db7a:	4b27      	ldr	r3, [pc, #156]	@ (800dc18 <xPortStartScheduler+0x138>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f1c3 0307 	rsb	r3, r3, #7
 800db82:	2b04      	cmp	r3, #4
 800db84:	d00b      	beq.n	800db9e <xPortStartScheduler+0xbe>
	__asm volatile
 800db86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8a:	f383 8811 	msr	BASEPRI, r3
 800db8e:	f3bf 8f6f 	isb	sy
 800db92:	f3bf 8f4f 	dsb	sy
 800db96:	60bb      	str	r3, [r7, #8]
}
 800db98:	bf00      	nop
 800db9a:	bf00      	nop
 800db9c:	e7fd      	b.n	800db9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db9e:	4b1e      	ldr	r3, [pc, #120]	@ (800dc18 <xPortStartScheduler+0x138>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	021b      	lsls	r3, r3, #8
 800dba4:	4a1c      	ldr	r2, [pc, #112]	@ (800dc18 <xPortStartScheduler+0x138>)
 800dba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dba8:	4b1b      	ldr	r3, [pc, #108]	@ (800dc18 <xPortStartScheduler+0x138>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dbb0:	4a19      	ldr	r2, [pc, #100]	@ (800dc18 <xPortStartScheduler+0x138>)
 800dbb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dbbc:	4b17      	ldr	r3, [pc, #92]	@ (800dc1c <xPortStartScheduler+0x13c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a16      	ldr	r2, [pc, #88]	@ (800dc1c <xPortStartScheduler+0x13c>)
 800dbc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dbc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dbc8:	4b14      	ldr	r3, [pc, #80]	@ (800dc1c <xPortStartScheduler+0x13c>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a13      	ldr	r2, [pc, #76]	@ (800dc1c <xPortStartScheduler+0x13c>)
 800dbce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dbd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dbd4:	f000 f8da 	bl	800dd8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dbd8:	4b11      	ldr	r3, [pc, #68]	@ (800dc20 <xPortStartScheduler+0x140>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dbde:	f000 f8f9 	bl	800ddd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dbe2:	4b10      	ldr	r3, [pc, #64]	@ (800dc24 <xPortStartScheduler+0x144>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a0f      	ldr	r2, [pc, #60]	@ (800dc24 <xPortStartScheduler+0x144>)
 800dbe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dbec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dbee:	f7ff ff63 	bl	800dab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dbf2:	f7fe ff3d 	bl	800ca70 <vTaskSwitchContext>
	prvTaskExitError();
 800dbf6:	f7ff ff1b 	bl	800da30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	e000ed00 	.word	0xe000ed00
 800dc08:	410fc271 	.word	0x410fc271
 800dc0c:	410fc270 	.word	0x410fc270
 800dc10:	e000e400 	.word	0xe000e400
 800dc14:	2001d590 	.word	0x2001d590
 800dc18:	2001d594 	.word	0x2001d594
 800dc1c:	e000ed20 	.word	0xe000ed20
 800dc20:	200000a0 	.word	0x200000a0
 800dc24:	e000ef34 	.word	0xe000ef34

0800dc28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	607b      	str	r3, [r7, #4]
}
 800dc40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dc42:	4b10      	ldr	r3, [pc, #64]	@ (800dc84 <vPortEnterCritical+0x5c>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3301      	adds	r3, #1
 800dc48:	4a0e      	ldr	r2, [pc, #56]	@ (800dc84 <vPortEnterCritical+0x5c>)
 800dc4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dc4c:	4b0d      	ldr	r3, [pc, #52]	@ (800dc84 <vPortEnterCritical+0x5c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d110      	bne.n	800dc76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc54:	4b0c      	ldr	r3, [pc, #48]	@ (800dc88 <vPortEnterCritical+0x60>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00b      	beq.n	800dc76 <vPortEnterCritical+0x4e>
	__asm volatile
 800dc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc62:	f383 8811 	msr	BASEPRI, r3
 800dc66:	f3bf 8f6f 	isb	sy
 800dc6a:	f3bf 8f4f 	dsb	sy
 800dc6e:	603b      	str	r3, [r7, #0]
}
 800dc70:	bf00      	nop
 800dc72:	bf00      	nop
 800dc74:	e7fd      	b.n	800dc72 <vPortEnterCritical+0x4a>
	}
}
 800dc76:	bf00      	nop
 800dc78:	370c      	adds	r7, #12
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	200000a0 	.word	0x200000a0
 800dc88:	e000ed04 	.word	0xe000ed04

0800dc8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc92:	4b12      	ldr	r3, [pc, #72]	@ (800dcdc <vPortExitCritical+0x50>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10b      	bne.n	800dcb2 <vPortExitCritical+0x26>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	607b      	str	r3, [r7, #4]
}
 800dcac:	bf00      	nop
 800dcae:	bf00      	nop
 800dcb0:	e7fd      	b.n	800dcae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dcb2:	4b0a      	ldr	r3, [pc, #40]	@ (800dcdc <vPortExitCritical+0x50>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	4a08      	ldr	r2, [pc, #32]	@ (800dcdc <vPortExitCritical+0x50>)
 800dcba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dcbc:	4b07      	ldr	r3, [pc, #28]	@ (800dcdc <vPortExitCritical+0x50>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d105      	bne.n	800dcd0 <vPortExitCritical+0x44>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	f383 8811 	msr	BASEPRI, r3
}
 800dcce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	200000a0 	.word	0x200000a0

0800dce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dce0:	f3ef 8009 	mrs	r0, PSP
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	4b15      	ldr	r3, [pc, #84]	@ (800dd40 <pxCurrentTCBConst>)
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	f01e 0f10 	tst.w	lr, #16
 800dcf0:	bf08      	it	eq
 800dcf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dcf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfa:	6010      	str	r0, [r2, #0]
 800dcfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dd04:	f380 8811 	msr	BASEPRI, r0
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f7fe feae 	bl	800ca70 <vTaskSwitchContext>
 800dd14:	f04f 0000 	mov.w	r0, #0
 800dd18:	f380 8811 	msr	BASEPRI, r0
 800dd1c:	bc09      	pop	{r0, r3}
 800dd1e:	6819      	ldr	r1, [r3, #0]
 800dd20:	6808      	ldr	r0, [r1, #0]
 800dd22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd26:	f01e 0f10 	tst.w	lr, #16
 800dd2a:	bf08      	it	eq
 800dd2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd30:	f380 8809 	msr	PSP, r0
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	f3af 8000 	nop.w

0800dd40 <pxCurrentTCBConst>:
 800dd40:	2001cf64 	.word	0x2001cf64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dd44:	bf00      	nop
 800dd46:	bf00      	nop

0800dd48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	607b      	str	r3, [r7, #4]
}
 800dd60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd62:	f7fe fdcb 	bl	800c8fc <xTaskIncrementTick>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d003      	beq.n	800dd74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd6c:	4b06      	ldr	r3, [pc, #24]	@ (800dd88 <xPortSysTickHandler+0x40>)
 800dd6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd72:	601a      	str	r2, [r3, #0]
 800dd74:	2300      	movs	r3, #0
 800dd76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	f383 8811 	msr	BASEPRI, r3
}
 800dd7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd80:	bf00      	nop
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	e000ed04 	.word	0xe000ed04

0800dd8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd90:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc0 <vPortSetupTimerInterrupt+0x34>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd96:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc4 <vPortSetupTimerInterrupt+0x38>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ddc8 <vPortSetupTimerInterrupt+0x3c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a0a      	ldr	r2, [pc, #40]	@ (800ddcc <vPortSetupTimerInterrupt+0x40>)
 800dda2:	fba2 2303 	umull	r2, r3, r2, r3
 800dda6:	099b      	lsrs	r3, r3, #6
 800dda8:	4a09      	ldr	r2, [pc, #36]	@ (800ddd0 <vPortSetupTimerInterrupt+0x44>)
 800ddaa:	3b01      	subs	r3, #1
 800ddac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddae:	4b04      	ldr	r3, [pc, #16]	@ (800ddc0 <vPortSetupTimerInterrupt+0x34>)
 800ddb0:	2207      	movs	r2, #7
 800ddb2:	601a      	str	r2, [r3, #0]
}
 800ddb4:	bf00      	nop
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	e000e010 	.word	0xe000e010
 800ddc4:	e000e018 	.word	0xe000e018
 800ddc8:	20000094 	.word	0x20000094
 800ddcc:	10624dd3 	.word	0x10624dd3
 800ddd0:	e000e014 	.word	0xe000e014

0800ddd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ddd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dde4 <vPortEnableVFP+0x10>
 800ddd8:	6801      	ldr	r1, [r0, #0]
 800ddda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ddde:	6001      	str	r1, [r0, #0]
 800dde0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dde2:	bf00      	nop
 800dde4:	e000ed88 	.word	0xe000ed88

0800dde8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ddee:	f3ef 8305 	mrs	r3, IPSR
 800ddf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b0f      	cmp	r3, #15
 800ddf8:	d915      	bls.n	800de26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ddfa:	4a18      	ldr	r2, [pc, #96]	@ (800de5c <vPortValidateInterruptPriority+0x74>)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	4413      	add	r3, r2
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de04:	4b16      	ldr	r3, [pc, #88]	@ (800de60 <vPortValidateInterruptPriority+0x78>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	7afa      	ldrb	r2, [r7, #11]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d20b      	bcs.n	800de26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	607b      	str	r3, [r7, #4]
}
 800de20:	bf00      	nop
 800de22:	bf00      	nop
 800de24:	e7fd      	b.n	800de22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800de26:	4b0f      	ldr	r3, [pc, #60]	@ (800de64 <vPortValidateInterruptPriority+0x7c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800de2e:	4b0e      	ldr	r3, [pc, #56]	@ (800de68 <vPortValidateInterruptPriority+0x80>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	429a      	cmp	r2, r3
 800de34:	d90b      	bls.n	800de4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	603b      	str	r3, [r7, #0]
}
 800de48:	bf00      	nop
 800de4a:	bf00      	nop
 800de4c:	e7fd      	b.n	800de4a <vPortValidateInterruptPriority+0x62>
	}
 800de4e:	bf00      	nop
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	e000e3f0 	.word	0xe000e3f0
 800de60:	2001d590 	.word	0x2001d590
 800de64:	e000ed0c 	.word	0xe000ed0c
 800de68:	2001d594 	.word	0x2001d594

0800de6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b08a      	sub	sp, #40	@ 0x28
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de74:	2300      	movs	r3, #0
 800de76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de78:	f7fe fc84 	bl	800c784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de7c:	4b5c      	ldr	r3, [pc, #368]	@ (800dff0 <pvPortMalloc+0x184>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d101      	bne.n	800de88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de84:	f000 f924 	bl	800e0d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de88:	4b5a      	ldr	r3, [pc, #360]	@ (800dff4 <pvPortMalloc+0x188>)
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4013      	ands	r3, r2
 800de90:	2b00      	cmp	r3, #0
 800de92:	f040 8095 	bne.w	800dfc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d01e      	beq.n	800deda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800de9c:	2208      	movs	r2, #8
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4413      	add	r3, r2
 800dea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f003 0307 	and.w	r3, r3, #7
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d015      	beq.n	800deda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f023 0307 	bic.w	r3, r3, #7
 800deb4:	3308      	adds	r3, #8
 800deb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f003 0307 	and.w	r3, r3, #7
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00b      	beq.n	800deda <pvPortMalloc+0x6e>
	__asm volatile
 800dec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec6:	f383 8811 	msr	BASEPRI, r3
 800deca:	f3bf 8f6f 	isb	sy
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	617b      	str	r3, [r7, #20]
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop
 800ded8:	e7fd      	b.n	800ded6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d06f      	beq.n	800dfc0 <pvPortMalloc+0x154>
 800dee0:	4b45      	ldr	r3, [pc, #276]	@ (800dff8 <pvPortMalloc+0x18c>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d86a      	bhi.n	800dfc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800deea:	4b44      	ldr	r3, [pc, #272]	@ (800dffc <pvPortMalloc+0x190>)
 800deec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800deee:	4b43      	ldr	r3, [pc, #268]	@ (800dffc <pvPortMalloc+0x190>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800def4:	e004      	b.n	800df00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800def6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800defa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	429a      	cmp	r2, r3
 800df08:	d903      	bls.n	800df12 <pvPortMalloc+0xa6>
 800df0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1f1      	bne.n	800def6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800df12:	4b37      	ldr	r3, [pc, #220]	@ (800dff0 <pvPortMalloc+0x184>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df18:	429a      	cmp	r2, r3
 800df1a:	d051      	beq.n	800dfc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800df1c:	6a3b      	ldr	r3, [r7, #32]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2208      	movs	r2, #8
 800df22:	4413      	add	r3, r2
 800df24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800df26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	6a3b      	ldr	r3, [r7, #32]
 800df2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800df2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df30:	685a      	ldr	r2, [r3, #4]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	1ad2      	subs	r2, r2, r3
 800df36:	2308      	movs	r3, #8
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d920      	bls.n	800df80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800df3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4413      	add	r3, r2
 800df44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	f003 0307 	and.w	r3, r3, #7
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00b      	beq.n	800df68 <pvPortMalloc+0xfc>
	__asm volatile
 800df50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	613b      	str	r3, [r7, #16]
}
 800df62:	bf00      	nop
 800df64:	bf00      	nop
 800df66:	e7fd      	b.n	800df64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6a:	685a      	ldr	r2, [r3, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	1ad2      	subs	r2, r2, r3
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df7a:	69b8      	ldr	r0, [r7, #24]
 800df7c:	f000 f90a 	bl	800e194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df80:	4b1d      	ldr	r3, [pc, #116]	@ (800dff8 <pvPortMalloc+0x18c>)
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	1ad3      	subs	r3, r2, r3
 800df8a:	4a1b      	ldr	r2, [pc, #108]	@ (800dff8 <pvPortMalloc+0x18c>)
 800df8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df8e:	4b1a      	ldr	r3, [pc, #104]	@ (800dff8 <pvPortMalloc+0x18c>)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	4b1b      	ldr	r3, [pc, #108]	@ (800e000 <pvPortMalloc+0x194>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	429a      	cmp	r2, r3
 800df98:	d203      	bcs.n	800dfa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df9a:	4b17      	ldr	r3, [pc, #92]	@ (800dff8 <pvPortMalloc+0x18c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a18      	ldr	r2, [pc, #96]	@ (800e000 <pvPortMalloc+0x194>)
 800dfa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa4:	685a      	ldr	r2, [r3, #4]
 800dfa6:	4b13      	ldr	r3, [pc, #76]	@ (800dff4 <pvPortMalloc+0x188>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	431a      	orrs	r2, r3
 800dfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dfb6:	4b13      	ldr	r3, [pc, #76]	@ (800e004 <pvPortMalloc+0x198>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	4a11      	ldr	r2, [pc, #68]	@ (800e004 <pvPortMalloc+0x198>)
 800dfbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dfc0:	f7fe fbee 	bl	800c7a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00b      	beq.n	800dfe6 <pvPortMalloc+0x17a>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	60fb      	str	r3, [r7, #12]
}
 800dfe0:	bf00      	nop
 800dfe2:	bf00      	nop
 800dfe4:	e7fd      	b.n	800dfe2 <pvPortMalloc+0x176>
	return pvReturn;
 800dfe6:	69fb      	ldr	r3, [r7, #28]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3728      	adds	r7, #40	@ 0x28
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	2001e158 	.word	0x2001e158
 800dff4:	2001e16c 	.word	0x2001e16c
 800dff8:	2001e15c 	.word	0x2001e15c
 800dffc:	2001e150 	.word	0x2001e150
 800e000:	2001e160 	.word	0x2001e160
 800e004:	2001e164 	.word	0x2001e164

0800e008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d04f      	beq.n	800e0ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e01a:	2308      	movs	r3, #8
 800e01c:	425b      	negs	r3, r3
 800e01e:	697a      	ldr	r2, [r7, #20]
 800e020:	4413      	add	r3, r2
 800e022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	685a      	ldr	r2, [r3, #4]
 800e02c:	4b25      	ldr	r3, [pc, #148]	@ (800e0c4 <vPortFree+0xbc>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4013      	ands	r3, r2
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <vPortFree+0x46>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	60fb      	str	r3, [r7, #12]
}
 800e048:	bf00      	nop
 800e04a:	bf00      	nop
 800e04c:	e7fd      	b.n	800e04a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00b      	beq.n	800e06e <vPortFree+0x66>
	__asm volatile
 800e056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	60bb      	str	r3, [r7, #8]
}
 800e068:	bf00      	nop
 800e06a:	bf00      	nop
 800e06c:	e7fd      	b.n	800e06a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	4b14      	ldr	r3, [pc, #80]	@ (800e0c4 <vPortFree+0xbc>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4013      	ands	r3, r2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d01e      	beq.n	800e0ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d11a      	bne.n	800e0ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c4 <vPortFree+0xbc>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	43db      	mvns	r3, r3
 800e08e:	401a      	ands	r2, r3
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e094:	f7fe fb76 	bl	800c784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	685a      	ldr	r2, [r3, #4]
 800e09c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c8 <vPortFree+0xc0>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	4a09      	ldr	r2, [pc, #36]	@ (800e0c8 <vPortFree+0xc0>)
 800e0a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e0a6:	6938      	ldr	r0, [r7, #16]
 800e0a8:	f000 f874 	bl	800e194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e0ac:	4b07      	ldr	r3, [pc, #28]	@ (800e0cc <vPortFree+0xc4>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	4a06      	ldr	r2, [pc, #24]	@ (800e0cc <vPortFree+0xc4>)
 800e0b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e0b6:	f7fe fb73 	bl	800c7a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e0ba:	bf00      	nop
 800e0bc:	3718      	adds	r7, #24
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	2001e16c 	.word	0x2001e16c
 800e0c8:	2001e15c 	.word	0x2001e15c
 800e0cc:	2001e168 	.word	0x2001e168

0800e0d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e0d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800e0da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e0dc:	4b27      	ldr	r3, [pc, #156]	@ (800e17c <prvHeapInit+0xac>)
 800e0de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f003 0307 	and.w	r3, r3, #7
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00c      	beq.n	800e104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3307      	adds	r3, #7
 800e0ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	f023 0307 	bic.w	r3, r3, #7
 800e0f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e0f8:	68ba      	ldr	r2, [r7, #8]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	4a1f      	ldr	r2, [pc, #124]	@ (800e17c <prvHeapInit+0xac>)
 800e100:	4413      	add	r3, r2
 800e102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e108:	4a1d      	ldr	r2, [pc, #116]	@ (800e180 <prvHeapInit+0xb0>)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e10e:	4b1c      	ldr	r3, [pc, #112]	@ (800e180 <prvHeapInit+0xb0>)
 800e110:	2200      	movs	r2, #0
 800e112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	4413      	add	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e11c:	2208      	movs	r2, #8
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	1a9b      	subs	r3, r3, r2
 800e122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f023 0307 	bic.w	r3, r3, #7
 800e12a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4a15      	ldr	r2, [pc, #84]	@ (800e184 <prvHeapInit+0xb4>)
 800e130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e132:	4b14      	ldr	r3, [pc, #80]	@ (800e184 <prvHeapInit+0xb4>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2200      	movs	r2, #0
 800e138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e13a:	4b12      	ldr	r3, [pc, #72]	@ (800e184 <prvHeapInit+0xb4>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	1ad2      	subs	r2, r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e150:	4b0c      	ldr	r3, [pc, #48]	@ (800e184 <prvHeapInit+0xb4>)
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	4a0a      	ldr	r2, [pc, #40]	@ (800e188 <prvHeapInit+0xb8>)
 800e15e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	4a09      	ldr	r2, [pc, #36]	@ (800e18c <prvHeapInit+0xbc>)
 800e166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e168:	4b09      	ldr	r3, [pc, #36]	@ (800e190 <prvHeapInit+0xc0>)
 800e16a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e16e:	601a      	str	r2, [r3, #0]
}
 800e170:	bf00      	nop
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	2001d598 	.word	0x2001d598
 800e180:	2001e150 	.word	0x2001e150
 800e184:	2001e158 	.word	0x2001e158
 800e188:	2001e160 	.word	0x2001e160
 800e18c:	2001e15c 	.word	0x2001e15c
 800e190:	2001e16c 	.word	0x2001e16c

0800e194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e194:	b480      	push	{r7}
 800e196:	b085      	sub	sp, #20
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e19c:	4b28      	ldr	r3, [pc, #160]	@ (800e240 <prvInsertBlockIntoFreeList+0xac>)
 800e19e:	60fb      	str	r3, [r7, #12]
 800e1a0:	e002      	b.n	800e1a8 <prvInsertBlockIntoFreeList+0x14>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d8f7      	bhi.n	800e1a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	4413      	add	r3, r2
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d108      	bne.n	800e1d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	685a      	ldr	r2, [r3, #4]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	441a      	add	r2, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	441a      	add	r2, r3
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d118      	bne.n	800e21c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	4b15      	ldr	r3, [pc, #84]	@ (800e244 <prvInsertBlockIntoFreeList+0xb0>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d00d      	beq.n	800e212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	441a      	add	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	601a      	str	r2, [r3, #0]
 800e210:	e008      	b.n	800e224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e212:	4b0c      	ldr	r3, [pc, #48]	@ (800e244 <prvInsertBlockIntoFreeList+0xb0>)
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	601a      	str	r2, [r3, #0]
 800e21a:	e003      	b.n	800e224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d002      	beq.n	800e232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e232:	bf00      	nop
 800e234:	3714      	adds	r7, #20
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	2001e150 	.word	0x2001e150
 800e244:	2001e158 	.word	0x2001e158

0800e248 <__cvt>:
 800e248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e24c:	ec57 6b10 	vmov	r6, r7, d0
 800e250:	2f00      	cmp	r7, #0
 800e252:	460c      	mov	r4, r1
 800e254:	4619      	mov	r1, r3
 800e256:	463b      	mov	r3, r7
 800e258:	bfbb      	ittet	lt
 800e25a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e25e:	461f      	movlt	r7, r3
 800e260:	2300      	movge	r3, #0
 800e262:	232d      	movlt	r3, #45	@ 0x2d
 800e264:	700b      	strb	r3, [r1, #0]
 800e266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e268:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e26c:	4691      	mov	r9, r2
 800e26e:	f023 0820 	bic.w	r8, r3, #32
 800e272:	bfbc      	itt	lt
 800e274:	4632      	movlt	r2, r6
 800e276:	4616      	movlt	r6, r2
 800e278:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e27c:	d005      	beq.n	800e28a <__cvt+0x42>
 800e27e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e282:	d100      	bne.n	800e286 <__cvt+0x3e>
 800e284:	3401      	adds	r4, #1
 800e286:	2102      	movs	r1, #2
 800e288:	e000      	b.n	800e28c <__cvt+0x44>
 800e28a:	2103      	movs	r1, #3
 800e28c:	ab03      	add	r3, sp, #12
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	ab02      	add	r3, sp, #8
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	ec47 6b10 	vmov	d0, r6, r7
 800e298:	4653      	mov	r3, sl
 800e29a:	4622      	mov	r2, r4
 800e29c:	f000 fdd0 	bl	800ee40 <_dtoa_r>
 800e2a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e2a4:	4605      	mov	r5, r0
 800e2a6:	d119      	bne.n	800e2dc <__cvt+0x94>
 800e2a8:	f019 0f01 	tst.w	r9, #1
 800e2ac:	d00e      	beq.n	800e2cc <__cvt+0x84>
 800e2ae:	eb00 0904 	add.w	r9, r0, r4
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	4639      	mov	r1, r7
 800e2ba:	f7f2 fc1d 	bl	8000af8 <__aeabi_dcmpeq>
 800e2be:	b108      	cbz	r0, 800e2c4 <__cvt+0x7c>
 800e2c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e2c4:	2230      	movs	r2, #48	@ 0x30
 800e2c6:	9b03      	ldr	r3, [sp, #12]
 800e2c8:	454b      	cmp	r3, r9
 800e2ca:	d31e      	bcc.n	800e30a <__cvt+0xc2>
 800e2cc:	9b03      	ldr	r3, [sp, #12]
 800e2ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2d0:	1b5b      	subs	r3, r3, r5
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	6013      	str	r3, [r2, #0]
 800e2d6:	b004      	add	sp, #16
 800e2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e2e0:	eb00 0904 	add.w	r9, r0, r4
 800e2e4:	d1e5      	bne.n	800e2b2 <__cvt+0x6a>
 800e2e6:	7803      	ldrb	r3, [r0, #0]
 800e2e8:	2b30      	cmp	r3, #48	@ 0x30
 800e2ea:	d10a      	bne.n	800e302 <__cvt+0xba>
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	4639      	mov	r1, r7
 800e2f4:	f7f2 fc00 	bl	8000af8 <__aeabi_dcmpeq>
 800e2f8:	b918      	cbnz	r0, 800e302 <__cvt+0xba>
 800e2fa:	f1c4 0401 	rsb	r4, r4, #1
 800e2fe:	f8ca 4000 	str.w	r4, [sl]
 800e302:	f8da 3000 	ldr.w	r3, [sl]
 800e306:	4499      	add	r9, r3
 800e308:	e7d3      	b.n	800e2b2 <__cvt+0x6a>
 800e30a:	1c59      	adds	r1, r3, #1
 800e30c:	9103      	str	r1, [sp, #12]
 800e30e:	701a      	strb	r2, [r3, #0]
 800e310:	e7d9      	b.n	800e2c6 <__cvt+0x7e>

0800e312 <__exponent>:
 800e312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e314:	2900      	cmp	r1, #0
 800e316:	bfba      	itte	lt
 800e318:	4249      	neglt	r1, r1
 800e31a:	232d      	movlt	r3, #45	@ 0x2d
 800e31c:	232b      	movge	r3, #43	@ 0x2b
 800e31e:	2909      	cmp	r1, #9
 800e320:	7002      	strb	r2, [r0, #0]
 800e322:	7043      	strb	r3, [r0, #1]
 800e324:	dd29      	ble.n	800e37a <__exponent+0x68>
 800e326:	f10d 0307 	add.w	r3, sp, #7
 800e32a:	461d      	mov	r5, r3
 800e32c:	270a      	movs	r7, #10
 800e32e:	461a      	mov	r2, r3
 800e330:	fbb1 f6f7 	udiv	r6, r1, r7
 800e334:	fb07 1416 	mls	r4, r7, r6, r1
 800e338:	3430      	adds	r4, #48	@ 0x30
 800e33a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e33e:	460c      	mov	r4, r1
 800e340:	2c63      	cmp	r4, #99	@ 0x63
 800e342:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e346:	4631      	mov	r1, r6
 800e348:	dcf1      	bgt.n	800e32e <__exponent+0x1c>
 800e34a:	3130      	adds	r1, #48	@ 0x30
 800e34c:	1e94      	subs	r4, r2, #2
 800e34e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e352:	1c41      	adds	r1, r0, #1
 800e354:	4623      	mov	r3, r4
 800e356:	42ab      	cmp	r3, r5
 800e358:	d30a      	bcc.n	800e370 <__exponent+0x5e>
 800e35a:	f10d 0309 	add.w	r3, sp, #9
 800e35e:	1a9b      	subs	r3, r3, r2
 800e360:	42ac      	cmp	r4, r5
 800e362:	bf88      	it	hi
 800e364:	2300      	movhi	r3, #0
 800e366:	3302      	adds	r3, #2
 800e368:	4403      	add	r3, r0
 800e36a:	1a18      	subs	r0, r3, r0
 800e36c:	b003      	add	sp, #12
 800e36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e370:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e374:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e378:	e7ed      	b.n	800e356 <__exponent+0x44>
 800e37a:	2330      	movs	r3, #48	@ 0x30
 800e37c:	3130      	adds	r1, #48	@ 0x30
 800e37e:	7083      	strb	r3, [r0, #2]
 800e380:	70c1      	strb	r1, [r0, #3]
 800e382:	1d03      	adds	r3, r0, #4
 800e384:	e7f1      	b.n	800e36a <__exponent+0x58>
	...

0800e388 <_printf_float>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	b08d      	sub	sp, #52	@ 0x34
 800e38e:	460c      	mov	r4, r1
 800e390:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e394:	4616      	mov	r6, r2
 800e396:	461f      	mov	r7, r3
 800e398:	4605      	mov	r5, r0
 800e39a:	f000 fc89 	bl	800ecb0 <_localeconv_r>
 800e39e:	6803      	ldr	r3, [r0, #0]
 800e3a0:	9304      	str	r3, [sp, #16]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7f1 ff7c 	bl	80002a0 <strlen>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e3b0:	9005      	str	r0, [sp, #20]
 800e3b2:	3307      	adds	r3, #7
 800e3b4:	f023 0307 	bic.w	r3, r3, #7
 800e3b8:	f103 0208 	add.w	r2, r3, #8
 800e3bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e3c0:	f8d4 b000 	ldr.w	fp, [r4]
 800e3c4:	f8c8 2000 	str.w	r2, [r8]
 800e3c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e3d0:	9307      	str	r3, [sp, #28]
 800e3d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e3da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3de:	4b9c      	ldr	r3, [pc, #624]	@ (800e650 <_printf_float+0x2c8>)
 800e3e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3e4:	f7f2 fbba 	bl	8000b5c <__aeabi_dcmpun>
 800e3e8:	bb70      	cbnz	r0, 800e448 <_printf_float+0xc0>
 800e3ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3ee:	4b98      	ldr	r3, [pc, #608]	@ (800e650 <_printf_float+0x2c8>)
 800e3f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3f4:	f7f2 fb94 	bl	8000b20 <__aeabi_dcmple>
 800e3f8:	bb30      	cbnz	r0, 800e448 <_printf_float+0xc0>
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	4640      	mov	r0, r8
 800e400:	4649      	mov	r1, r9
 800e402:	f7f2 fb83 	bl	8000b0c <__aeabi_dcmplt>
 800e406:	b110      	cbz	r0, 800e40e <_printf_float+0x86>
 800e408:	232d      	movs	r3, #45	@ 0x2d
 800e40a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e40e:	4a91      	ldr	r2, [pc, #580]	@ (800e654 <_printf_float+0x2cc>)
 800e410:	4b91      	ldr	r3, [pc, #580]	@ (800e658 <_printf_float+0x2d0>)
 800e412:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e416:	bf94      	ite	ls
 800e418:	4690      	movls	r8, r2
 800e41a:	4698      	movhi	r8, r3
 800e41c:	2303      	movs	r3, #3
 800e41e:	6123      	str	r3, [r4, #16]
 800e420:	f02b 0304 	bic.w	r3, fp, #4
 800e424:	6023      	str	r3, [r4, #0]
 800e426:	f04f 0900 	mov.w	r9, #0
 800e42a:	9700      	str	r7, [sp, #0]
 800e42c:	4633      	mov	r3, r6
 800e42e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e430:	4621      	mov	r1, r4
 800e432:	4628      	mov	r0, r5
 800e434:	f000 f9d2 	bl	800e7dc <_printf_common>
 800e438:	3001      	adds	r0, #1
 800e43a:	f040 808d 	bne.w	800e558 <_printf_float+0x1d0>
 800e43e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e442:	b00d      	add	sp, #52	@ 0x34
 800e444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e448:	4642      	mov	r2, r8
 800e44a:	464b      	mov	r3, r9
 800e44c:	4640      	mov	r0, r8
 800e44e:	4649      	mov	r1, r9
 800e450:	f7f2 fb84 	bl	8000b5c <__aeabi_dcmpun>
 800e454:	b140      	cbz	r0, 800e468 <_printf_float+0xe0>
 800e456:	464b      	mov	r3, r9
 800e458:	2b00      	cmp	r3, #0
 800e45a:	bfbc      	itt	lt
 800e45c:	232d      	movlt	r3, #45	@ 0x2d
 800e45e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e462:	4a7e      	ldr	r2, [pc, #504]	@ (800e65c <_printf_float+0x2d4>)
 800e464:	4b7e      	ldr	r3, [pc, #504]	@ (800e660 <_printf_float+0x2d8>)
 800e466:	e7d4      	b.n	800e412 <_printf_float+0x8a>
 800e468:	6863      	ldr	r3, [r4, #4]
 800e46a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e46e:	9206      	str	r2, [sp, #24]
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	d13b      	bne.n	800e4ec <_printf_float+0x164>
 800e474:	2306      	movs	r3, #6
 800e476:	6063      	str	r3, [r4, #4]
 800e478:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e47c:	2300      	movs	r3, #0
 800e47e:	6022      	str	r2, [r4, #0]
 800e480:	9303      	str	r3, [sp, #12]
 800e482:	ab0a      	add	r3, sp, #40	@ 0x28
 800e484:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e488:	ab09      	add	r3, sp, #36	@ 0x24
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	6861      	ldr	r1, [r4, #4]
 800e48e:	ec49 8b10 	vmov	d0, r8, r9
 800e492:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e496:	4628      	mov	r0, r5
 800e498:	f7ff fed6 	bl	800e248 <__cvt>
 800e49c:	9b06      	ldr	r3, [sp, #24]
 800e49e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e4a0:	2b47      	cmp	r3, #71	@ 0x47
 800e4a2:	4680      	mov	r8, r0
 800e4a4:	d129      	bne.n	800e4fa <_printf_float+0x172>
 800e4a6:	1cc8      	adds	r0, r1, #3
 800e4a8:	db02      	blt.n	800e4b0 <_printf_float+0x128>
 800e4aa:	6863      	ldr	r3, [r4, #4]
 800e4ac:	4299      	cmp	r1, r3
 800e4ae:	dd41      	ble.n	800e534 <_printf_float+0x1ac>
 800e4b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e4b4:	fa5f fa8a 	uxtb.w	sl, sl
 800e4b8:	3901      	subs	r1, #1
 800e4ba:	4652      	mov	r2, sl
 800e4bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e4c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800e4c2:	f7ff ff26 	bl	800e312 <__exponent>
 800e4c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4c8:	1813      	adds	r3, r2, r0
 800e4ca:	2a01      	cmp	r2, #1
 800e4cc:	4681      	mov	r9, r0
 800e4ce:	6123      	str	r3, [r4, #16]
 800e4d0:	dc02      	bgt.n	800e4d8 <_printf_float+0x150>
 800e4d2:	6822      	ldr	r2, [r4, #0]
 800e4d4:	07d2      	lsls	r2, r2, #31
 800e4d6:	d501      	bpl.n	800e4dc <_printf_float+0x154>
 800e4d8:	3301      	adds	r3, #1
 800e4da:	6123      	str	r3, [r4, #16]
 800e4dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d0a2      	beq.n	800e42a <_printf_float+0xa2>
 800e4e4:	232d      	movs	r3, #45	@ 0x2d
 800e4e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4ea:	e79e      	b.n	800e42a <_printf_float+0xa2>
 800e4ec:	9a06      	ldr	r2, [sp, #24]
 800e4ee:	2a47      	cmp	r2, #71	@ 0x47
 800e4f0:	d1c2      	bne.n	800e478 <_printf_float+0xf0>
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d1c0      	bne.n	800e478 <_printf_float+0xf0>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e7bd      	b.n	800e476 <_printf_float+0xee>
 800e4fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e4fe:	d9db      	bls.n	800e4b8 <_printf_float+0x130>
 800e500:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e504:	d118      	bne.n	800e538 <_printf_float+0x1b0>
 800e506:	2900      	cmp	r1, #0
 800e508:	6863      	ldr	r3, [r4, #4]
 800e50a:	dd0b      	ble.n	800e524 <_printf_float+0x19c>
 800e50c:	6121      	str	r1, [r4, #16]
 800e50e:	b913      	cbnz	r3, 800e516 <_printf_float+0x18e>
 800e510:	6822      	ldr	r2, [r4, #0]
 800e512:	07d0      	lsls	r0, r2, #31
 800e514:	d502      	bpl.n	800e51c <_printf_float+0x194>
 800e516:	3301      	adds	r3, #1
 800e518:	440b      	add	r3, r1
 800e51a:	6123      	str	r3, [r4, #16]
 800e51c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e51e:	f04f 0900 	mov.w	r9, #0
 800e522:	e7db      	b.n	800e4dc <_printf_float+0x154>
 800e524:	b913      	cbnz	r3, 800e52c <_printf_float+0x1a4>
 800e526:	6822      	ldr	r2, [r4, #0]
 800e528:	07d2      	lsls	r2, r2, #31
 800e52a:	d501      	bpl.n	800e530 <_printf_float+0x1a8>
 800e52c:	3302      	adds	r3, #2
 800e52e:	e7f4      	b.n	800e51a <_printf_float+0x192>
 800e530:	2301      	movs	r3, #1
 800e532:	e7f2      	b.n	800e51a <_printf_float+0x192>
 800e534:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e53a:	4299      	cmp	r1, r3
 800e53c:	db05      	blt.n	800e54a <_printf_float+0x1c2>
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	6121      	str	r1, [r4, #16]
 800e542:	07d8      	lsls	r0, r3, #31
 800e544:	d5ea      	bpl.n	800e51c <_printf_float+0x194>
 800e546:	1c4b      	adds	r3, r1, #1
 800e548:	e7e7      	b.n	800e51a <_printf_float+0x192>
 800e54a:	2900      	cmp	r1, #0
 800e54c:	bfd4      	ite	le
 800e54e:	f1c1 0202 	rsble	r2, r1, #2
 800e552:	2201      	movgt	r2, #1
 800e554:	4413      	add	r3, r2
 800e556:	e7e0      	b.n	800e51a <_printf_float+0x192>
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	055a      	lsls	r2, r3, #21
 800e55c:	d407      	bmi.n	800e56e <_printf_float+0x1e6>
 800e55e:	6923      	ldr	r3, [r4, #16]
 800e560:	4642      	mov	r2, r8
 800e562:	4631      	mov	r1, r6
 800e564:	4628      	mov	r0, r5
 800e566:	47b8      	blx	r7
 800e568:	3001      	adds	r0, #1
 800e56a:	d12b      	bne.n	800e5c4 <_printf_float+0x23c>
 800e56c:	e767      	b.n	800e43e <_printf_float+0xb6>
 800e56e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e572:	f240 80dd 	bls.w	800e730 <_printf_float+0x3a8>
 800e576:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e57a:	2200      	movs	r2, #0
 800e57c:	2300      	movs	r3, #0
 800e57e:	f7f2 fabb 	bl	8000af8 <__aeabi_dcmpeq>
 800e582:	2800      	cmp	r0, #0
 800e584:	d033      	beq.n	800e5ee <_printf_float+0x266>
 800e586:	4a37      	ldr	r2, [pc, #220]	@ (800e664 <_printf_float+0x2dc>)
 800e588:	2301      	movs	r3, #1
 800e58a:	4631      	mov	r1, r6
 800e58c:	4628      	mov	r0, r5
 800e58e:	47b8      	blx	r7
 800e590:	3001      	adds	r0, #1
 800e592:	f43f af54 	beq.w	800e43e <_printf_float+0xb6>
 800e596:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e59a:	4543      	cmp	r3, r8
 800e59c:	db02      	blt.n	800e5a4 <_printf_float+0x21c>
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	07d8      	lsls	r0, r3, #31
 800e5a2:	d50f      	bpl.n	800e5c4 <_printf_float+0x23c>
 800e5a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5a8:	4631      	mov	r1, r6
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	47b8      	blx	r7
 800e5ae:	3001      	adds	r0, #1
 800e5b0:	f43f af45 	beq.w	800e43e <_printf_float+0xb6>
 800e5b4:	f04f 0900 	mov.w	r9, #0
 800e5b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e5bc:	f104 0a1a 	add.w	sl, r4, #26
 800e5c0:	45c8      	cmp	r8, r9
 800e5c2:	dc09      	bgt.n	800e5d8 <_printf_float+0x250>
 800e5c4:	6823      	ldr	r3, [r4, #0]
 800e5c6:	079b      	lsls	r3, r3, #30
 800e5c8:	f100 8103 	bmi.w	800e7d2 <_printf_float+0x44a>
 800e5cc:	68e0      	ldr	r0, [r4, #12]
 800e5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5d0:	4298      	cmp	r0, r3
 800e5d2:	bfb8      	it	lt
 800e5d4:	4618      	movlt	r0, r3
 800e5d6:	e734      	b.n	800e442 <_printf_float+0xba>
 800e5d8:	2301      	movs	r3, #1
 800e5da:	4652      	mov	r2, sl
 800e5dc:	4631      	mov	r1, r6
 800e5de:	4628      	mov	r0, r5
 800e5e0:	47b8      	blx	r7
 800e5e2:	3001      	adds	r0, #1
 800e5e4:	f43f af2b 	beq.w	800e43e <_printf_float+0xb6>
 800e5e8:	f109 0901 	add.w	r9, r9, #1
 800e5ec:	e7e8      	b.n	800e5c0 <_printf_float+0x238>
 800e5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dc39      	bgt.n	800e668 <_printf_float+0x2e0>
 800e5f4:	4a1b      	ldr	r2, [pc, #108]	@ (800e664 <_printf_float+0x2dc>)
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	4631      	mov	r1, r6
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	47b8      	blx	r7
 800e5fe:	3001      	adds	r0, #1
 800e600:	f43f af1d 	beq.w	800e43e <_printf_float+0xb6>
 800e604:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e608:	ea59 0303 	orrs.w	r3, r9, r3
 800e60c:	d102      	bne.n	800e614 <_printf_float+0x28c>
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	07d9      	lsls	r1, r3, #31
 800e612:	d5d7      	bpl.n	800e5c4 <_printf_float+0x23c>
 800e614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e618:	4631      	mov	r1, r6
 800e61a:	4628      	mov	r0, r5
 800e61c:	47b8      	blx	r7
 800e61e:	3001      	adds	r0, #1
 800e620:	f43f af0d 	beq.w	800e43e <_printf_float+0xb6>
 800e624:	f04f 0a00 	mov.w	sl, #0
 800e628:	f104 0b1a 	add.w	fp, r4, #26
 800e62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e62e:	425b      	negs	r3, r3
 800e630:	4553      	cmp	r3, sl
 800e632:	dc01      	bgt.n	800e638 <_printf_float+0x2b0>
 800e634:	464b      	mov	r3, r9
 800e636:	e793      	b.n	800e560 <_printf_float+0x1d8>
 800e638:	2301      	movs	r3, #1
 800e63a:	465a      	mov	r2, fp
 800e63c:	4631      	mov	r1, r6
 800e63e:	4628      	mov	r0, r5
 800e640:	47b8      	blx	r7
 800e642:	3001      	adds	r0, #1
 800e644:	f43f aefb 	beq.w	800e43e <_printf_float+0xb6>
 800e648:	f10a 0a01 	add.w	sl, sl, #1
 800e64c:	e7ee      	b.n	800e62c <_printf_float+0x2a4>
 800e64e:	bf00      	nop
 800e650:	7fefffff 	.word	0x7fefffff
 800e654:	08024c60 	.word	0x08024c60
 800e658:	08024c64 	.word	0x08024c64
 800e65c:	08024c68 	.word	0x08024c68
 800e660:	08024c6c 	.word	0x08024c6c
 800e664:	08024c70 	.word	0x08024c70
 800e668:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e66a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e66e:	4553      	cmp	r3, sl
 800e670:	bfa8      	it	ge
 800e672:	4653      	movge	r3, sl
 800e674:	2b00      	cmp	r3, #0
 800e676:	4699      	mov	r9, r3
 800e678:	dc36      	bgt.n	800e6e8 <_printf_float+0x360>
 800e67a:	f04f 0b00 	mov.w	fp, #0
 800e67e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e682:	f104 021a 	add.w	r2, r4, #26
 800e686:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e688:	9306      	str	r3, [sp, #24]
 800e68a:	eba3 0309 	sub.w	r3, r3, r9
 800e68e:	455b      	cmp	r3, fp
 800e690:	dc31      	bgt.n	800e6f6 <_printf_float+0x36e>
 800e692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e694:	459a      	cmp	sl, r3
 800e696:	dc3a      	bgt.n	800e70e <_printf_float+0x386>
 800e698:	6823      	ldr	r3, [r4, #0]
 800e69a:	07da      	lsls	r2, r3, #31
 800e69c:	d437      	bmi.n	800e70e <_printf_float+0x386>
 800e69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6a0:	ebaa 0903 	sub.w	r9, sl, r3
 800e6a4:	9b06      	ldr	r3, [sp, #24]
 800e6a6:	ebaa 0303 	sub.w	r3, sl, r3
 800e6aa:	4599      	cmp	r9, r3
 800e6ac:	bfa8      	it	ge
 800e6ae:	4699      	movge	r9, r3
 800e6b0:	f1b9 0f00 	cmp.w	r9, #0
 800e6b4:	dc33      	bgt.n	800e71e <_printf_float+0x396>
 800e6b6:	f04f 0800 	mov.w	r8, #0
 800e6ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6be:	f104 0b1a 	add.w	fp, r4, #26
 800e6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6c4:	ebaa 0303 	sub.w	r3, sl, r3
 800e6c8:	eba3 0309 	sub.w	r3, r3, r9
 800e6cc:	4543      	cmp	r3, r8
 800e6ce:	f77f af79 	ble.w	800e5c4 <_printf_float+0x23c>
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	465a      	mov	r2, fp
 800e6d6:	4631      	mov	r1, r6
 800e6d8:	4628      	mov	r0, r5
 800e6da:	47b8      	blx	r7
 800e6dc:	3001      	adds	r0, #1
 800e6de:	f43f aeae 	beq.w	800e43e <_printf_float+0xb6>
 800e6e2:	f108 0801 	add.w	r8, r8, #1
 800e6e6:	e7ec      	b.n	800e6c2 <_printf_float+0x33a>
 800e6e8:	4642      	mov	r2, r8
 800e6ea:	4631      	mov	r1, r6
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	47b8      	blx	r7
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d1c2      	bne.n	800e67a <_printf_float+0x2f2>
 800e6f4:	e6a3      	b.n	800e43e <_printf_float+0xb6>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	4631      	mov	r1, r6
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	9206      	str	r2, [sp, #24]
 800e6fe:	47b8      	blx	r7
 800e700:	3001      	adds	r0, #1
 800e702:	f43f ae9c 	beq.w	800e43e <_printf_float+0xb6>
 800e706:	9a06      	ldr	r2, [sp, #24]
 800e708:	f10b 0b01 	add.w	fp, fp, #1
 800e70c:	e7bb      	b.n	800e686 <_printf_float+0x2fe>
 800e70e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e712:	4631      	mov	r1, r6
 800e714:	4628      	mov	r0, r5
 800e716:	47b8      	blx	r7
 800e718:	3001      	adds	r0, #1
 800e71a:	d1c0      	bne.n	800e69e <_printf_float+0x316>
 800e71c:	e68f      	b.n	800e43e <_printf_float+0xb6>
 800e71e:	9a06      	ldr	r2, [sp, #24]
 800e720:	464b      	mov	r3, r9
 800e722:	4442      	add	r2, r8
 800e724:	4631      	mov	r1, r6
 800e726:	4628      	mov	r0, r5
 800e728:	47b8      	blx	r7
 800e72a:	3001      	adds	r0, #1
 800e72c:	d1c3      	bne.n	800e6b6 <_printf_float+0x32e>
 800e72e:	e686      	b.n	800e43e <_printf_float+0xb6>
 800e730:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e734:	f1ba 0f01 	cmp.w	sl, #1
 800e738:	dc01      	bgt.n	800e73e <_printf_float+0x3b6>
 800e73a:	07db      	lsls	r3, r3, #31
 800e73c:	d536      	bpl.n	800e7ac <_printf_float+0x424>
 800e73e:	2301      	movs	r3, #1
 800e740:	4642      	mov	r2, r8
 800e742:	4631      	mov	r1, r6
 800e744:	4628      	mov	r0, r5
 800e746:	47b8      	blx	r7
 800e748:	3001      	adds	r0, #1
 800e74a:	f43f ae78 	beq.w	800e43e <_printf_float+0xb6>
 800e74e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e752:	4631      	mov	r1, r6
 800e754:	4628      	mov	r0, r5
 800e756:	47b8      	blx	r7
 800e758:	3001      	adds	r0, #1
 800e75a:	f43f ae70 	beq.w	800e43e <_printf_float+0xb6>
 800e75e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e762:	2200      	movs	r2, #0
 800e764:	2300      	movs	r3, #0
 800e766:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e76a:	f7f2 f9c5 	bl	8000af8 <__aeabi_dcmpeq>
 800e76e:	b9c0      	cbnz	r0, 800e7a2 <_printf_float+0x41a>
 800e770:	4653      	mov	r3, sl
 800e772:	f108 0201 	add.w	r2, r8, #1
 800e776:	4631      	mov	r1, r6
 800e778:	4628      	mov	r0, r5
 800e77a:	47b8      	blx	r7
 800e77c:	3001      	adds	r0, #1
 800e77e:	d10c      	bne.n	800e79a <_printf_float+0x412>
 800e780:	e65d      	b.n	800e43e <_printf_float+0xb6>
 800e782:	2301      	movs	r3, #1
 800e784:	465a      	mov	r2, fp
 800e786:	4631      	mov	r1, r6
 800e788:	4628      	mov	r0, r5
 800e78a:	47b8      	blx	r7
 800e78c:	3001      	adds	r0, #1
 800e78e:	f43f ae56 	beq.w	800e43e <_printf_float+0xb6>
 800e792:	f108 0801 	add.w	r8, r8, #1
 800e796:	45d0      	cmp	r8, sl
 800e798:	dbf3      	blt.n	800e782 <_printf_float+0x3fa>
 800e79a:	464b      	mov	r3, r9
 800e79c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e7a0:	e6df      	b.n	800e562 <_printf_float+0x1da>
 800e7a2:	f04f 0800 	mov.w	r8, #0
 800e7a6:	f104 0b1a 	add.w	fp, r4, #26
 800e7aa:	e7f4      	b.n	800e796 <_printf_float+0x40e>
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	4642      	mov	r2, r8
 800e7b0:	e7e1      	b.n	800e776 <_printf_float+0x3ee>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	464a      	mov	r2, r9
 800e7b6:	4631      	mov	r1, r6
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	47b8      	blx	r7
 800e7bc:	3001      	adds	r0, #1
 800e7be:	f43f ae3e 	beq.w	800e43e <_printf_float+0xb6>
 800e7c2:	f108 0801 	add.w	r8, r8, #1
 800e7c6:	68e3      	ldr	r3, [r4, #12]
 800e7c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e7ca:	1a5b      	subs	r3, r3, r1
 800e7cc:	4543      	cmp	r3, r8
 800e7ce:	dcf0      	bgt.n	800e7b2 <_printf_float+0x42a>
 800e7d0:	e6fc      	b.n	800e5cc <_printf_float+0x244>
 800e7d2:	f04f 0800 	mov.w	r8, #0
 800e7d6:	f104 0919 	add.w	r9, r4, #25
 800e7da:	e7f4      	b.n	800e7c6 <_printf_float+0x43e>

0800e7dc <_printf_common>:
 800e7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e0:	4616      	mov	r6, r2
 800e7e2:	4698      	mov	r8, r3
 800e7e4:	688a      	ldr	r2, [r1, #8]
 800e7e6:	690b      	ldr	r3, [r1, #16]
 800e7e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	bfb8      	it	lt
 800e7f0:	4613      	movlt	r3, r2
 800e7f2:	6033      	str	r3, [r6, #0]
 800e7f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7f8:	4607      	mov	r7, r0
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	b10a      	cbz	r2, 800e802 <_printf_common+0x26>
 800e7fe:	3301      	adds	r3, #1
 800e800:	6033      	str	r3, [r6, #0]
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	0699      	lsls	r1, r3, #26
 800e806:	bf42      	ittt	mi
 800e808:	6833      	ldrmi	r3, [r6, #0]
 800e80a:	3302      	addmi	r3, #2
 800e80c:	6033      	strmi	r3, [r6, #0]
 800e80e:	6825      	ldr	r5, [r4, #0]
 800e810:	f015 0506 	ands.w	r5, r5, #6
 800e814:	d106      	bne.n	800e824 <_printf_common+0x48>
 800e816:	f104 0a19 	add.w	sl, r4, #25
 800e81a:	68e3      	ldr	r3, [r4, #12]
 800e81c:	6832      	ldr	r2, [r6, #0]
 800e81e:	1a9b      	subs	r3, r3, r2
 800e820:	42ab      	cmp	r3, r5
 800e822:	dc26      	bgt.n	800e872 <_printf_common+0x96>
 800e824:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e828:	6822      	ldr	r2, [r4, #0]
 800e82a:	3b00      	subs	r3, #0
 800e82c:	bf18      	it	ne
 800e82e:	2301      	movne	r3, #1
 800e830:	0692      	lsls	r2, r2, #26
 800e832:	d42b      	bmi.n	800e88c <_printf_common+0xb0>
 800e834:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e838:	4641      	mov	r1, r8
 800e83a:	4638      	mov	r0, r7
 800e83c:	47c8      	blx	r9
 800e83e:	3001      	adds	r0, #1
 800e840:	d01e      	beq.n	800e880 <_printf_common+0xa4>
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	6922      	ldr	r2, [r4, #16]
 800e846:	f003 0306 	and.w	r3, r3, #6
 800e84a:	2b04      	cmp	r3, #4
 800e84c:	bf02      	ittt	eq
 800e84e:	68e5      	ldreq	r5, [r4, #12]
 800e850:	6833      	ldreq	r3, [r6, #0]
 800e852:	1aed      	subeq	r5, r5, r3
 800e854:	68a3      	ldr	r3, [r4, #8]
 800e856:	bf0c      	ite	eq
 800e858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e85c:	2500      	movne	r5, #0
 800e85e:	4293      	cmp	r3, r2
 800e860:	bfc4      	itt	gt
 800e862:	1a9b      	subgt	r3, r3, r2
 800e864:	18ed      	addgt	r5, r5, r3
 800e866:	2600      	movs	r6, #0
 800e868:	341a      	adds	r4, #26
 800e86a:	42b5      	cmp	r5, r6
 800e86c:	d11a      	bne.n	800e8a4 <_printf_common+0xc8>
 800e86e:	2000      	movs	r0, #0
 800e870:	e008      	b.n	800e884 <_printf_common+0xa8>
 800e872:	2301      	movs	r3, #1
 800e874:	4652      	mov	r2, sl
 800e876:	4641      	mov	r1, r8
 800e878:	4638      	mov	r0, r7
 800e87a:	47c8      	blx	r9
 800e87c:	3001      	adds	r0, #1
 800e87e:	d103      	bne.n	800e888 <_printf_common+0xac>
 800e880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e888:	3501      	adds	r5, #1
 800e88a:	e7c6      	b.n	800e81a <_printf_common+0x3e>
 800e88c:	18e1      	adds	r1, r4, r3
 800e88e:	1c5a      	adds	r2, r3, #1
 800e890:	2030      	movs	r0, #48	@ 0x30
 800e892:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e896:	4422      	add	r2, r4
 800e898:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e89c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e8a0:	3302      	adds	r3, #2
 800e8a2:	e7c7      	b.n	800e834 <_printf_common+0x58>
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	4641      	mov	r1, r8
 800e8aa:	4638      	mov	r0, r7
 800e8ac:	47c8      	blx	r9
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	d0e6      	beq.n	800e880 <_printf_common+0xa4>
 800e8b2:	3601      	adds	r6, #1
 800e8b4:	e7d9      	b.n	800e86a <_printf_common+0x8e>
	...

0800e8b8 <_printf_i>:
 800e8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8bc:	7e0f      	ldrb	r7, [r1, #24]
 800e8be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e8c0:	2f78      	cmp	r7, #120	@ 0x78
 800e8c2:	4691      	mov	r9, r2
 800e8c4:	4680      	mov	r8, r0
 800e8c6:	460c      	mov	r4, r1
 800e8c8:	469a      	mov	sl, r3
 800e8ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e8ce:	d807      	bhi.n	800e8e0 <_printf_i+0x28>
 800e8d0:	2f62      	cmp	r7, #98	@ 0x62
 800e8d2:	d80a      	bhi.n	800e8ea <_printf_i+0x32>
 800e8d4:	2f00      	cmp	r7, #0
 800e8d6:	f000 80d2 	beq.w	800ea7e <_printf_i+0x1c6>
 800e8da:	2f58      	cmp	r7, #88	@ 0x58
 800e8dc:	f000 80b9 	beq.w	800ea52 <_printf_i+0x19a>
 800e8e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8e8:	e03a      	b.n	800e960 <_printf_i+0xa8>
 800e8ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8ee:	2b15      	cmp	r3, #21
 800e8f0:	d8f6      	bhi.n	800e8e0 <_printf_i+0x28>
 800e8f2:	a101      	add	r1, pc, #4	@ (adr r1, 800e8f8 <_printf_i+0x40>)
 800e8f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8f8:	0800e951 	.word	0x0800e951
 800e8fc:	0800e965 	.word	0x0800e965
 800e900:	0800e8e1 	.word	0x0800e8e1
 800e904:	0800e8e1 	.word	0x0800e8e1
 800e908:	0800e8e1 	.word	0x0800e8e1
 800e90c:	0800e8e1 	.word	0x0800e8e1
 800e910:	0800e965 	.word	0x0800e965
 800e914:	0800e8e1 	.word	0x0800e8e1
 800e918:	0800e8e1 	.word	0x0800e8e1
 800e91c:	0800e8e1 	.word	0x0800e8e1
 800e920:	0800e8e1 	.word	0x0800e8e1
 800e924:	0800ea65 	.word	0x0800ea65
 800e928:	0800e98f 	.word	0x0800e98f
 800e92c:	0800ea1f 	.word	0x0800ea1f
 800e930:	0800e8e1 	.word	0x0800e8e1
 800e934:	0800e8e1 	.word	0x0800e8e1
 800e938:	0800ea87 	.word	0x0800ea87
 800e93c:	0800e8e1 	.word	0x0800e8e1
 800e940:	0800e98f 	.word	0x0800e98f
 800e944:	0800e8e1 	.word	0x0800e8e1
 800e948:	0800e8e1 	.word	0x0800e8e1
 800e94c:	0800ea27 	.word	0x0800ea27
 800e950:	6833      	ldr	r3, [r6, #0]
 800e952:	1d1a      	adds	r2, r3, #4
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6032      	str	r2, [r6, #0]
 800e958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e95c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e960:	2301      	movs	r3, #1
 800e962:	e09d      	b.n	800eaa0 <_printf_i+0x1e8>
 800e964:	6833      	ldr	r3, [r6, #0]
 800e966:	6820      	ldr	r0, [r4, #0]
 800e968:	1d19      	adds	r1, r3, #4
 800e96a:	6031      	str	r1, [r6, #0]
 800e96c:	0606      	lsls	r6, r0, #24
 800e96e:	d501      	bpl.n	800e974 <_printf_i+0xbc>
 800e970:	681d      	ldr	r5, [r3, #0]
 800e972:	e003      	b.n	800e97c <_printf_i+0xc4>
 800e974:	0645      	lsls	r5, r0, #25
 800e976:	d5fb      	bpl.n	800e970 <_printf_i+0xb8>
 800e978:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e97c:	2d00      	cmp	r5, #0
 800e97e:	da03      	bge.n	800e988 <_printf_i+0xd0>
 800e980:	232d      	movs	r3, #45	@ 0x2d
 800e982:	426d      	negs	r5, r5
 800e984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e988:	4859      	ldr	r0, [pc, #356]	@ (800eaf0 <_printf_i+0x238>)
 800e98a:	230a      	movs	r3, #10
 800e98c:	e011      	b.n	800e9b2 <_printf_i+0xfa>
 800e98e:	6821      	ldr	r1, [r4, #0]
 800e990:	6833      	ldr	r3, [r6, #0]
 800e992:	0608      	lsls	r0, r1, #24
 800e994:	f853 5b04 	ldr.w	r5, [r3], #4
 800e998:	d402      	bmi.n	800e9a0 <_printf_i+0xe8>
 800e99a:	0649      	lsls	r1, r1, #25
 800e99c:	bf48      	it	mi
 800e99e:	b2ad      	uxthmi	r5, r5
 800e9a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e9a2:	4853      	ldr	r0, [pc, #332]	@ (800eaf0 <_printf_i+0x238>)
 800e9a4:	6033      	str	r3, [r6, #0]
 800e9a6:	bf14      	ite	ne
 800e9a8:	230a      	movne	r3, #10
 800e9aa:	2308      	moveq	r3, #8
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e9b2:	6866      	ldr	r6, [r4, #4]
 800e9b4:	60a6      	str	r6, [r4, #8]
 800e9b6:	2e00      	cmp	r6, #0
 800e9b8:	bfa2      	ittt	ge
 800e9ba:	6821      	ldrge	r1, [r4, #0]
 800e9bc:	f021 0104 	bicge.w	r1, r1, #4
 800e9c0:	6021      	strge	r1, [r4, #0]
 800e9c2:	b90d      	cbnz	r5, 800e9c8 <_printf_i+0x110>
 800e9c4:	2e00      	cmp	r6, #0
 800e9c6:	d04b      	beq.n	800ea60 <_printf_i+0x1a8>
 800e9c8:	4616      	mov	r6, r2
 800e9ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9ce:	fb03 5711 	mls	r7, r3, r1, r5
 800e9d2:	5dc7      	ldrb	r7, [r0, r7]
 800e9d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9d8:	462f      	mov	r7, r5
 800e9da:	42bb      	cmp	r3, r7
 800e9dc:	460d      	mov	r5, r1
 800e9de:	d9f4      	bls.n	800e9ca <_printf_i+0x112>
 800e9e0:	2b08      	cmp	r3, #8
 800e9e2:	d10b      	bne.n	800e9fc <_printf_i+0x144>
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	07df      	lsls	r7, r3, #31
 800e9e8:	d508      	bpl.n	800e9fc <_printf_i+0x144>
 800e9ea:	6923      	ldr	r3, [r4, #16]
 800e9ec:	6861      	ldr	r1, [r4, #4]
 800e9ee:	4299      	cmp	r1, r3
 800e9f0:	bfde      	ittt	le
 800e9f2:	2330      	movle	r3, #48	@ 0x30
 800e9f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9f8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e9fc:	1b92      	subs	r2, r2, r6
 800e9fe:	6122      	str	r2, [r4, #16]
 800ea00:	f8cd a000 	str.w	sl, [sp]
 800ea04:	464b      	mov	r3, r9
 800ea06:	aa03      	add	r2, sp, #12
 800ea08:	4621      	mov	r1, r4
 800ea0a:	4640      	mov	r0, r8
 800ea0c:	f7ff fee6 	bl	800e7dc <_printf_common>
 800ea10:	3001      	adds	r0, #1
 800ea12:	d14a      	bne.n	800eaaa <_printf_i+0x1f2>
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea18:	b004      	add	sp, #16
 800ea1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	f043 0320 	orr.w	r3, r3, #32
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	4833      	ldr	r0, [pc, #204]	@ (800eaf4 <_printf_i+0x23c>)
 800ea28:	2778      	movs	r7, #120	@ 0x78
 800ea2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	6831      	ldr	r1, [r6, #0]
 800ea32:	061f      	lsls	r7, r3, #24
 800ea34:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea38:	d402      	bmi.n	800ea40 <_printf_i+0x188>
 800ea3a:	065f      	lsls	r7, r3, #25
 800ea3c:	bf48      	it	mi
 800ea3e:	b2ad      	uxthmi	r5, r5
 800ea40:	6031      	str	r1, [r6, #0]
 800ea42:	07d9      	lsls	r1, r3, #31
 800ea44:	bf44      	itt	mi
 800ea46:	f043 0320 	orrmi.w	r3, r3, #32
 800ea4a:	6023      	strmi	r3, [r4, #0]
 800ea4c:	b11d      	cbz	r5, 800ea56 <_printf_i+0x19e>
 800ea4e:	2310      	movs	r3, #16
 800ea50:	e7ac      	b.n	800e9ac <_printf_i+0xf4>
 800ea52:	4827      	ldr	r0, [pc, #156]	@ (800eaf0 <_printf_i+0x238>)
 800ea54:	e7e9      	b.n	800ea2a <_printf_i+0x172>
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	f023 0320 	bic.w	r3, r3, #32
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	e7f6      	b.n	800ea4e <_printf_i+0x196>
 800ea60:	4616      	mov	r6, r2
 800ea62:	e7bd      	b.n	800e9e0 <_printf_i+0x128>
 800ea64:	6833      	ldr	r3, [r6, #0]
 800ea66:	6825      	ldr	r5, [r4, #0]
 800ea68:	6961      	ldr	r1, [r4, #20]
 800ea6a:	1d18      	adds	r0, r3, #4
 800ea6c:	6030      	str	r0, [r6, #0]
 800ea6e:	062e      	lsls	r6, r5, #24
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	d501      	bpl.n	800ea78 <_printf_i+0x1c0>
 800ea74:	6019      	str	r1, [r3, #0]
 800ea76:	e002      	b.n	800ea7e <_printf_i+0x1c6>
 800ea78:	0668      	lsls	r0, r5, #25
 800ea7a:	d5fb      	bpl.n	800ea74 <_printf_i+0x1bc>
 800ea7c:	8019      	strh	r1, [r3, #0]
 800ea7e:	2300      	movs	r3, #0
 800ea80:	6123      	str	r3, [r4, #16]
 800ea82:	4616      	mov	r6, r2
 800ea84:	e7bc      	b.n	800ea00 <_printf_i+0x148>
 800ea86:	6833      	ldr	r3, [r6, #0]
 800ea88:	1d1a      	adds	r2, r3, #4
 800ea8a:	6032      	str	r2, [r6, #0]
 800ea8c:	681e      	ldr	r6, [r3, #0]
 800ea8e:	6862      	ldr	r2, [r4, #4]
 800ea90:	2100      	movs	r1, #0
 800ea92:	4630      	mov	r0, r6
 800ea94:	f7f1 fbb4 	bl	8000200 <memchr>
 800ea98:	b108      	cbz	r0, 800ea9e <_printf_i+0x1e6>
 800ea9a:	1b80      	subs	r0, r0, r6
 800ea9c:	6060      	str	r0, [r4, #4]
 800ea9e:	6863      	ldr	r3, [r4, #4]
 800eaa0:	6123      	str	r3, [r4, #16]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eaa8:	e7aa      	b.n	800ea00 <_printf_i+0x148>
 800eaaa:	6923      	ldr	r3, [r4, #16]
 800eaac:	4632      	mov	r2, r6
 800eaae:	4649      	mov	r1, r9
 800eab0:	4640      	mov	r0, r8
 800eab2:	47d0      	blx	sl
 800eab4:	3001      	adds	r0, #1
 800eab6:	d0ad      	beq.n	800ea14 <_printf_i+0x15c>
 800eab8:	6823      	ldr	r3, [r4, #0]
 800eaba:	079b      	lsls	r3, r3, #30
 800eabc:	d413      	bmi.n	800eae6 <_printf_i+0x22e>
 800eabe:	68e0      	ldr	r0, [r4, #12]
 800eac0:	9b03      	ldr	r3, [sp, #12]
 800eac2:	4298      	cmp	r0, r3
 800eac4:	bfb8      	it	lt
 800eac6:	4618      	movlt	r0, r3
 800eac8:	e7a6      	b.n	800ea18 <_printf_i+0x160>
 800eaca:	2301      	movs	r3, #1
 800eacc:	4632      	mov	r2, r6
 800eace:	4649      	mov	r1, r9
 800ead0:	4640      	mov	r0, r8
 800ead2:	47d0      	blx	sl
 800ead4:	3001      	adds	r0, #1
 800ead6:	d09d      	beq.n	800ea14 <_printf_i+0x15c>
 800ead8:	3501      	adds	r5, #1
 800eada:	68e3      	ldr	r3, [r4, #12]
 800eadc:	9903      	ldr	r1, [sp, #12]
 800eade:	1a5b      	subs	r3, r3, r1
 800eae0:	42ab      	cmp	r3, r5
 800eae2:	dcf2      	bgt.n	800eaca <_printf_i+0x212>
 800eae4:	e7eb      	b.n	800eabe <_printf_i+0x206>
 800eae6:	2500      	movs	r5, #0
 800eae8:	f104 0619 	add.w	r6, r4, #25
 800eaec:	e7f5      	b.n	800eada <_printf_i+0x222>
 800eaee:	bf00      	nop
 800eaf0:	08024c72 	.word	0x08024c72
 800eaf4:	08024c83 	.word	0x08024c83

0800eaf8 <std>:
 800eaf8:	2300      	movs	r3, #0
 800eafa:	b510      	push	{r4, lr}
 800eafc:	4604      	mov	r4, r0
 800eafe:	e9c0 3300 	strd	r3, r3, [r0]
 800eb02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb06:	6083      	str	r3, [r0, #8]
 800eb08:	8181      	strh	r1, [r0, #12]
 800eb0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800eb0c:	81c2      	strh	r2, [r0, #14]
 800eb0e:	6183      	str	r3, [r0, #24]
 800eb10:	4619      	mov	r1, r3
 800eb12:	2208      	movs	r2, #8
 800eb14:	305c      	adds	r0, #92	@ 0x5c
 800eb16:	f000 f8c3 	bl	800eca0 <memset>
 800eb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800eb50 <std+0x58>)
 800eb1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800eb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800eb54 <std+0x5c>)
 800eb20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eb22:	4b0d      	ldr	r3, [pc, #52]	@ (800eb58 <std+0x60>)
 800eb24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eb26:	4b0d      	ldr	r3, [pc, #52]	@ (800eb5c <std+0x64>)
 800eb28:	6323      	str	r3, [r4, #48]	@ 0x30
 800eb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800eb60 <std+0x68>)
 800eb2c:	6224      	str	r4, [r4, #32]
 800eb2e:	429c      	cmp	r4, r3
 800eb30:	d006      	beq.n	800eb40 <std+0x48>
 800eb32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eb36:	4294      	cmp	r4, r2
 800eb38:	d002      	beq.n	800eb40 <std+0x48>
 800eb3a:	33d0      	adds	r3, #208	@ 0xd0
 800eb3c:	429c      	cmp	r4, r3
 800eb3e:	d105      	bne.n	800eb4c <std+0x54>
 800eb40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb48:	f000 b8e0 	b.w	800ed0c <__retarget_lock_init_recursive>
 800eb4c:	bd10      	pop	{r4, pc}
 800eb4e:	bf00      	nop
 800eb50:	08010615 	.word	0x08010615
 800eb54:	08010637 	.word	0x08010637
 800eb58:	0801066f 	.word	0x0801066f
 800eb5c:	08010693 	.word	0x08010693
 800eb60:	2001e170 	.word	0x2001e170

0800eb64 <stdio_exit_handler>:
 800eb64:	4a02      	ldr	r2, [pc, #8]	@ (800eb70 <stdio_exit_handler+0xc>)
 800eb66:	4903      	ldr	r1, [pc, #12]	@ (800eb74 <stdio_exit_handler+0x10>)
 800eb68:	4803      	ldr	r0, [pc, #12]	@ (800eb78 <stdio_exit_handler+0x14>)
 800eb6a:	f000 b869 	b.w	800ec40 <_fwalk_sglue>
 800eb6e:	bf00      	nop
 800eb70:	200000a4 	.word	0x200000a4
 800eb74:	0800fea9 	.word	0x0800fea9
 800eb78:	200000b4 	.word	0x200000b4

0800eb7c <cleanup_stdio>:
 800eb7c:	6841      	ldr	r1, [r0, #4]
 800eb7e:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb0 <cleanup_stdio+0x34>)
 800eb80:	4299      	cmp	r1, r3
 800eb82:	b510      	push	{r4, lr}
 800eb84:	4604      	mov	r4, r0
 800eb86:	d001      	beq.n	800eb8c <cleanup_stdio+0x10>
 800eb88:	f001 f98e 	bl	800fea8 <_fflush_r>
 800eb8c:	68a1      	ldr	r1, [r4, #8]
 800eb8e:	4b09      	ldr	r3, [pc, #36]	@ (800ebb4 <cleanup_stdio+0x38>)
 800eb90:	4299      	cmp	r1, r3
 800eb92:	d002      	beq.n	800eb9a <cleanup_stdio+0x1e>
 800eb94:	4620      	mov	r0, r4
 800eb96:	f001 f987 	bl	800fea8 <_fflush_r>
 800eb9a:	68e1      	ldr	r1, [r4, #12]
 800eb9c:	4b06      	ldr	r3, [pc, #24]	@ (800ebb8 <cleanup_stdio+0x3c>)
 800eb9e:	4299      	cmp	r1, r3
 800eba0:	d004      	beq.n	800ebac <cleanup_stdio+0x30>
 800eba2:	4620      	mov	r0, r4
 800eba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eba8:	f001 b97e 	b.w	800fea8 <_fflush_r>
 800ebac:	bd10      	pop	{r4, pc}
 800ebae:	bf00      	nop
 800ebb0:	2001e170 	.word	0x2001e170
 800ebb4:	2001e1d8 	.word	0x2001e1d8
 800ebb8:	2001e240 	.word	0x2001e240

0800ebbc <global_stdio_init.part.0>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	4b0b      	ldr	r3, [pc, #44]	@ (800ebec <global_stdio_init.part.0+0x30>)
 800ebc0:	4c0b      	ldr	r4, [pc, #44]	@ (800ebf0 <global_stdio_init.part.0+0x34>)
 800ebc2:	4a0c      	ldr	r2, [pc, #48]	@ (800ebf4 <global_stdio_init.part.0+0x38>)
 800ebc4:	601a      	str	r2, [r3, #0]
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	2200      	movs	r2, #0
 800ebca:	2104      	movs	r1, #4
 800ebcc:	f7ff ff94 	bl	800eaf8 <std>
 800ebd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	2109      	movs	r1, #9
 800ebd8:	f7ff ff8e 	bl	800eaf8 <std>
 800ebdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ebe0:	2202      	movs	r2, #2
 800ebe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe6:	2112      	movs	r1, #18
 800ebe8:	f7ff bf86 	b.w	800eaf8 <std>
 800ebec:	2001e2a8 	.word	0x2001e2a8
 800ebf0:	2001e170 	.word	0x2001e170
 800ebf4:	0800eb65 	.word	0x0800eb65

0800ebf8 <__sfp_lock_acquire>:
 800ebf8:	4801      	ldr	r0, [pc, #4]	@ (800ec00 <__sfp_lock_acquire+0x8>)
 800ebfa:	f000 b888 	b.w	800ed0e <__retarget_lock_acquire_recursive>
 800ebfe:	bf00      	nop
 800ec00:	2001e2ad 	.word	0x2001e2ad

0800ec04 <__sfp_lock_release>:
 800ec04:	4801      	ldr	r0, [pc, #4]	@ (800ec0c <__sfp_lock_release+0x8>)
 800ec06:	f000 b883 	b.w	800ed10 <__retarget_lock_release_recursive>
 800ec0a:	bf00      	nop
 800ec0c:	2001e2ad 	.word	0x2001e2ad

0800ec10 <__sinit>:
 800ec10:	b510      	push	{r4, lr}
 800ec12:	4604      	mov	r4, r0
 800ec14:	f7ff fff0 	bl	800ebf8 <__sfp_lock_acquire>
 800ec18:	6a23      	ldr	r3, [r4, #32]
 800ec1a:	b11b      	cbz	r3, 800ec24 <__sinit+0x14>
 800ec1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec20:	f7ff bff0 	b.w	800ec04 <__sfp_lock_release>
 800ec24:	4b04      	ldr	r3, [pc, #16]	@ (800ec38 <__sinit+0x28>)
 800ec26:	6223      	str	r3, [r4, #32]
 800ec28:	4b04      	ldr	r3, [pc, #16]	@ (800ec3c <__sinit+0x2c>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d1f5      	bne.n	800ec1c <__sinit+0xc>
 800ec30:	f7ff ffc4 	bl	800ebbc <global_stdio_init.part.0>
 800ec34:	e7f2      	b.n	800ec1c <__sinit+0xc>
 800ec36:	bf00      	nop
 800ec38:	0800eb7d 	.word	0x0800eb7d
 800ec3c:	2001e2a8 	.word	0x2001e2a8

0800ec40 <_fwalk_sglue>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	4607      	mov	r7, r0
 800ec46:	4688      	mov	r8, r1
 800ec48:	4614      	mov	r4, r2
 800ec4a:	2600      	movs	r6, #0
 800ec4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec50:	f1b9 0901 	subs.w	r9, r9, #1
 800ec54:	d505      	bpl.n	800ec62 <_fwalk_sglue+0x22>
 800ec56:	6824      	ldr	r4, [r4, #0]
 800ec58:	2c00      	cmp	r4, #0
 800ec5a:	d1f7      	bne.n	800ec4c <_fwalk_sglue+0xc>
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec62:	89ab      	ldrh	r3, [r5, #12]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d907      	bls.n	800ec78 <_fwalk_sglue+0x38>
 800ec68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	d003      	beq.n	800ec78 <_fwalk_sglue+0x38>
 800ec70:	4629      	mov	r1, r5
 800ec72:	4638      	mov	r0, r7
 800ec74:	47c0      	blx	r8
 800ec76:	4306      	orrs	r6, r0
 800ec78:	3568      	adds	r5, #104	@ 0x68
 800ec7a:	e7e9      	b.n	800ec50 <_fwalk_sglue+0x10>

0800ec7c <iprintf>:
 800ec7c:	b40f      	push	{r0, r1, r2, r3}
 800ec7e:	b507      	push	{r0, r1, r2, lr}
 800ec80:	4906      	ldr	r1, [pc, #24]	@ (800ec9c <iprintf+0x20>)
 800ec82:	ab04      	add	r3, sp, #16
 800ec84:	6808      	ldr	r0, [r1, #0]
 800ec86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec8a:	6881      	ldr	r1, [r0, #8]
 800ec8c:	9301      	str	r3, [sp, #4]
 800ec8e:	f000 fec5 	bl	800fa1c <_vfiprintf_r>
 800ec92:	b003      	add	sp, #12
 800ec94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec98:	b004      	add	sp, #16
 800ec9a:	4770      	bx	lr
 800ec9c:	200000b0 	.word	0x200000b0

0800eca0 <memset>:
 800eca0:	4402      	add	r2, r0
 800eca2:	4603      	mov	r3, r0
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d100      	bne.n	800ecaa <memset+0xa>
 800eca8:	4770      	bx	lr
 800ecaa:	f803 1b01 	strb.w	r1, [r3], #1
 800ecae:	e7f9      	b.n	800eca4 <memset+0x4>

0800ecb0 <_localeconv_r>:
 800ecb0:	4800      	ldr	r0, [pc, #0]	@ (800ecb4 <_localeconv_r+0x4>)
 800ecb2:	4770      	bx	lr
 800ecb4:	200001f0 	.word	0x200001f0

0800ecb8 <__errno>:
 800ecb8:	4b01      	ldr	r3, [pc, #4]	@ (800ecc0 <__errno+0x8>)
 800ecba:	6818      	ldr	r0, [r3, #0]
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop
 800ecc0:	200000b0 	.word	0x200000b0

0800ecc4 <__libc_init_array>:
 800ecc4:	b570      	push	{r4, r5, r6, lr}
 800ecc6:	4d0d      	ldr	r5, [pc, #52]	@ (800ecfc <__libc_init_array+0x38>)
 800ecc8:	4c0d      	ldr	r4, [pc, #52]	@ (800ed00 <__libc_init_array+0x3c>)
 800ecca:	1b64      	subs	r4, r4, r5
 800eccc:	10a4      	asrs	r4, r4, #2
 800ecce:	2600      	movs	r6, #0
 800ecd0:	42a6      	cmp	r6, r4
 800ecd2:	d109      	bne.n	800ece8 <__libc_init_array+0x24>
 800ecd4:	4d0b      	ldr	r5, [pc, #44]	@ (800ed04 <__libc_init_array+0x40>)
 800ecd6:	4c0c      	ldr	r4, [pc, #48]	@ (800ed08 <__libc_init_array+0x44>)
 800ecd8:	f001 ff46 	bl	8010b68 <_init>
 800ecdc:	1b64      	subs	r4, r4, r5
 800ecde:	10a4      	asrs	r4, r4, #2
 800ece0:	2600      	movs	r6, #0
 800ece2:	42a6      	cmp	r6, r4
 800ece4:	d105      	bne.n	800ecf2 <__libc_init_array+0x2e>
 800ece6:	bd70      	pop	{r4, r5, r6, pc}
 800ece8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecec:	4798      	blx	r3
 800ecee:	3601      	adds	r6, #1
 800ecf0:	e7ee      	b.n	800ecd0 <__libc_init_array+0xc>
 800ecf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecf6:	4798      	blx	r3
 800ecf8:	3601      	adds	r6, #1
 800ecfa:	e7f2      	b.n	800ece2 <__libc_init_array+0x1e>
 800ecfc:	08024fd8 	.word	0x08024fd8
 800ed00:	08024fd8 	.word	0x08024fd8
 800ed04:	08024fd8 	.word	0x08024fd8
 800ed08:	08024fdc 	.word	0x08024fdc

0800ed0c <__retarget_lock_init_recursive>:
 800ed0c:	4770      	bx	lr

0800ed0e <__retarget_lock_acquire_recursive>:
 800ed0e:	4770      	bx	lr

0800ed10 <__retarget_lock_release_recursive>:
 800ed10:	4770      	bx	lr

0800ed12 <memcpy>:
 800ed12:	440a      	add	r2, r1
 800ed14:	4291      	cmp	r1, r2
 800ed16:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ed1a:	d100      	bne.n	800ed1e <memcpy+0xc>
 800ed1c:	4770      	bx	lr
 800ed1e:	b510      	push	{r4, lr}
 800ed20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed28:	4291      	cmp	r1, r2
 800ed2a:	d1f9      	bne.n	800ed20 <memcpy+0xe>
 800ed2c:	bd10      	pop	{r4, pc}

0800ed2e <quorem>:
 800ed2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed32:	6903      	ldr	r3, [r0, #16]
 800ed34:	690c      	ldr	r4, [r1, #16]
 800ed36:	42a3      	cmp	r3, r4
 800ed38:	4607      	mov	r7, r0
 800ed3a:	db7e      	blt.n	800ee3a <quorem+0x10c>
 800ed3c:	3c01      	subs	r4, #1
 800ed3e:	f101 0814 	add.w	r8, r1, #20
 800ed42:	00a3      	lsls	r3, r4, #2
 800ed44:	f100 0514 	add.w	r5, r0, #20
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed4e:	9301      	str	r3, [sp, #4]
 800ed50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ed54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ed60:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed64:	d32e      	bcc.n	800edc4 <quorem+0x96>
 800ed66:	f04f 0a00 	mov.w	sl, #0
 800ed6a:	46c4      	mov	ip, r8
 800ed6c:	46ae      	mov	lr, r5
 800ed6e:	46d3      	mov	fp, sl
 800ed70:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed74:	b298      	uxth	r0, r3
 800ed76:	fb06 a000 	mla	r0, r6, r0, sl
 800ed7a:	0c02      	lsrs	r2, r0, #16
 800ed7c:	0c1b      	lsrs	r3, r3, #16
 800ed7e:	fb06 2303 	mla	r3, r6, r3, r2
 800ed82:	f8de 2000 	ldr.w	r2, [lr]
 800ed86:	b280      	uxth	r0, r0
 800ed88:	b292      	uxth	r2, r2
 800ed8a:	1a12      	subs	r2, r2, r0
 800ed8c:	445a      	add	r2, fp
 800ed8e:	f8de 0000 	ldr.w	r0, [lr]
 800ed92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ed9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eda0:	b292      	uxth	r2, r2
 800eda2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eda6:	45e1      	cmp	r9, ip
 800eda8:	f84e 2b04 	str.w	r2, [lr], #4
 800edac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800edb0:	d2de      	bcs.n	800ed70 <quorem+0x42>
 800edb2:	9b00      	ldr	r3, [sp, #0]
 800edb4:	58eb      	ldr	r3, [r5, r3]
 800edb6:	b92b      	cbnz	r3, 800edc4 <quorem+0x96>
 800edb8:	9b01      	ldr	r3, [sp, #4]
 800edba:	3b04      	subs	r3, #4
 800edbc:	429d      	cmp	r5, r3
 800edbe:	461a      	mov	r2, r3
 800edc0:	d32f      	bcc.n	800ee22 <quorem+0xf4>
 800edc2:	613c      	str	r4, [r7, #16]
 800edc4:	4638      	mov	r0, r7
 800edc6:	f001 fb1d 	bl	8010404 <__mcmp>
 800edca:	2800      	cmp	r0, #0
 800edcc:	db25      	blt.n	800ee1a <quorem+0xec>
 800edce:	4629      	mov	r1, r5
 800edd0:	2000      	movs	r0, #0
 800edd2:	f858 2b04 	ldr.w	r2, [r8], #4
 800edd6:	f8d1 c000 	ldr.w	ip, [r1]
 800edda:	fa1f fe82 	uxth.w	lr, r2
 800edde:	fa1f f38c 	uxth.w	r3, ip
 800ede2:	eba3 030e 	sub.w	r3, r3, lr
 800ede6:	4403      	add	r3, r0
 800ede8:	0c12      	lsrs	r2, r2, #16
 800edea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800edee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edf8:	45c1      	cmp	r9, r8
 800edfa:	f841 3b04 	str.w	r3, [r1], #4
 800edfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ee02:	d2e6      	bcs.n	800edd2 <quorem+0xa4>
 800ee04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee0c:	b922      	cbnz	r2, 800ee18 <quorem+0xea>
 800ee0e:	3b04      	subs	r3, #4
 800ee10:	429d      	cmp	r5, r3
 800ee12:	461a      	mov	r2, r3
 800ee14:	d30b      	bcc.n	800ee2e <quorem+0x100>
 800ee16:	613c      	str	r4, [r7, #16]
 800ee18:	3601      	adds	r6, #1
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	b003      	add	sp, #12
 800ee1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee22:	6812      	ldr	r2, [r2, #0]
 800ee24:	3b04      	subs	r3, #4
 800ee26:	2a00      	cmp	r2, #0
 800ee28:	d1cb      	bne.n	800edc2 <quorem+0x94>
 800ee2a:	3c01      	subs	r4, #1
 800ee2c:	e7c6      	b.n	800edbc <quorem+0x8e>
 800ee2e:	6812      	ldr	r2, [r2, #0]
 800ee30:	3b04      	subs	r3, #4
 800ee32:	2a00      	cmp	r2, #0
 800ee34:	d1ef      	bne.n	800ee16 <quorem+0xe8>
 800ee36:	3c01      	subs	r4, #1
 800ee38:	e7ea      	b.n	800ee10 <quorem+0xe2>
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	e7ee      	b.n	800ee1c <quorem+0xee>
	...

0800ee40 <_dtoa_r>:
 800ee40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee44:	69c7      	ldr	r7, [r0, #28]
 800ee46:	b099      	sub	sp, #100	@ 0x64
 800ee48:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee4c:	ec55 4b10 	vmov	r4, r5, d0
 800ee50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ee52:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee54:	4683      	mov	fp, r0
 800ee56:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee5a:	b97f      	cbnz	r7, 800ee7c <_dtoa_r+0x3c>
 800ee5c:	2010      	movs	r0, #16
 800ee5e:	f000 fef5 	bl	800fc4c <malloc>
 800ee62:	4602      	mov	r2, r0
 800ee64:	f8cb 001c 	str.w	r0, [fp, #28]
 800ee68:	b920      	cbnz	r0, 800ee74 <_dtoa_r+0x34>
 800ee6a:	4ba7      	ldr	r3, [pc, #668]	@ (800f108 <_dtoa_r+0x2c8>)
 800ee6c:	21ef      	movs	r1, #239	@ 0xef
 800ee6e:	48a7      	ldr	r0, [pc, #668]	@ (800f10c <_dtoa_r+0x2cc>)
 800ee70:	f001 fd82 	bl	8010978 <__assert_func>
 800ee74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee78:	6007      	str	r7, [r0, #0]
 800ee7a:	60c7      	str	r7, [r0, #12]
 800ee7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee80:	6819      	ldr	r1, [r3, #0]
 800ee82:	b159      	cbz	r1, 800ee9c <_dtoa_r+0x5c>
 800ee84:	685a      	ldr	r2, [r3, #4]
 800ee86:	604a      	str	r2, [r1, #4]
 800ee88:	2301      	movs	r3, #1
 800ee8a:	4093      	lsls	r3, r2
 800ee8c:	608b      	str	r3, [r1, #8]
 800ee8e:	4658      	mov	r0, fp
 800ee90:	f001 f87e 	bl	800ff90 <_Bfree>
 800ee94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]
 800ee9c:	1e2b      	subs	r3, r5, #0
 800ee9e:	bfb9      	ittee	lt
 800eea0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eea4:	9303      	strlt	r3, [sp, #12]
 800eea6:	2300      	movge	r3, #0
 800eea8:	6033      	strge	r3, [r6, #0]
 800eeaa:	9f03      	ldr	r7, [sp, #12]
 800eeac:	4b98      	ldr	r3, [pc, #608]	@ (800f110 <_dtoa_r+0x2d0>)
 800eeae:	bfbc      	itt	lt
 800eeb0:	2201      	movlt	r2, #1
 800eeb2:	6032      	strlt	r2, [r6, #0]
 800eeb4:	43bb      	bics	r3, r7
 800eeb6:	d112      	bne.n	800eede <_dtoa_r+0x9e>
 800eeb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eeba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eebe:	6013      	str	r3, [r2, #0]
 800eec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eec4:	4323      	orrs	r3, r4
 800eec6:	f000 854d 	beq.w	800f964 <_dtoa_r+0xb24>
 800eeca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eecc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f124 <_dtoa_r+0x2e4>
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f000 854f 	beq.w	800f974 <_dtoa_r+0xb34>
 800eed6:	f10a 0303 	add.w	r3, sl, #3
 800eeda:	f000 bd49 	b.w	800f970 <_dtoa_r+0xb30>
 800eede:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eee2:	2200      	movs	r2, #0
 800eee4:	ec51 0b17 	vmov	r0, r1, d7
 800eee8:	2300      	movs	r3, #0
 800eeea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800eeee:	f7f1 fe03 	bl	8000af8 <__aeabi_dcmpeq>
 800eef2:	4680      	mov	r8, r0
 800eef4:	b158      	cbz	r0, 800ef0e <_dtoa_r+0xce>
 800eef6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eef8:	2301      	movs	r3, #1
 800eefa:	6013      	str	r3, [r2, #0]
 800eefc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eefe:	b113      	cbz	r3, 800ef06 <_dtoa_r+0xc6>
 800ef00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ef02:	4b84      	ldr	r3, [pc, #528]	@ (800f114 <_dtoa_r+0x2d4>)
 800ef04:	6013      	str	r3, [r2, #0]
 800ef06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f128 <_dtoa_r+0x2e8>
 800ef0a:	f000 bd33 	b.w	800f974 <_dtoa_r+0xb34>
 800ef0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ef12:	aa16      	add	r2, sp, #88	@ 0x58
 800ef14:	a917      	add	r1, sp, #92	@ 0x5c
 800ef16:	4658      	mov	r0, fp
 800ef18:	f001 fb24 	bl	8010564 <__d2b>
 800ef1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ef20:	4681      	mov	r9, r0
 800ef22:	2e00      	cmp	r6, #0
 800ef24:	d077      	beq.n	800f016 <_dtoa_r+0x1d6>
 800ef26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ef2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ef38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ef3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ef40:	4619      	mov	r1, r3
 800ef42:	2200      	movs	r2, #0
 800ef44:	4b74      	ldr	r3, [pc, #464]	@ (800f118 <_dtoa_r+0x2d8>)
 800ef46:	f7f1 f9b7 	bl	80002b8 <__aeabi_dsub>
 800ef4a:	a369      	add	r3, pc, #420	@ (adr r3, 800f0f0 <_dtoa_r+0x2b0>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	f7f1 fb6a 	bl	8000628 <__aeabi_dmul>
 800ef54:	a368      	add	r3, pc, #416	@ (adr r3, 800f0f8 <_dtoa_r+0x2b8>)
 800ef56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5a:	f7f1 f9af 	bl	80002bc <__adddf3>
 800ef5e:	4604      	mov	r4, r0
 800ef60:	4630      	mov	r0, r6
 800ef62:	460d      	mov	r5, r1
 800ef64:	f7f1 faf6 	bl	8000554 <__aeabi_i2d>
 800ef68:	a365      	add	r3, pc, #404	@ (adr r3, 800f100 <_dtoa_r+0x2c0>)
 800ef6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6e:	f7f1 fb5b 	bl	8000628 <__aeabi_dmul>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	4620      	mov	r0, r4
 800ef78:	4629      	mov	r1, r5
 800ef7a:	f7f1 f99f 	bl	80002bc <__adddf3>
 800ef7e:	4604      	mov	r4, r0
 800ef80:	460d      	mov	r5, r1
 800ef82:	f7f1 fe01 	bl	8000b88 <__aeabi_d2iz>
 800ef86:	2200      	movs	r2, #0
 800ef88:	4607      	mov	r7, r0
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	4629      	mov	r1, r5
 800ef90:	f7f1 fdbc 	bl	8000b0c <__aeabi_dcmplt>
 800ef94:	b140      	cbz	r0, 800efa8 <_dtoa_r+0x168>
 800ef96:	4638      	mov	r0, r7
 800ef98:	f7f1 fadc 	bl	8000554 <__aeabi_i2d>
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	462b      	mov	r3, r5
 800efa0:	f7f1 fdaa 	bl	8000af8 <__aeabi_dcmpeq>
 800efa4:	b900      	cbnz	r0, 800efa8 <_dtoa_r+0x168>
 800efa6:	3f01      	subs	r7, #1
 800efa8:	2f16      	cmp	r7, #22
 800efaa:	d851      	bhi.n	800f050 <_dtoa_r+0x210>
 800efac:	4b5b      	ldr	r3, [pc, #364]	@ (800f11c <_dtoa_r+0x2dc>)
 800efae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800efb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800efba:	f7f1 fda7 	bl	8000b0c <__aeabi_dcmplt>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d048      	beq.n	800f054 <_dtoa_r+0x214>
 800efc2:	3f01      	subs	r7, #1
 800efc4:	2300      	movs	r3, #0
 800efc6:	9312      	str	r3, [sp, #72]	@ 0x48
 800efc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800efca:	1b9b      	subs	r3, r3, r6
 800efcc:	1e5a      	subs	r2, r3, #1
 800efce:	bf44      	itt	mi
 800efd0:	f1c3 0801 	rsbmi	r8, r3, #1
 800efd4:	2300      	movmi	r3, #0
 800efd6:	9208      	str	r2, [sp, #32]
 800efd8:	bf54      	ite	pl
 800efda:	f04f 0800 	movpl.w	r8, #0
 800efde:	9308      	strmi	r3, [sp, #32]
 800efe0:	2f00      	cmp	r7, #0
 800efe2:	db39      	blt.n	800f058 <_dtoa_r+0x218>
 800efe4:	9b08      	ldr	r3, [sp, #32]
 800efe6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800efe8:	443b      	add	r3, r7
 800efea:	9308      	str	r3, [sp, #32]
 800efec:	2300      	movs	r3, #0
 800efee:	930a      	str	r3, [sp, #40]	@ 0x28
 800eff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eff2:	2b09      	cmp	r3, #9
 800eff4:	d864      	bhi.n	800f0c0 <_dtoa_r+0x280>
 800eff6:	2b05      	cmp	r3, #5
 800eff8:	bfc4      	itt	gt
 800effa:	3b04      	subgt	r3, #4
 800effc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800effe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f000:	f1a3 0302 	sub.w	r3, r3, #2
 800f004:	bfcc      	ite	gt
 800f006:	2400      	movgt	r4, #0
 800f008:	2401      	movle	r4, #1
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d863      	bhi.n	800f0d6 <_dtoa_r+0x296>
 800f00e:	e8df f003 	tbb	[pc, r3]
 800f012:	372a      	.short	0x372a
 800f014:	5535      	.short	0x5535
 800f016:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f01a:	441e      	add	r6, r3
 800f01c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f020:	2b20      	cmp	r3, #32
 800f022:	bfc1      	itttt	gt
 800f024:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f028:	409f      	lslgt	r7, r3
 800f02a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f02e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f032:	bfd6      	itet	le
 800f034:	f1c3 0320 	rsble	r3, r3, #32
 800f038:	ea47 0003 	orrgt.w	r0, r7, r3
 800f03c:	fa04 f003 	lslle.w	r0, r4, r3
 800f040:	f7f1 fa78 	bl	8000534 <__aeabi_ui2d>
 800f044:	2201      	movs	r2, #1
 800f046:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f04a:	3e01      	subs	r6, #1
 800f04c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f04e:	e777      	b.n	800ef40 <_dtoa_r+0x100>
 800f050:	2301      	movs	r3, #1
 800f052:	e7b8      	b.n	800efc6 <_dtoa_r+0x186>
 800f054:	9012      	str	r0, [sp, #72]	@ 0x48
 800f056:	e7b7      	b.n	800efc8 <_dtoa_r+0x188>
 800f058:	427b      	negs	r3, r7
 800f05a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f05c:	2300      	movs	r3, #0
 800f05e:	eba8 0807 	sub.w	r8, r8, r7
 800f062:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f064:	e7c4      	b.n	800eff0 <_dtoa_r+0x1b0>
 800f066:	2300      	movs	r3, #0
 800f068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f06a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	dc35      	bgt.n	800f0dc <_dtoa_r+0x29c>
 800f070:	2301      	movs	r3, #1
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	9307      	str	r3, [sp, #28]
 800f076:	461a      	mov	r2, r3
 800f078:	920e      	str	r2, [sp, #56]	@ 0x38
 800f07a:	e00b      	b.n	800f094 <_dtoa_r+0x254>
 800f07c:	2301      	movs	r3, #1
 800f07e:	e7f3      	b.n	800f068 <_dtoa_r+0x228>
 800f080:	2300      	movs	r3, #0
 800f082:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f086:	18fb      	adds	r3, r7, r3
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	3301      	adds	r3, #1
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	9307      	str	r3, [sp, #28]
 800f090:	bfb8      	it	lt
 800f092:	2301      	movlt	r3, #1
 800f094:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f098:	2100      	movs	r1, #0
 800f09a:	2204      	movs	r2, #4
 800f09c:	f102 0514 	add.w	r5, r2, #20
 800f0a0:	429d      	cmp	r5, r3
 800f0a2:	d91f      	bls.n	800f0e4 <_dtoa_r+0x2a4>
 800f0a4:	6041      	str	r1, [r0, #4]
 800f0a6:	4658      	mov	r0, fp
 800f0a8:	f000 ff32 	bl	800ff10 <_Balloc>
 800f0ac:	4682      	mov	sl, r0
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d13c      	bne.n	800f12c <_dtoa_r+0x2ec>
 800f0b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f120 <_dtoa_r+0x2e0>)
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f0ba:	e6d8      	b.n	800ee6e <_dtoa_r+0x2e>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	e7e0      	b.n	800f082 <_dtoa_r+0x242>
 800f0c0:	2401      	movs	r4, #1
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f0c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f0cc:	9300      	str	r3, [sp, #0]
 800f0ce:	9307      	str	r3, [sp, #28]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	2312      	movs	r3, #18
 800f0d4:	e7d0      	b.n	800f078 <_dtoa_r+0x238>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0da:	e7f5      	b.n	800f0c8 <_dtoa_r+0x288>
 800f0dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	9307      	str	r3, [sp, #28]
 800f0e2:	e7d7      	b.n	800f094 <_dtoa_r+0x254>
 800f0e4:	3101      	adds	r1, #1
 800f0e6:	0052      	lsls	r2, r2, #1
 800f0e8:	e7d8      	b.n	800f09c <_dtoa_r+0x25c>
 800f0ea:	bf00      	nop
 800f0ec:	f3af 8000 	nop.w
 800f0f0:	636f4361 	.word	0x636f4361
 800f0f4:	3fd287a7 	.word	0x3fd287a7
 800f0f8:	8b60c8b3 	.word	0x8b60c8b3
 800f0fc:	3fc68a28 	.word	0x3fc68a28
 800f100:	509f79fb 	.word	0x509f79fb
 800f104:	3fd34413 	.word	0x3fd34413
 800f108:	08024ca1 	.word	0x08024ca1
 800f10c:	08024cb8 	.word	0x08024cb8
 800f110:	7ff00000 	.word	0x7ff00000
 800f114:	08024c71 	.word	0x08024c71
 800f118:	3ff80000 	.word	0x3ff80000
 800f11c:	08024dc0 	.word	0x08024dc0
 800f120:	08024d10 	.word	0x08024d10
 800f124:	08024c9d 	.word	0x08024c9d
 800f128:	08024c70 	.word	0x08024c70
 800f12c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f130:	6018      	str	r0, [r3, #0]
 800f132:	9b07      	ldr	r3, [sp, #28]
 800f134:	2b0e      	cmp	r3, #14
 800f136:	f200 80a4 	bhi.w	800f282 <_dtoa_r+0x442>
 800f13a:	2c00      	cmp	r4, #0
 800f13c:	f000 80a1 	beq.w	800f282 <_dtoa_r+0x442>
 800f140:	2f00      	cmp	r7, #0
 800f142:	dd33      	ble.n	800f1ac <_dtoa_r+0x36c>
 800f144:	4bad      	ldr	r3, [pc, #692]	@ (800f3fc <_dtoa_r+0x5bc>)
 800f146:	f007 020f 	and.w	r2, r7, #15
 800f14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f14e:	ed93 7b00 	vldr	d7, [r3]
 800f152:	05f8      	lsls	r0, r7, #23
 800f154:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f15c:	d516      	bpl.n	800f18c <_dtoa_r+0x34c>
 800f15e:	4ba8      	ldr	r3, [pc, #672]	@ (800f400 <_dtoa_r+0x5c0>)
 800f160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f168:	f7f1 fb88 	bl	800087c <__aeabi_ddiv>
 800f16c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f170:	f004 040f 	and.w	r4, r4, #15
 800f174:	2603      	movs	r6, #3
 800f176:	4da2      	ldr	r5, [pc, #648]	@ (800f400 <_dtoa_r+0x5c0>)
 800f178:	b954      	cbnz	r4, 800f190 <_dtoa_r+0x350>
 800f17a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f182:	f7f1 fb7b 	bl	800087c <__aeabi_ddiv>
 800f186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f18a:	e028      	b.n	800f1de <_dtoa_r+0x39e>
 800f18c:	2602      	movs	r6, #2
 800f18e:	e7f2      	b.n	800f176 <_dtoa_r+0x336>
 800f190:	07e1      	lsls	r1, r4, #31
 800f192:	d508      	bpl.n	800f1a6 <_dtoa_r+0x366>
 800f194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f19c:	f7f1 fa44 	bl	8000628 <__aeabi_dmul>
 800f1a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1a4:	3601      	adds	r6, #1
 800f1a6:	1064      	asrs	r4, r4, #1
 800f1a8:	3508      	adds	r5, #8
 800f1aa:	e7e5      	b.n	800f178 <_dtoa_r+0x338>
 800f1ac:	f000 80d2 	beq.w	800f354 <_dtoa_r+0x514>
 800f1b0:	427c      	negs	r4, r7
 800f1b2:	4b92      	ldr	r3, [pc, #584]	@ (800f3fc <_dtoa_r+0x5bc>)
 800f1b4:	4d92      	ldr	r5, [pc, #584]	@ (800f400 <_dtoa_r+0x5c0>)
 800f1b6:	f004 020f 	and.w	r2, r4, #15
 800f1ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1c6:	f7f1 fa2f 	bl	8000628 <__aeabi_dmul>
 800f1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1ce:	1124      	asrs	r4, r4, #4
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	2602      	movs	r6, #2
 800f1d4:	2c00      	cmp	r4, #0
 800f1d6:	f040 80b2 	bne.w	800f33e <_dtoa_r+0x4fe>
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1d3      	bne.n	800f186 <_dtoa_r+0x346>
 800f1de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f000 80b7 	beq.w	800f358 <_dtoa_r+0x518>
 800f1ea:	4b86      	ldr	r3, [pc, #536]	@ (800f404 <_dtoa_r+0x5c4>)
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	f7f1 fc8b 	bl	8000b0c <__aeabi_dcmplt>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	f000 80ae 	beq.w	800f358 <_dtoa_r+0x518>
 800f1fc:	9b07      	ldr	r3, [sp, #28]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f000 80aa 	beq.w	800f358 <_dtoa_r+0x518>
 800f204:	9b00      	ldr	r3, [sp, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	dd37      	ble.n	800f27a <_dtoa_r+0x43a>
 800f20a:	1e7b      	subs	r3, r7, #1
 800f20c:	9304      	str	r3, [sp, #16]
 800f20e:	4620      	mov	r0, r4
 800f210:	4b7d      	ldr	r3, [pc, #500]	@ (800f408 <_dtoa_r+0x5c8>)
 800f212:	2200      	movs	r2, #0
 800f214:	4629      	mov	r1, r5
 800f216:	f7f1 fa07 	bl	8000628 <__aeabi_dmul>
 800f21a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f21e:	9c00      	ldr	r4, [sp, #0]
 800f220:	3601      	adds	r6, #1
 800f222:	4630      	mov	r0, r6
 800f224:	f7f1 f996 	bl	8000554 <__aeabi_i2d>
 800f228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f22c:	f7f1 f9fc 	bl	8000628 <__aeabi_dmul>
 800f230:	4b76      	ldr	r3, [pc, #472]	@ (800f40c <_dtoa_r+0x5cc>)
 800f232:	2200      	movs	r2, #0
 800f234:	f7f1 f842 	bl	80002bc <__adddf3>
 800f238:	4605      	mov	r5, r0
 800f23a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f23e:	2c00      	cmp	r4, #0
 800f240:	f040 808d 	bne.w	800f35e <_dtoa_r+0x51e>
 800f244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f248:	4b71      	ldr	r3, [pc, #452]	@ (800f410 <_dtoa_r+0x5d0>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	f7f1 f834 	bl	80002b8 <__aeabi_dsub>
 800f250:	4602      	mov	r2, r0
 800f252:	460b      	mov	r3, r1
 800f254:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f258:	462a      	mov	r2, r5
 800f25a:	4633      	mov	r3, r6
 800f25c:	f7f1 fc74 	bl	8000b48 <__aeabi_dcmpgt>
 800f260:	2800      	cmp	r0, #0
 800f262:	f040 828b 	bne.w	800f77c <_dtoa_r+0x93c>
 800f266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f26a:	462a      	mov	r2, r5
 800f26c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f270:	f7f1 fc4c 	bl	8000b0c <__aeabi_dcmplt>
 800f274:	2800      	cmp	r0, #0
 800f276:	f040 8128 	bne.w	800f4ca <_dtoa_r+0x68a>
 800f27a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f27e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f282:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f284:	2b00      	cmp	r3, #0
 800f286:	f2c0 815a 	blt.w	800f53e <_dtoa_r+0x6fe>
 800f28a:	2f0e      	cmp	r7, #14
 800f28c:	f300 8157 	bgt.w	800f53e <_dtoa_r+0x6fe>
 800f290:	4b5a      	ldr	r3, [pc, #360]	@ (800f3fc <_dtoa_r+0x5bc>)
 800f292:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f296:	ed93 7b00 	vldr	d7, [r3]
 800f29a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	ed8d 7b00 	vstr	d7, [sp]
 800f2a2:	da03      	bge.n	800f2ac <_dtoa_r+0x46c>
 800f2a4:	9b07      	ldr	r3, [sp, #28]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f340 8101 	ble.w	800f4ae <_dtoa_r+0x66e>
 800f2ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f2b0:	4656      	mov	r6, sl
 800f2b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	4629      	mov	r1, r5
 800f2ba:	f7f1 fadf 	bl	800087c <__aeabi_ddiv>
 800f2be:	f7f1 fc63 	bl	8000b88 <__aeabi_d2iz>
 800f2c2:	4680      	mov	r8, r0
 800f2c4:	f7f1 f946 	bl	8000554 <__aeabi_i2d>
 800f2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2cc:	f7f1 f9ac 	bl	8000628 <__aeabi_dmul>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	4629      	mov	r1, r5
 800f2d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f2dc:	f7f0 ffec 	bl	80002b8 <__aeabi_dsub>
 800f2e0:	f806 4b01 	strb.w	r4, [r6], #1
 800f2e4:	9d07      	ldr	r5, [sp, #28]
 800f2e6:	eba6 040a 	sub.w	r4, r6, sl
 800f2ea:	42a5      	cmp	r5, r4
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	f040 8117 	bne.w	800f522 <_dtoa_r+0x6e2>
 800f2f4:	f7f0 ffe2 	bl	80002bc <__adddf3>
 800f2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	460d      	mov	r5, r1
 800f300:	f7f1 fc22 	bl	8000b48 <__aeabi_dcmpgt>
 800f304:	2800      	cmp	r0, #0
 800f306:	f040 80f9 	bne.w	800f4fc <_dtoa_r+0x6bc>
 800f30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f30e:	4620      	mov	r0, r4
 800f310:	4629      	mov	r1, r5
 800f312:	f7f1 fbf1 	bl	8000af8 <__aeabi_dcmpeq>
 800f316:	b118      	cbz	r0, 800f320 <_dtoa_r+0x4e0>
 800f318:	f018 0f01 	tst.w	r8, #1
 800f31c:	f040 80ee 	bne.w	800f4fc <_dtoa_r+0x6bc>
 800f320:	4649      	mov	r1, r9
 800f322:	4658      	mov	r0, fp
 800f324:	f000 fe34 	bl	800ff90 <_Bfree>
 800f328:	2300      	movs	r3, #0
 800f32a:	7033      	strb	r3, [r6, #0]
 800f32c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f32e:	3701      	adds	r7, #1
 800f330:	601f      	str	r7, [r3, #0]
 800f332:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f334:	2b00      	cmp	r3, #0
 800f336:	f000 831d 	beq.w	800f974 <_dtoa_r+0xb34>
 800f33a:	601e      	str	r6, [r3, #0]
 800f33c:	e31a      	b.n	800f974 <_dtoa_r+0xb34>
 800f33e:	07e2      	lsls	r2, r4, #31
 800f340:	d505      	bpl.n	800f34e <_dtoa_r+0x50e>
 800f342:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f346:	f7f1 f96f 	bl	8000628 <__aeabi_dmul>
 800f34a:	3601      	adds	r6, #1
 800f34c:	2301      	movs	r3, #1
 800f34e:	1064      	asrs	r4, r4, #1
 800f350:	3508      	adds	r5, #8
 800f352:	e73f      	b.n	800f1d4 <_dtoa_r+0x394>
 800f354:	2602      	movs	r6, #2
 800f356:	e742      	b.n	800f1de <_dtoa_r+0x39e>
 800f358:	9c07      	ldr	r4, [sp, #28]
 800f35a:	9704      	str	r7, [sp, #16]
 800f35c:	e761      	b.n	800f222 <_dtoa_r+0x3e2>
 800f35e:	4b27      	ldr	r3, [pc, #156]	@ (800f3fc <_dtoa_r+0x5bc>)
 800f360:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f362:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f366:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f36a:	4454      	add	r4, sl
 800f36c:	2900      	cmp	r1, #0
 800f36e:	d053      	beq.n	800f418 <_dtoa_r+0x5d8>
 800f370:	4928      	ldr	r1, [pc, #160]	@ (800f414 <_dtoa_r+0x5d4>)
 800f372:	2000      	movs	r0, #0
 800f374:	f7f1 fa82 	bl	800087c <__aeabi_ddiv>
 800f378:	4633      	mov	r3, r6
 800f37a:	462a      	mov	r2, r5
 800f37c:	f7f0 ff9c 	bl	80002b8 <__aeabi_dsub>
 800f380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f384:	4656      	mov	r6, sl
 800f386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f38a:	f7f1 fbfd 	bl	8000b88 <__aeabi_d2iz>
 800f38e:	4605      	mov	r5, r0
 800f390:	f7f1 f8e0 	bl	8000554 <__aeabi_i2d>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f39c:	f7f0 ff8c 	bl	80002b8 <__aeabi_dsub>
 800f3a0:	3530      	adds	r5, #48	@ 0x30
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f3aa:	f806 5b01 	strb.w	r5, [r6], #1
 800f3ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f3b2:	f7f1 fbab 	bl	8000b0c <__aeabi_dcmplt>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	d171      	bne.n	800f49e <_dtoa_r+0x65e>
 800f3ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3be:	4911      	ldr	r1, [pc, #68]	@ (800f404 <_dtoa_r+0x5c4>)
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	f7f0 ff79 	bl	80002b8 <__aeabi_dsub>
 800f3c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f3ca:	f7f1 fb9f 	bl	8000b0c <__aeabi_dcmplt>
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	f040 8095 	bne.w	800f4fe <_dtoa_r+0x6be>
 800f3d4:	42a6      	cmp	r6, r4
 800f3d6:	f43f af50 	beq.w	800f27a <_dtoa_r+0x43a>
 800f3da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f3de:	4b0a      	ldr	r3, [pc, #40]	@ (800f408 <_dtoa_r+0x5c8>)
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f7f1 f921 	bl	8000628 <__aeabi_dmul>
 800f3e6:	4b08      	ldr	r3, [pc, #32]	@ (800f408 <_dtoa_r+0x5c8>)
 800f3e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3f2:	f7f1 f919 	bl	8000628 <__aeabi_dmul>
 800f3f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3fa:	e7c4      	b.n	800f386 <_dtoa_r+0x546>
 800f3fc:	08024dc0 	.word	0x08024dc0
 800f400:	08024d98 	.word	0x08024d98
 800f404:	3ff00000 	.word	0x3ff00000
 800f408:	40240000 	.word	0x40240000
 800f40c:	401c0000 	.word	0x401c0000
 800f410:	40140000 	.word	0x40140000
 800f414:	3fe00000 	.word	0x3fe00000
 800f418:	4631      	mov	r1, r6
 800f41a:	4628      	mov	r0, r5
 800f41c:	f7f1 f904 	bl	8000628 <__aeabi_dmul>
 800f420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f424:	9415      	str	r4, [sp, #84]	@ 0x54
 800f426:	4656      	mov	r6, sl
 800f428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f42c:	f7f1 fbac 	bl	8000b88 <__aeabi_d2iz>
 800f430:	4605      	mov	r5, r0
 800f432:	f7f1 f88f 	bl	8000554 <__aeabi_i2d>
 800f436:	4602      	mov	r2, r0
 800f438:	460b      	mov	r3, r1
 800f43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f43e:	f7f0 ff3b 	bl	80002b8 <__aeabi_dsub>
 800f442:	3530      	adds	r5, #48	@ 0x30
 800f444:	f806 5b01 	strb.w	r5, [r6], #1
 800f448:	4602      	mov	r2, r0
 800f44a:	460b      	mov	r3, r1
 800f44c:	42a6      	cmp	r6, r4
 800f44e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f452:	f04f 0200 	mov.w	r2, #0
 800f456:	d124      	bne.n	800f4a2 <_dtoa_r+0x662>
 800f458:	4bac      	ldr	r3, [pc, #688]	@ (800f70c <_dtoa_r+0x8cc>)
 800f45a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f45e:	f7f0 ff2d 	bl	80002bc <__adddf3>
 800f462:	4602      	mov	r2, r0
 800f464:	460b      	mov	r3, r1
 800f466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f46a:	f7f1 fb6d 	bl	8000b48 <__aeabi_dcmpgt>
 800f46e:	2800      	cmp	r0, #0
 800f470:	d145      	bne.n	800f4fe <_dtoa_r+0x6be>
 800f472:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f476:	49a5      	ldr	r1, [pc, #660]	@ (800f70c <_dtoa_r+0x8cc>)
 800f478:	2000      	movs	r0, #0
 800f47a:	f7f0 ff1d 	bl	80002b8 <__aeabi_dsub>
 800f47e:	4602      	mov	r2, r0
 800f480:	460b      	mov	r3, r1
 800f482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f486:	f7f1 fb41 	bl	8000b0c <__aeabi_dcmplt>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	f43f aef5 	beq.w	800f27a <_dtoa_r+0x43a>
 800f490:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f492:	1e73      	subs	r3, r6, #1
 800f494:	9315      	str	r3, [sp, #84]	@ 0x54
 800f496:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f49a:	2b30      	cmp	r3, #48	@ 0x30
 800f49c:	d0f8      	beq.n	800f490 <_dtoa_r+0x650>
 800f49e:	9f04      	ldr	r7, [sp, #16]
 800f4a0:	e73e      	b.n	800f320 <_dtoa_r+0x4e0>
 800f4a2:	4b9b      	ldr	r3, [pc, #620]	@ (800f710 <_dtoa_r+0x8d0>)
 800f4a4:	f7f1 f8c0 	bl	8000628 <__aeabi_dmul>
 800f4a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4ac:	e7bc      	b.n	800f428 <_dtoa_r+0x5e8>
 800f4ae:	d10c      	bne.n	800f4ca <_dtoa_r+0x68a>
 800f4b0:	4b98      	ldr	r3, [pc, #608]	@ (800f714 <_dtoa_r+0x8d4>)
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4b8:	f7f1 f8b6 	bl	8000628 <__aeabi_dmul>
 800f4bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4c0:	f7f1 fb38 	bl	8000b34 <__aeabi_dcmpge>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	f000 8157 	beq.w	800f778 <_dtoa_r+0x938>
 800f4ca:	2400      	movs	r4, #0
 800f4cc:	4625      	mov	r5, r4
 800f4ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4d0:	43db      	mvns	r3, r3
 800f4d2:	9304      	str	r3, [sp, #16]
 800f4d4:	4656      	mov	r6, sl
 800f4d6:	2700      	movs	r7, #0
 800f4d8:	4621      	mov	r1, r4
 800f4da:	4658      	mov	r0, fp
 800f4dc:	f000 fd58 	bl	800ff90 <_Bfree>
 800f4e0:	2d00      	cmp	r5, #0
 800f4e2:	d0dc      	beq.n	800f49e <_dtoa_r+0x65e>
 800f4e4:	b12f      	cbz	r7, 800f4f2 <_dtoa_r+0x6b2>
 800f4e6:	42af      	cmp	r7, r5
 800f4e8:	d003      	beq.n	800f4f2 <_dtoa_r+0x6b2>
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	4658      	mov	r0, fp
 800f4ee:	f000 fd4f 	bl	800ff90 <_Bfree>
 800f4f2:	4629      	mov	r1, r5
 800f4f4:	4658      	mov	r0, fp
 800f4f6:	f000 fd4b 	bl	800ff90 <_Bfree>
 800f4fa:	e7d0      	b.n	800f49e <_dtoa_r+0x65e>
 800f4fc:	9704      	str	r7, [sp, #16]
 800f4fe:	4633      	mov	r3, r6
 800f500:	461e      	mov	r6, r3
 800f502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f506:	2a39      	cmp	r2, #57	@ 0x39
 800f508:	d107      	bne.n	800f51a <_dtoa_r+0x6da>
 800f50a:	459a      	cmp	sl, r3
 800f50c:	d1f8      	bne.n	800f500 <_dtoa_r+0x6c0>
 800f50e:	9a04      	ldr	r2, [sp, #16]
 800f510:	3201      	adds	r2, #1
 800f512:	9204      	str	r2, [sp, #16]
 800f514:	2230      	movs	r2, #48	@ 0x30
 800f516:	f88a 2000 	strb.w	r2, [sl]
 800f51a:	781a      	ldrb	r2, [r3, #0]
 800f51c:	3201      	adds	r2, #1
 800f51e:	701a      	strb	r2, [r3, #0]
 800f520:	e7bd      	b.n	800f49e <_dtoa_r+0x65e>
 800f522:	4b7b      	ldr	r3, [pc, #492]	@ (800f710 <_dtoa_r+0x8d0>)
 800f524:	2200      	movs	r2, #0
 800f526:	f7f1 f87f 	bl	8000628 <__aeabi_dmul>
 800f52a:	2200      	movs	r2, #0
 800f52c:	2300      	movs	r3, #0
 800f52e:	4604      	mov	r4, r0
 800f530:	460d      	mov	r5, r1
 800f532:	f7f1 fae1 	bl	8000af8 <__aeabi_dcmpeq>
 800f536:	2800      	cmp	r0, #0
 800f538:	f43f aebb 	beq.w	800f2b2 <_dtoa_r+0x472>
 800f53c:	e6f0      	b.n	800f320 <_dtoa_r+0x4e0>
 800f53e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f540:	2a00      	cmp	r2, #0
 800f542:	f000 80db 	beq.w	800f6fc <_dtoa_r+0x8bc>
 800f546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f548:	2a01      	cmp	r2, #1
 800f54a:	f300 80bf 	bgt.w	800f6cc <_dtoa_r+0x88c>
 800f54e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f550:	2a00      	cmp	r2, #0
 800f552:	f000 80b7 	beq.w	800f6c4 <_dtoa_r+0x884>
 800f556:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f55a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f55c:	4646      	mov	r6, r8
 800f55e:	9a08      	ldr	r2, [sp, #32]
 800f560:	2101      	movs	r1, #1
 800f562:	441a      	add	r2, r3
 800f564:	4658      	mov	r0, fp
 800f566:	4498      	add	r8, r3
 800f568:	9208      	str	r2, [sp, #32]
 800f56a:	f000 fdc5 	bl	80100f8 <__i2b>
 800f56e:	4605      	mov	r5, r0
 800f570:	b15e      	cbz	r6, 800f58a <_dtoa_r+0x74a>
 800f572:	9b08      	ldr	r3, [sp, #32]
 800f574:	2b00      	cmp	r3, #0
 800f576:	dd08      	ble.n	800f58a <_dtoa_r+0x74a>
 800f578:	42b3      	cmp	r3, r6
 800f57a:	9a08      	ldr	r2, [sp, #32]
 800f57c:	bfa8      	it	ge
 800f57e:	4633      	movge	r3, r6
 800f580:	eba8 0803 	sub.w	r8, r8, r3
 800f584:	1af6      	subs	r6, r6, r3
 800f586:	1ad3      	subs	r3, r2, r3
 800f588:	9308      	str	r3, [sp, #32]
 800f58a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f58c:	b1f3      	cbz	r3, 800f5cc <_dtoa_r+0x78c>
 800f58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f590:	2b00      	cmp	r3, #0
 800f592:	f000 80b7 	beq.w	800f704 <_dtoa_r+0x8c4>
 800f596:	b18c      	cbz	r4, 800f5bc <_dtoa_r+0x77c>
 800f598:	4629      	mov	r1, r5
 800f59a:	4622      	mov	r2, r4
 800f59c:	4658      	mov	r0, fp
 800f59e:	f000 fe6b 	bl	8010278 <__pow5mult>
 800f5a2:	464a      	mov	r2, r9
 800f5a4:	4601      	mov	r1, r0
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	4658      	mov	r0, fp
 800f5aa:	f000 fdbb 	bl	8010124 <__multiply>
 800f5ae:	4649      	mov	r1, r9
 800f5b0:	9004      	str	r0, [sp, #16]
 800f5b2:	4658      	mov	r0, fp
 800f5b4:	f000 fcec 	bl	800ff90 <_Bfree>
 800f5b8:	9b04      	ldr	r3, [sp, #16]
 800f5ba:	4699      	mov	r9, r3
 800f5bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5be:	1b1a      	subs	r2, r3, r4
 800f5c0:	d004      	beq.n	800f5cc <_dtoa_r+0x78c>
 800f5c2:	4649      	mov	r1, r9
 800f5c4:	4658      	mov	r0, fp
 800f5c6:	f000 fe57 	bl	8010278 <__pow5mult>
 800f5ca:	4681      	mov	r9, r0
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	4658      	mov	r0, fp
 800f5d0:	f000 fd92 	bl	80100f8 <__i2b>
 800f5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 81cf 	beq.w	800f97c <_dtoa_r+0xb3c>
 800f5de:	461a      	mov	r2, r3
 800f5e0:	4601      	mov	r1, r0
 800f5e2:	4658      	mov	r0, fp
 800f5e4:	f000 fe48 	bl	8010278 <__pow5mult>
 800f5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	f300 8095 	bgt.w	800f71c <_dtoa_r+0x8dc>
 800f5f2:	9b02      	ldr	r3, [sp, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f040 8087 	bne.w	800f708 <_dtoa_r+0x8c8>
 800f5fa:	9b03      	ldr	r3, [sp, #12]
 800f5fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f600:	2b00      	cmp	r3, #0
 800f602:	f040 8089 	bne.w	800f718 <_dtoa_r+0x8d8>
 800f606:	9b03      	ldr	r3, [sp, #12]
 800f608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f60c:	0d1b      	lsrs	r3, r3, #20
 800f60e:	051b      	lsls	r3, r3, #20
 800f610:	b12b      	cbz	r3, 800f61e <_dtoa_r+0x7de>
 800f612:	9b08      	ldr	r3, [sp, #32]
 800f614:	3301      	adds	r3, #1
 800f616:	9308      	str	r3, [sp, #32]
 800f618:	f108 0801 	add.w	r8, r8, #1
 800f61c:	2301      	movs	r3, #1
 800f61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f622:	2b00      	cmp	r3, #0
 800f624:	f000 81b0 	beq.w	800f988 <_dtoa_r+0xb48>
 800f628:	6923      	ldr	r3, [r4, #16]
 800f62a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f62e:	6918      	ldr	r0, [r3, #16]
 800f630:	f000 fd16 	bl	8010060 <__hi0bits>
 800f634:	f1c0 0020 	rsb	r0, r0, #32
 800f638:	9b08      	ldr	r3, [sp, #32]
 800f63a:	4418      	add	r0, r3
 800f63c:	f010 001f 	ands.w	r0, r0, #31
 800f640:	d077      	beq.n	800f732 <_dtoa_r+0x8f2>
 800f642:	f1c0 0320 	rsb	r3, r0, #32
 800f646:	2b04      	cmp	r3, #4
 800f648:	dd6b      	ble.n	800f722 <_dtoa_r+0x8e2>
 800f64a:	9b08      	ldr	r3, [sp, #32]
 800f64c:	f1c0 001c 	rsb	r0, r0, #28
 800f650:	4403      	add	r3, r0
 800f652:	4480      	add	r8, r0
 800f654:	4406      	add	r6, r0
 800f656:	9308      	str	r3, [sp, #32]
 800f658:	f1b8 0f00 	cmp.w	r8, #0
 800f65c:	dd05      	ble.n	800f66a <_dtoa_r+0x82a>
 800f65e:	4649      	mov	r1, r9
 800f660:	4642      	mov	r2, r8
 800f662:	4658      	mov	r0, fp
 800f664:	f000 fe62 	bl	801032c <__lshift>
 800f668:	4681      	mov	r9, r0
 800f66a:	9b08      	ldr	r3, [sp, #32]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	dd05      	ble.n	800f67c <_dtoa_r+0x83c>
 800f670:	4621      	mov	r1, r4
 800f672:	461a      	mov	r2, r3
 800f674:	4658      	mov	r0, fp
 800f676:	f000 fe59 	bl	801032c <__lshift>
 800f67a:	4604      	mov	r4, r0
 800f67c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d059      	beq.n	800f736 <_dtoa_r+0x8f6>
 800f682:	4621      	mov	r1, r4
 800f684:	4648      	mov	r0, r9
 800f686:	f000 febd 	bl	8010404 <__mcmp>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	da53      	bge.n	800f736 <_dtoa_r+0x8f6>
 800f68e:	1e7b      	subs	r3, r7, #1
 800f690:	9304      	str	r3, [sp, #16]
 800f692:	4649      	mov	r1, r9
 800f694:	2300      	movs	r3, #0
 800f696:	220a      	movs	r2, #10
 800f698:	4658      	mov	r0, fp
 800f69a:	f000 fc9b 	bl	800ffd4 <__multadd>
 800f69e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6a0:	4681      	mov	r9, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f000 8172 	beq.w	800f98c <_dtoa_r+0xb4c>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4629      	mov	r1, r5
 800f6ac:	220a      	movs	r2, #10
 800f6ae:	4658      	mov	r0, fp
 800f6b0:	f000 fc90 	bl	800ffd4 <__multadd>
 800f6b4:	9b00      	ldr	r3, [sp, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	4605      	mov	r5, r0
 800f6ba:	dc67      	bgt.n	800f78c <_dtoa_r+0x94c>
 800f6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	dc41      	bgt.n	800f746 <_dtoa_r+0x906>
 800f6c2:	e063      	b.n	800f78c <_dtoa_r+0x94c>
 800f6c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f6c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f6ca:	e746      	b.n	800f55a <_dtoa_r+0x71a>
 800f6cc:	9b07      	ldr	r3, [sp, #28]
 800f6ce:	1e5c      	subs	r4, r3, #1
 800f6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6d2:	42a3      	cmp	r3, r4
 800f6d4:	bfbf      	itttt	lt
 800f6d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f6d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f6da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f6dc:	1ae3      	sublt	r3, r4, r3
 800f6de:	bfb4      	ite	lt
 800f6e0:	18d2      	addlt	r2, r2, r3
 800f6e2:	1b1c      	subge	r4, r3, r4
 800f6e4:	9b07      	ldr	r3, [sp, #28]
 800f6e6:	bfbc      	itt	lt
 800f6e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f6ea:	2400      	movlt	r4, #0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	bfb5      	itete	lt
 800f6f0:	eba8 0603 	sublt.w	r6, r8, r3
 800f6f4:	9b07      	ldrge	r3, [sp, #28]
 800f6f6:	2300      	movlt	r3, #0
 800f6f8:	4646      	movge	r6, r8
 800f6fa:	e730      	b.n	800f55e <_dtoa_r+0x71e>
 800f6fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f6fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f700:	4646      	mov	r6, r8
 800f702:	e735      	b.n	800f570 <_dtoa_r+0x730>
 800f704:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f706:	e75c      	b.n	800f5c2 <_dtoa_r+0x782>
 800f708:	2300      	movs	r3, #0
 800f70a:	e788      	b.n	800f61e <_dtoa_r+0x7de>
 800f70c:	3fe00000 	.word	0x3fe00000
 800f710:	40240000 	.word	0x40240000
 800f714:	40140000 	.word	0x40140000
 800f718:	9b02      	ldr	r3, [sp, #8]
 800f71a:	e780      	b.n	800f61e <_dtoa_r+0x7de>
 800f71c:	2300      	movs	r3, #0
 800f71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f720:	e782      	b.n	800f628 <_dtoa_r+0x7e8>
 800f722:	d099      	beq.n	800f658 <_dtoa_r+0x818>
 800f724:	9a08      	ldr	r2, [sp, #32]
 800f726:	331c      	adds	r3, #28
 800f728:	441a      	add	r2, r3
 800f72a:	4498      	add	r8, r3
 800f72c:	441e      	add	r6, r3
 800f72e:	9208      	str	r2, [sp, #32]
 800f730:	e792      	b.n	800f658 <_dtoa_r+0x818>
 800f732:	4603      	mov	r3, r0
 800f734:	e7f6      	b.n	800f724 <_dtoa_r+0x8e4>
 800f736:	9b07      	ldr	r3, [sp, #28]
 800f738:	9704      	str	r7, [sp, #16]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	dc20      	bgt.n	800f780 <_dtoa_r+0x940>
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f742:	2b02      	cmp	r3, #2
 800f744:	dd1e      	ble.n	800f784 <_dtoa_r+0x944>
 800f746:	9b00      	ldr	r3, [sp, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	f47f aec0 	bne.w	800f4ce <_dtoa_r+0x68e>
 800f74e:	4621      	mov	r1, r4
 800f750:	2205      	movs	r2, #5
 800f752:	4658      	mov	r0, fp
 800f754:	f000 fc3e 	bl	800ffd4 <__multadd>
 800f758:	4601      	mov	r1, r0
 800f75a:	4604      	mov	r4, r0
 800f75c:	4648      	mov	r0, r9
 800f75e:	f000 fe51 	bl	8010404 <__mcmp>
 800f762:	2800      	cmp	r0, #0
 800f764:	f77f aeb3 	ble.w	800f4ce <_dtoa_r+0x68e>
 800f768:	4656      	mov	r6, sl
 800f76a:	2331      	movs	r3, #49	@ 0x31
 800f76c:	f806 3b01 	strb.w	r3, [r6], #1
 800f770:	9b04      	ldr	r3, [sp, #16]
 800f772:	3301      	adds	r3, #1
 800f774:	9304      	str	r3, [sp, #16]
 800f776:	e6ae      	b.n	800f4d6 <_dtoa_r+0x696>
 800f778:	9c07      	ldr	r4, [sp, #28]
 800f77a:	9704      	str	r7, [sp, #16]
 800f77c:	4625      	mov	r5, r4
 800f77e:	e7f3      	b.n	800f768 <_dtoa_r+0x928>
 800f780:	9b07      	ldr	r3, [sp, #28]
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f786:	2b00      	cmp	r3, #0
 800f788:	f000 8104 	beq.w	800f994 <_dtoa_r+0xb54>
 800f78c:	2e00      	cmp	r6, #0
 800f78e:	dd05      	ble.n	800f79c <_dtoa_r+0x95c>
 800f790:	4629      	mov	r1, r5
 800f792:	4632      	mov	r2, r6
 800f794:	4658      	mov	r0, fp
 800f796:	f000 fdc9 	bl	801032c <__lshift>
 800f79a:	4605      	mov	r5, r0
 800f79c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d05a      	beq.n	800f858 <_dtoa_r+0xa18>
 800f7a2:	6869      	ldr	r1, [r5, #4]
 800f7a4:	4658      	mov	r0, fp
 800f7a6:	f000 fbb3 	bl	800ff10 <_Balloc>
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	b928      	cbnz	r0, 800f7ba <_dtoa_r+0x97a>
 800f7ae:	4b84      	ldr	r3, [pc, #528]	@ (800f9c0 <_dtoa_r+0xb80>)
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f7b6:	f7ff bb5a 	b.w	800ee6e <_dtoa_r+0x2e>
 800f7ba:	692a      	ldr	r2, [r5, #16]
 800f7bc:	3202      	adds	r2, #2
 800f7be:	0092      	lsls	r2, r2, #2
 800f7c0:	f105 010c 	add.w	r1, r5, #12
 800f7c4:	300c      	adds	r0, #12
 800f7c6:	f7ff faa4 	bl	800ed12 <memcpy>
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	4658      	mov	r0, fp
 800f7d0:	f000 fdac 	bl	801032c <__lshift>
 800f7d4:	f10a 0301 	add.w	r3, sl, #1
 800f7d8:	9307      	str	r3, [sp, #28]
 800f7da:	9b00      	ldr	r3, [sp, #0]
 800f7dc:	4453      	add	r3, sl
 800f7de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7e0:	9b02      	ldr	r3, [sp, #8]
 800f7e2:	f003 0301 	and.w	r3, r3, #1
 800f7e6:	462f      	mov	r7, r5
 800f7e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7ea:	4605      	mov	r5, r0
 800f7ec:	9b07      	ldr	r3, [sp, #28]
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	3b01      	subs	r3, #1
 800f7f2:	4648      	mov	r0, r9
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	f7ff fa9a 	bl	800ed2e <quorem>
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	9002      	str	r0, [sp, #8]
 800f7fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f802:	4648      	mov	r0, r9
 800f804:	f000 fdfe 	bl	8010404 <__mcmp>
 800f808:	462a      	mov	r2, r5
 800f80a:	9008      	str	r0, [sp, #32]
 800f80c:	4621      	mov	r1, r4
 800f80e:	4658      	mov	r0, fp
 800f810:	f000 fe14 	bl	801043c <__mdiff>
 800f814:	68c2      	ldr	r2, [r0, #12]
 800f816:	4606      	mov	r6, r0
 800f818:	bb02      	cbnz	r2, 800f85c <_dtoa_r+0xa1c>
 800f81a:	4601      	mov	r1, r0
 800f81c:	4648      	mov	r0, r9
 800f81e:	f000 fdf1 	bl	8010404 <__mcmp>
 800f822:	4602      	mov	r2, r0
 800f824:	4631      	mov	r1, r6
 800f826:	4658      	mov	r0, fp
 800f828:	920e      	str	r2, [sp, #56]	@ 0x38
 800f82a:	f000 fbb1 	bl	800ff90 <_Bfree>
 800f82e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f830:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f832:	9e07      	ldr	r6, [sp, #28]
 800f834:	ea43 0102 	orr.w	r1, r3, r2
 800f838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f83a:	4319      	orrs	r1, r3
 800f83c:	d110      	bne.n	800f860 <_dtoa_r+0xa20>
 800f83e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f842:	d029      	beq.n	800f898 <_dtoa_r+0xa58>
 800f844:	9b08      	ldr	r3, [sp, #32]
 800f846:	2b00      	cmp	r3, #0
 800f848:	dd02      	ble.n	800f850 <_dtoa_r+0xa10>
 800f84a:	9b02      	ldr	r3, [sp, #8]
 800f84c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f850:	9b00      	ldr	r3, [sp, #0]
 800f852:	f883 8000 	strb.w	r8, [r3]
 800f856:	e63f      	b.n	800f4d8 <_dtoa_r+0x698>
 800f858:	4628      	mov	r0, r5
 800f85a:	e7bb      	b.n	800f7d4 <_dtoa_r+0x994>
 800f85c:	2201      	movs	r2, #1
 800f85e:	e7e1      	b.n	800f824 <_dtoa_r+0x9e4>
 800f860:	9b08      	ldr	r3, [sp, #32]
 800f862:	2b00      	cmp	r3, #0
 800f864:	db04      	blt.n	800f870 <_dtoa_r+0xa30>
 800f866:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f868:	430b      	orrs	r3, r1
 800f86a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f86c:	430b      	orrs	r3, r1
 800f86e:	d120      	bne.n	800f8b2 <_dtoa_r+0xa72>
 800f870:	2a00      	cmp	r2, #0
 800f872:	dded      	ble.n	800f850 <_dtoa_r+0xa10>
 800f874:	4649      	mov	r1, r9
 800f876:	2201      	movs	r2, #1
 800f878:	4658      	mov	r0, fp
 800f87a:	f000 fd57 	bl	801032c <__lshift>
 800f87e:	4621      	mov	r1, r4
 800f880:	4681      	mov	r9, r0
 800f882:	f000 fdbf 	bl	8010404 <__mcmp>
 800f886:	2800      	cmp	r0, #0
 800f888:	dc03      	bgt.n	800f892 <_dtoa_r+0xa52>
 800f88a:	d1e1      	bne.n	800f850 <_dtoa_r+0xa10>
 800f88c:	f018 0f01 	tst.w	r8, #1
 800f890:	d0de      	beq.n	800f850 <_dtoa_r+0xa10>
 800f892:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f896:	d1d8      	bne.n	800f84a <_dtoa_r+0xa0a>
 800f898:	9a00      	ldr	r2, [sp, #0]
 800f89a:	2339      	movs	r3, #57	@ 0x39
 800f89c:	7013      	strb	r3, [r2, #0]
 800f89e:	4633      	mov	r3, r6
 800f8a0:	461e      	mov	r6, r3
 800f8a2:	3b01      	subs	r3, #1
 800f8a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f8a8:	2a39      	cmp	r2, #57	@ 0x39
 800f8aa:	d052      	beq.n	800f952 <_dtoa_r+0xb12>
 800f8ac:	3201      	adds	r2, #1
 800f8ae:	701a      	strb	r2, [r3, #0]
 800f8b0:	e612      	b.n	800f4d8 <_dtoa_r+0x698>
 800f8b2:	2a00      	cmp	r2, #0
 800f8b4:	dd07      	ble.n	800f8c6 <_dtoa_r+0xa86>
 800f8b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f8ba:	d0ed      	beq.n	800f898 <_dtoa_r+0xa58>
 800f8bc:	9a00      	ldr	r2, [sp, #0]
 800f8be:	f108 0301 	add.w	r3, r8, #1
 800f8c2:	7013      	strb	r3, [r2, #0]
 800f8c4:	e608      	b.n	800f4d8 <_dtoa_r+0x698>
 800f8c6:	9b07      	ldr	r3, [sp, #28]
 800f8c8:	9a07      	ldr	r2, [sp, #28]
 800f8ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d028      	beq.n	800f926 <_dtoa_r+0xae6>
 800f8d4:	4649      	mov	r1, r9
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	220a      	movs	r2, #10
 800f8da:	4658      	mov	r0, fp
 800f8dc:	f000 fb7a 	bl	800ffd4 <__multadd>
 800f8e0:	42af      	cmp	r7, r5
 800f8e2:	4681      	mov	r9, r0
 800f8e4:	f04f 0300 	mov.w	r3, #0
 800f8e8:	f04f 020a 	mov.w	r2, #10
 800f8ec:	4639      	mov	r1, r7
 800f8ee:	4658      	mov	r0, fp
 800f8f0:	d107      	bne.n	800f902 <_dtoa_r+0xac2>
 800f8f2:	f000 fb6f 	bl	800ffd4 <__multadd>
 800f8f6:	4607      	mov	r7, r0
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	9b07      	ldr	r3, [sp, #28]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	9307      	str	r3, [sp, #28]
 800f900:	e774      	b.n	800f7ec <_dtoa_r+0x9ac>
 800f902:	f000 fb67 	bl	800ffd4 <__multadd>
 800f906:	4629      	mov	r1, r5
 800f908:	4607      	mov	r7, r0
 800f90a:	2300      	movs	r3, #0
 800f90c:	220a      	movs	r2, #10
 800f90e:	4658      	mov	r0, fp
 800f910:	f000 fb60 	bl	800ffd4 <__multadd>
 800f914:	4605      	mov	r5, r0
 800f916:	e7f0      	b.n	800f8fa <_dtoa_r+0xaba>
 800f918:	9b00      	ldr	r3, [sp, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	bfcc      	ite	gt
 800f91e:	461e      	movgt	r6, r3
 800f920:	2601      	movle	r6, #1
 800f922:	4456      	add	r6, sl
 800f924:	2700      	movs	r7, #0
 800f926:	4649      	mov	r1, r9
 800f928:	2201      	movs	r2, #1
 800f92a:	4658      	mov	r0, fp
 800f92c:	f000 fcfe 	bl	801032c <__lshift>
 800f930:	4621      	mov	r1, r4
 800f932:	4681      	mov	r9, r0
 800f934:	f000 fd66 	bl	8010404 <__mcmp>
 800f938:	2800      	cmp	r0, #0
 800f93a:	dcb0      	bgt.n	800f89e <_dtoa_r+0xa5e>
 800f93c:	d102      	bne.n	800f944 <_dtoa_r+0xb04>
 800f93e:	f018 0f01 	tst.w	r8, #1
 800f942:	d1ac      	bne.n	800f89e <_dtoa_r+0xa5e>
 800f944:	4633      	mov	r3, r6
 800f946:	461e      	mov	r6, r3
 800f948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f94c:	2a30      	cmp	r2, #48	@ 0x30
 800f94e:	d0fa      	beq.n	800f946 <_dtoa_r+0xb06>
 800f950:	e5c2      	b.n	800f4d8 <_dtoa_r+0x698>
 800f952:	459a      	cmp	sl, r3
 800f954:	d1a4      	bne.n	800f8a0 <_dtoa_r+0xa60>
 800f956:	9b04      	ldr	r3, [sp, #16]
 800f958:	3301      	adds	r3, #1
 800f95a:	9304      	str	r3, [sp, #16]
 800f95c:	2331      	movs	r3, #49	@ 0x31
 800f95e:	f88a 3000 	strb.w	r3, [sl]
 800f962:	e5b9      	b.n	800f4d8 <_dtoa_r+0x698>
 800f964:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f966:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f9c4 <_dtoa_r+0xb84>
 800f96a:	b11b      	cbz	r3, 800f974 <_dtoa_r+0xb34>
 800f96c:	f10a 0308 	add.w	r3, sl, #8
 800f970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f972:	6013      	str	r3, [r2, #0]
 800f974:	4650      	mov	r0, sl
 800f976:	b019      	add	sp, #100	@ 0x64
 800f978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f97e:	2b01      	cmp	r3, #1
 800f980:	f77f ae37 	ble.w	800f5f2 <_dtoa_r+0x7b2>
 800f984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f986:	930a      	str	r3, [sp, #40]	@ 0x28
 800f988:	2001      	movs	r0, #1
 800f98a:	e655      	b.n	800f638 <_dtoa_r+0x7f8>
 800f98c:	9b00      	ldr	r3, [sp, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f77f aed6 	ble.w	800f740 <_dtoa_r+0x900>
 800f994:	4656      	mov	r6, sl
 800f996:	4621      	mov	r1, r4
 800f998:	4648      	mov	r0, r9
 800f99a:	f7ff f9c8 	bl	800ed2e <quorem>
 800f99e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f9a2:	f806 8b01 	strb.w	r8, [r6], #1
 800f9a6:	9b00      	ldr	r3, [sp, #0]
 800f9a8:	eba6 020a 	sub.w	r2, r6, sl
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	ddb3      	ble.n	800f918 <_dtoa_r+0xad8>
 800f9b0:	4649      	mov	r1, r9
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	220a      	movs	r2, #10
 800f9b6:	4658      	mov	r0, fp
 800f9b8:	f000 fb0c 	bl	800ffd4 <__multadd>
 800f9bc:	4681      	mov	r9, r0
 800f9be:	e7ea      	b.n	800f996 <_dtoa_r+0xb56>
 800f9c0:	08024d10 	.word	0x08024d10
 800f9c4:	08024c94 	.word	0x08024c94

0800f9c8 <__sfputc_r>:
 800f9c8:	6893      	ldr	r3, [r2, #8]
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	b410      	push	{r4}
 800f9d0:	6093      	str	r3, [r2, #8]
 800f9d2:	da08      	bge.n	800f9e6 <__sfputc_r+0x1e>
 800f9d4:	6994      	ldr	r4, [r2, #24]
 800f9d6:	42a3      	cmp	r3, r4
 800f9d8:	db01      	blt.n	800f9de <__sfputc_r+0x16>
 800f9da:	290a      	cmp	r1, #10
 800f9dc:	d103      	bne.n	800f9e6 <__sfputc_r+0x1e>
 800f9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9e2:	f000 be5a 	b.w	801069a <__swbuf_r>
 800f9e6:	6813      	ldr	r3, [r2, #0]
 800f9e8:	1c58      	adds	r0, r3, #1
 800f9ea:	6010      	str	r0, [r2, #0]
 800f9ec:	7019      	strb	r1, [r3, #0]
 800f9ee:	4608      	mov	r0, r1
 800f9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <__sfputs_r>:
 800f9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f8:	4606      	mov	r6, r0
 800f9fa:	460f      	mov	r7, r1
 800f9fc:	4614      	mov	r4, r2
 800f9fe:	18d5      	adds	r5, r2, r3
 800fa00:	42ac      	cmp	r4, r5
 800fa02:	d101      	bne.n	800fa08 <__sfputs_r+0x12>
 800fa04:	2000      	movs	r0, #0
 800fa06:	e007      	b.n	800fa18 <__sfputs_r+0x22>
 800fa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa0c:	463a      	mov	r2, r7
 800fa0e:	4630      	mov	r0, r6
 800fa10:	f7ff ffda 	bl	800f9c8 <__sfputc_r>
 800fa14:	1c43      	adds	r3, r0, #1
 800fa16:	d1f3      	bne.n	800fa00 <__sfputs_r+0xa>
 800fa18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa1c <_vfiprintf_r>:
 800fa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa20:	460d      	mov	r5, r1
 800fa22:	b09d      	sub	sp, #116	@ 0x74
 800fa24:	4614      	mov	r4, r2
 800fa26:	4698      	mov	r8, r3
 800fa28:	4606      	mov	r6, r0
 800fa2a:	b118      	cbz	r0, 800fa34 <_vfiprintf_r+0x18>
 800fa2c:	6a03      	ldr	r3, [r0, #32]
 800fa2e:	b90b      	cbnz	r3, 800fa34 <_vfiprintf_r+0x18>
 800fa30:	f7ff f8ee 	bl	800ec10 <__sinit>
 800fa34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa36:	07d9      	lsls	r1, r3, #31
 800fa38:	d405      	bmi.n	800fa46 <_vfiprintf_r+0x2a>
 800fa3a:	89ab      	ldrh	r3, [r5, #12]
 800fa3c:	059a      	lsls	r2, r3, #22
 800fa3e:	d402      	bmi.n	800fa46 <_vfiprintf_r+0x2a>
 800fa40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa42:	f7ff f964 	bl	800ed0e <__retarget_lock_acquire_recursive>
 800fa46:	89ab      	ldrh	r3, [r5, #12]
 800fa48:	071b      	lsls	r3, r3, #28
 800fa4a:	d501      	bpl.n	800fa50 <_vfiprintf_r+0x34>
 800fa4c:	692b      	ldr	r3, [r5, #16]
 800fa4e:	b99b      	cbnz	r3, 800fa78 <_vfiprintf_r+0x5c>
 800fa50:	4629      	mov	r1, r5
 800fa52:	4630      	mov	r0, r6
 800fa54:	f000 fe60 	bl	8010718 <__swsetup_r>
 800fa58:	b170      	cbz	r0, 800fa78 <_vfiprintf_r+0x5c>
 800fa5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa5c:	07dc      	lsls	r4, r3, #31
 800fa5e:	d504      	bpl.n	800fa6a <_vfiprintf_r+0x4e>
 800fa60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa64:	b01d      	add	sp, #116	@ 0x74
 800fa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6a:	89ab      	ldrh	r3, [r5, #12]
 800fa6c:	0598      	lsls	r0, r3, #22
 800fa6e:	d4f7      	bmi.n	800fa60 <_vfiprintf_r+0x44>
 800fa70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa72:	f7ff f94d 	bl	800ed10 <__retarget_lock_release_recursive>
 800fa76:	e7f3      	b.n	800fa60 <_vfiprintf_r+0x44>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa7c:	2320      	movs	r3, #32
 800fa7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa82:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa86:	2330      	movs	r3, #48	@ 0x30
 800fa88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fc38 <_vfiprintf_r+0x21c>
 800fa8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa90:	f04f 0901 	mov.w	r9, #1
 800fa94:	4623      	mov	r3, r4
 800fa96:	469a      	mov	sl, r3
 800fa98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa9c:	b10a      	cbz	r2, 800faa2 <_vfiprintf_r+0x86>
 800fa9e:	2a25      	cmp	r2, #37	@ 0x25
 800faa0:	d1f9      	bne.n	800fa96 <_vfiprintf_r+0x7a>
 800faa2:	ebba 0b04 	subs.w	fp, sl, r4
 800faa6:	d00b      	beq.n	800fac0 <_vfiprintf_r+0xa4>
 800faa8:	465b      	mov	r3, fp
 800faaa:	4622      	mov	r2, r4
 800faac:	4629      	mov	r1, r5
 800faae:	4630      	mov	r0, r6
 800fab0:	f7ff ffa1 	bl	800f9f6 <__sfputs_r>
 800fab4:	3001      	adds	r0, #1
 800fab6:	f000 80a7 	beq.w	800fc08 <_vfiprintf_r+0x1ec>
 800faba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fabc:	445a      	add	r2, fp
 800fabe:	9209      	str	r2, [sp, #36]	@ 0x24
 800fac0:	f89a 3000 	ldrb.w	r3, [sl]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f000 809f 	beq.w	800fc08 <_vfiprintf_r+0x1ec>
 800faca:	2300      	movs	r3, #0
 800facc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fad4:	f10a 0a01 	add.w	sl, sl, #1
 800fad8:	9304      	str	r3, [sp, #16]
 800fada:	9307      	str	r3, [sp, #28]
 800fadc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fae0:	931a      	str	r3, [sp, #104]	@ 0x68
 800fae2:	4654      	mov	r4, sl
 800fae4:	2205      	movs	r2, #5
 800fae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faea:	4853      	ldr	r0, [pc, #332]	@ (800fc38 <_vfiprintf_r+0x21c>)
 800faec:	f7f0 fb88 	bl	8000200 <memchr>
 800faf0:	9a04      	ldr	r2, [sp, #16]
 800faf2:	b9d8      	cbnz	r0, 800fb2c <_vfiprintf_r+0x110>
 800faf4:	06d1      	lsls	r1, r2, #27
 800faf6:	bf44      	itt	mi
 800faf8:	2320      	movmi	r3, #32
 800fafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fafe:	0713      	lsls	r3, r2, #28
 800fb00:	bf44      	itt	mi
 800fb02:	232b      	movmi	r3, #43	@ 0x2b
 800fb04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb08:	f89a 3000 	ldrb.w	r3, [sl]
 800fb0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb0e:	d015      	beq.n	800fb3c <_vfiprintf_r+0x120>
 800fb10:	9a07      	ldr	r2, [sp, #28]
 800fb12:	4654      	mov	r4, sl
 800fb14:	2000      	movs	r0, #0
 800fb16:	f04f 0c0a 	mov.w	ip, #10
 800fb1a:	4621      	mov	r1, r4
 800fb1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb20:	3b30      	subs	r3, #48	@ 0x30
 800fb22:	2b09      	cmp	r3, #9
 800fb24:	d94b      	bls.n	800fbbe <_vfiprintf_r+0x1a2>
 800fb26:	b1b0      	cbz	r0, 800fb56 <_vfiprintf_r+0x13a>
 800fb28:	9207      	str	r2, [sp, #28]
 800fb2a:	e014      	b.n	800fb56 <_vfiprintf_r+0x13a>
 800fb2c:	eba0 0308 	sub.w	r3, r0, r8
 800fb30:	fa09 f303 	lsl.w	r3, r9, r3
 800fb34:	4313      	orrs	r3, r2
 800fb36:	9304      	str	r3, [sp, #16]
 800fb38:	46a2      	mov	sl, r4
 800fb3a:	e7d2      	b.n	800fae2 <_vfiprintf_r+0xc6>
 800fb3c:	9b03      	ldr	r3, [sp, #12]
 800fb3e:	1d19      	adds	r1, r3, #4
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	9103      	str	r1, [sp, #12]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	bfbb      	ittet	lt
 800fb48:	425b      	neglt	r3, r3
 800fb4a:	f042 0202 	orrlt.w	r2, r2, #2
 800fb4e:	9307      	strge	r3, [sp, #28]
 800fb50:	9307      	strlt	r3, [sp, #28]
 800fb52:	bfb8      	it	lt
 800fb54:	9204      	strlt	r2, [sp, #16]
 800fb56:	7823      	ldrb	r3, [r4, #0]
 800fb58:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb5a:	d10a      	bne.n	800fb72 <_vfiprintf_r+0x156>
 800fb5c:	7863      	ldrb	r3, [r4, #1]
 800fb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb60:	d132      	bne.n	800fbc8 <_vfiprintf_r+0x1ac>
 800fb62:	9b03      	ldr	r3, [sp, #12]
 800fb64:	1d1a      	adds	r2, r3, #4
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	9203      	str	r2, [sp, #12]
 800fb6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb6e:	3402      	adds	r4, #2
 800fb70:	9305      	str	r3, [sp, #20]
 800fb72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fc48 <_vfiprintf_r+0x22c>
 800fb76:	7821      	ldrb	r1, [r4, #0]
 800fb78:	2203      	movs	r2, #3
 800fb7a:	4650      	mov	r0, sl
 800fb7c:	f7f0 fb40 	bl	8000200 <memchr>
 800fb80:	b138      	cbz	r0, 800fb92 <_vfiprintf_r+0x176>
 800fb82:	9b04      	ldr	r3, [sp, #16]
 800fb84:	eba0 000a 	sub.w	r0, r0, sl
 800fb88:	2240      	movs	r2, #64	@ 0x40
 800fb8a:	4082      	lsls	r2, r0
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	3401      	adds	r4, #1
 800fb90:	9304      	str	r3, [sp, #16]
 800fb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb96:	4829      	ldr	r0, [pc, #164]	@ (800fc3c <_vfiprintf_r+0x220>)
 800fb98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb9c:	2206      	movs	r2, #6
 800fb9e:	f7f0 fb2f 	bl	8000200 <memchr>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d03f      	beq.n	800fc26 <_vfiprintf_r+0x20a>
 800fba6:	4b26      	ldr	r3, [pc, #152]	@ (800fc40 <_vfiprintf_r+0x224>)
 800fba8:	bb1b      	cbnz	r3, 800fbf2 <_vfiprintf_r+0x1d6>
 800fbaa:	9b03      	ldr	r3, [sp, #12]
 800fbac:	3307      	adds	r3, #7
 800fbae:	f023 0307 	bic.w	r3, r3, #7
 800fbb2:	3308      	adds	r3, #8
 800fbb4:	9303      	str	r3, [sp, #12]
 800fbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb8:	443b      	add	r3, r7
 800fbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbbc:	e76a      	b.n	800fa94 <_vfiprintf_r+0x78>
 800fbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	2001      	movs	r0, #1
 800fbc6:	e7a8      	b.n	800fb1a <_vfiprintf_r+0xfe>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	3401      	adds	r4, #1
 800fbcc:	9305      	str	r3, [sp, #20]
 800fbce:	4619      	mov	r1, r3
 800fbd0:	f04f 0c0a 	mov.w	ip, #10
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbda:	3a30      	subs	r2, #48	@ 0x30
 800fbdc:	2a09      	cmp	r2, #9
 800fbde:	d903      	bls.n	800fbe8 <_vfiprintf_r+0x1cc>
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d0c6      	beq.n	800fb72 <_vfiprintf_r+0x156>
 800fbe4:	9105      	str	r1, [sp, #20]
 800fbe6:	e7c4      	b.n	800fb72 <_vfiprintf_r+0x156>
 800fbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbec:	4604      	mov	r4, r0
 800fbee:	2301      	movs	r3, #1
 800fbf0:	e7f0      	b.n	800fbd4 <_vfiprintf_r+0x1b8>
 800fbf2:	ab03      	add	r3, sp, #12
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	462a      	mov	r2, r5
 800fbf8:	4b12      	ldr	r3, [pc, #72]	@ (800fc44 <_vfiprintf_r+0x228>)
 800fbfa:	a904      	add	r1, sp, #16
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	f7fe fbc3 	bl	800e388 <_printf_float>
 800fc02:	4607      	mov	r7, r0
 800fc04:	1c78      	adds	r0, r7, #1
 800fc06:	d1d6      	bne.n	800fbb6 <_vfiprintf_r+0x19a>
 800fc08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc0a:	07d9      	lsls	r1, r3, #31
 800fc0c:	d405      	bmi.n	800fc1a <_vfiprintf_r+0x1fe>
 800fc0e:	89ab      	ldrh	r3, [r5, #12]
 800fc10:	059a      	lsls	r2, r3, #22
 800fc12:	d402      	bmi.n	800fc1a <_vfiprintf_r+0x1fe>
 800fc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc16:	f7ff f87b 	bl	800ed10 <__retarget_lock_release_recursive>
 800fc1a:	89ab      	ldrh	r3, [r5, #12]
 800fc1c:	065b      	lsls	r3, r3, #25
 800fc1e:	f53f af1f 	bmi.w	800fa60 <_vfiprintf_r+0x44>
 800fc22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc24:	e71e      	b.n	800fa64 <_vfiprintf_r+0x48>
 800fc26:	ab03      	add	r3, sp, #12
 800fc28:	9300      	str	r3, [sp, #0]
 800fc2a:	462a      	mov	r2, r5
 800fc2c:	4b05      	ldr	r3, [pc, #20]	@ (800fc44 <_vfiprintf_r+0x228>)
 800fc2e:	a904      	add	r1, sp, #16
 800fc30:	4630      	mov	r0, r6
 800fc32:	f7fe fe41 	bl	800e8b8 <_printf_i>
 800fc36:	e7e4      	b.n	800fc02 <_vfiprintf_r+0x1e6>
 800fc38:	08024d21 	.word	0x08024d21
 800fc3c:	08024d2b 	.word	0x08024d2b
 800fc40:	0800e389 	.word	0x0800e389
 800fc44:	0800f9f7 	.word	0x0800f9f7
 800fc48:	08024d27 	.word	0x08024d27

0800fc4c <malloc>:
 800fc4c:	4b02      	ldr	r3, [pc, #8]	@ (800fc58 <malloc+0xc>)
 800fc4e:	4601      	mov	r1, r0
 800fc50:	6818      	ldr	r0, [r3, #0]
 800fc52:	f000 b825 	b.w	800fca0 <_malloc_r>
 800fc56:	bf00      	nop
 800fc58:	200000b0 	.word	0x200000b0

0800fc5c <sbrk_aligned>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	4e0f      	ldr	r6, [pc, #60]	@ (800fc9c <sbrk_aligned+0x40>)
 800fc60:	460c      	mov	r4, r1
 800fc62:	6831      	ldr	r1, [r6, #0]
 800fc64:	4605      	mov	r5, r0
 800fc66:	b911      	cbnz	r1, 800fc6e <sbrk_aligned+0x12>
 800fc68:	f000 fe64 	bl	8010934 <_sbrk_r>
 800fc6c:	6030      	str	r0, [r6, #0]
 800fc6e:	4621      	mov	r1, r4
 800fc70:	4628      	mov	r0, r5
 800fc72:	f000 fe5f 	bl	8010934 <_sbrk_r>
 800fc76:	1c43      	adds	r3, r0, #1
 800fc78:	d103      	bne.n	800fc82 <sbrk_aligned+0x26>
 800fc7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fc7e:	4620      	mov	r0, r4
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
 800fc82:	1cc4      	adds	r4, r0, #3
 800fc84:	f024 0403 	bic.w	r4, r4, #3
 800fc88:	42a0      	cmp	r0, r4
 800fc8a:	d0f8      	beq.n	800fc7e <sbrk_aligned+0x22>
 800fc8c:	1a21      	subs	r1, r4, r0
 800fc8e:	4628      	mov	r0, r5
 800fc90:	f000 fe50 	bl	8010934 <_sbrk_r>
 800fc94:	3001      	adds	r0, #1
 800fc96:	d1f2      	bne.n	800fc7e <sbrk_aligned+0x22>
 800fc98:	e7ef      	b.n	800fc7a <sbrk_aligned+0x1e>
 800fc9a:	bf00      	nop
 800fc9c:	2001e2b0 	.word	0x2001e2b0

0800fca0 <_malloc_r>:
 800fca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fca4:	1ccd      	adds	r5, r1, #3
 800fca6:	f025 0503 	bic.w	r5, r5, #3
 800fcaa:	3508      	adds	r5, #8
 800fcac:	2d0c      	cmp	r5, #12
 800fcae:	bf38      	it	cc
 800fcb0:	250c      	movcc	r5, #12
 800fcb2:	2d00      	cmp	r5, #0
 800fcb4:	4606      	mov	r6, r0
 800fcb6:	db01      	blt.n	800fcbc <_malloc_r+0x1c>
 800fcb8:	42a9      	cmp	r1, r5
 800fcba:	d904      	bls.n	800fcc6 <_malloc_r+0x26>
 800fcbc:	230c      	movs	r3, #12
 800fcbe:	6033      	str	r3, [r6, #0]
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd9c <_malloc_r+0xfc>
 800fcca:	f000 f915 	bl	800fef8 <__malloc_lock>
 800fcce:	f8d8 3000 	ldr.w	r3, [r8]
 800fcd2:	461c      	mov	r4, r3
 800fcd4:	bb44      	cbnz	r4, 800fd28 <_malloc_r+0x88>
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f7ff ffbf 	bl	800fc5c <sbrk_aligned>
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	4604      	mov	r4, r0
 800fce2:	d158      	bne.n	800fd96 <_malloc_r+0xf6>
 800fce4:	f8d8 4000 	ldr.w	r4, [r8]
 800fce8:	4627      	mov	r7, r4
 800fcea:	2f00      	cmp	r7, #0
 800fcec:	d143      	bne.n	800fd76 <_malloc_r+0xd6>
 800fcee:	2c00      	cmp	r4, #0
 800fcf0:	d04b      	beq.n	800fd8a <_malloc_r+0xea>
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	4639      	mov	r1, r7
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	eb04 0903 	add.w	r9, r4, r3
 800fcfc:	f000 fe1a 	bl	8010934 <_sbrk_r>
 800fd00:	4581      	cmp	r9, r0
 800fd02:	d142      	bne.n	800fd8a <_malloc_r+0xea>
 800fd04:	6821      	ldr	r1, [r4, #0]
 800fd06:	1a6d      	subs	r5, r5, r1
 800fd08:	4629      	mov	r1, r5
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f7ff ffa6 	bl	800fc5c <sbrk_aligned>
 800fd10:	3001      	adds	r0, #1
 800fd12:	d03a      	beq.n	800fd8a <_malloc_r+0xea>
 800fd14:	6823      	ldr	r3, [r4, #0]
 800fd16:	442b      	add	r3, r5
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	f8d8 3000 	ldr.w	r3, [r8]
 800fd1e:	685a      	ldr	r2, [r3, #4]
 800fd20:	bb62      	cbnz	r2, 800fd7c <_malloc_r+0xdc>
 800fd22:	f8c8 7000 	str.w	r7, [r8]
 800fd26:	e00f      	b.n	800fd48 <_malloc_r+0xa8>
 800fd28:	6822      	ldr	r2, [r4, #0]
 800fd2a:	1b52      	subs	r2, r2, r5
 800fd2c:	d420      	bmi.n	800fd70 <_malloc_r+0xd0>
 800fd2e:	2a0b      	cmp	r2, #11
 800fd30:	d917      	bls.n	800fd62 <_malloc_r+0xc2>
 800fd32:	1961      	adds	r1, r4, r5
 800fd34:	42a3      	cmp	r3, r4
 800fd36:	6025      	str	r5, [r4, #0]
 800fd38:	bf18      	it	ne
 800fd3a:	6059      	strne	r1, [r3, #4]
 800fd3c:	6863      	ldr	r3, [r4, #4]
 800fd3e:	bf08      	it	eq
 800fd40:	f8c8 1000 	streq.w	r1, [r8]
 800fd44:	5162      	str	r2, [r4, r5]
 800fd46:	604b      	str	r3, [r1, #4]
 800fd48:	4630      	mov	r0, r6
 800fd4a:	f000 f8db 	bl	800ff04 <__malloc_unlock>
 800fd4e:	f104 000b 	add.w	r0, r4, #11
 800fd52:	1d23      	adds	r3, r4, #4
 800fd54:	f020 0007 	bic.w	r0, r0, #7
 800fd58:	1ac2      	subs	r2, r0, r3
 800fd5a:	bf1c      	itt	ne
 800fd5c:	1a1b      	subne	r3, r3, r0
 800fd5e:	50a3      	strne	r3, [r4, r2]
 800fd60:	e7af      	b.n	800fcc2 <_malloc_r+0x22>
 800fd62:	6862      	ldr	r2, [r4, #4]
 800fd64:	42a3      	cmp	r3, r4
 800fd66:	bf0c      	ite	eq
 800fd68:	f8c8 2000 	streq.w	r2, [r8]
 800fd6c:	605a      	strne	r2, [r3, #4]
 800fd6e:	e7eb      	b.n	800fd48 <_malloc_r+0xa8>
 800fd70:	4623      	mov	r3, r4
 800fd72:	6864      	ldr	r4, [r4, #4]
 800fd74:	e7ae      	b.n	800fcd4 <_malloc_r+0x34>
 800fd76:	463c      	mov	r4, r7
 800fd78:	687f      	ldr	r7, [r7, #4]
 800fd7a:	e7b6      	b.n	800fcea <_malloc_r+0x4a>
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	42a3      	cmp	r3, r4
 800fd82:	d1fb      	bne.n	800fd7c <_malloc_r+0xdc>
 800fd84:	2300      	movs	r3, #0
 800fd86:	6053      	str	r3, [r2, #4]
 800fd88:	e7de      	b.n	800fd48 <_malloc_r+0xa8>
 800fd8a:	230c      	movs	r3, #12
 800fd8c:	6033      	str	r3, [r6, #0]
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f000 f8b8 	bl	800ff04 <__malloc_unlock>
 800fd94:	e794      	b.n	800fcc0 <_malloc_r+0x20>
 800fd96:	6005      	str	r5, [r0, #0]
 800fd98:	e7d6      	b.n	800fd48 <_malloc_r+0xa8>
 800fd9a:	bf00      	nop
 800fd9c:	2001e2b4 	.word	0x2001e2b4

0800fda0 <__sflush_r>:
 800fda0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fda8:	0716      	lsls	r6, r2, #28
 800fdaa:	4605      	mov	r5, r0
 800fdac:	460c      	mov	r4, r1
 800fdae:	d454      	bmi.n	800fe5a <__sflush_r+0xba>
 800fdb0:	684b      	ldr	r3, [r1, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	dc02      	bgt.n	800fdbc <__sflush_r+0x1c>
 800fdb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	dd48      	ble.n	800fe4e <__sflush_r+0xae>
 800fdbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fdbe:	2e00      	cmp	r6, #0
 800fdc0:	d045      	beq.n	800fe4e <__sflush_r+0xae>
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fdc8:	682f      	ldr	r7, [r5, #0]
 800fdca:	6a21      	ldr	r1, [r4, #32]
 800fdcc:	602b      	str	r3, [r5, #0]
 800fdce:	d030      	beq.n	800fe32 <__sflush_r+0x92>
 800fdd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fdd2:	89a3      	ldrh	r3, [r4, #12]
 800fdd4:	0759      	lsls	r1, r3, #29
 800fdd6:	d505      	bpl.n	800fde4 <__sflush_r+0x44>
 800fdd8:	6863      	ldr	r3, [r4, #4]
 800fdda:	1ad2      	subs	r2, r2, r3
 800fddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fdde:	b10b      	cbz	r3, 800fde4 <__sflush_r+0x44>
 800fde0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fde2:	1ad2      	subs	r2, r2, r3
 800fde4:	2300      	movs	r3, #0
 800fde6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fde8:	6a21      	ldr	r1, [r4, #32]
 800fdea:	4628      	mov	r0, r5
 800fdec:	47b0      	blx	r6
 800fdee:	1c43      	adds	r3, r0, #1
 800fdf0:	89a3      	ldrh	r3, [r4, #12]
 800fdf2:	d106      	bne.n	800fe02 <__sflush_r+0x62>
 800fdf4:	6829      	ldr	r1, [r5, #0]
 800fdf6:	291d      	cmp	r1, #29
 800fdf8:	d82b      	bhi.n	800fe52 <__sflush_r+0xb2>
 800fdfa:	4a2a      	ldr	r2, [pc, #168]	@ (800fea4 <__sflush_r+0x104>)
 800fdfc:	410a      	asrs	r2, r1
 800fdfe:	07d6      	lsls	r6, r2, #31
 800fe00:	d427      	bmi.n	800fe52 <__sflush_r+0xb2>
 800fe02:	2200      	movs	r2, #0
 800fe04:	6062      	str	r2, [r4, #4]
 800fe06:	04d9      	lsls	r1, r3, #19
 800fe08:	6922      	ldr	r2, [r4, #16]
 800fe0a:	6022      	str	r2, [r4, #0]
 800fe0c:	d504      	bpl.n	800fe18 <__sflush_r+0x78>
 800fe0e:	1c42      	adds	r2, r0, #1
 800fe10:	d101      	bne.n	800fe16 <__sflush_r+0x76>
 800fe12:	682b      	ldr	r3, [r5, #0]
 800fe14:	b903      	cbnz	r3, 800fe18 <__sflush_r+0x78>
 800fe16:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe1a:	602f      	str	r7, [r5, #0]
 800fe1c:	b1b9      	cbz	r1, 800fe4e <__sflush_r+0xae>
 800fe1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe22:	4299      	cmp	r1, r3
 800fe24:	d002      	beq.n	800fe2c <__sflush_r+0x8c>
 800fe26:	4628      	mov	r0, r5
 800fe28:	f000 fdd8 	bl	80109dc <_free_r>
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe30:	e00d      	b.n	800fe4e <__sflush_r+0xae>
 800fe32:	2301      	movs	r3, #1
 800fe34:	4628      	mov	r0, r5
 800fe36:	47b0      	blx	r6
 800fe38:	4602      	mov	r2, r0
 800fe3a:	1c50      	adds	r0, r2, #1
 800fe3c:	d1c9      	bne.n	800fdd2 <__sflush_r+0x32>
 800fe3e:	682b      	ldr	r3, [r5, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0c6      	beq.n	800fdd2 <__sflush_r+0x32>
 800fe44:	2b1d      	cmp	r3, #29
 800fe46:	d001      	beq.n	800fe4c <__sflush_r+0xac>
 800fe48:	2b16      	cmp	r3, #22
 800fe4a:	d11e      	bne.n	800fe8a <__sflush_r+0xea>
 800fe4c:	602f      	str	r7, [r5, #0]
 800fe4e:	2000      	movs	r0, #0
 800fe50:	e022      	b.n	800fe98 <__sflush_r+0xf8>
 800fe52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe56:	b21b      	sxth	r3, r3
 800fe58:	e01b      	b.n	800fe92 <__sflush_r+0xf2>
 800fe5a:	690f      	ldr	r7, [r1, #16]
 800fe5c:	2f00      	cmp	r7, #0
 800fe5e:	d0f6      	beq.n	800fe4e <__sflush_r+0xae>
 800fe60:	0793      	lsls	r3, r2, #30
 800fe62:	680e      	ldr	r6, [r1, #0]
 800fe64:	bf08      	it	eq
 800fe66:	694b      	ldreq	r3, [r1, #20]
 800fe68:	600f      	str	r7, [r1, #0]
 800fe6a:	bf18      	it	ne
 800fe6c:	2300      	movne	r3, #0
 800fe6e:	eba6 0807 	sub.w	r8, r6, r7
 800fe72:	608b      	str	r3, [r1, #8]
 800fe74:	f1b8 0f00 	cmp.w	r8, #0
 800fe78:	dde9      	ble.n	800fe4e <__sflush_r+0xae>
 800fe7a:	6a21      	ldr	r1, [r4, #32]
 800fe7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fe7e:	4643      	mov	r3, r8
 800fe80:	463a      	mov	r2, r7
 800fe82:	4628      	mov	r0, r5
 800fe84:	47b0      	blx	r6
 800fe86:	2800      	cmp	r0, #0
 800fe88:	dc08      	bgt.n	800fe9c <__sflush_r+0xfc>
 800fe8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe92:	81a3      	strh	r3, [r4, #12]
 800fe94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe9c:	4407      	add	r7, r0
 800fe9e:	eba8 0800 	sub.w	r8, r8, r0
 800fea2:	e7e7      	b.n	800fe74 <__sflush_r+0xd4>
 800fea4:	dfbffffe 	.word	0xdfbffffe

0800fea8 <_fflush_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	690b      	ldr	r3, [r1, #16]
 800feac:	4605      	mov	r5, r0
 800feae:	460c      	mov	r4, r1
 800feb0:	b913      	cbnz	r3, 800feb8 <_fflush_r+0x10>
 800feb2:	2500      	movs	r5, #0
 800feb4:	4628      	mov	r0, r5
 800feb6:	bd38      	pop	{r3, r4, r5, pc}
 800feb8:	b118      	cbz	r0, 800fec2 <_fflush_r+0x1a>
 800feba:	6a03      	ldr	r3, [r0, #32]
 800febc:	b90b      	cbnz	r3, 800fec2 <_fflush_r+0x1a>
 800febe:	f7fe fea7 	bl	800ec10 <__sinit>
 800fec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d0f3      	beq.n	800feb2 <_fflush_r+0xa>
 800feca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fecc:	07d0      	lsls	r0, r2, #31
 800fece:	d404      	bmi.n	800feda <_fflush_r+0x32>
 800fed0:	0599      	lsls	r1, r3, #22
 800fed2:	d402      	bmi.n	800feda <_fflush_r+0x32>
 800fed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fed6:	f7fe ff1a 	bl	800ed0e <__retarget_lock_acquire_recursive>
 800feda:	4628      	mov	r0, r5
 800fedc:	4621      	mov	r1, r4
 800fede:	f7ff ff5f 	bl	800fda0 <__sflush_r>
 800fee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fee4:	07da      	lsls	r2, r3, #31
 800fee6:	4605      	mov	r5, r0
 800fee8:	d4e4      	bmi.n	800feb4 <_fflush_r+0xc>
 800feea:	89a3      	ldrh	r3, [r4, #12]
 800feec:	059b      	lsls	r3, r3, #22
 800feee:	d4e1      	bmi.n	800feb4 <_fflush_r+0xc>
 800fef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fef2:	f7fe ff0d 	bl	800ed10 <__retarget_lock_release_recursive>
 800fef6:	e7dd      	b.n	800feb4 <_fflush_r+0xc>

0800fef8 <__malloc_lock>:
 800fef8:	4801      	ldr	r0, [pc, #4]	@ (800ff00 <__malloc_lock+0x8>)
 800fefa:	f7fe bf08 	b.w	800ed0e <__retarget_lock_acquire_recursive>
 800fefe:	bf00      	nop
 800ff00:	2001e2ac 	.word	0x2001e2ac

0800ff04 <__malloc_unlock>:
 800ff04:	4801      	ldr	r0, [pc, #4]	@ (800ff0c <__malloc_unlock+0x8>)
 800ff06:	f7fe bf03 	b.w	800ed10 <__retarget_lock_release_recursive>
 800ff0a:	bf00      	nop
 800ff0c:	2001e2ac 	.word	0x2001e2ac

0800ff10 <_Balloc>:
 800ff10:	b570      	push	{r4, r5, r6, lr}
 800ff12:	69c6      	ldr	r6, [r0, #28]
 800ff14:	4604      	mov	r4, r0
 800ff16:	460d      	mov	r5, r1
 800ff18:	b976      	cbnz	r6, 800ff38 <_Balloc+0x28>
 800ff1a:	2010      	movs	r0, #16
 800ff1c:	f7ff fe96 	bl	800fc4c <malloc>
 800ff20:	4602      	mov	r2, r0
 800ff22:	61e0      	str	r0, [r4, #28]
 800ff24:	b920      	cbnz	r0, 800ff30 <_Balloc+0x20>
 800ff26:	4b18      	ldr	r3, [pc, #96]	@ (800ff88 <_Balloc+0x78>)
 800ff28:	4818      	ldr	r0, [pc, #96]	@ (800ff8c <_Balloc+0x7c>)
 800ff2a:	216b      	movs	r1, #107	@ 0x6b
 800ff2c:	f000 fd24 	bl	8010978 <__assert_func>
 800ff30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff34:	6006      	str	r6, [r0, #0]
 800ff36:	60c6      	str	r6, [r0, #12]
 800ff38:	69e6      	ldr	r6, [r4, #28]
 800ff3a:	68f3      	ldr	r3, [r6, #12]
 800ff3c:	b183      	cbz	r3, 800ff60 <_Balloc+0x50>
 800ff3e:	69e3      	ldr	r3, [r4, #28]
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff46:	b9b8      	cbnz	r0, 800ff78 <_Balloc+0x68>
 800ff48:	2101      	movs	r1, #1
 800ff4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ff4e:	1d72      	adds	r2, r6, #5
 800ff50:	0092      	lsls	r2, r2, #2
 800ff52:	4620      	mov	r0, r4
 800ff54:	f000 fd2e 	bl	80109b4 <_calloc_r>
 800ff58:	b160      	cbz	r0, 800ff74 <_Balloc+0x64>
 800ff5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff5e:	e00e      	b.n	800ff7e <_Balloc+0x6e>
 800ff60:	2221      	movs	r2, #33	@ 0x21
 800ff62:	2104      	movs	r1, #4
 800ff64:	4620      	mov	r0, r4
 800ff66:	f000 fd25 	bl	80109b4 <_calloc_r>
 800ff6a:	69e3      	ldr	r3, [r4, #28]
 800ff6c:	60f0      	str	r0, [r6, #12]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1e4      	bne.n	800ff3e <_Balloc+0x2e>
 800ff74:	2000      	movs	r0, #0
 800ff76:	bd70      	pop	{r4, r5, r6, pc}
 800ff78:	6802      	ldr	r2, [r0, #0]
 800ff7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff7e:	2300      	movs	r3, #0
 800ff80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff84:	e7f7      	b.n	800ff76 <_Balloc+0x66>
 800ff86:	bf00      	nop
 800ff88:	08024ca1 	.word	0x08024ca1
 800ff8c:	08024d32 	.word	0x08024d32

0800ff90 <_Bfree>:
 800ff90:	b570      	push	{r4, r5, r6, lr}
 800ff92:	69c6      	ldr	r6, [r0, #28]
 800ff94:	4605      	mov	r5, r0
 800ff96:	460c      	mov	r4, r1
 800ff98:	b976      	cbnz	r6, 800ffb8 <_Bfree+0x28>
 800ff9a:	2010      	movs	r0, #16
 800ff9c:	f7ff fe56 	bl	800fc4c <malloc>
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	61e8      	str	r0, [r5, #28]
 800ffa4:	b920      	cbnz	r0, 800ffb0 <_Bfree+0x20>
 800ffa6:	4b09      	ldr	r3, [pc, #36]	@ (800ffcc <_Bfree+0x3c>)
 800ffa8:	4809      	ldr	r0, [pc, #36]	@ (800ffd0 <_Bfree+0x40>)
 800ffaa:	218f      	movs	r1, #143	@ 0x8f
 800ffac:	f000 fce4 	bl	8010978 <__assert_func>
 800ffb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffb4:	6006      	str	r6, [r0, #0]
 800ffb6:	60c6      	str	r6, [r0, #12]
 800ffb8:	b13c      	cbz	r4, 800ffca <_Bfree+0x3a>
 800ffba:	69eb      	ldr	r3, [r5, #28]
 800ffbc:	6862      	ldr	r2, [r4, #4]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffc4:	6021      	str	r1, [r4, #0]
 800ffc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ffca:	bd70      	pop	{r4, r5, r6, pc}
 800ffcc:	08024ca1 	.word	0x08024ca1
 800ffd0:	08024d32 	.word	0x08024d32

0800ffd4 <__multadd>:
 800ffd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd8:	690d      	ldr	r5, [r1, #16]
 800ffda:	4607      	mov	r7, r0
 800ffdc:	460c      	mov	r4, r1
 800ffde:	461e      	mov	r6, r3
 800ffe0:	f101 0c14 	add.w	ip, r1, #20
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	f8dc 3000 	ldr.w	r3, [ip]
 800ffea:	b299      	uxth	r1, r3
 800ffec:	fb02 6101 	mla	r1, r2, r1, r6
 800fff0:	0c1e      	lsrs	r6, r3, #16
 800fff2:	0c0b      	lsrs	r3, r1, #16
 800fff4:	fb02 3306 	mla	r3, r2, r6, r3
 800fff8:	b289      	uxth	r1, r1
 800fffa:	3001      	adds	r0, #1
 800fffc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010000:	4285      	cmp	r5, r0
 8010002:	f84c 1b04 	str.w	r1, [ip], #4
 8010006:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801000a:	dcec      	bgt.n	800ffe6 <__multadd+0x12>
 801000c:	b30e      	cbz	r6, 8010052 <__multadd+0x7e>
 801000e:	68a3      	ldr	r3, [r4, #8]
 8010010:	42ab      	cmp	r3, r5
 8010012:	dc19      	bgt.n	8010048 <__multadd+0x74>
 8010014:	6861      	ldr	r1, [r4, #4]
 8010016:	4638      	mov	r0, r7
 8010018:	3101      	adds	r1, #1
 801001a:	f7ff ff79 	bl	800ff10 <_Balloc>
 801001e:	4680      	mov	r8, r0
 8010020:	b928      	cbnz	r0, 801002e <__multadd+0x5a>
 8010022:	4602      	mov	r2, r0
 8010024:	4b0c      	ldr	r3, [pc, #48]	@ (8010058 <__multadd+0x84>)
 8010026:	480d      	ldr	r0, [pc, #52]	@ (801005c <__multadd+0x88>)
 8010028:	21ba      	movs	r1, #186	@ 0xba
 801002a:	f000 fca5 	bl	8010978 <__assert_func>
 801002e:	6922      	ldr	r2, [r4, #16]
 8010030:	3202      	adds	r2, #2
 8010032:	f104 010c 	add.w	r1, r4, #12
 8010036:	0092      	lsls	r2, r2, #2
 8010038:	300c      	adds	r0, #12
 801003a:	f7fe fe6a 	bl	800ed12 <memcpy>
 801003e:	4621      	mov	r1, r4
 8010040:	4638      	mov	r0, r7
 8010042:	f7ff ffa5 	bl	800ff90 <_Bfree>
 8010046:	4644      	mov	r4, r8
 8010048:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801004c:	3501      	adds	r5, #1
 801004e:	615e      	str	r6, [r3, #20]
 8010050:	6125      	str	r5, [r4, #16]
 8010052:	4620      	mov	r0, r4
 8010054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010058:	08024d10 	.word	0x08024d10
 801005c:	08024d32 	.word	0x08024d32

08010060 <__hi0bits>:
 8010060:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010064:	4603      	mov	r3, r0
 8010066:	bf36      	itet	cc
 8010068:	0403      	lslcc	r3, r0, #16
 801006a:	2000      	movcs	r0, #0
 801006c:	2010      	movcc	r0, #16
 801006e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010072:	bf3c      	itt	cc
 8010074:	021b      	lslcc	r3, r3, #8
 8010076:	3008      	addcc	r0, #8
 8010078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801007c:	bf3c      	itt	cc
 801007e:	011b      	lslcc	r3, r3, #4
 8010080:	3004      	addcc	r0, #4
 8010082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010086:	bf3c      	itt	cc
 8010088:	009b      	lslcc	r3, r3, #2
 801008a:	3002      	addcc	r0, #2
 801008c:	2b00      	cmp	r3, #0
 801008e:	db05      	blt.n	801009c <__hi0bits+0x3c>
 8010090:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010094:	f100 0001 	add.w	r0, r0, #1
 8010098:	bf08      	it	eq
 801009a:	2020      	moveq	r0, #32
 801009c:	4770      	bx	lr

0801009e <__lo0bits>:
 801009e:	6803      	ldr	r3, [r0, #0]
 80100a0:	4602      	mov	r2, r0
 80100a2:	f013 0007 	ands.w	r0, r3, #7
 80100a6:	d00b      	beq.n	80100c0 <__lo0bits+0x22>
 80100a8:	07d9      	lsls	r1, r3, #31
 80100aa:	d421      	bmi.n	80100f0 <__lo0bits+0x52>
 80100ac:	0798      	lsls	r0, r3, #30
 80100ae:	bf49      	itett	mi
 80100b0:	085b      	lsrmi	r3, r3, #1
 80100b2:	089b      	lsrpl	r3, r3, #2
 80100b4:	2001      	movmi	r0, #1
 80100b6:	6013      	strmi	r3, [r2, #0]
 80100b8:	bf5c      	itt	pl
 80100ba:	6013      	strpl	r3, [r2, #0]
 80100bc:	2002      	movpl	r0, #2
 80100be:	4770      	bx	lr
 80100c0:	b299      	uxth	r1, r3
 80100c2:	b909      	cbnz	r1, 80100c8 <__lo0bits+0x2a>
 80100c4:	0c1b      	lsrs	r3, r3, #16
 80100c6:	2010      	movs	r0, #16
 80100c8:	b2d9      	uxtb	r1, r3
 80100ca:	b909      	cbnz	r1, 80100d0 <__lo0bits+0x32>
 80100cc:	3008      	adds	r0, #8
 80100ce:	0a1b      	lsrs	r3, r3, #8
 80100d0:	0719      	lsls	r1, r3, #28
 80100d2:	bf04      	itt	eq
 80100d4:	091b      	lsreq	r3, r3, #4
 80100d6:	3004      	addeq	r0, #4
 80100d8:	0799      	lsls	r1, r3, #30
 80100da:	bf04      	itt	eq
 80100dc:	089b      	lsreq	r3, r3, #2
 80100de:	3002      	addeq	r0, #2
 80100e0:	07d9      	lsls	r1, r3, #31
 80100e2:	d403      	bmi.n	80100ec <__lo0bits+0x4e>
 80100e4:	085b      	lsrs	r3, r3, #1
 80100e6:	f100 0001 	add.w	r0, r0, #1
 80100ea:	d003      	beq.n	80100f4 <__lo0bits+0x56>
 80100ec:	6013      	str	r3, [r2, #0]
 80100ee:	4770      	bx	lr
 80100f0:	2000      	movs	r0, #0
 80100f2:	4770      	bx	lr
 80100f4:	2020      	movs	r0, #32
 80100f6:	4770      	bx	lr

080100f8 <__i2b>:
 80100f8:	b510      	push	{r4, lr}
 80100fa:	460c      	mov	r4, r1
 80100fc:	2101      	movs	r1, #1
 80100fe:	f7ff ff07 	bl	800ff10 <_Balloc>
 8010102:	4602      	mov	r2, r0
 8010104:	b928      	cbnz	r0, 8010112 <__i2b+0x1a>
 8010106:	4b05      	ldr	r3, [pc, #20]	@ (801011c <__i2b+0x24>)
 8010108:	4805      	ldr	r0, [pc, #20]	@ (8010120 <__i2b+0x28>)
 801010a:	f240 1145 	movw	r1, #325	@ 0x145
 801010e:	f000 fc33 	bl	8010978 <__assert_func>
 8010112:	2301      	movs	r3, #1
 8010114:	6144      	str	r4, [r0, #20]
 8010116:	6103      	str	r3, [r0, #16]
 8010118:	bd10      	pop	{r4, pc}
 801011a:	bf00      	nop
 801011c:	08024d10 	.word	0x08024d10
 8010120:	08024d32 	.word	0x08024d32

08010124 <__multiply>:
 8010124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010128:	4614      	mov	r4, r2
 801012a:	690a      	ldr	r2, [r1, #16]
 801012c:	6923      	ldr	r3, [r4, #16]
 801012e:	429a      	cmp	r2, r3
 8010130:	bfa8      	it	ge
 8010132:	4623      	movge	r3, r4
 8010134:	460f      	mov	r7, r1
 8010136:	bfa4      	itt	ge
 8010138:	460c      	movge	r4, r1
 801013a:	461f      	movge	r7, r3
 801013c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010140:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010144:	68a3      	ldr	r3, [r4, #8]
 8010146:	6861      	ldr	r1, [r4, #4]
 8010148:	eb0a 0609 	add.w	r6, sl, r9
 801014c:	42b3      	cmp	r3, r6
 801014e:	b085      	sub	sp, #20
 8010150:	bfb8      	it	lt
 8010152:	3101      	addlt	r1, #1
 8010154:	f7ff fedc 	bl	800ff10 <_Balloc>
 8010158:	b930      	cbnz	r0, 8010168 <__multiply+0x44>
 801015a:	4602      	mov	r2, r0
 801015c:	4b44      	ldr	r3, [pc, #272]	@ (8010270 <__multiply+0x14c>)
 801015e:	4845      	ldr	r0, [pc, #276]	@ (8010274 <__multiply+0x150>)
 8010160:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010164:	f000 fc08 	bl	8010978 <__assert_func>
 8010168:	f100 0514 	add.w	r5, r0, #20
 801016c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010170:	462b      	mov	r3, r5
 8010172:	2200      	movs	r2, #0
 8010174:	4543      	cmp	r3, r8
 8010176:	d321      	bcc.n	80101bc <__multiply+0x98>
 8010178:	f107 0114 	add.w	r1, r7, #20
 801017c:	f104 0214 	add.w	r2, r4, #20
 8010180:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010184:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010188:	9302      	str	r3, [sp, #8]
 801018a:	1b13      	subs	r3, r2, r4
 801018c:	3b15      	subs	r3, #21
 801018e:	f023 0303 	bic.w	r3, r3, #3
 8010192:	3304      	adds	r3, #4
 8010194:	f104 0715 	add.w	r7, r4, #21
 8010198:	42ba      	cmp	r2, r7
 801019a:	bf38      	it	cc
 801019c:	2304      	movcc	r3, #4
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	9b02      	ldr	r3, [sp, #8]
 80101a2:	9103      	str	r1, [sp, #12]
 80101a4:	428b      	cmp	r3, r1
 80101a6:	d80c      	bhi.n	80101c2 <__multiply+0x9e>
 80101a8:	2e00      	cmp	r6, #0
 80101aa:	dd03      	ble.n	80101b4 <__multiply+0x90>
 80101ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d05b      	beq.n	801026c <__multiply+0x148>
 80101b4:	6106      	str	r6, [r0, #16]
 80101b6:	b005      	add	sp, #20
 80101b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101bc:	f843 2b04 	str.w	r2, [r3], #4
 80101c0:	e7d8      	b.n	8010174 <__multiply+0x50>
 80101c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80101c6:	f1ba 0f00 	cmp.w	sl, #0
 80101ca:	d024      	beq.n	8010216 <__multiply+0xf2>
 80101cc:	f104 0e14 	add.w	lr, r4, #20
 80101d0:	46a9      	mov	r9, r5
 80101d2:	f04f 0c00 	mov.w	ip, #0
 80101d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80101da:	f8d9 3000 	ldr.w	r3, [r9]
 80101de:	fa1f fb87 	uxth.w	fp, r7
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80101e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80101ec:	f8d9 7000 	ldr.w	r7, [r9]
 80101f0:	4463      	add	r3, ip
 80101f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80101f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80101fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80101fe:	b29b      	uxth	r3, r3
 8010200:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010204:	4572      	cmp	r2, lr
 8010206:	f849 3b04 	str.w	r3, [r9], #4
 801020a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801020e:	d8e2      	bhi.n	80101d6 <__multiply+0xb2>
 8010210:	9b01      	ldr	r3, [sp, #4]
 8010212:	f845 c003 	str.w	ip, [r5, r3]
 8010216:	9b03      	ldr	r3, [sp, #12]
 8010218:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801021c:	3104      	adds	r1, #4
 801021e:	f1b9 0f00 	cmp.w	r9, #0
 8010222:	d021      	beq.n	8010268 <__multiply+0x144>
 8010224:	682b      	ldr	r3, [r5, #0]
 8010226:	f104 0c14 	add.w	ip, r4, #20
 801022a:	46ae      	mov	lr, r5
 801022c:	f04f 0a00 	mov.w	sl, #0
 8010230:	f8bc b000 	ldrh.w	fp, [ip]
 8010234:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010238:	fb09 770b 	mla	r7, r9, fp, r7
 801023c:	4457      	add	r7, sl
 801023e:	b29b      	uxth	r3, r3
 8010240:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010244:	f84e 3b04 	str.w	r3, [lr], #4
 8010248:	f85c 3b04 	ldr.w	r3, [ip], #4
 801024c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010250:	f8be 3000 	ldrh.w	r3, [lr]
 8010254:	fb09 330a 	mla	r3, r9, sl, r3
 8010258:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801025c:	4562      	cmp	r2, ip
 801025e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010262:	d8e5      	bhi.n	8010230 <__multiply+0x10c>
 8010264:	9f01      	ldr	r7, [sp, #4]
 8010266:	51eb      	str	r3, [r5, r7]
 8010268:	3504      	adds	r5, #4
 801026a:	e799      	b.n	80101a0 <__multiply+0x7c>
 801026c:	3e01      	subs	r6, #1
 801026e:	e79b      	b.n	80101a8 <__multiply+0x84>
 8010270:	08024d10 	.word	0x08024d10
 8010274:	08024d32 	.word	0x08024d32

08010278 <__pow5mult>:
 8010278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801027c:	4615      	mov	r5, r2
 801027e:	f012 0203 	ands.w	r2, r2, #3
 8010282:	4607      	mov	r7, r0
 8010284:	460e      	mov	r6, r1
 8010286:	d007      	beq.n	8010298 <__pow5mult+0x20>
 8010288:	4c25      	ldr	r4, [pc, #148]	@ (8010320 <__pow5mult+0xa8>)
 801028a:	3a01      	subs	r2, #1
 801028c:	2300      	movs	r3, #0
 801028e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010292:	f7ff fe9f 	bl	800ffd4 <__multadd>
 8010296:	4606      	mov	r6, r0
 8010298:	10ad      	asrs	r5, r5, #2
 801029a:	d03d      	beq.n	8010318 <__pow5mult+0xa0>
 801029c:	69fc      	ldr	r4, [r7, #28]
 801029e:	b97c      	cbnz	r4, 80102c0 <__pow5mult+0x48>
 80102a0:	2010      	movs	r0, #16
 80102a2:	f7ff fcd3 	bl	800fc4c <malloc>
 80102a6:	4602      	mov	r2, r0
 80102a8:	61f8      	str	r0, [r7, #28]
 80102aa:	b928      	cbnz	r0, 80102b8 <__pow5mult+0x40>
 80102ac:	4b1d      	ldr	r3, [pc, #116]	@ (8010324 <__pow5mult+0xac>)
 80102ae:	481e      	ldr	r0, [pc, #120]	@ (8010328 <__pow5mult+0xb0>)
 80102b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80102b4:	f000 fb60 	bl	8010978 <__assert_func>
 80102b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80102bc:	6004      	str	r4, [r0, #0]
 80102be:	60c4      	str	r4, [r0, #12]
 80102c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80102c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80102c8:	b94c      	cbnz	r4, 80102de <__pow5mult+0x66>
 80102ca:	f240 2171 	movw	r1, #625	@ 0x271
 80102ce:	4638      	mov	r0, r7
 80102d0:	f7ff ff12 	bl	80100f8 <__i2b>
 80102d4:	2300      	movs	r3, #0
 80102d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80102da:	4604      	mov	r4, r0
 80102dc:	6003      	str	r3, [r0, #0]
 80102de:	f04f 0900 	mov.w	r9, #0
 80102e2:	07eb      	lsls	r3, r5, #31
 80102e4:	d50a      	bpl.n	80102fc <__pow5mult+0x84>
 80102e6:	4631      	mov	r1, r6
 80102e8:	4622      	mov	r2, r4
 80102ea:	4638      	mov	r0, r7
 80102ec:	f7ff ff1a 	bl	8010124 <__multiply>
 80102f0:	4631      	mov	r1, r6
 80102f2:	4680      	mov	r8, r0
 80102f4:	4638      	mov	r0, r7
 80102f6:	f7ff fe4b 	bl	800ff90 <_Bfree>
 80102fa:	4646      	mov	r6, r8
 80102fc:	106d      	asrs	r5, r5, #1
 80102fe:	d00b      	beq.n	8010318 <__pow5mult+0xa0>
 8010300:	6820      	ldr	r0, [r4, #0]
 8010302:	b938      	cbnz	r0, 8010314 <__pow5mult+0x9c>
 8010304:	4622      	mov	r2, r4
 8010306:	4621      	mov	r1, r4
 8010308:	4638      	mov	r0, r7
 801030a:	f7ff ff0b 	bl	8010124 <__multiply>
 801030e:	6020      	str	r0, [r4, #0]
 8010310:	f8c0 9000 	str.w	r9, [r0]
 8010314:	4604      	mov	r4, r0
 8010316:	e7e4      	b.n	80102e2 <__pow5mult+0x6a>
 8010318:	4630      	mov	r0, r6
 801031a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801031e:	bf00      	nop
 8010320:	08024d8c 	.word	0x08024d8c
 8010324:	08024ca1 	.word	0x08024ca1
 8010328:	08024d32 	.word	0x08024d32

0801032c <__lshift>:
 801032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010330:	460c      	mov	r4, r1
 8010332:	6849      	ldr	r1, [r1, #4]
 8010334:	6923      	ldr	r3, [r4, #16]
 8010336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801033a:	68a3      	ldr	r3, [r4, #8]
 801033c:	4607      	mov	r7, r0
 801033e:	4691      	mov	r9, r2
 8010340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010344:	f108 0601 	add.w	r6, r8, #1
 8010348:	42b3      	cmp	r3, r6
 801034a:	db0b      	blt.n	8010364 <__lshift+0x38>
 801034c:	4638      	mov	r0, r7
 801034e:	f7ff fddf 	bl	800ff10 <_Balloc>
 8010352:	4605      	mov	r5, r0
 8010354:	b948      	cbnz	r0, 801036a <__lshift+0x3e>
 8010356:	4602      	mov	r2, r0
 8010358:	4b28      	ldr	r3, [pc, #160]	@ (80103fc <__lshift+0xd0>)
 801035a:	4829      	ldr	r0, [pc, #164]	@ (8010400 <__lshift+0xd4>)
 801035c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010360:	f000 fb0a 	bl	8010978 <__assert_func>
 8010364:	3101      	adds	r1, #1
 8010366:	005b      	lsls	r3, r3, #1
 8010368:	e7ee      	b.n	8010348 <__lshift+0x1c>
 801036a:	2300      	movs	r3, #0
 801036c:	f100 0114 	add.w	r1, r0, #20
 8010370:	f100 0210 	add.w	r2, r0, #16
 8010374:	4618      	mov	r0, r3
 8010376:	4553      	cmp	r3, sl
 8010378:	db33      	blt.n	80103e2 <__lshift+0xb6>
 801037a:	6920      	ldr	r0, [r4, #16]
 801037c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010380:	f104 0314 	add.w	r3, r4, #20
 8010384:	f019 091f 	ands.w	r9, r9, #31
 8010388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801038c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010390:	d02b      	beq.n	80103ea <__lshift+0xbe>
 8010392:	f1c9 0e20 	rsb	lr, r9, #32
 8010396:	468a      	mov	sl, r1
 8010398:	2200      	movs	r2, #0
 801039a:	6818      	ldr	r0, [r3, #0]
 801039c:	fa00 f009 	lsl.w	r0, r0, r9
 80103a0:	4310      	orrs	r0, r2
 80103a2:	f84a 0b04 	str.w	r0, [sl], #4
 80103a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80103aa:	459c      	cmp	ip, r3
 80103ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80103b0:	d8f3      	bhi.n	801039a <__lshift+0x6e>
 80103b2:	ebac 0304 	sub.w	r3, ip, r4
 80103b6:	3b15      	subs	r3, #21
 80103b8:	f023 0303 	bic.w	r3, r3, #3
 80103bc:	3304      	adds	r3, #4
 80103be:	f104 0015 	add.w	r0, r4, #21
 80103c2:	4584      	cmp	ip, r0
 80103c4:	bf38      	it	cc
 80103c6:	2304      	movcc	r3, #4
 80103c8:	50ca      	str	r2, [r1, r3]
 80103ca:	b10a      	cbz	r2, 80103d0 <__lshift+0xa4>
 80103cc:	f108 0602 	add.w	r6, r8, #2
 80103d0:	3e01      	subs	r6, #1
 80103d2:	4638      	mov	r0, r7
 80103d4:	612e      	str	r6, [r5, #16]
 80103d6:	4621      	mov	r1, r4
 80103d8:	f7ff fdda 	bl	800ff90 <_Bfree>
 80103dc:	4628      	mov	r0, r5
 80103de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80103e6:	3301      	adds	r3, #1
 80103e8:	e7c5      	b.n	8010376 <__lshift+0x4a>
 80103ea:	3904      	subs	r1, #4
 80103ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80103f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80103f4:	459c      	cmp	ip, r3
 80103f6:	d8f9      	bhi.n	80103ec <__lshift+0xc0>
 80103f8:	e7ea      	b.n	80103d0 <__lshift+0xa4>
 80103fa:	bf00      	nop
 80103fc:	08024d10 	.word	0x08024d10
 8010400:	08024d32 	.word	0x08024d32

08010404 <__mcmp>:
 8010404:	690a      	ldr	r2, [r1, #16]
 8010406:	4603      	mov	r3, r0
 8010408:	6900      	ldr	r0, [r0, #16]
 801040a:	1a80      	subs	r0, r0, r2
 801040c:	b530      	push	{r4, r5, lr}
 801040e:	d10e      	bne.n	801042e <__mcmp+0x2a>
 8010410:	3314      	adds	r3, #20
 8010412:	3114      	adds	r1, #20
 8010414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801041c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010424:	4295      	cmp	r5, r2
 8010426:	d003      	beq.n	8010430 <__mcmp+0x2c>
 8010428:	d205      	bcs.n	8010436 <__mcmp+0x32>
 801042a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801042e:	bd30      	pop	{r4, r5, pc}
 8010430:	42a3      	cmp	r3, r4
 8010432:	d3f3      	bcc.n	801041c <__mcmp+0x18>
 8010434:	e7fb      	b.n	801042e <__mcmp+0x2a>
 8010436:	2001      	movs	r0, #1
 8010438:	e7f9      	b.n	801042e <__mcmp+0x2a>
	...

0801043c <__mdiff>:
 801043c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010440:	4689      	mov	r9, r1
 8010442:	4606      	mov	r6, r0
 8010444:	4611      	mov	r1, r2
 8010446:	4648      	mov	r0, r9
 8010448:	4614      	mov	r4, r2
 801044a:	f7ff ffdb 	bl	8010404 <__mcmp>
 801044e:	1e05      	subs	r5, r0, #0
 8010450:	d112      	bne.n	8010478 <__mdiff+0x3c>
 8010452:	4629      	mov	r1, r5
 8010454:	4630      	mov	r0, r6
 8010456:	f7ff fd5b 	bl	800ff10 <_Balloc>
 801045a:	4602      	mov	r2, r0
 801045c:	b928      	cbnz	r0, 801046a <__mdiff+0x2e>
 801045e:	4b3f      	ldr	r3, [pc, #252]	@ (801055c <__mdiff+0x120>)
 8010460:	f240 2137 	movw	r1, #567	@ 0x237
 8010464:	483e      	ldr	r0, [pc, #248]	@ (8010560 <__mdiff+0x124>)
 8010466:	f000 fa87 	bl	8010978 <__assert_func>
 801046a:	2301      	movs	r3, #1
 801046c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010470:	4610      	mov	r0, r2
 8010472:	b003      	add	sp, #12
 8010474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010478:	bfbc      	itt	lt
 801047a:	464b      	movlt	r3, r9
 801047c:	46a1      	movlt	r9, r4
 801047e:	4630      	mov	r0, r6
 8010480:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010484:	bfba      	itte	lt
 8010486:	461c      	movlt	r4, r3
 8010488:	2501      	movlt	r5, #1
 801048a:	2500      	movge	r5, #0
 801048c:	f7ff fd40 	bl	800ff10 <_Balloc>
 8010490:	4602      	mov	r2, r0
 8010492:	b918      	cbnz	r0, 801049c <__mdiff+0x60>
 8010494:	4b31      	ldr	r3, [pc, #196]	@ (801055c <__mdiff+0x120>)
 8010496:	f240 2145 	movw	r1, #581	@ 0x245
 801049a:	e7e3      	b.n	8010464 <__mdiff+0x28>
 801049c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80104a0:	6926      	ldr	r6, [r4, #16]
 80104a2:	60c5      	str	r5, [r0, #12]
 80104a4:	f109 0310 	add.w	r3, r9, #16
 80104a8:	f109 0514 	add.w	r5, r9, #20
 80104ac:	f104 0e14 	add.w	lr, r4, #20
 80104b0:	f100 0b14 	add.w	fp, r0, #20
 80104b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80104b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80104bc:	9301      	str	r3, [sp, #4]
 80104be:	46d9      	mov	r9, fp
 80104c0:	f04f 0c00 	mov.w	ip, #0
 80104c4:	9b01      	ldr	r3, [sp, #4]
 80104c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80104ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80104ce:	9301      	str	r3, [sp, #4]
 80104d0:	fa1f f38a 	uxth.w	r3, sl
 80104d4:	4619      	mov	r1, r3
 80104d6:	b283      	uxth	r3, r0
 80104d8:	1acb      	subs	r3, r1, r3
 80104da:	0c00      	lsrs	r0, r0, #16
 80104dc:	4463      	add	r3, ip
 80104de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80104e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80104ec:	4576      	cmp	r6, lr
 80104ee:	f849 3b04 	str.w	r3, [r9], #4
 80104f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80104f6:	d8e5      	bhi.n	80104c4 <__mdiff+0x88>
 80104f8:	1b33      	subs	r3, r6, r4
 80104fa:	3b15      	subs	r3, #21
 80104fc:	f023 0303 	bic.w	r3, r3, #3
 8010500:	3415      	adds	r4, #21
 8010502:	3304      	adds	r3, #4
 8010504:	42a6      	cmp	r6, r4
 8010506:	bf38      	it	cc
 8010508:	2304      	movcc	r3, #4
 801050a:	441d      	add	r5, r3
 801050c:	445b      	add	r3, fp
 801050e:	461e      	mov	r6, r3
 8010510:	462c      	mov	r4, r5
 8010512:	4544      	cmp	r4, r8
 8010514:	d30e      	bcc.n	8010534 <__mdiff+0xf8>
 8010516:	f108 0103 	add.w	r1, r8, #3
 801051a:	1b49      	subs	r1, r1, r5
 801051c:	f021 0103 	bic.w	r1, r1, #3
 8010520:	3d03      	subs	r5, #3
 8010522:	45a8      	cmp	r8, r5
 8010524:	bf38      	it	cc
 8010526:	2100      	movcc	r1, #0
 8010528:	440b      	add	r3, r1
 801052a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801052e:	b191      	cbz	r1, 8010556 <__mdiff+0x11a>
 8010530:	6117      	str	r7, [r2, #16]
 8010532:	e79d      	b.n	8010470 <__mdiff+0x34>
 8010534:	f854 1b04 	ldr.w	r1, [r4], #4
 8010538:	46e6      	mov	lr, ip
 801053a:	0c08      	lsrs	r0, r1, #16
 801053c:	fa1c fc81 	uxtah	ip, ip, r1
 8010540:	4471      	add	r1, lr
 8010542:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010546:	b289      	uxth	r1, r1
 8010548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801054c:	f846 1b04 	str.w	r1, [r6], #4
 8010550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010554:	e7dd      	b.n	8010512 <__mdiff+0xd6>
 8010556:	3f01      	subs	r7, #1
 8010558:	e7e7      	b.n	801052a <__mdiff+0xee>
 801055a:	bf00      	nop
 801055c:	08024d10 	.word	0x08024d10
 8010560:	08024d32 	.word	0x08024d32

08010564 <__d2b>:
 8010564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010568:	460f      	mov	r7, r1
 801056a:	2101      	movs	r1, #1
 801056c:	ec59 8b10 	vmov	r8, r9, d0
 8010570:	4616      	mov	r6, r2
 8010572:	f7ff fccd 	bl	800ff10 <_Balloc>
 8010576:	4604      	mov	r4, r0
 8010578:	b930      	cbnz	r0, 8010588 <__d2b+0x24>
 801057a:	4602      	mov	r2, r0
 801057c:	4b23      	ldr	r3, [pc, #140]	@ (801060c <__d2b+0xa8>)
 801057e:	4824      	ldr	r0, [pc, #144]	@ (8010610 <__d2b+0xac>)
 8010580:	f240 310f 	movw	r1, #783	@ 0x30f
 8010584:	f000 f9f8 	bl	8010978 <__assert_func>
 8010588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801058c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010590:	b10d      	cbz	r5, 8010596 <__d2b+0x32>
 8010592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010596:	9301      	str	r3, [sp, #4]
 8010598:	f1b8 0300 	subs.w	r3, r8, #0
 801059c:	d023      	beq.n	80105e6 <__d2b+0x82>
 801059e:	4668      	mov	r0, sp
 80105a0:	9300      	str	r3, [sp, #0]
 80105a2:	f7ff fd7c 	bl	801009e <__lo0bits>
 80105a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80105aa:	b1d0      	cbz	r0, 80105e2 <__d2b+0x7e>
 80105ac:	f1c0 0320 	rsb	r3, r0, #32
 80105b0:	fa02 f303 	lsl.w	r3, r2, r3
 80105b4:	430b      	orrs	r3, r1
 80105b6:	40c2      	lsrs	r2, r0
 80105b8:	6163      	str	r3, [r4, #20]
 80105ba:	9201      	str	r2, [sp, #4]
 80105bc:	9b01      	ldr	r3, [sp, #4]
 80105be:	61a3      	str	r3, [r4, #24]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	bf0c      	ite	eq
 80105c4:	2201      	moveq	r2, #1
 80105c6:	2202      	movne	r2, #2
 80105c8:	6122      	str	r2, [r4, #16]
 80105ca:	b1a5      	cbz	r5, 80105f6 <__d2b+0x92>
 80105cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80105d0:	4405      	add	r5, r0
 80105d2:	603d      	str	r5, [r7, #0]
 80105d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80105d8:	6030      	str	r0, [r6, #0]
 80105da:	4620      	mov	r0, r4
 80105dc:	b003      	add	sp, #12
 80105de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105e2:	6161      	str	r1, [r4, #20]
 80105e4:	e7ea      	b.n	80105bc <__d2b+0x58>
 80105e6:	a801      	add	r0, sp, #4
 80105e8:	f7ff fd59 	bl	801009e <__lo0bits>
 80105ec:	9b01      	ldr	r3, [sp, #4]
 80105ee:	6163      	str	r3, [r4, #20]
 80105f0:	3020      	adds	r0, #32
 80105f2:	2201      	movs	r2, #1
 80105f4:	e7e8      	b.n	80105c8 <__d2b+0x64>
 80105f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80105fe:	6038      	str	r0, [r7, #0]
 8010600:	6918      	ldr	r0, [r3, #16]
 8010602:	f7ff fd2d 	bl	8010060 <__hi0bits>
 8010606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801060a:	e7e5      	b.n	80105d8 <__d2b+0x74>
 801060c:	08024d10 	.word	0x08024d10
 8010610:	08024d32 	.word	0x08024d32

08010614 <__sread>:
 8010614:	b510      	push	{r4, lr}
 8010616:	460c      	mov	r4, r1
 8010618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801061c:	f000 f978 	bl	8010910 <_read_r>
 8010620:	2800      	cmp	r0, #0
 8010622:	bfab      	itete	ge
 8010624:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010626:	89a3      	ldrhlt	r3, [r4, #12]
 8010628:	181b      	addge	r3, r3, r0
 801062a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801062e:	bfac      	ite	ge
 8010630:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010632:	81a3      	strhlt	r3, [r4, #12]
 8010634:	bd10      	pop	{r4, pc}

08010636 <__swrite>:
 8010636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801063a:	461f      	mov	r7, r3
 801063c:	898b      	ldrh	r3, [r1, #12]
 801063e:	05db      	lsls	r3, r3, #23
 8010640:	4605      	mov	r5, r0
 8010642:	460c      	mov	r4, r1
 8010644:	4616      	mov	r6, r2
 8010646:	d505      	bpl.n	8010654 <__swrite+0x1e>
 8010648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801064c:	2302      	movs	r3, #2
 801064e:	2200      	movs	r2, #0
 8010650:	f000 f94c 	bl	80108ec <_lseek_r>
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801065a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	4632      	mov	r2, r6
 8010662:	463b      	mov	r3, r7
 8010664:	4628      	mov	r0, r5
 8010666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801066a:	f000 b973 	b.w	8010954 <_write_r>

0801066e <__sseek>:
 801066e:	b510      	push	{r4, lr}
 8010670:	460c      	mov	r4, r1
 8010672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010676:	f000 f939 	bl	80108ec <_lseek_r>
 801067a:	1c43      	adds	r3, r0, #1
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	bf15      	itete	ne
 8010680:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010682:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010686:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801068a:	81a3      	strheq	r3, [r4, #12]
 801068c:	bf18      	it	ne
 801068e:	81a3      	strhne	r3, [r4, #12]
 8010690:	bd10      	pop	{r4, pc}

08010692 <__sclose>:
 8010692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010696:	f000 b8f7 	b.w	8010888 <_close_r>

0801069a <__swbuf_r>:
 801069a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801069c:	460e      	mov	r6, r1
 801069e:	4614      	mov	r4, r2
 80106a0:	4605      	mov	r5, r0
 80106a2:	b118      	cbz	r0, 80106ac <__swbuf_r+0x12>
 80106a4:	6a03      	ldr	r3, [r0, #32]
 80106a6:	b90b      	cbnz	r3, 80106ac <__swbuf_r+0x12>
 80106a8:	f7fe fab2 	bl	800ec10 <__sinit>
 80106ac:	69a3      	ldr	r3, [r4, #24]
 80106ae:	60a3      	str	r3, [r4, #8]
 80106b0:	89a3      	ldrh	r3, [r4, #12]
 80106b2:	071a      	lsls	r2, r3, #28
 80106b4:	d501      	bpl.n	80106ba <__swbuf_r+0x20>
 80106b6:	6923      	ldr	r3, [r4, #16]
 80106b8:	b943      	cbnz	r3, 80106cc <__swbuf_r+0x32>
 80106ba:	4621      	mov	r1, r4
 80106bc:	4628      	mov	r0, r5
 80106be:	f000 f82b 	bl	8010718 <__swsetup_r>
 80106c2:	b118      	cbz	r0, 80106cc <__swbuf_r+0x32>
 80106c4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80106c8:	4638      	mov	r0, r7
 80106ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106cc:	6823      	ldr	r3, [r4, #0]
 80106ce:	6922      	ldr	r2, [r4, #16]
 80106d0:	1a98      	subs	r0, r3, r2
 80106d2:	6963      	ldr	r3, [r4, #20]
 80106d4:	b2f6      	uxtb	r6, r6
 80106d6:	4283      	cmp	r3, r0
 80106d8:	4637      	mov	r7, r6
 80106da:	dc05      	bgt.n	80106e8 <__swbuf_r+0x4e>
 80106dc:	4621      	mov	r1, r4
 80106de:	4628      	mov	r0, r5
 80106e0:	f7ff fbe2 	bl	800fea8 <_fflush_r>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	d1ed      	bne.n	80106c4 <__swbuf_r+0x2a>
 80106e8:	68a3      	ldr	r3, [r4, #8]
 80106ea:	3b01      	subs	r3, #1
 80106ec:	60a3      	str	r3, [r4, #8]
 80106ee:	6823      	ldr	r3, [r4, #0]
 80106f0:	1c5a      	adds	r2, r3, #1
 80106f2:	6022      	str	r2, [r4, #0]
 80106f4:	701e      	strb	r6, [r3, #0]
 80106f6:	6962      	ldr	r2, [r4, #20]
 80106f8:	1c43      	adds	r3, r0, #1
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d004      	beq.n	8010708 <__swbuf_r+0x6e>
 80106fe:	89a3      	ldrh	r3, [r4, #12]
 8010700:	07db      	lsls	r3, r3, #31
 8010702:	d5e1      	bpl.n	80106c8 <__swbuf_r+0x2e>
 8010704:	2e0a      	cmp	r6, #10
 8010706:	d1df      	bne.n	80106c8 <__swbuf_r+0x2e>
 8010708:	4621      	mov	r1, r4
 801070a:	4628      	mov	r0, r5
 801070c:	f7ff fbcc 	bl	800fea8 <_fflush_r>
 8010710:	2800      	cmp	r0, #0
 8010712:	d0d9      	beq.n	80106c8 <__swbuf_r+0x2e>
 8010714:	e7d6      	b.n	80106c4 <__swbuf_r+0x2a>
	...

08010718 <__swsetup_r>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	4b29      	ldr	r3, [pc, #164]	@ (80107c0 <__swsetup_r+0xa8>)
 801071c:	4605      	mov	r5, r0
 801071e:	6818      	ldr	r0, [r3, #0]
 8010720:	460c      	mov	r4, r1
 8010722:	b118      	cbz	r0, 801072c <__swsetup_r+0x14>
 8010724:	6a03      	ldr	r3, [r0, #32]
 8010726:	b90b      	cbnz	r3, 801072c <__swsetup_r+0x14>
 8010728:	f7fe fa72 	bl	800ec10 <__sinit>
 801072c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010730:	0719      	lsls	r1, r3, #28
 8010732:	d422      	bmi.n	801077a <__swsetup_r+0x62>
 8010734:	06da      	lsls	r2, r3, #27
 8010736:	d407      	bmi.n	8010748 <__swsetup_r+0x30>
 8010738:	2209      	movs	r2, #9
 801073a:	602a      	str	r2, [r5, #0]
 801073c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010740:	81a3      	strh	r3, [r4, #12]
 8010742:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010746:	e033      	b.n	80107b0 <__swsetup_r+0x98>
 8010748:	0758      	lsls	r0, r3, #29
 801074a:	d512      	bpl.n	8010772 <__swsetup_r+0x5a>
 801074c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801074e:	b141      	cbz	r1, 8010762 <__swsetup_r+0x4a>
 8010750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010754:	4299      	cmp	r1, r3
 8010756:	d002      	beq.n	801075e <__swsetup_r+0x46>
 8010758:	4628      	mov	r0, r5
 801075a:	f000 f93f 	bl	80109dc <_free_r>
 801075e:	2300      	movs	r3, #0
 8010760:	6363      	str	r3, [r4, #52]	@ 0x34
 8010762:	89a3      	ldrh	r3, [r4, #12]
 8010764:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010768:	81a3      	strh	r3, [r4, #12]
 801076a:	2300      	movs	r3, #0
 801076c:	6063      	str	r3, [r4, #4]
 801076e:	6923      	ldr	r3, [r4, #16]
 8010770:	6023      	str	r3, [r4, #0]
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	f043 0308 	orr.w	r3, r3, #8
 8010778:	81a3      	strh	r3, [r4, #12]
 801077a:	6923      	ldr	r3, [r4, #16]
 801077c:	b94b      	cbnz	r3, 8010792 <__swsetup_r+0x7a>
 801077e:	89a3      	ldrh	r3, [r4, #12]
 8010780:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010788:	d003      	beq.n	8010792 <__swsetup_r+0x7a>
 801078a:	4621      	mov	r1, r4
 801078c:	4628      	mov	r0, r5
 801078e:	f000 f83f 	bl	8010810 <__smakebuf_r>
 8010792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010796:	f013 0201 	ands.w	r2, r3, #1
 801079a:	d00a      	beq.n	80107b2 <__swsetup_r+0x9a>
 801079c:	2200      	movs	r2, #0
 801079e:	60a2      	str	r2, [r4, #8]
 80107a0:	6962      	ldr	r2, [r4, #20]
 80107a2:	4252      	negs	r2, r2
 80107a4:	61a2      	str	r2, [r4, #24]
 80107a6:	6922      	ldr	r2, [r4, #16]
 80107a8:	b942      	cbnz	r2, 80107bc <__swsetup_r+0xa4>
 80107aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80107ae:	d1c5      	bne.n	801073c <__swsetup_r+0x24>
 80107b0:	bd38      	pop	{r3, r4, r5, pc}
 80107b2:	0799      	lsls	r1, r3, #30
 80107b4:	bf58      	it	pl
 80107b6:	6962      	ldrpl	r2, [r4, #20]
 80107b8:	60a2      	str	r2, [r4, #8]
 80107ba:	e7f4      	b.n	80107a6 <__swsetup_r+0x8e>
 80107bc:	2000      	movs	r0, #0
 80107be:	e7f7      	b.n	80107b0 <__swsetup_r+0x98>
 80107c0:	200000b0 	.word	0x200000b0

080107c4 <__swhatbuf_r>:
 80107c4:	b570      	push	{r4, r5, r6, lr}
 80107c6:	460c      	mov	r4, r1
 80107c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107cc:	2900      	cmp	r1, #0
 80107ce:	b096      	sub	sp, #88	@ 0x58
 80107d0:	4615      	mov	r5, r2
 80107d2:	461e      	mov	r6, r3
 80107d4:	da0d      	bge.n	80107f2 <__swhatbuf_r+0x2e>
 80107d6:	89a3      	ldrh	r3, [r4, #12]
 80107d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80107dc:	f04f 0100 	mov.w	r1, #0
 80107e0:	bf14      	ite	ne
 80107e2:	2340      	movne	r3, #64	@ 0x40
 80107e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80107e8:	2000      	movs	r0, #0
 80107ea:	6031      	str	r1, [r6, #0]
 80107ec:	602b      	str	r3, [r5, #0]
 80107ee:	b016      	add	sp, #88	@ 0x58
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	466a      	mov	r2, sp
 80107f4:	f000 f858 	bl	80108a8 <_fstat_r>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	dbec      	blt.n	80107d6 <__swhatbuf_r+0x12>
 80107fc:	9901      	ldr	r1, [sp, #4]
 80107fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010802:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010806:	4259      	negs	r1, r3
 8010808:	4159      	adcs	r1, r3
 801080a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801080e:	e7eb      	b.n	80107e8 <__swhatbuf_r+0x24>

08010810 <__smakebuf_r>:
 8010810:	898b      	ldrh	r3, [r1, #12]
 8010812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010814:	079d      	lsls	r5, r3, #30
 8010816:	4606      	mov	r6, r0
 8010818:	460c      	mov	r4, r1
 801081a:	d507      	bpl.n	801082c <__smakebuf_r+0x1c>
 801081c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	6123      	str	r3, [r4, #16]
 8010824:	2301      	movs	r3, #1
 8010826:	6163      	str	r3, [r4, #20]
 8010828:	b003      	add	sp, #12
 801082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801082c:	ab01      	add	r3, sp, #4
 801082e:	466a      	mov	r2, sp
 8010830:	f7ff ffc8 	bl	80107c4 <__swhatbuf_r>
 8010834:	9f00      	ldr	r7, [sp, #0]
 8010836:	4605      	mov	r5, r0
 8010838:	4639      	mov	r1, r7
 801083a:	4630      	mov	r0, r6
 801083c:	f7ff fa30 	bl	800fca0 <_malloc_r>
 8010840:	b948      	cbnz	r0, 8010856 <__smakebuf_r+0x46>
 8010842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010846:	059a      	lsls	r2, r3, #22
 8010848:	d4ee      	bmi.n	8010828 <__smakebuf_r+0x18>
 801084a:	f023 0303 	bic.w	r3, r3, #3
 801084e:	f043 0302 	orr.w	r3, r3, #2
 8010852:	81a3      	strh	r3, [r4, #12]
 8010854:	e7e2      	b.n	801081c <__smakebuf_r+0xc>
 8010856:	89a3      	ldrh	r3, [r4, #12]
 8010858:	6020      	str	r0, [r4, #0]
 801085a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801085e:	81a3      	strh	r3, [r4, #12]
 8010860:	9b01      	ldr	r3, [sp, #4]
 8010862:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010866:	b15b      	cbz	r3, 8010880 <__smakebuf_r+0x70>
 8010868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801086c:	4630      	mov	r0, r6
 801086e:	f000 f82d 	bl	80108cc <_isatty_r>
 8010872:	b128      	cbz	r0, 8010880 <__smakebuf_r+0x70>
 8010874:	89a3      	ldrh	r3, [r4, #12]
 8010876:	f023 0303 	bic.w	r3, r3, #3
 801087a:	f043 0301 	orr.w	r3, r3, #1
 801087e:	81a3      	strh	r3, [r4, #12]
 8010880:	89a3      	ldrh	r3, [r4, #12]
 8010882:	431d      	orrs	r5, r3
 8010884:	81a5      	strh	r5, [r4, #12]
 8010886:	e7cf      	b.n	8010828 <__smakebuf_r+0x18>

08010888 <_close_r>:
 8010888:	b538      	push	{r3, r4, r5, lr}
 801088a:	4d06      	ldr	r5, [pc, #24]	@ (80108a4 <_close_r+0x1c>)
 801088c:	2300      	movs	r3, #0
 801088e:	4604      	mov	r4, r0
 8010890:	4608      	mov	r0, r1
 8010892:	602b      	str	r3, [r5, #0]
 8010894:	f7f4 ff19 	bl	80056ca <_close>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d102      	bne.n	80108a2 <_close_r+0x1a>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	b103      	cbz	r3, 80108a2 <_close_r+0x1a>
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	2001e2b8 	.word	0x2001e2b8

080108a8 <_fstat_r>:
 80108a8:	b538      	push	{r3, r4, r5, lr}
 80108aa:	4d07      	ldr	r5, [pc, #28]	@ (80108c8 <_fstat_r+0x20>)
 80108ac:	2300      	movs	r3, #0
 80108ae:	4604      	mov	r4, r0
 80108b0:	4608      	mov	r0, r1
 80108b2:	4611      	mov	r1, r2
 80108b4:	602b      	str	r3, [r5, #0]
 80108b6:	f7f4 ff14 	bl	80056e2 <_fstat>
 80108ba:	1c43      	adds	r3, r0, #1
 80108bc:	d102      	bne.n	80108c4 <_fstat_r+0x1c>
 80108be:	682b      	ldr	r3, [r5, #0]
 80108c0:	b103      	cbz	r3, 80108c4 <_fstat_r+0x1c>
 80108c2:	6023      	str	r3, [r4, #0]
 80108c4:	bd38      	pop	{r3, r4, r5, pc}
 80108c6:	bf00      	nop
 80108c8:	2001e2b8 	.word	0x2001e2b8

080108cc <_isatty_r>:
 80108cc:	b538      	push	{r3, r4, r5, lr}
 80108ce:	4d06      	ldr	r5, [pc, #24]	@ (80108e8 <_isatty_r+0x1c>)
 80108d0:	2300      	movs	r3, #0
 80108d2:	4604      	mov	r4, r0
 80108d4:	4608      	mov	r0, r1
 80108d6:	602b      	str	r3, [r5, #0]
 80108d8:	f7f4 ff13 	bl	8005702 <_isatty>
 80108dc:	1c43      	adds	r3, r0, #1
 80108de:	d102      	bne.n	80108e6 <_isatty_r+0x1a>
 80108e0:	682b      	ldr	r3, [r5, #0]
 80108e2:	b103      	cbz	r3, 80108e6 <_isatty_r+0x1a>
 80108e4:	6023      	str	r3, [r4, #0]
 80108e6:	bd38      	pop	{r3, r4, r5, pc}
 80108e8:	2001e2b8 	.word	0x2001e2b8

080108ec <_lseek_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4d07      	ldr	r5, [pc, #28]	@ (801090c <_lseek_r+0x20>)
 80108f0:	4604      	mov	r4, r0
 80108f2:	4608      	mov	r0, r1
 80108f4:	4611      	mov	r1, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	602a      	str	r2, [r5, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	f7f4 ff0c 	bl	8005718 <_lseek>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	d102      	bne.n	801090a <_lseek_r+0x1e>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	b103      	cbz	r3, 801090a <_lseek_r+0x1e>
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	2001e2b8 	.word	0x2001e2b8

08010910 <_read_r>:
 8010910:	b538      	push	{r3, r4, r5, lr}
 8010912:	4d07      	ldr	r5, [pc, #28]	@ (8010930 <_read_r+0x20>)
 8010914:	4604      	mov	r4, r0
 8010916:	4608      	mov	r0, r1
 8010918:	4611      	mov	r1, r2
 801091a:	2200      	movs	r2, #0
 801091c:	602a      	str	r2, [r5, #0]
 801091e:	461a      	mov	r2, r3
 8010920:	f7f4 fe9a 	bl	8005658 <_read>
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	d102      	bne.n	801092e <_read_r+0x1e>
 8010928:	682b      	ldr	r3, [r5, #0]
 801092a:	b103      	cbz	r3, 801092e <_read_r+0x1e>
 801092c:	6023      	str	r3, [r4, #0]
 801092e:	bd38      	pop	{r3, r4, r5, pc}
 8010930:	2001e2b8 	.word	0x2001e2b8

08010934 <_sbrk_r>:
 8010934:	b538      	push	{r3, r4, r5, lr}
 8010936:	4d06      	ldr	r5, [pc, #24]	@ (8010950 <_sbrk_r+0x1c>)
 8010938:	2300      	movs	r3, #0
 801093a:	4604      	mov	r4, r0
 801093c:	4608      	mov	r0, r1
 801093e:	602b      	str	r3, [r5, #0]
 8010940:	f7f4 fef8 	bl	8005734 <_sbrk>
 8010944:	1c43      	adds	r3, r0, #1
 8010946:	d102      	bne.n	801094e <_sbrk_r+0x1a>
 8010948:	682b      	ldr	r3, [r5, #0]
 801094a:	b103      	cbz	r3, 801094e <_sbrk_r+0x1a>
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	2001e2b8 	.word	0x2001e2b8

08010954 <_write_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4d07      	ldr	r5, [pc, #28]	@ (8010974 <_write_r+0x20>)
 8010958:	4604      	mov	r4, r0
 801095a:	4608      	mov	r0, r1
 801095c:	4611      	mov	r1, r2
 801095e:	2200      	movs	r2, #0
 8010960:	602a      	str	r2, [r5, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	f7f4 fe95 	bl	8005692 <_write>
 8010968:	1c43      	adds	r3, r0, #1
 801096a:	d102      	bne.n	8010972 <_write_r+0x1e>
 801096c:	682b      	ldr	r3, [r5, #0]
 801096e:	b103      	cbz	r3, 8010972 <_write_r+0x1e>
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	2001e2b8 	.word	0x2001e2b8

08010978 <__assert_func>:
 8010978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801097a:	4614      	mov	r4, r2
 801097c:	461a      	mov	r2, r3
 801097e:	4b09      	ldr	r3, [pc, #36]	@ (80109a4 <__assert_func+0x2c>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4605      	mov	r5, r0
 8010984:	68d8      	ldr	r0, [r3, #12]
 8010986:	b954      	cbnz	r4, 801099e <__assert_func+0x26>
 8010988:	4b07      	ldr	r3, [pc, #28]	@ (80109a8 <__assert_func+0x30>)
 801098a:	461c      	mov	r4, r3
 801098c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010990:	9100      	str	r1, [sp, #0]
 8010992:	462b      	mov	r3, r5
 8010994:	4905      	ldr	r1, [pc, #20]	@ (80109ac <__assert_func+0x34>)
 8010996:	f000 f87d 	bl	8010a94 <fiprintf>
 801099a:	f000 f89a 	bl	8010ad2 <abort>
 801099e:	4b04      	ldr	r3, [pc, #16]	@ (80109b0 <__assert_func+0x38>)
 80109a0:	e7f4      	b.n	801098c <__assert_func+0x14>
 80109a2:	bf00      	nop
 80109a4:	200000b0 	.word	0x200000b0
 80109a8:	08024fce 	.word	0x08024fce
 80109ac:	08024fa0 	.word	0x08024fa0
 80109b0:	08024f93 	.word	0x08024f93

080109b4 <_calloc_r>:
 80109b4:	b570      	push	{r4, r5, r6, lr}
 80109b6:	fba1 5402 	umull	r5, r4, r1, r2
 80109ba:	b93c      	cbnz	r4, 80109cc <_calloc_r+0x18>
 80109bc:	4629      	mov	r1, r5
 80109be:	f7ff f96f 	bl	800fca0 <_malloc_r>
 80109c2:	4606      	mov	r6, r0
 80109c4:	b928      	cbnz	r0, 80109d2 <_calloc_r+0x1e>
 80109c6:	2600      	movs	r6, #0
 80109c8:	4630      	mov	r0, r6
 80109ca:	bd70      	pop	{r4, r5, r6, pc}
 80109cc:	220c      	movs	r2, #12
 80109ce:	6002      	str	r2, [r0, #0]
 80109d0:	e7f9      	b.n	80109c6 <_calloc_r+0x12>
 80109d2:	462a      	mov	r2, r5
 80109d4:	4621      	mov	r1, r4
 80109d6:	f7fe f963 	bl	800eca0 <memset>
 80109da:	e7f5      	b.n	80109c8 <_calloc_r+0x14>

080109dc <_free_r>:
 80109dc:	b538      	push	{r3, r4, r5, lr}
 80109de:	4605      	mov	r5, r0
 80109e0:	2900      	cmp	r1, #0
 80109e2:	d041      	beq.n	8010a68 <_free_r+0x8c>
 80109e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109e8:	1f0c      	subs	r4, r1, #4
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	bfb8      	it	lt
 80109ee:	18e4      	addlt	r4, r4, r3
 80109f0:	f7ff fa82 	bl	800fef8 <__malloc_lock>
 80109f4:	4a1d      	ldr	r2, [pc, #116]	@ (8010a6c <_free_r+0x90>)
 80109f6:	6813      	ldr	r3, [r2, #0]
 80109f8:	b933      	cbnz	r3, 8010a08 <_free_r+0x2c>
 80109fa:	6063      	str	r3, [r4, #4]
 80109fc:	6014      	str	r4, [r2, #0]
 80109fe:	4628      	mov	r0, r5
 8010a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a04:	f7ff ba7e 	b.w	800ff04 <__malloc_unlock>
 8010a08:	42a3      	cmp	r3, r4
 8010a0a:	d908      	bls.n	8010a1e <_free_r+0x42>
 8010a0c:	6820      	ldr	r0, [r4, #0]
 8010a0e:	1821      	adds	r1, r4, r0
 8010a10:	428b      	cmp	r3, r1
 8010a12:	bf01      	itttt	eq
 8010a14:	6819      	ldreq	r1, [r3, #0]
 8010a16:	685b      	ldreq	r3, [r3, #4]
 8010a18:	1809      	addeq	r1, r1, r0
 8010a1a:	6021      	streq	r1, [r4, #0]
 8010a1c:	e7ed      	b.n	80109fa <_free_r+0x1e>
 8010a1e:	461a      	mov	r2, r3
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	b10b      	cbz	r3, 8010a28 <_free_r+0x4c>
 8010a24:	42a3      	cmp	r3, r4
 8010a26:	d9fa      	bls.n	8010a1e <_free_r+0x42>
 8010a28:	6811      	ldr	r1, [r2, #0]
 8010a2a:	1850      	adds	r0, r2, r1
 8010a2c:	42a0      	cmp	r0, r4
 8010a2e:	d10b      	bne.n	8010a48 <_free_r+0x6c>
 8010a30:	6820      	ldr	r0, [r4, #0]
 8010a32:	4401      	add	r1, r0
 8010a34:	1850      	adds	r0, r2, r1
 8010a36:	4283      	cmp	r3, r0
 8010a38:	6011      	str	r1, [r2, #0]
 8010a3a:	d1e0      	bne.n	80109fe <_free_r+0x22>
 8010a3c:	6818      	ldr	r0, [r3, #0]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	6053      	str	r3, [r2, #4]
 8010a42:	4408      	add	r0, r1
 8010a44:	6010      	str	r0, [r2, #0]
 8010a46:	e7da      	b.n	80109fe <_free_r+0x22>
 8010a48:	d902      	bls.n	8010a50 <_free_r+0x74>
 8010a4a:	230c      	movs	r3, #12
 8010a4c:	602b      	str	r3, [r5, #0]
 8010a4e:	e7d6      	b.n	80109fe <_free_r+0x22>
 8010a50:	6820      	ldr	r0, [r4, #0]
 8010a52:	1821      	adds	r1, r4, r0
 8010a54:	428b      	cmp	r3, r1
 8010a56:	bf04      	itt	eq
 8010a58:	6819      	ldreq	r1, [r3, #0]
 8010a5a:	685b      	ldreq	r3, [r3, #4]
 8010a5c:	6063      	str	r3, [r4, #4]
 8010a5e:	bf04      	itt	eq
 8010a60:	1809      	addeq	r1, r1, r0
 8010a62:	6021      	streq	r1, [r4, #0]
 8010a64:	6054      	str	r4, [r2, #4]
 8010a66:	e7ca      	b.n	80109fe <_free_r+0x22>
 8010a68:	bd38      	pop	{r3, r4, r5, pc}
 8010a6a:	bf00      	nop
 8010a6c:	2001e2b4 	.word	0x2001e2b4

08010a70 <__ascii_mbtowc>:
 8010a70:	b082      	sub	sp, #8
 8010a72:	b901      	cbnz	r1, 8010a76 <__ascii_mbtowc+0x6>
 8010a74:	a901      	add	r1, sp, #4
 8010a76:	b142      	cbz	r2, 8010a8a <__ascii_mbtowc+0x1a>
 8010a78:	b14b      	cbz	r3, 8010a8e <__ascii_mbtowc+0x1e>
 8010a7a:	7813      	ldrb	r3, [r2, #0]
 8010a7c:	600b      	str	r3, [r1, #0]
 8010a7e:	7812      	ldrb	r2, [r2, #0]
 8010a80:	1e10      	subs	r0, r2, #0
 8010a82:	bf18      	it	ne
 8010a84:	2001      	movne	r0, #1
 8010a86:	b002      	add	sp, #8
 8010a88:	4770      	bx	lr
 8010a8a:	4610      	mov	r0, r2
 8010a8c:	e7fb      	b.n	8010a86 <__ascii_mbtowc+0x16>
 8010a8e:	f06f 0001 	mvn.w	r0, #1
 8010a92:	e7f8      	b.n	8010a86 <__ascii_mbtowc+0x16>

08010a94 <fiprintf>:
 8010a94:	b40e      	push	{r1, r2, r3}
 8010a96:	b503      	push	{r0, r1, lr}
 8010a98:	4601      	mov	r1, r0
 8010a9a:	ab03      	add	r3, sp, #12
 8010a9c:	4805      	ldr	r0, [pc, #20]	@ (8010ab4 <fiprintf+0x20>)
 8010a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa2:	6800      	ldr	r0, [r0, #0]
 8010aa4:	9301      	str	r3, [sp, #4]
 8010aa6:	f7fe ffb9 	bl	800fa1c <_vfiprintf_r>
 8010aaa:	b002      	add	sp, #8
 8010aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ab0:	b003      	add	sp, #12
 8010ab2:	4770      	bx	lr
 8010ab4:	200000b0 	.word	0x200000b0

08010ab8 <__ascii_wctomb>:
 8010ab8:	4603      	mov	r3, r0
 8010aba:	4608      	mov	r0, r1
 8010abc:	b141      	cbz	r1, 8010ad0 <__ascii_wctomb+0x18>
 8010abe:	2aff      	cmp	r2, #255	@ 0xff
 8010ac0:	d904      	bls.n	8010acc <__ascii_wctomb+0x14>
 8010ac2:	228a      	movs	r2, #138	@ 0x8a
 8010ac4:	601a      	str	r2, [r3, #0]
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010aca:	4770      	bx	lr
 8010acc:	700a      	strb	r2, [r1, #0]
 8010ace:	2001      	movs	r0, #1
 8010ad0:	4770      	bx	lr

08010ad2 <abort>:
 8010ad2:	b508      	push	{r3, lr}
 8010ad4:	2006      	movs	r0, #6
 8010ad6:	f000 f82b 	bl	8010b30 <raise>
 8010ada:	2001      	movs	r0, #1
 8010adc:	f7f4 fdb1 	bl	8005642 <_exit>

08010ae0 <_raise_r>:
 8010ae0:	291f      	cmp	r1, #31
 8010ae2:	b538      	push	{r3, r4, r5, lr}
 8010ae4:	4605      	mov	r5, r0
 8010ae6:	460c      	mov	r4, r1
 8010ae8:	d904      	bls.n	8010af4 <_raise_r+0x14>
 8010aea:	2316      	movs	r3, #22
 8010aec:	6003      	str	r3, [r0, #0]
 8010aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010af2:	bd38      	pop	{r3, r4, r5, pc}
 8010af4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010af6:	b112      	cbz	r2, 8010afe <_raise_r+0x1e>
 8010af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010afc:	b94b      	cbnz	r3, 8010b12 <_raise_r+0x32>
 8010afe:	4628      	mov	r0, r5
 8010b00:	f000 f830 	bl	8010b64 <_getpid_r>
 8010b04:	4622      	mov	r2, r4
 8010b06:	4601      	mov	r1, r0
 8010b08:	4628      	mov	r0, r5
 8010b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b0e:	f000 b817 	b.w	8010b40 <_kill_r>
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d00a      	beq.n	8010b2c <_raise_r+0x4c>
 8010b16:	1c59      	adds	r1, r3, #1
 8010b18:	d103      	bne.n	8010b22 <_raise_r+0x42>
 8010b1a:	2316      	movs	r3, #22
 8010b1c:	6003      	str	r3, [r0, #0]
 8010b1e:	2001      	movs	r0, #1
 8010b20:	e7e7      	b.n	8010af2 <_raise_r+0x12>
 8010b22:	2100      	movs	r1, #0
 8010b24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b28:	4620      	mov	r0, r4
 8010b2a:	4798      	blx	r3
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	e7e0      	b.n	8010af2 <_raise_r+0x12>

08010b30 <raise>:
 8010b30:	4b02      	ldr	r3, [pc, #8]	@ (8010b3c <raise+0xc>)
 8010b32:	4601      	mov	r1, r0
 8010b34:	6818      	ldr	r0, [r3, #0]
 8010b36:	f7ff bfd3 	b.w	8010ae0 <_raise_r>
 8010b3a:	bf00      	nop
 8010b3c:	200000b0 	.word	0x200000b0

08010b40 <_kill_r>:
 8010b40:	b538      	push	{r3, r4, r5, lr}
 8010b42:	4d07      	ldr	r5, [pc, #28]	@ (8010b60 <_kill_r+0x20>)
 8010b44:	2300      	movs	r3, #0
 8010b46:	4604      	mov	r4, r0
 8010b48:	4608      	mov	r0, r1
 8010b4a:	4611      	mov	r1, r2
 8010b4c:	602b      	str	r3, [r5, #0]
 8010b4e:	f7f4 fd68 	bl	8005622 <_kill>
 8010b52:	1c43      	adds	r3, r0, #1
 8010b54:	d102      	bne.n	8010b5c <_kill_r+0x1c>
 8010b56:	682b      	ldr	r3, [r5, #0]
 8010b58:	b103      	cbz	r3, 8010b5c <_kill_r+0x1c>
 8010b5a:	6023      	str	r3, [r4, #0]
 8010b5c:	bd38      	pop	{r3, r4, r5, pc}
 8010b5e:	bf00      	nop
 8010b60:	2001e2b8 	.word	0x2001e2b8

08010b64 <_getpid_r>:
 8010b64:	f7f4 bd55 	b.w	8005612 <_getpid>

08010b68 <_init>:
 8010b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b6a:	bf00      	nop
 8010b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b6e:	bc08      	pop	{r3}
 8010b70:	469e      	mov	lr, r3
 8010b72:	4770      	bx	lr

08010b74 <_fini>:
 8010b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b76:	bf00      	nop
 8010b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b7a:	bc08      	pop	{r3}
 8010b7c:	469e      	mov	lr, r3
 8010b7e:	4770      	bx	lr
