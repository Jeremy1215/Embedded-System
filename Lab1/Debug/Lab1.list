
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009034  08009034  0000a034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009194  08009194  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009194  08009194  0000a194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800919c  0800919c  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800919c  0800919c  0000a19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091a0  080091a0  0000a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080091a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e4  20000010  080091b4  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020f4  080091b4  0000b0f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002629b  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004930  00000000  00000000  000312db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002308  00000000  00000000  00035c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b61  00000000  00000000  00037f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049f2  00000000  00000000  00039a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026cb1  00000000  00000000  0003e46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010824c  00000000  00000000  0006511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009804  00000000  00000000  0016d3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00176bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800901c 	.word	0x0800901c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800901c 	.word	0x0800901c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  timestamp_pressed = -1;
 80004c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000578 <main+0xb8>)
 80004c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80004ca:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 f8af 	bl	800162e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f878 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa92 	bl	80009fc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d8:	f000 f8d6 	bl	8000688 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004dc:	f000 f90c 	bl	80006f8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004e0:	f000 f94a 	bl	8000778 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e4:	f000 f96e 	bl	80007c4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f9fa 	bl	80008e0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ec:	f000 fa28 	bl	8000940 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f0:	f000 fa56 	bl	80009a0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80004f4:	f000 f9a4 	bl	8000840 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // HAL_TIM_Base_Start(&htim2);
  HAL_TIM_Base_Start_IT(&htim2);
 80004f8:	4820      	ldr	r0, [pc, #128]	@ (800057c <main+0xbc>)
 80004fa:	f003 fcaf 	bl	8003e5c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fe:	f005 f8fd 	bl	80056fc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex */
  mutexHandle = osMutexNew(&mutex_attributes);
 8000502:	481f      	ldr	r0, [pc, #124]	@ (8000580 <main+0xc0>)
 8000504:	f005 f9d6 	bl	80058b4 <osMutexNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a1e      	ldr	r2, [pc, #120]	@ (8000584 <main+0xc4>)
 800050c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of buttonSem */
  buttonSemHandle = osSemaphoreNew(1, 0, &buttonSem_attributes);
 800050e:	4a1e      	ldr	r2, [pc, #120]	@ (8000588 <main+0xc8>)
 8000510:	2100      	movs	r1, #0
 8000512:	2001      	movs	r0, #1
 8000514:	f005 fadc 	bl	8005ad0 <osSemaphoreNew>
 8000518:	4603      	mov	r3, r0
 800051a:	4a1c      	ldr	r2, [pc, #112]	@ (800058c <main+0xcc>)
 800051c:	6013      	str	r3, [r2, #0]

  /* creation of blinkSem */
  blinkSemHandle = osSemaphoreNew(1, 0, &blinkSem_attributes);
 800051e:	4a1c      	ldr	r2, [pc, #112]	@ (8000590 <main+0xd0>)
 8000520:	2100      	movs	r1, #0
 8000522:	2001      	movs	r0, #1
 8000524:	f005 fad4 	bl	8005ad0 <osSemaphoreNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a1a      	ldr	r2, [pc, #104]	@ (8000594 <main+0xd4>)
 800052c:	6013      	str	r3, [r2, #0]

  /* creation of longPressSem */
  longPressSemHandle = osSemaphoreNew(1, 0, &longPressSem_attributes);
 800052e:	4a1a      	ldr	r2, [pc, #104]	@ (8000598 <main+0xd8>)
 8000530:	2100      	movs	r1, #0
 8000532:	2001      	movs	r0, #1
 8000534:	f005 facc 	bl	8005ad0 <osSemaphoreNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a18      	ldr	r2, [pc, #96]	@ (800059c <main+0xdc>)
 800053c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800053e:	4a18      	ldr	r2, [pc, #96]	@ (80005a0 <main+0xe0>)
 8000540:	2100      	movs	r1, #0
 8000542:	4818      	ldr	r0, [pc, #96]	@ (80005a4 <main+0xe4>)
 8000544:	f005 f924 	bl	8005790 <osThreadNew>
 8000548:	4603      	mov	r3, r0
 800054a:	4a17      	ldr	r2, [pc, #92]	@ (80005a8 <main+0xe8>)
 800054c:	6013      	str	r3, [r2, #0]

  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 800054e:	4a17      	ldr	r2, [pc, #92]	@ (80005ac <main+0xec>)
 8000550:	2100      	movs	r1, #0
 8000552:	4817      	ldr	r0, [pc, #92]	@ (80005b0 <main+0xf0>)
 8000554:	f005 f91c 	bl	8005790 <osThreadNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a16      	ldr	r2, [pc, #88]	@ (80005b4 <main+0xf4>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800055e:	4a16      	ldr	r2, [pc, #88]	@ (80005b8 <main+0xf8>)
 8000560:	2100      	movs	r1, #0
 8000562:	4816      	ldr	r0, [pc, #88]	@ (80005bc <main+0xfc>)
 8000564:	f005 f914 	bl	8005790 <osThreadNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a15      	ldr	r2, [pc, #84]	@ (80005c0 <main+0x100>)
 800056c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f005 f8e9 	bl	8005744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	bf00      	nop
 8000574:	e7fd      	b.n	8000572 <main+0xb2>
 8000576:	bf00      	nop
 8000578:	200007bc 	.word	0x200007bc
 800057c:	20000160 	.word	0x20000160
 8000580:	0800910c 	.word	0x0800910c
 8000584:	200007ac 	.word	0x200007ac
 8000588:	0800911c 	.word	0x0800911c
 800058c:	200007b0 	.word	0x200007b0
 8000590:	0800912c 	.word	0x0800912c
 8000594:	200007b4 	.word	0x200007b4
 8000598:	0800913c 	.word	0x0800913c
 800059c:	200007b8 	.word	0x200007b8
 80005a0:	080090a0 	.word	0x080090a0
 80005a4:	08000de1 	.word	0x08000de1
 80005a8:	200007a0 	.word	0x200007a0
 80005ac:	080090c4 	.word	0x080090c4
 80005b0:	08000e41 	.word	0x08000e41
 80005b4:	200007a4 	.word	0x200007a4
 80005b8:	080090e8 	.word	0x080090e8
 80005bc:	08000ea1 	.word	0x08000ea1
 80005c0:	200007a8 	.word	0x200007a8

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	@ 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	@ 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f008 fce8 	bl	8008fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ea:	f001 ff4f 	bl	800248c <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 fc84 	bl	8000f00 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f8:	f001 ff2a 	bl	8002450 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005fc:	4b21      	ldr	r3, [pc, #132]	@ (8000684 <SystemClock_Config+0xc0>)
 80005fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000602:	4a20      	ldr	r2, [pc, #128]	@ (8000684 <SystemClock_Config+0xc0>)
 8000604:	f023 0318 	bic.w	r3, r3, #24
 8000608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800060c:	2314      	movs	r3, #20
 800060e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061c:	2360      	movs	r3, #96	@ 0x60
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000624:	2301      	movs	r3, #1
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800062c:	2328      	movs	r3, #40	@ 0x28
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000630:	2307      	movs	r3, #7
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f845 	bl	80026d0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800064c:	f000 fc58 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2303      	movs	r3, #3
 8000656:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2104      	movs	r1, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fc0d 	bl	8002e88 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000674:	f000 fc44 	bl	8000f00 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000678:	f003 f914 	bl	80038a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800067c:	bf00      	nop
 800067e:	3758      	adds	r7, #88	@ 0x58
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 800068e:	4a19      	ldr	r2, [pc, #100]	@ (80006f4 <MX_DFSDM1_Init+0x6c>)
 8000690:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 8000694:	2201      	movs	r2, #1
 8000696:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006b6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_DFSDM1_Init+0x68>)
 80006de:	f001 f951 	bl	8001984 <HAL_DFSDM_ChannelInit>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006e8:	f000 fc0a 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	40016020 	.word	0x40016020

080006f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_I2C2_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000770 <MX_I2C2_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_I2C2_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <MX_I2C2_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_I2C2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_I2C2_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_I2C2_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_I2C2_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_I2C2_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_I2C2_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_I2C2_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	@ (800076c <MX_I2C2_Init+0x74>)
 8000734:	f001 fc26 	bl	8001f84 <HAL_I2C_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 fbdf 	bl	8000f00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4809      	ldr	r0, [pc, #36]	@ (800076c <MX_I2C2_Init+0x74>)
 8000746:	f001 fcb8 	bl	80020ba <HAL_I2CEx_ConfigAnalogFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 fbd6 	bl	8000f00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_I2C2_Init+0x74>)
 8000758:	f001 fcfa 	bl	8002150 <HAL_I2CEx_ConfigDigitalFilter>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 fbcd 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000064 	.word	0x20000064
 8000770:	40005800 	.word	0x40005800
 8000774:	10d19ce4 	.word	0x10d19ce4

08000778 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_QUADSPI_Init+0x44>)
 800077e:	4a10      	ldr	r2, [pc, #64]	@ (80007c0 <MX_QUADSPI_Init+0x48>)
 8000780:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_QUADSPI_Init+0x44>)
 8000784:	2202      	movs	r2, #2
 8000786:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_QUADSPI_Init+0x44>)
 800078a:	2204      	movs	r2, #4
 800078c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_QUADSPI_Init+0x44>)
 8000790:	2210      	movs	r2, #16
 8000792:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_QUADSPI_Init+0x44>)
 8000796:	2217      	movs	r2, #23
 8000798:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_QUADSPI_Init+0x44>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_QUADSPI_Init+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_QUADSPI_Init+0x44>)
 80007a8:	f001 fed6 	bl	8002558 <HAL_QSPI_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007b2:	f000 fba5 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000b8 	.word	0x200000b8
 80007c0:	a0001000 	.word	0xa0001000

080007c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_SPI3_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_SPI3_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_SPI3_Init+0x74>)
 80007d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_SPI3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_SPI3_Init+0x74>)
 80007de:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e4:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_SPI3_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_SPI3_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_SPI3_Init+0x74>)
 80007f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_SPI3_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_SPI3_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_SPI3_Init+0x74>)
 8000812:	2207      	movs	r2, #7
 8000814:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_SPI3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_SPI3_Init+0x74>)
 800081e:	2208      	movs	r2, #8
 8000820:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_SPI3_Init+0x74>)
 8000824:	f003 fa20 	bl	8003c68 <HAL_SPI_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fb67 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000fc 	.word	0x200000fc
 800083c:	40003c00 	.word	0x40003c00

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000860:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000864:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000868:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800086c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8000874:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000876:	4a19      	ldr	r2, [pc, #100]	@ (80008dc <MX_TIM2_Init+0x9c>)
 8000878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_TIM2_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000886:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <MX_TIM2_Init+0x98>)
 8000888:	f003 fa91 	bl	8003dae <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000892:	f000 fb35 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <MX_TIM2_Init+0x98>)
 80008a4:	f003 fc51 	bl	800414a <HAL_TIM_ConfigClockSource>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008ae:	f000 fb27 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <MX_TIM2_Init+0x98>)
 80008c0:	f003 fe74 	bl	80045ac <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ca:	f000 fb19 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000160 	.word	0x20000160
 80008dc:	000186a0 	.word	0x000186a0

080008e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	@ (800093c <MX_USART1_UART_Init+0x5c>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USART1_UART_Init+0x58>)
 8000924:	f003 fee8 	bl	80046f8 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 fae7 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001ac 	.word	0x200001ac
 800093c:	40013800 	.word	0x40013800

08000940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	@ (800099c <MX_USART3_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_USART3_UART_Init+0x58>)
 8000984:	f003 feb8 	bl	80046f8 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 fab7 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000234 	.word	0x20000234
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2206      	movs	r2, #6
 80009b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	f001 fc00 	bl	80021e8 <HAL_PCD_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 fa87 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200002bc 	.word	0x200002bc

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a12:	4bbd      	ldr	r3, [pc, #756]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	4abc      	ldr	r2, [pc, #752]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a18:	f043 0310 	orr.w	r3, r3, #16
 8000a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1e:	4bba      	ldr	r3, [pc, #744]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4bb7      	ldr	r3, [pc, #732]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	4ab6      	ldr	r2, [pc, #728]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a36:	4bb4      	ldr	r3, [pc, #720]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4bb1      	ldr	r3, [pc, #708]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a46:	4ab0      	ldr	r2, [pc, #704]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4e:	4bae      	ldr	r3, [pc, #696]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4bab      	ldr	r3, [pc, #684]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	4aaa      	ldr	r2, [pc, #680]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a66:	4ba8      	ldr	r3, [pc, #672]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4ba5      	ldr	r3, [pc, #660]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	4aa4      	ldr	r2, [pc, #656]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7e:	4ba2      	ldr	r3, [pc, #648]	@ (8000d08 <MX_GPIO_Init+0x30c>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a90:	489e      	ldr	r0, [pc, #632]	@ (8000d0c <MX_GPIO_Init+0x310>)
 8000a92:	f001 fa2d 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa0:	f001 fa26 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000aaa:	4899      	ldr	r0, [pc, #612]	@ (8000d10 <MX_GPIO_Init+0x314>)
 8000aac:	f001 fa20 	bl	8001ef0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000ab6:	4897      	ldr	r0, [pc, #604]	@ (8000d14 <MX_GPIO_Init+0x318>)
 8000ab8:	f001 fa1a 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac2:	4894      	ldr	r0, [pc, #592]	@ (8000d14 <MX_GPIO_Init+0x318>)
 8000ac4:	f001 fa14 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ace:	4892      	ldr	r0, [pc, #584]	@ (8000d18 <MX_GPIO_Init+0x31c>)
 8000ad0:	f001 fa0e 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	488d      	ldr	r0, [pc, #564]	@ (8000d10 <MX_GPIO_Init+0x314>)
 8000ada:	f001 fa09 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	488a      	ldr	r0, [pc, #552]	@ (8000d0c <MX_GPIO_Init+0x310>)
 8000ae4:	f001 fa04 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ae8:	f240 1315 	movw	r3, #277	@ 0x115
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4882      	ldr	r0, [pc, #520]	@ (8000d0c <MX_GPIO_Init+0x310>)
 8000b02:	f001 f84b 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b06:	236a      	movs	r3, #106	@ 0x6a
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	487c      	ldr	r0, [pc, #496]	@ (8000d0c <MX_GPIO_Init+0x310>)
 8000b1c:	f001 f83e 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b26:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4878      	ldr	r0, [pc, #480]	@ (8000d18 <MX_GPIO_Init+0x31c>)
 8000b38:	f001 f830 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b3c:	233f      	movs	r3, #63	@ 0x3f
 8000b3e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b40:	230b      	movs	r3, #11
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4872      	ldr	r0, [pc, #456]	@ (8000d18 <MX_GPIO_Init+0x31c>)
 8000b50:	f001 f824 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b54:	2303      	movs	r3, #3
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b64:	2308      	movs	r3, #8
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f001 f813 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b76:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f001 f803 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b96:	2310      	movs	r3, #16
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f000 fff6 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bb0:	23e0      	movs	r3, #224	@ 0xe0
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bce:	f000 ffe5 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	484a      	ldr	r0, [pc, #296]	@ (8000d10 <MX_GPIO_Init+0x314>)
 8000be8:	f000 ffd8 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bf0:	230b      	movs	r3, #11
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4844      	ldr	r0, [pc, #272]	@ (8000d10 <MX_GPIO_Init+0x314>)
 8000c00:	f000 ffcc 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c04:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c08:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	483c      	ldr	r0, [pc, #240]	@ (8000d10 <MX_GPIO_Init+0x314>)
 8000c1e:	f000 ffbd 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c22:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c26:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4836      	ldr	r0, [pc, #216]	@ (8000d14 <MX_GPIO_Init+0x318>)
 8000c3a:	f000 ffaf 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c3e:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	482f      	ldr	r0, [pc, #188]	@ (8000d14 <MX_GPIO_Init+0x318>)
 8000c58:	f000 ffa0 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c5c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4828      	ldr	r0, [pc, #160]	@ (8000d18 <MX_GPIO_Init+0x31c>)
 8000c76:	f000 ff91 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c7a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4821      	ldr	r0, [pc, #132]	@ (8000d18 <MX_GPIO_Init+0x31c>)
 8000c92:	f000 ff83 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c96:	2302      	movs	r3, #2
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4818      	ldr	r0, [pc, #96]	@ (8000d14 <MX_GPIO_Init+0x318>)
 8000cb2:	f000 ff73 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cb6:	2378      	movs	r3, #120	@ 0x78
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4810      	ldr	r0, [pc, #64]	@ (8000d14 <MX_GPIO_Init+0x318>)
 8000cd2:	f000 ff63 	bl	8001b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cdc:	2312      	movs	r3, #18
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <MX_GPIO_Init+0x314>)
 8000cf4:	f000 ff52 	bl	8001b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	2017      	movs	r0, #23
 8000cfe:	f000 fe0a 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d02:	2017      	movs	r0, #23
 8000d04:	e00a      	b.n	8000d1c <MX_GPIO_Init+0x320>
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48001000 	.word	0x48001000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	f000 fe17 	bl	800194e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2105      	movs	r1, #5
 8000d24:	2028      	movs	r0, #40	@ 0x28
 8000d26:	f000 fdf6 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d2a:	2028      	movs	r0, #40	@ 0x28
 8000d2c:	f000 fe0f 	bl	800194e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d48:	d128      	bne.n	8000d9c <HAL_GPIO_EXTI_Callback+0x64>
  {
    case GPIO_PIN_13:
      if (timestamp_pressed == -1) {
 8000d4a:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d52:	d106      	bne.n	8000d62 <HAL_GPIO_EXTI_Callback+0x2a>
	    // user just pressed the button
	    timestamp_pressed = HAL_GetTick();
 8000d54:	f000 fcd4 	bl	8001700 <HAL_GetTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d5e:	601a      	str	r2, [r3, #0]
	  // short press
	  else {
	    osSemaphoreRelease(buttonSemHandle);
	    timestamp_pressed = -1;
	  }
      break;
 8000d60:	e01d      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x66>
	  else if (HAL_GetTick() - timestamp_pressed > 1000) {
 8000d62:	f000 fccd 	bl	8001700 <HAL_GetTick>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d72:	d909      	bls.n	8000d88 <HAL_GPIO_EXTI_Callback+0x50>
	    osSemaphoreRelease(longPressSemHandle);
 8000d74:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <HAL_GPIO_EXTI_Callback+0x74>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 ff85 	bl	8005c88 <osSemaphoreRelease>
	    timestamp_pressed = -1;
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d84:	601a      	str	r2, [r3, #0]
      break;
 8000d86:	e00a      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x66>
	    osSemaphoreRelease(buttonSemHandle);
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 ff7b 	bl	8005c88 <osSemaphoreRelease>
	    timestamp_pressed = -1;
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d98:	601a      	str	r2, [r3, #0]
      break;
 8000d9a:	e000      	b.n	8000d9e <HAL_GPIO_EXTI_Callback+0x66>
  default:
    // HAL_GPIO_EXTI_IRQHandler(GPIO_Pin);
    break;
 8000d9c:	bf00      	nop
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200007bc 	.word	0x200007bc
 8000dac:	200007b8 	.word	0x200007b8
 8000db0:	200007b0 	.word	0x200007b0

08000db4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d104      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x1a>
    osSemaphoreRelease(blinkSemHandle);
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 ff5d 	bl	8005c88 <osSemaphoreRelease>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000160 	.word	0x20000160
 8000ddc:	200007b4 	.word	0x200007b4

08000de0 <StartTask03>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(longPressSemHandle, osWaitForever);
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <StartTask03+0x54>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 fef7 	bl	8005be4 <osSemaphoreAcquire>
	osMutexAcquire(mutexHandle, osWaitForever);
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <StartTask03+0x58>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fdde 	bl	80059c0 <osMutexAcquire>
	for (int i = 0; i < 100; i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	e00a      	b.n	8000e20 <StartTask03+0x40>
	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e0e:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <StartTask03+0x5c>)
 8000e10:	f001 f886 	bl	8001f20 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000e14:	2032      	movs	r0, #50	@ 0x32
 8000e16:	f000 fc7f 	bl	8001718 <HAL_Delay>
	for (int i = 0; i < 100; i++) {
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b63      	cmp	r3, #99	@ 0x63
 8000e24:	ddf1      	ble.n	8000e0a <StartTask03+0x2a>
	}
	osMutexRelease(mutexHandle);
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <StartTask03+0x58>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 fe13 	bl	8005a56 <osMutexRelease>
	osSemaphoreAcquire(longPressSemHandle, osWaitForever);
 8000e30:	e7da      	b.n	8000de8 <StartTask03+0x8>
 8000e32:	bf00      	nop
 8000e34:	200007b8 	.word	0x200007b8
 8000e38:	200007ac 	.word	0x200007ac
 8000e3c:	48000400 	.word	0x48000400

08000e40 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(buttonSemHandle, osWaitForever);
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <StartTask01+0x54>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fec7 	bl	8005be4 <osSemaphoreAcquire>
	osMutexAcquire(mutexHandle, osWaitForever);
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <StartTask01+0x58>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 fdae 	bl	80059c0 <osMutexAcquire>
	for (int i = 0; i < 10; i++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e00b      	b.n	8000e82 <StartTask01+0x42>
	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e6e:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <StartTask01+0x5c>)
 8000e70:	f001 f856 	bl	8001f20 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000e74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e78:	f000 fc4e 	bl	8001718 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b09      	cmp	r3, #9
 8000e86:	ddf0      	ble.n	8000e6a <StartTask01+0x2a>
	}
	osMutexRelease(mutexHandle);
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <StartTask01+0x58>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fde2 	bl	8005a56 <osMutexRelease>
	osSemaphoreAcquire(buttonSemHandle, osWaitForever);
 8000e92:	e7d9      	b.n	8000e48 <StartTask01+0x8>
 8000e94:	200007b0 	.word	0x200007b0
 8000e98:	200007ac 	.word	0x200007ac
 8000e9c:	48000400 	.word	0x48000400

08000ea0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(blinkSemHandle, osWaitForever);
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <StartTask02+0x54>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 fe97 	bl	8005be4 <osSemaphoreAcquire>
	osMutexAcquire(mutexHandle, osWaitForever);
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <StartTask02+0x58>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 fd7e 	bl	80059c0 <osMutexAcquire>
	for (int i = 0; i < 40; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e00a      	b.n	8000ee0 <StartTask02+0x40>
	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000eca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ece:	480b      	ldr	r0, [pc, #44]	@ (8000efc <StartTask02+0x5c>)
 8000ed0:	f001 f826 	bl	8001f20 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000ed4:	2032      	movs	r0, #50	@ 0x32
 8000ed6:	f000 fc1f 	bl	8001718 <HAL_Delay>
	for (int i = 0; i < 40; i++) {
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3301      	adds	r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b27      	cmp	r3, #39	@ 0x27
 8000ee4:	ddf1      	ble.n	8000eca <StartTask02+0x2a>
	}
	osMutexRelease(mutexHandle);
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <StartTask02+0x58>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fdb3 	bl	8005a56 <osMutexRelease>
	osSemaphoreAcquire(blinkSemHandle, osWaitForever);
 8000ef0:	e7da      	b.n	8000ea8 <StartTask02+0x8>
 8000ef2:	bf00      	nop
 8000ef4:	200007b4 	.word	0x200007b4
 8000ef8:	200007ac 	.word	0x200007ac
 8000efc:	48000400 	.word	0x48000400

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <Error_Handler+0x8>

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f16:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f36:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	210f      	movs	r1, #15
 8000f46:	f06f 0001 	mvn.w	r0, #1
 8000f4a:	f000 fce4 	bl	8001916 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2288      	movs	r2, #136	@ 0x88
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f008 f813 	bl	8008fa8 <memset>
  if(DFSDM1_Init == 0)
 8000f82:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d142      	bne.n	8001010 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f998 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000fa6:	f7ff ffab 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fae:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fc8:	f043 0310 	orr.w	r3, r3, #16
 8000fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000fda:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ffa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	@ (8001020 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001002:	f000 fdcb 	bl	8001b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001006:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a02      	ldr	r2, [pc, #8]	@ (8001018 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800100e:	6013      	str	r3, [r2, #0]
  }

}
 8001010:	bf00      	nop
 8001012:	37b0      	adds	r7, #176	@ 0xb0
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200007c0 	.word	0x200007c0
 800101c:	40021000 	.word	0x40021000
 8001020:	48001000 	.word	0x48001000

08001024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ac      	sub	sp, #176	@ 0xb0
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2288      	movs	r2, #136	@ 0x88
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f007 ffaf 	bl	8008fa8 <memset>
  if(hi2c->Instance==I2C2)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <HAL_I2C_MspInit+0xb0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d13b      	bne.n	80010cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4618      	mov	r0, r3
 8001062:	f002 f935 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800106c:	f7ff ff48 	bl	8000f00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <HAL_I2C_MspInit+0xb4>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <HAL_I2C_MspInit+0xb4>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_I2C_MspInit+0xb4>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001088:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800108c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001090:	2312      	movs	r3, #18
 8001092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001096:	2301      	movs	r3, #1
 8001098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010a2:	2304      	movs	r3, #4
 80010a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ac:	4619      	mov	r1, r3
 80010ae:	480b      	ldr	r0, [pc, #44]	@ (80010dc <HAL_I2C_MspInit+0xb8>)
 80010b0:	f000 fd74 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_I2C_MspInit+0xb4>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_I2C_MspInit+0xb4>)
 80010ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010be:	6593      	str	r3, [r2, #88]	@ 0x58
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <HAL_I2C_MspInit+0xb4>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010cc:	bf00      	nop
 80010ce:	37b0      	adds	r7, #176	@ 0xb0
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40005800 	.word	0x40005800
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400

080010e0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a17      	ldr	r2, [pc, #92]	@ (800115c <HAL_QSPI_MspInit+0x7c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d128      	bne.n	8001154 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <HAL_QSPI_MspInit+0x80>)
 8001104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001106:	4a16      	ldr	r2, [pc, #88]	@ (8001160 <HAL_QSPI_MspInit+0x80>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800110c:	6513      	str	r3, [r2, #80]	@ 0x50
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <HAL_QSPI_MspInit+0x80>)
 8001110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_QSPI_MspInit+0x80>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <HAL_QSPI_MspInit+0x80>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_QSPI_MspInit+0x80>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001132:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001136:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001144:	230a      	movs	r3, #10
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <HAL_QSPI_MspInit+0x84>)
 8001150:	f000 fd24 	bl	8001b9c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	@ 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	a0001000 	.word	0xa0001000
 8001160:	40021000 	.word	0x40021000
 8001164:	48001000 	.word	0x48001000

08001168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_SPI_MspInit+0x7c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d128      	bne.n	80011dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_SPI_MspInit+0x80>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <HAL_SPI_MspInit+0x80>)
 8001190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001194:	6593      	str	r3, [r2, #88]	@ 0x58
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_SPI_MspInit+0x80>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <HAL_SPI_MspInit+0x80>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <HAL_SPI_MspInit+0x80>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_SPI_MspInit+0x80>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011ba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011cc:	2306      	movs	r3, #6
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <HAL_SPI_MspInit+0x84>)
 80011d8:	f000 fce0 	bl	8001b9c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	@ 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40003c00 	.word	0x40003c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	48000800 	.word	0x48000800

080011f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001210:	d130      	bne.n	8001274 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_TIM_Base_MspInit+0x8c>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	4a19      	ldr	r2, [pc, #100]	@ (800127c <HAL_TIM_Base_MspInit+0x8c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6593      	str	r3, [r2, #88]	@ 0x58
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_TIM_Base_MspInit+0x8c>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_TIM_Base_MspInit+0x8c>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a13      	ldr	r2, [pc, #76]	@ (800127c <HAL_TIM_Base_MspInit+0x8c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_TIM_Base_MspInit+0x8c>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001242:	2308      	movs	r3, #8
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001252:	2301      	movs	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001260:	f000 fc9c 	bl	8001b9c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2105      	movs	r1, #5
 8001268:	201c      	movs	r0, #28
 800126a:	f000 fb54 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800126e:	201c      	movs	r0, #28
 8001270:	f000 fb6d 	bl	800194e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	@ 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0ae      	sub	sp, #184	@ 0xb8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2288      	movs	r2, #136	@ 0x88
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fe81 	bl	8008fa8 <memset>
  if(huart->Instance==USART1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a42      	ldr	r2, [pc, #264]	@ (80013b4 <HAL_UART_MspInit+0x134>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d13b      	bne.n	8001328 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b4:	2300      	movs	r3, #0
 80012b6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 f807 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012c8:	f7ff fe1a 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012cc:	4b3a      	ldr	r3, [pc, #232]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 80012ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d0:	4a39      	ldr	r2, [pc, #228]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 80012d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012d8:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b34      	ldr	r3, [pc, #208]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e8:	4a33      	ldr	r2, [pc, #204]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f0:	4b31      	ldr	r3, [pc, #196]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80012fc:	23c0      	movs	r3, #192	@ 0xc0
 80012fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001314:	2307      	movs	r3, #7
 8001316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800131e:	4619      	mov	r1, r3
 8001320:	4826      	ldr	r0, [pc, #152]	@ (80013bc <HAL_UART_MspInit+0x13c>)
 8001322:	f000 fc3b 	bl	8001b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001326:	e040      	b.n	80013aa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a24      	ldr	r2, [pc, #144]	@ (80013c0 <HAL_UART_MspInit+0x140>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d13b      	bne.n	80013aa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001332:	2304      	movs	r3, #4
 8001334:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001336:	2300      	movs	r3, #0
 8001338:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4618      	mov	r0, r3
 8001340:	f001 ffc6 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800134a:	f7ff fdd9 	bl	8000f00 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001358:	6593      	str	r3, [r2, #88]	@ 0x58
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a13      	ldr	r2, [pc, #76]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <HAL_UART_MspInit+0x138>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800137e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001398:	2307      	movs	r3, #7
 800139a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <HAL_UART_MspInit+0x144>)
 80013a6:	f000 fbf9 	bl	8001b9c <HAL_GPIO_Init>
}
 80013aa:	bf00      	nop
 80013ac:	37b8      	adds	r7, #184	@ 0xb8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000400 	.word	0x48000400
 80013c0:	40004800 	.word	0x40004800
 80013c4:	48000c00 	.word	0x48000c00

080013c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0ac      	sub	sp, #176	@ 0xb0
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2288      	movs	r2, #136	@ 0x88
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f007 fddd 	bl	8008fa8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013f6:	d17c      	bne.n	80014f2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001402:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001406:	2301      	movs	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800140e:	2318      	movs	r3, #24
 8001410:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001412:	2307      	movs	r3, #7
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800141e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001422:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f001 ff51 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001434:	f7ff fd64 	bl	8000f00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143c:	4a2f      	ldr	r2, [pc, #188]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001450:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146e:	f000 fb95 	bl	8001b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001472:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001476:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800148c:	230a      	movs	r3, #10
 800148e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001496:	4619      	mov	r1, r3
 8001498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149c:	f000 fb7e 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a4:	4a15      	ldr	r2, [pc, #84]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d114      	bne.n	80014ee <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80014dc:	f001 f82c 	bl	8002538 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e4:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <HAL_PCD_MspInit+0x134>)
 80014e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80014ec:	e001      	b.n	80014f2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80014ee:	f001 f823 	bl	8002538 <HAL_PWREx_EnableVddUSB>
}
 80014f2:	bf00      	nop
 80014f4:	37b0      	adds	r7, #176	@ 0xb0
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <NMI_Handler+0x4>

08001508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <MemManage_Handler+0x4>

08001518 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <UsageFault_Handler+0x4>

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f8cd 	bl	80016d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800153e:	f006 fbb7 	bl	8007cb0 <xTaskGetSchedulerState>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	d001      	beq.n	800154c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001548:	f007 faae 	bl	8008aa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001554:	2020      	movs	r0, #32
 8001556:	f000 fcfd 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800155a:	2040      	movs	r0, #64	@ 0x40
 800155c:	f000 fcfa 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001560:	2080      	movs	r0, #128	@ 0x80
 8001562:	f000 fcf7 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001566:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800156a:	f000 fcf3 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <TIM2_IRQHandler+0x10>)
 800157a:	f002 fcdf 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000160 	.word	0x20000160

08001588 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800158c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001590:	f000 fce0 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001594:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001598:	f000 fcdc 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800159c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015a0:	f000 fcd8 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80015a4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80015a8:	f000 fcd4 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80015ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80015b0:	f000 fcd0 	bl	8001f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <SystemInit+0x20>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <SystemInit+0x20>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001614 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff ffea 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	@ (8001618 <LoopForever+0x6>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	@ (800161c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <LoopForever+0xe>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001628 <LoopForever+0x16>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f007 fcd5 	bl	8008fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160e:	f7fe ff57 	bl	80004c0 <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001614:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001620:	080091a4 	.word	0x080091a4
  ldr r2, =_sbss
 8001624:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001628:	200020f4 	.word	0x200020f4

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>

0800162e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 f961 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163e:	200f      	movs	r0, #15
 8001640:	f000 f80e 	bl	8001660 <HAL_InitTick>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	e001      	b.n	8001654 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001650:	f7ff fc5c 	bl	8000f0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001654:	79fb      	ldrb	r3, [r7, #7]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_InitTick+0x6c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d023      	beq.n	80016bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001674:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <HAL_InitTick+0x70>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_InitTick+0x6c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f96d 	bl	800196a <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d809      	bhi.n	80016b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016a4:	f000 f937 	bl	8001916 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_InitTick+0x74>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e007      	b.n	80016c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e004      	b.n	80016c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e001      	b.n	80016c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	200007c4 	.word	0x200007c4

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200007c4 	.word	0x200007c4

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	@ (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	@ (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0ac      	b.n	8001af0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f8b2 	bl	8001b04 <DFSDM_GetChannelFromInstance>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a55      	ldr	r2, [pc, #340]	@ (8001af8 <HAL_DFSDM_ChannelInit+0x174>)
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e09f      	b.n	8001af0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fad3 	bl	8000f5c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80019b6:	4b51      	ldr	r3, [pc, #324]	@ (8001afc <HAL_DFSDM_ChannelInit+0x178>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	4a4f      	ldr	r2, [pc, #316]	@ (8001afc <HAL_DFSDM_ChannelInit+0x178>)
 80019be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80019c0:	4b4e      	ldr	r3, [pc, #312]	@ (8001afc <HAL_DFSDM_ChannelInit+0x178>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d125      	bne.n	8001a14 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80019c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80019d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4948      	ldr	r1, [pc, #288]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019e2:	4b47      	ldr	r3, [pc, #284]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a46      	ldr	r2, [pc, #280]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 80019e8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80019ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	791b      	ldrb	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80019f6:	4b42      	ldr	r3, [pc, #264]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	493f      	ldr	r1, [pc, #252]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a08:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a12:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001a22:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a32:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a38:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 020f 	bic.w	r2, r2, #15
 8001a50:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001a78:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f002 0207 	and.w	r2, r2, #7
 8001aa4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f810 	bl	8001b04 <DFSDM_GetChannelFromInstance>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4904      	ldr	r1, [pc, #16]	@ (8001af8 <HAL_DFSDM_ChannelInit+0x174>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200007cc 	.word	0x200007cc
 8001afc:	200007c8 	.word	0x200007c8
 8001b00:	40016000 	.word	0x40016000

08001b04 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <DFSDM_GetChannelFromInstance+0x7c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d102      	bne.n	8001b1a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e02b      	b.n	8001b72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	@ (8001b84 <DFSDM_GetChannelFromInstance+0x80>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d102      	bne.n	8001b28 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e024      	b.n	8001b72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <DFSDM_GetChannelFromInstance+0x84>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d102      	bne.n	8001b36 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e01d      	b.n	8001b72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <DFSDM_GetChannelFromInstance+0x88>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d102      	bne.n	8001b44 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e016      	b.n	8001b72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <DFSDM_GetChannelFromInstance+0x8c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d102      	bne.n	8001b52 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e00f      	b.n	8001b72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <DFSDM_GetChannelFromInstance+0x90>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d102      	bne.n	8001b60 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001b5a:	2306      	movs	r3, #6
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e008      	b.n	8001b72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <DFSDM_GetChannelFromInstance+0x94>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d102      	bne.n	8001b6e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	e001      	b.n	8001b72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40016000 	.word	0x40016000
 8001b84:	40016020 	.word	0x40016020
 8001b88:	40016040 	.word	0x40016040
 8001b8c:	40016080 	.word	0x40016080
 8001b90:	400160a0 	.word	0x400160a0
 8001b94:	400160c0 	.word	0x400160c0
 8001b98:	400160e0 	.word	0x400160e0

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e17f      	b.n	8001eac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8171 	beq.w	8001ea6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d005      	beq.n	8001bdc <HAL_GPIO_Init+0x40>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d118      	bne.n	8001c7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	6939      	ldr	r1, [r7, #16]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80ac 	beq.w	8001ea6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ecc <HAL_GPIO_Init+0x330>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	4a5e      	ldr	r2, [pc, #376]	@ (8001ecc <HAL_GPIO_Init+0x330>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ecc <HAL_GPIO_Init+0x330>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d66:	4a5a      	ldr	r2, [pc, #360]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d90:	d025      	beq.n	8001dde <HAL_GPIO_Init+0x242>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	@ (8001ed4 <HAL_GPIO_Init+0x338>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01f      	beq.n	8001dda <HAL_GPIO_Init+0x23e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed8 <HAL_GPIO_Init+0x33c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x23a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4d      	ldr	r2, [pc, #308]	@ (8001edc <HAL_GPIO_Init+0x340>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x236>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee0 <HAL_GPIO_Init+0x344>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x232>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ee4 <HAL_GPIO_Init+0x348>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x22e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee8 <HAL_GPIO_Init+0x34c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x22a>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00c      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e00a      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dca:	2305      	movs	r3, #5
 8001dcc:	e008      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dce:	2304      	movs	r3, #4
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e004      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x244>
 8001dde:	2300      	movs	r3, #0
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	f002 0203 	and.w	r2, r2, #3
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	4093      	lsls	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df0:	4937      	ldr	r1, [pc, #220]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e22:	4a32      	ldr	r2, [pc, #200]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e28:	4b30      	ldr	r3, [pc, #192]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4c:	4a27      	ldr	r2, [pc, #156]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e52:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e76:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ea0:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f47f ae78 	bne.w	8001bac <HAL_GPIO_Init+0x10>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	48000800 	.word	0x48000800
 8001edc:	48000c00 	.word	0x48000c00
 8001ee0:	48001000 	.word	0x48001000
 8001ee4:	48001400 	.word	0x48001400
 8001ee8:	48001800 	.word	0x48001800
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43d9      	mvns	r1, r3
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	400b      	ands	r3, r1
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fee0 	bl	8000d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40010400 	.word	0x40010400

08001f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e08d      	b.n	80020b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff f83a 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	@ 0x24
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fe4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	e006      	b.n	800200c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800200a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d108      	bne.n	8002026 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	e007      	b.n	8002036 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69d9      	ldr	r1, [r3, #28]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d138      	bne.n	8002142 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020da:	2302      	movs	r3, #2
 80020dc:	e032      	b.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2224      	movs	r2, #36	@ 0x24
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800210c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	d139      	bne.n	80021da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002170:	2302      	movs	r3, #2
 8002172:	e033      	b.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	@ 0x24
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
  }
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e101      	b.n	80023fe <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff f8da 	bl	80013c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f002 ffb4 	bl	8005194 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7c1a      	ldrb	r2, [r3, #16]
 8002234:	f88d 2000 	strb.w	r2, [sp]
 8002238:	3304      	adds	r3, #4
 800223a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223c:	f002 ff7d 	bl	800513a <USB_CoreInit>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0d5      	b.n	80023fe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f002 ffac 	bl	80051b6 <USB_SetCurrentMode>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0c6      	b.n	80023fe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e04a      	b.n	800230c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	3315      	adds	r3, #21
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3314      	adds	r3, #20
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	b298      	uxth	r0, r3
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	332e      	adds	r3, #46	@ 0x2e
 80022b2:	4602      	mov	r2, r0
 80022b4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3318      	adds	r3, #24
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	331c      	adds	r3, #28
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3320      	adds	r3, #32
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3324      	adds	r3, #36	@ 0x24
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	3301      	adds	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	429a      	cmp	r2, r3
 8002314:	d3af      	bcc.n	8002276 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e044      	b.n	80023a6 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	3301      	adds	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	791b      	ldrb	r3, [r3, #4]
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d3b5      	bcc.n	800231c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7c1a      	ldrb	r2, [r3, #16]
 80023b8:	f88d 2000 	strb.w	r2, [sp]
 80023bc:	3304      	adds	r3, #4
 80023be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c0:	f002 ff46 	bl	8005250 <USB_DevInit>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e013      	b.n	80023fe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7b1b      	ldrb	r3, [r3, #12]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d102      	bne.n	80023f2 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f80a 	bl	8002406 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 f8eb 	bl	80055d2 <USB_DevDisconnect>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	f043 0303 	orr.w	r3, r3, #3
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40007000 	.word	0x40007000

08002470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <HAL_PWREx_GetVoltageRange+0x18>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40007000 	.word	0x40007000

0800248c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800249a:	d130      	bne.n	80024fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800249c:	4b23      	ldr	r3, [pc, #140]	@ (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024a8:	d038      	beq.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024aa:	4b20      	ldr	r3, [pc, #128]	@ (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024b2:	4a1e      	ldr	r2, [pc, #120]	@ (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2232      	movs	r2, #50	@ 0x32
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0c9b      	lsrs	r3, r3, #18
 80024cc:	3301      	adds	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d0:	e002      	b.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e4:	d102      	bne.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f2      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024f8:	d110      	bne.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e00f      	b.n	800251e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250a:	d007      	beq.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800250c:	4b07      	ldr	r3, [pc, #28]	@ (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002514:	4a05      	ldr	r2, [pc, #20]	@ (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000
 8002530:	20000000 	.word	0x20000000
 8002534:	431bde83 	.word	0x431bde83

08002538 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_PWREx_EnableVddUSB+0x1c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002542:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002546:	6053      	str	r3, [r2, #4]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40007000 	.word	0x40007000

08002558 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af02      	add	r7, sp, #8
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff f8ce 	bl	8001700 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e063      	b.n	8002638 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10b      	bne.n	8002594 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7fe fdab 	bl	80010e0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800258a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f858 	bl	8002644 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	021a      	lsls	r2, r3, #8
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	2120      	movs	r1, #32
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f850 	bl	8002660 <QSPI_WaitFlagStateUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80025c4:	7afb      	ldrb	r3, [r7, #11]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d131      	bne.n	800262e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80025d4:	f023 0310 	bic.w	r3, r3, #16
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6852      	ldr	r2, [r2, #4]
 80025dc:	0611      	lsls	r1, r2, #24
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <HAL_QSPI_Init+0xe8>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6912      	ldr	r2, [r2, #16]
 80025fa:	0411      	lsls	r1, r2, #16
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6952      	ldr	r2, [r2, #20]
 8002600:	4311      	orrs	r1, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6992      	ldr	r2, [r2, #24]
 8002606:	4311      	orrs	r1, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002636:	7afb      	ldrb	r3, [r7, #11]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	ffe0f8fe 	.word	0xffe0f8fe

08002644 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002670:	e01a      	b.n	80026a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002678:	d016      	beq.n	80026a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7ff f841 	bl	8001700 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2204      	movs	r2, #4
 8002694:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e00e      	b.n	80026c6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1d6      	bne.n	8002672 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e3ca      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e2:	4b97      	ldr	r3, [pc, #604]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ec:	4b94      	ldr	r3, [pc, #592]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80e4 	beq.w	80028cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_RCC_OscConfig+0x4a>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b0c      	cmp	r3, #12
 800270e:	f040 808b 	bne.w	8002828 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 8087 	bne.w	8002828 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800271a:	4b89      	ldr	r3, [pc, #548]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x62>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e3a2      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	4b82      	ldr	r3, [pc, #520]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <HAL_RCC_OscConfig+0x7c>
 8002742:	4b7f      	ldr	r3, [pc, #508]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800274a:	e005      	b.n	8002758 <HAL_RCC_OscConfig+0x88>
 800274c:	4b7c      	ldr	r3, [pc, #496]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002758:	4293      	cmp	r3, r2
 800275a:	d223      	bcs.n	80027a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd55 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e383      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002770:	4b73      	ldr	r3, [pc, #460]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a72      	ldr	r2, [pc, #456]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b70      	ldr	r3, [pc, #448]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	496d      	ldr	r1, [pc, #436]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278e:	4b6c      	ldr	r3, [pc, #432]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	4968      	ldr	r1, [pc, #416]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
 80027a2:	e025      	b.n	80027f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a4:	4b66      	ldr	r3, [pc, #408]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a65      	ldr	r2, [pc, #404]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027aa:	f043 0308 	orr.w	r3, r3, #8
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4960      	ldr	r1, [pc, #384]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	495b      	ldr	r1, [pc, #364]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fd15 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e343      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f0:	f000 fc4a 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b52      	ldr	r3, [pc, #328]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	4950      	ldr	r1, [pc, #320]	@ (8002944 <HAL_RCC_OscConfig+0x274>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	4a4e      	ldr	r2, [pc, #312]	@ (8002948 <HAL_RCC_OscConfig+0x278>)
 800280e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002810:	4b4e      	ldr	r3, [pc, #312]	@ (800294c <HAL_RCC_OscConfig+0x27c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe ff23 	bl	8001660 <HAL_InitTick>
 800281a:	4603      	mov	r3, r0
 800281c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d052      	beq.n	80028ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	e327      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d032      	beq.n	8002896 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002830:	4b43      	ldr	r3, [pc, #268]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a42      	ldr	r2, [pc, #264]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800283c:	f7fe ff60 	bl	8001700 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002844:	f7fe ff5c 	bl	8001700 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e310      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002856:	4b3a      	ldr	r3, [pc, #232]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002862:	4b37      	ldr	r3, [pc, #220]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a36      	ldr	r2, [pc, #216]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4931      	ldr	r1, [pc, #196]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002880:	4b2f      	ldr	r3, [pc, #188]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	492c      	ldr	r1, [pc, #176]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e01a      	b.n	80028cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002896:	4b2a      	ldr	r3, [pc, #168]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a29      	ldr	r2, [pc, #164]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a2:	f7fe ff2d 	bl	8001700 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028aa:	f7fe ff29 	bl	8001700 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e2dd      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028bc:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x1da>
 80028c8:	e000      	b.n	80028cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d074      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x21a>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d10e      	bne.n	8002902 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d10b      	bne.n	8002902 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d064      	beq.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d160      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e2ba      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x24a>
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0b      	ldr	r2, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e026      	b.n	8002968 <HAL_RCC_OscConfig+0x298>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002922:	d115      	bne.n	8002950 <HAL_RCC_OscConfig+0x280>
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800292a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a02      	ldr	r2, [pc, #8]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x298>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	0800914c 	.word	0x0800914c
 8002948:	20000000 	.word	0x20000000
 800294c:	20000004 	.word	0x20000004
 8002950:	4ba0      	ldr	r3, [pc, #640]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a9f      	ldr	r2, [pc, #636]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a9c      	ldr	r2, [pc, #624]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fec6 	bl	8001700 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe fec2 	bl	8001700 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e276      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4b92      	ldr	r3, [pc, #584]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x2a8>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe feb2 	bl	8001700 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe feae 	bl	8001700 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	@ 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e262      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b2:	4b88      	ldr	r3, [pc, #544]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2d0>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d060      	beq.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x310>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d116      	bne.n	8002a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_OscConfig+0x328>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e23f      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b76      	ldr	r3, [pc, #472]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	4973      	ldr	r1, [pc, #460]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	e040      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d023      	beq.n	8002a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a16:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe fe6d 	bl	8001700 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fe69 	bl	8001700 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e21d      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3c:	4b65      	ldr	r3, [pc, #404]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b62      	ldr	r3, [pc, #392]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	495f      	ldr	r1, [pc, #380]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e018      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fe49 	bl	8001700 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a72:	f7fe fe45 	bl	8001700 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1f9      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a84:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d03c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01c      	beq.n	8002ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fe24 	bl	8001700 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fe20 	bl	8001700 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1d4      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ace:	4b41      	ldr	r3, [pc, #260]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <HAL_RCC_OscConfig+0x3ec>
 8002adc:	e01b      	b.n	8002b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7fe fe07 	bl	8001700 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe fe03 	bl	8001700 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1b7      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b08:	4b32      	ldr	r3, [pc, #200]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ef      	bne.n	8002af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a6 	beq.w	8002c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b28:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	4a26      	ldr	r2, [pc, #152]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b40:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b50:	4b21      	ldr	r3, [pc, #132]	@ (8002bd8 <HAL_RCC_OscConfig+0x508>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d118      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd8 <HAL_RCC_OscConfig+0x508>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd8 <HAL_RCC_OscConfig+0x508>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fdca 	bl	8001700 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe fdc6 	bl	8001700 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e17a      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_RCC_OscConfig+0x508>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4d8>
 8002b96:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba6:	e029      	b.n	8002bfc <HAL_RCC_OscConfig+0x52c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d115      	bne.n	8002bdc <HAL_RCC_OscConfig+0x50c>
 8002bb0:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc0:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc6:	4a03      	ldr	r2, [pc, #12]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd0:	e014      	b.n	8002bfc <HAL_RCC_OscConfig+0x52c>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a9b      	ldr	r2, [pc, #620]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bec:	4b98      	ldr	r3, [pc, #608]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	4a97      	ldr	r2, [pc, #604]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d016      	beq.n	8002c32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fd7c 	bl	8001700 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fd78 	bl	8001700 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e12a      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c22:	4b8b      	ldr	r3, [pc, #556]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ed      	beq.n	8002c0c <HAL_RCC_OscConfig+0x53c>
 8002c30:	e015      	b.n	8002c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fd65 	bl	8001700 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fd61 	bl	8001700 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e113      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c50:	4b7f      	ldr	r3, [pc, #508]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ed      	bne.n	8002c3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b7a      	ldr	r3, [pc, #488]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	4a79      	ldr	r2, [pc, #484]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80fe 	beq.w	8002e76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	f040 80d0 	bne.w	8002e24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c84:	4b72      	ldr	r3, [pc, #456]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d130      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d127      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11f      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cc4:	2a07      	cmp	r2, #7
 8002cc6:	bf14      	ite	ne
 8002cc8:	2201      	movne	r2, #1
 8002cca:	2200      	moveq	r2, #0
 8002ccc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d113      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d06e      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	d069      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d00:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d0c:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0ad      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4b      	ldr	r2, [pc, #300]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d28:	f7fe fcea 	bl	8001700 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe fce6 	bl	8001700 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e09a      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d42:	4b43      	ldr	r3, [pc, #268]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4e:	4b40      	ldr	r3, [pc, #256]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b40      	ldr	r3, [pc, #256]	@ (8002e54 <HAL_RCC_OscConfig+0x784>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d5e:	3a01      	subs	r2, #1
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	4311      	orrs	r1, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d68:	0212      	lsls	r2, r2, #8
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d70:	0852      	lsrs	r2, r2, #1
 8002d72:	3a01      	subs	r2, #1
 8002d74:	0552      	lsls	r2, r2, #21
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d7c:	0852      	lsrs	r2, r2, #1
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	0652      	lsls	r2, r2, #25
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d88:	0912      	lsrs	r2, r2, #4
 8002d8a:	0452      	lsls	r2, r2, #17
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	4930      	ldr	r1, [pc, #192]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d94:	4b2e      	ldr	r3, [pc, #184]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2d      	ldr	r2, [pc, #180]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dac:	f7fe fca8 	bl	8001700 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe fca4 	bl	8001700 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e058      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd2:	e050      	b.n	8002e76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e04f      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d148      	bne.n	8002e76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002de4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a19      	ldr	r2, [pc, #100]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df0:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dfc:	f7fe fc80 	bl	8001700 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fc7c 	bl	8001700 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e030      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e16:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x734>
 8002e22:	e028      	b.n	8002e76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d023      	beq.n	8002e72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a08      	ldr	r2, [pc, #32]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe fc63 	bl	8001700 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3c:	e00c      	b.n	8002e58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe fc5f 	bl	8001700 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d905      	bls.n	8002e58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e013      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
 8002e50:	40021000 	.word	0x40021000
 8002e54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <HAL_RCC_OscConfig+0x7b0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ec      	bne.n	8002e3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_RCC_OscConfig+0x7b0>)
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	4905      	ldr	r1, [pc, #20]	@ (8002e80 <HAL_RCC_OscConfig+0x7b0>)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCC_OscConfig+0x7b4>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60cb      	str	r3, [r1, #12]
 8002e70:	e001      	b.n	8002e76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	feeefffc 	.word	0xfeeefffc

08002e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0e7      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b75      	ldr	r3, [pc, #468]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d910      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b72      	ldr	r3, [pc, #456]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	4970      	ldr	r1, [pc, #448]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b6e      	ldr	r3, [pc, #440]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0cf      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d908      	bls.n	8002efa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b63      	ldr	r3, [pc, #396]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4960      	ldr	r1, [pc, #384]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04c      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d121      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0a6      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f26:	4b54      	ldr	r3, [pc, #336]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d115      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e09a      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e08e      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e086      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b46      	ldr	r3, [pc, #280]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4943      	ldr	r1, [pc, #268]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fe fbc6 	bl	8001700 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fbc2 	bl	8001700 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e06e      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b31      	ldr	r3, [pc, #196]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d208      	bcs.n	8002fce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	492b      	ldr	r1, [pc, #172]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d210      	bcs.n	8002ffe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fdc:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 0207 	bic.w	r2, r3, #7
 8002fe4:	4923      	ldr	r1, [pc, #140]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e036      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300a:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4918      	ldr	r1, [pc, #96]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003028:	4b13      	ldr	r3, [pc, #76]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4910      	ldr	r1, [pc, #64]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800303c:	f000 f824 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	490b      	ldr	r1, [pc, #44]	@ (800307c <HAL_RCC_ClockConfig+0x1f4>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 800305a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800305c:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1fc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe fafd 	bl	8001660 <HAL_InitTick>
 8003066:	4603      	mov	r3, r0
 8003068:	72fb      	strb	r3, [r7, #11]

  return status;
 800306a:	7afb      	ldrb	r3, [r7, #11]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40022000 	.word	0x40022000
 8003078:	40021000 	.word	0x40021000
 800307c:	0800914c 	.word	0x0800914c
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	4b3e      	ldr	r3, [pc, #248]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x34>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d121      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d11e      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030bc:	4b34      	ldr	r3, [pc, #208]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c8:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e005      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d102      	bne.n	8003106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003100:	4b25      	ldr	r3, [pc, #148]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x110>)
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e004      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d101      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800310c:	4b23      	ldr	r3, [pc, #140]	@ (800319c <HAL_RCC_GetSysClockFreq+0x114>)
 800310e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d134      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0xa6>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d003      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0xac>
 800312c:	e005      	b.n	800313a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800312e:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x110>)
 8003130:	617b      	str	r3, [r7, #20]
      break;
 8003132:	e005      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003134:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_RCC_GetSysClockFreq+0x114>)
 8003136:	617b      	str	r3, [r7, #20]
      break;
 8003138:	e002      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	617b      	str	r3, [r7, #20]
      break;
 800313e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	3301      	adds	r3, #1
 800314c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	fb03 f202 	mul.w	r2, r3, r2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003166:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	0e5b      	lsrs	r3, r3, #25
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	3301      	adds	r3, #1
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003180:	69bb      	ldr	r3, [r7, #24]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	@ 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	08009164 	.word	0x08009164
 8003198:	00f42400 	.word	0x00f42400
 800319c:	007a1200 	.word	0x007a1200

080031a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031bc:	f7ff fff0 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4904      	ldr	r1, [pc, #16]	@ (80031e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	0800915c 	.word	0x0800915c

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031e8:	f7ff ffda 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0adb      	lsrs	r3, r3, #11
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4904      	ldr	r1, [pc, #16]	@ (800320c <HAL_RCC_GetPCLK2Freq+0x28>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	0800915c 	.word	0x0800915c

08003210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800321c:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003228:	f7ff f922 	bl	8002470 <HAL_PWREx_GetVoltageRange>
 800322c:	6178      	str	r0, [r7, #20]
 800322e:	e014      	b.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b25      	ldr	r3, [pc, #148]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	4a24      	ldr	r2, [pc, #144]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	@ 0x58
 800323c:	4b22      	ldr	r3, [pc, #136]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003248:	f7ff f912 	bl	8002470 <HAL_PWREx_GetVoltageRange>
 800324c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800324e:	4b1e      	ldr	r3, [pc, #120]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003258:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003260:	d10b      	bne.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b80      	cmp	r3, #128	@ 0x80
 8003266:	d919      	bls.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2ba0      	cmp	r3, #160	@ 0xa0
 800326c:	d902      	bls.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800326e:	2302      	movs	r3, #2
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e013      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003274:	2301      	movs	r3, #1
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e010      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b80      	cmp	r3, #128	@ 0x80
 800327e:	d902      	bls.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003280:	2303      	movs	r3, #3
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e00a      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b80      	cmp	r3, #128	@ 0x80
 800328a:	d102      	bne.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800328c:	2302      	movs	r3, #2
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e004      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b70      	cmp	r3, #112	@ 0x70
 8003296:	d101      	bne.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003298:	2301      	movs	r3, #1
 800329a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 0207 	bic.w	r2, r3, #7
 80032a4:	4909      	ldr	r1, [pc, #36]	@ (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032ac:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40022000 	.word	0x40022000

080032d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d8:	2300      	movs	r3, #0
 80032da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032dc:	2300      	movs	r3, #0
 80032de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d041      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032f4:	d02a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032fa:	d824      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003300:	d008      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003306:	d81e      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003310:	d010      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003312:	e018      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003314:	4b86      	ldr	r3, [pc, #536]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4a85      	ldr	r2, [pc, #532]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003320:	e015      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f000 facb 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003332:	e00c      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3320      	adds	r3, #32
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fbb6 	bl	8003aac <RCCEx_PLLSAI2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	74fb      	strb	r3, [r7, #19]
      break;
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800334c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003354:	4b76      	ldr	r3, [pc, #472]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003362:	4973      	ldr	r1, [pc, #460]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800336a:	e001      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d041      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003380:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003384:	d02a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800338a:	d824      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800338c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003390:	d008      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003396:	d81e      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800339c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a0:	d010      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033a2:	e018      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033a4:	4b62      	ldr	r3, [pc, #392]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a61      	ldr	r2, [pc, #388]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b0:	e015      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fa83 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c2:	e00c      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3320      	adds	r3, #32
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fb6e 	bl	8003aac <RCCEx_PLLSAI2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	74fb      	strb	r3, [r7, #19]
      break;
 80033da:	e000      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033e4:	4b52      	ldr	r3, [pc, #328]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033f2:	494f      	ldr	r1, [pc, #316]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033fa:	e001      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a0 	beq.w	800354e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003412:	4b47      	ldr	r3, [pc, #284]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342c:	4a40      	ldr	r2, [pc, #256]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003432:	6593      	str	r3, [r2, #88]	@ 0x58
 8003434:	4b3e      	ldr	r3, [pc, #248]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003440:	2301      	movs	r3, #1
 8003442:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003444:	4b3b      	ldr	r3, [pc, #236]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a3a      	ldr	r2, [pc, #232]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003450:	f7fe f956 	bl	8001700 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003456:	e009      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003458:	f7fe f952 	bl	8001700 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d902      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	74fb      	strb	r3, [r7, #19]
        break;
 800346a:	e005      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800346c:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ef      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d15c      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800347e:	4b2c      	ldr	r3, [pc, #176]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003488:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01f      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	429a      	cmp	r2, r3
 800349a:	d019      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800349c:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034a8:	4b21      	ldr	r3, [pc, #132]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	4a20      	ldr	r2, [pc, #128]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	4a1c      	ldr	r2, [pc, #112]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034c8:	4a19      	ldr	r2, [pc, #100]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fe f911 	bl	8001700 <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e0:	e00b      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe f90d 	bl	8001700 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d902      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	74fb      	strb	r3, [r7, #19]
            break;
 80034f8:	e006      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ec      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350e:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800351e:	4904      	ldr	r1, [pc, #16]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003526:	e009      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353c:	7c7b      	ldrb	r3, [r7, #17]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003542:	4b9e      	ldr	r3, [pc, #632]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	4a9d      	ldr	r2, [pc, #628]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800354c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355a:	4b98      	ldr	r3, [pc, #608]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003560:	f023 0203 	bic.w	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	4994      	ldr	r1, [pc, #592]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800357c:	4b8f      	ldr	r3, [pc, #572]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f023 020c 	bic.w	r2, r3, #12
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358a:	498c      	ldr	r1, [pc, #560]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800359e:	4b87      	ldr	r3, [pc, #540]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	4983      	ldr	r1, [pc, #524]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c0:	4b7e      	ldr	r3, [pc, #504]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	497b      	ldr	r1, [pc, #492]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035e2:	4b76      	ldr	r3, [pc, #472]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f0:	4972      	ldr	r1, [pc, #456]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003604:	4b6d      	ldr	r3, [pc, #436]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	496a      	ldr	r1, [pc, #424]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003626:	4b65      	ldr	r3, [pc, #404]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	4961      	ldr	r1, [pc, #388]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003648:	4b5c      	ldr	r3, [pc, #368]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003656:	4959      	ldr	r1, [pc, #356]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800366a:	4b54      	ldr	r3, [pc, #336]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003670:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	4950      	ldr	r1, [pc, #320]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800368c:	4b4b      	ldr	r3, [pc, #300]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003692:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369a:	4948      	ldr	r1, [pc, #288]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ae:	4b43      	ldr	r3, [pc, #268]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036bc:	493f      	ldr	r1, [pc, #252]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d028      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d0:	4b3a      	ldr	r3, [pc, #232]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036de:	4937      	ldr	r1, [pc, #220]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ee:	d106      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f0:	4b32      	ldr	r3, [pc, #200]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a31      	ldr	r2, [pc, #196]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036fa:	60d3      	str	r3, [r2, #12]
 80036fc:	e011      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003706:	d10c      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f8d8 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d028      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800372e:	4b23      	ldr	r3, [pc, #140]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	491f      	ldr	r1, [pc, #124]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800374c:	d106      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374e:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4a1a      	ldr	r2, [pc, #104]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003758:	60d3      	str	r3, [r2, #12]
 800375a:	e011      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003760:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f8a9 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02b      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800378c:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379a:	4908      	ldr	r1, [pc, #32]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037aa:	d109      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ac:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a02      	ldr	r2, [pc, #8]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037b6:	60d3      	str	r3, [r2, #12]
 80037b8:	e014      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f877 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f0:	4b2b      	ldr	r3, [pc, #172]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037fe:	4928      	ldr	r1, [pc, #160]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800380a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800380e:	d10d      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	2102      	movs	r1, #2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f854 	bl	80038c4 <RCCEx_PLLSAI1_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d014      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	74bb      	strb	r3, [r7, #18]
 800382a:	e011      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003834:	d10c      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3320      	adds	r3, #32
 800383a:	2102      	movs	r1, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f935 	bl	8003aac <RCCEx_PLLSAI2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800385c:	4b10      	ldr	r3, [pc, #64]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003862:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800386a:	490d      	ldr	r1, [pc, #52]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800388e:	4904      	ldr	r1, [pc, #16]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003896:	7cbb      	ldrb	r3, [r7, #18]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000

080038a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a04      	ldr	r2, [pc, #16]	@ (80038c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000

080038c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038d2:	4b75      	ldr	r3, [pc, #468]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038de:	4b72      	ldr	r3, [pc, #456]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0203 	and.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d10d      	bne.n	800390a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
       ||
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038f6:	4b6c      	ldr	r3, [pc, #432]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
       ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d047      	beq.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	e044      	b.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d018      	beq.n	800394a <RCCEx_PLLSAI1_Config+0x86>
 8003918:	2b03      	cmp	r3, #3
 800391a:	d825      	bhi.n	8003968 <RCCEx_PLLSAI1_Config+0xa4>
 800391c:	2b01      	cmp	r3, #1
 800391e:	d002      	beq.n	8003926 <RCCEx_PLLSAI1_Config+0x62>
 8003920:	2b02      	cmp	r3, #2
 8003922:	d009      	beq.n	8003938 <RCCEx_PLLSAI1_Config+0x74>
 8003924:	e020      	b.n	8003968 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003926:	4b60      	ldr	r3, [pc, #384]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11d      	bne.n	800396e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003936:	e01a      	b.n	800396e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003938:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003948:	e013      	b.n	8003972 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800394a:	4b57      	ldr	r3, [pc, #348]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003956:	4b54      	ldr	r3, [pc, #336]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003966:	e006      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      break;
 800396c:	e004      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003976:	bf00      	nop
    }

    if(status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800397e:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6819      	ldr	r1, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	3b01      	subs	r3, #1
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	430b      	orrs	r3, r1
 8003994:	4944      	ldr	r1, [pc, #272]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d17d      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039a0:	4b41      	ldr	r3, [pc, #260]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a40      	ldr	r2, [pc, #256]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fd fea8 	bl	8001700 <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039b2:	e009      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b4:	f7fd fea4 	bl	8001700 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d902      	bls.n	80039c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	73fb      	strb	r3, [r7, #15]
        break;
 80039c6:	e005      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039c8:	4b37      	ldr	r3, [pc, #220]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ef      	bne.n	80039b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d160      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d111      	bne.n	8003a04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e0:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6892      	ldr	r2, [r2, #8]
 80039f0:	0211      	lsls	r1, r2, #8
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68d2      	ldr	r2, [r2, #12]
 80039f6:	0912      	lsrs	r2, r2, #4
 80039f8:	0452      	lsls	r2, r2, #17
 80039fa:	430a      	orrs	r2, r1
 80039fc:	492a      	ldr	r1, [pc, #168]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	610b      	str	r3, [r1, #16]
 8003a02:	e027      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d112      	bne.n	8003a30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0a:	4b27      	ldr	r3, [pc, #156]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	0211      	lsls	r1, r2, #8
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6912      	ldr	r2, [r2, #16]
 8003a20:	0852      	lsrs	r2, r2, #1
 8003a22:	3a01      	subs	r2, #1
 8003a24:	0552      	lsls	r2, r2, #21
 8003a26:	430a      	orrs	r2, r1
 8003a28:	491f      	ldr	r1, [pc, #124]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	610b      	str	r3, [r1, #16]
 8003a2e:	e011      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a30:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6892      	ldr	r2, [r2, #8]
 8003a40:	0211      	lsls	r1, r2, #8
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6952      	ldr	r2, [r2, #20]
 8003a46:	0852      	lsrs	r2, r2, #1
 8003a48:	3a01      	subs	r2, #1
 8003a4a:	0652      	lsls	r2, r2, #25
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4916      	ldr	r1, [pc, #88]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a54:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a13      	ldr	r2, [pc, #76]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fd fe4e 	bl	8001700 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a68:	f7fd fe4a 	bl	8001700 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
          break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ef      	beq.n	8003a68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	4904      	ldr	r1, [pc, #16]	@ (8003aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000

08003aac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aba:	4b6a      	ldr	r3, [pc, #424]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d018      	beq.n	8003af8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ac6:	4b67      	ldr	r3, [pc, #412]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0203 	and.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d10d      	bne.n	8003af2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
       ||
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ade:	4b61      	ldr	r3, [pc, #388]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
       ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d047      	beq.n	8003b82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	e044      	b.n	8003b82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d018      	beq.n	8003b32 <RCCEx_PLLSAI2_Config+0x86>
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d825      	bhi.n	8003b50 <RCCEx_PLLSAI2_Config+0xa4>
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d002      	beq.n	8003b0e <RCCEx_PLLSAI2_Config+0x62>
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d009      	beq.n	8003b20 <RCCEx_PLLSAI2_Config+0x74>
 8003b0c:	e020      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b0e:	4b55      	ldr	r3, [pc, #340]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11d      	bne.n	8003b56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b1e:	e01a      	b.n	8003b56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b20:	4b50      	ldr	r3, [pc, #320]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d116      	bne.n	8003b5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b30:	e013      	b.n	8003b5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b32:	4b4c      	ldr	r3, [pc, #304]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b3e:	4b49      	ldr	r3, [pc, #292]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b4e:	e006      	b.n	8003b5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      break;
 8003b54:	e004      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b66:	4b3f      	ldr	r3, [pc, #252]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	4939      	ldr	r1, [pc, #228]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d167      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b88:	4b36      	ldr	r3, [pc, #216]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a35      	ldr	r2, [pc, #212]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b94:	f7fd fdb4 	bl	8001700 <HAL_GetTick>
 8003b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b9a:	e009      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b9c:	f7fd fdb0 	bl	8001700 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d902      	bls.n	8003bb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	73fb      	strb	r3, [r7, #15]
        break;
 8003bae:	e005      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1ef      	bne.n	8003b9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d14a      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d111      	bne.n	8003bec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bc8:	4b26      	ldr	r3, [pc, #152]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6892      	ldr	r2, [r2, #8]
 8003bd8:	0211      	lsls	r1, r2, #8
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	0912      	lsrs	r2, r2, #4
 8003be0:	0452      	lsls	r2, r2, #17
 8003be2:	430a      	orrs	r2, r1
 8003be4:	491f      	ldr	r1, [pc, #124]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	614b      	str	r3, [r1, #20]
 8003bea:	e011      	b.n	8003c10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bec:	4b1d      	ldr	r3, [pc, #116]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bf4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6892      	ldr	r2, [r2, #8]
 8003bfc:	0211      	lsls	r1, r2, #8
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6912      	ldr	r2, [r2, #16]
 8003c02:	0852      	lsrs	r2, r2, #1
 8003c04:	3a01      	subs	r2, #1
 8003c06:	0652      	lsls	r2, r2, #25
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4916      	ldr	r1, [pc, #88]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c10:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a13      	ldr	r2, [pc, #76]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fd fd70 	bl	8001700 <HAL_GetTick>
 8003c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c22:	e009      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c24:	f7fd fd6c 	bl	8001700 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d902      	bls.n	8003c38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	73fb      	strb	r3, [r7, #15]
          break;
 8003c36:	e005      	b.n	8003c44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c38:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ef      	beq.n	8003c24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	4904      	ldr	r1, [pc, #16]	@ (8003c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000

08003c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e095      	b.n	8003da6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d108      	bne.n	8003c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c8a:	d009      	beq.n	8003ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	61da      	str	r2, [r3, #28]
 8003c92:	e005      	b.n	8003ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fa54 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ce0:	d902      	bls.n	8003ce8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e002      	b.n	8003cee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003cf6:	d007      	beq.n	8003d08 <HAL_SPI_Init+0xa0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d00:	d002      	beq.n	8003d08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4a:	ea42 0103 	orr.w	r1, r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	f003 0204 	and.w	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d84:	ea42 0103 	orr.w	r1, r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e049      	b.n	8003e54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7fd fa0b 	bl	80011f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f000 fa9d 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e04f      	b.n	8003f14 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a23      	ldr	r2, [pc, #140]	@ (8003f20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x76>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9e:	d018      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x76>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f24 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x76>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1e      	ldr	r2, [pc, #120]	@ (8003f28 <HAL_TIM_Base_Start_IT+0xcc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x76>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x76>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x76>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d115      	bne.n	8003efe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4b17      	ldr	r3, [pc, #92]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d015      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0xb4>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eea:	d011      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	e008      	b.n	8003f10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e000      	b.n	8003f12 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	00010007 	.word	0x00010007

08003f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f9b2 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f9a4 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f9b5 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0204 	mvn.w	r2, #4
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f98c 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f97e 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f98f 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0208 	mvn.w	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f966 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f958 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f969 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2208      	movs	r2, #8
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f940 	bl	80042f0 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f932 	bl	80042dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f943 	bl	8004304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0201 	mvn.w	r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc fe86 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d104      	bne.n	80040bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80040ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fafd 	bl	80046d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00c      	beq.n	80040fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 faf5 	bl	80046e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00c      	beq.n	800411e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8fd 	bl	8004318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00c      	beq.n	8004142 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f06f 0220 	mvn.w	r2, #32
 800413a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fabd 	bl	80046bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_TIM_ConfigClockSource+0x1c>
 8004162:	2302      	movs	r3, #2
 8004164:	e0b6      	b.n	80042d4 <HAL_TIM_ConfigClockSource+0x18a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004184:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004188:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004190:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a2:	d03e      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0xd8>
 80041a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a8:	f200 8087 	bhi.w	80042ba <HAL_TIM_ConfigClockSource+0x170>
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b0:	f000 8086 	beq.w	80042c0 <HAL_TIM_ConfigClockSource+0x176>
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b8:	d87f      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x170>
 80041ba:	2b70      	cmp	r3, #112	@ 0x70
 80041bc:	d01a      	beq.n	80041f4 <HAL_TIM_ConfigClockSource+0xaa>
 80041be:	2b70      	cmp	r3, #112	@ 0x70
 80041c0:	d87b      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x170>
 80041c2:	2b60      	cmp	r3, #96	@ 0x60
 80041c4:	d050      	beq.n	8004268 <HAL_TIM_ConfigClockSource+0x11e>
 80041c6:	2b60      	cmp	r3, #96	@ 0x60
 80041c8:	d877      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x170>
 80041ca:	2b50      	cmp	r3, #80	@ 0x50
 80041cc:	d03c      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0xfe>
 80041ce:	2b50      	cmp	r3, #80	@ 0x50
 80041d0:	d873      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x170>
 80041d2:	2b40      	cmp	r3, #64	@ 0x40
 80041d4:	d058      	beq.n	8004288 <HAL_TIM_ConfigClockSource+0x13e>
 80041d6:	2b40      	cmp	r3, #64	@ 0x40
 80041d8:	d86f      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x170>
 80041da:	2b30      	cmp	r3, #48	@ 0x30
 80041dc:	d064      	beq.n	80042a8 <HAL_TIM_ConfigClockSource+0x15e>
 80041de:	2b30      	cmp	r3, #48	@ 0x30
 80041e0:	d86b      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x170>
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d060      	beq.n	80042a8 <HAL_TIM_ConfigClockSource+0x15e>
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d867      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x170>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d05c      	beq.n	80042a8 <HAL_TIM_ConfigClockSource+0x15e>
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d05a      	beq.n	80042a8 <HAL_TIM_ConfigClockSource+0x15e>
 80041f2:	e062      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004204:	f000 f9b2 	bl	800456c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004216:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]
      break;
 8004220:	e04f      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004232:	f000 f99b 	bl	800456c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004244:	609a      	str	r2, [r3, #8]
      break;
 8004246:	e03c      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004254:	461a      	mov	r2, r3
 8004256:	f000 f90f 	bl	8004478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2150      	movs	r1, #80	@ 0x50
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f968 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 8004266:	e02c      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004274:	461a      	mov	r2, r3
 8004276:	f000 f92e 	bl	80044d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2160      	movs	r1, #96	@ 0x60
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f958 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 8004286:	e01c      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004294:	461a      	mov	r2, r3
 8004296:	f000 f8ef 	bl	8004478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2140      	movs	r1, #64	@ 0x40
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f948 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 80042a6:	e00c      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f000 f93f 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 80042b8:	e003      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
      break;
 80042be:	e000      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a46      	ldr	r2, [pc, #280]	@ (8004458 <TIM_Base_SetConfig+0x12c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a43      	ldr	r2, [pc, #268]	@ (800445c <TIM_Base_SetConfig+0x130>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a42      	ldr	r2, [pc, #264]	@ (8004460 <TIM_Base_SetConfig+0x134>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a41      	ldr	r2, [pc, #260]	@ (8004464 <TIM_Base_SetConfig+0x138>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a40      	ldr	r2, [pc, #256]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a35      	ldr	r2, [pc, #212]	@ (8004458 <TIM_Base_SetConfig+0x12c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01f      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438c:	d01b      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a32      	ldr	r2, [pc, #200]	@ (800445c <TIM_Base_SetConfig+0x130>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d017      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a31      	ldr	r2, [pc, #196]	@ (8004460 <TIM_Base_SetConfig+0x134>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a30      	ldr	r2, [pc, #192]	@ (8004464 <TIM_Base_SetConfig+0x138>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2e      	ldr	r2, [pc, #184]	@ (800446c <TIM_Base_SetConfig+0x140>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004470 <TIM_Base_SetConfig+0x144>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_Base_SetConfig+0x9a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004474 <TIM_Base_SetConfig+0x148>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a16      	ldr	r2, [pc, #88]	@ (8004458 <TIM_Base_SetConfig+0x12c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00f      	beq.n	8004424 <TIM_Base_SetConfig+0xf8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a18      	ldr	r2, [pc, #96]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00b      	beq.n	8004424 <TIM_Base_SetConfig+0xf8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a17      	ldr	r2, [pc, #92]	@ (800446c <TIM_Base_SetConfig+0x140>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d007      	beq.n	8004424 <TIM_Base_SetConfig+0xf8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a16      	ldr	r2, [pc, #88]	@ (8004470 <TIM_Base_SetConfig+0x144>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_Base_SetConfig+0xf8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a15      	ldr	r2, [pc, #84]	@ (8004474 <TIM_Base_SetConfig+0x148>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d103      	bne.n	800442c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d105      	bne.n	800444a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	611a      	str	r2, [r3, #16]
  }
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800

08004478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f023 0201 	bic.w	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f023 030a 	bic.w	r3, r3, #10
 80044b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b087      	sub	sp, #28
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f023 0210 	bic.w	r2, r3, #16
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	031b      	lsls	r3, r3, #12
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004512:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	f043 0307 	orr.w	r3, r3, #7
 8004558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	609a      	str	r2, [r3, #8]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	021a      	lsls	r2, r3, #8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	431a      	orrs	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4313      	orrs	r3, r2
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e068      	b.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2e      	ldr	r2, [pc, #184]	@ (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2d      	ldr	r2, [pc, #180]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1e      	ldr	r2, [pc, #120]	@ (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01d      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004636:	d018      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1a      	ldr	r2, [pc, #104]	@ (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a18      	ldr	r2, [pc, #96]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a13      	ldr	r2, [pc, #76]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a14      	ldr	r2, [pc, #80]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10c      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	4313      	orrs	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40014000 	.word	0x40014000

080046bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e040      	b.n	800478c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fdb0 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	@ 0x24
 8004724:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fae0 	bl	8004d04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f825 	bl	8004794 <UART_SetConfig>
 800474a:	4603      	mov	r3, r0
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e01b      	b.n	800478c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fb5f 	bl	8004e48 <UART_CheckIdleState>
 800478a:	4603      	mov	r3, r0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004798:	b08a      	sub	sp, #40	@ 0x28
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4ba4      	ldr	r3, [pc, #656]	@ (8004a54 <UART_SetConfig+0x2c0>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a99      	ldr	r2, [pc, #612]	@ (8004a58 <UART_SetConfig+0x2c4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	4313      	orrs	r3, r2
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a90      	ldr	r2, [pc, #576]	@ (8004a5c <UART_SetConfig+0x2c8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d126      	bne.n	800486c <UART_SetConfig+0xd8>
 800481e:	4b90      	ldr	r3, [pc, #576]	@ (8004a60 <UART_SetConfig+0x2cc>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	2b03      	cmp	r3, #3
 800482a:	d81b      	bhi.n	8004864 <UART_SetConfig+0xd0>
 800482c:	a201      	add	r2, pc, #4	@ (adr r2, 8004834 <UART_SetConfig+0xa0>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004845 	.word	0x08004845
 8004838:	08004855 	.word	0x08004855
 800483c:	0800484d 	.word	0x0800484d
 8004840:	0800485d 	.word	0x0800485d
 8004844:	2301      	movs	r3, #1
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484a:	e116      	b.n	8004a7a <UART_SetConfig+0x2e6>
 800484c:	2302      	movs	r3, #2
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004852:	e112      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004854:	2304      	movs	r3, #4
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e10e      	b.n	8004a7a <UART_SetConfig+0x2e6>
 800485c:	2308      	movs	r3, #8
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004862:	e10a      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004864:	2310      	movs	r3, #16
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486a:	e106      	b.n	8004a7a <UART_SetConfig+0x2e6>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a7c      	ldr	r2, [pc, #496]	@ (8004a64 <UART_SetConfig+0x2d0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d138      	bne.n	80048e8 <UART_SetConfig+0x154>
 8004876:	4b7a      	ldr	r3, [pc, #488]	@ (8004a60 <UART_SetConfig+0x2cc>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d82d      	bhi.n	80048e0 <UART_SetConfig+0x14c>
 8004884:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <UART_SetConfig+0xf8>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048c1 	.word	0x080048c1
 8004890:	080048e1 	.word	0x080048e1
 8004894:	080048e1 	.word	0x080048e1
 8004898:	080048e1 	.word	0x080048e1
 800489c:	080048d1 	.word	0x080048d1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048e1 	.word	0x080048e1
 80048a8:	080048e1 	.word	0x080048e1
 80048ac:	080048c9 	.word	0x080048c9
 80048b0:	080048e1 	.word	0x080048e1
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048d9 	.word	0x080048d9
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e0d8      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80048c8:	2302      	movs	r3, #2
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ce:	e0d4      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80048d0:	2304      	movs	r3, #4
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d6:	e0d0      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80048d8:	2308      	movs	r3, #8
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048de:	e0cc      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80048e0:	2310      	movs	r3, #16
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e6:	e0c8      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004a68 <UART_SetConfig+0x2d4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d125      	bne.n	800493e <UART_SetConfig+0x1aa>
 80048f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a60 <UART_SetConfig+0x2cc>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048fc:	2b30      	cmp	r3, #48	@ 0x30
 80048fe:	d016      	beq.n	800492e <UART_SetConfig+0x19a>
 8004900:	2b30      	cmp	r3, #48	@ 0x30
 8004902:	d818      	bhi.n	8004936 <UART_SetConfig+0x1a2>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d00a      	beq.n	800491e <UART_SetConfig+0x18a>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d814      	bhi.n	8004936 <UART_SetConfig+0x1a2>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <UART_SetConfig+0x182>
 8004910:	2b10      	cmp	r3, #16
 8004912:	d008      	beq.n	8004926 <UART_SetConfig+0x192>
 8004914:	e00f      	b.n	8004936 <UART_SetConfig+0x1a2>
 8004916:	2300      	movs	r3, #0
 8004918:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491c:	e0ad      	b.n	8004a7a <UART_SetConfig+0x2e6>
 800491e:	2302      	movs	r3, #2
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004924:	e0a9      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004926:	2304      	movs	r3, #4
 8004928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492c:	e0a5      	b.n	8004a7a <UART_SetConfig+0x2e6>
 800492e:	2308      	movs	r3, #8
 8004930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004934:	e0a1      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004936:	2310      	movs	r3, #16
 8004938:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493c:	e09d      	b.n	8004a7a <UART_SetConfig+0x2e6>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a4a      	ldr	r2, [pc, #296]	@ (8004a6c <UART_SetConfig+0x2d8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d125      	bne.n	8004994 <UART_SetConfig+0x200>
 8004948:	4b45      	ldr	r3, [pc, #276]	@ (8004a60 <UART_SetConfig+0x2cc>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004952:	2bc0      	cmp	r3, #192	@ 0xc0
 8004954:	d016      	beq.n	8004984 <UART_SetConfig+0x1f0>
 8004956:	2bc0      	cmp	r3, #192	@ 0xc0
 8004958:	d818      	bhi.n	800498c <UART_SetConfig+0x1f8>
 800495a:	2b80      	cmp	r3, #128	@ 0x80
 800495c:	d00a      	beq.n	8004974 <UART_SetConfig+0x1e0>
 800495e:	2b80      	cmp	r3, #128	@ 0x80
 8004960:	d814      	bhi.n	800498c <UART_SetConfig+0x1f8>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <UART_SetConfig+0x1d8>
 8004966:	2b40      	cmp	r3, #64	@ 0x40
 8004968:	d008      	beq.n	800497c <UART_SetConfig+0x1e8>
 800496a:	e00f      	b.n	800498c <UART_SetConfig+0x1f8>
 800496c:	2300      	movs	r3, #0
 800496e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004972:	e082      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004974:	2302      	movs	r3, #2
 8004976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800497a:	e07e      	b.n	8004a7a <UART_SetConfig+0x2e6>
 800497c:	2304      	movs	r3, #4
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004982:	e07a      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004984:	2308      	movs	r3, #8
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498a:	e076      	b.n	8004a7a <UART_SetConfig+0x2e6>
 800498c:	2310      	movs	r3, #16
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004992:	e072      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a35      	ldr	r2, [pc, #212]	@ (8004a70 <UART_SetConfig+0x2dc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d12a      	bne.n	80049f4 <UART_SetConfig+0x260>
 800499e:	4b30      	ldr	r3, [pc, #192]	@ (8004a60 <UART_SetConfig+0x2cc>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ac:	d01a      	beq.n	80049e4 <UART_SetConfig+0x250>
 80049ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049b2:	d81b      	bhi.n	80049ec <UART_SetConfig+0x258>
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049b8:	d00c      	beq.n	80049d4 <UART_SetConfig+0x240>
 80049ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049be:	d815      	bhi.n	80049ec <UART_SetConfig+0x258>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <UART_SetConfig+0x238>
 80049c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049c8:	d008      	beq.n	80049dc <UART_SetConfig+0x248>
 80049ca:	e00f      	b.n	80049ec <UART_SetConfig+0x258>
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d2:	e052      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80049d4:	2302      	movs	r3, #2
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049da:	e04e      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80049dc:	2304      	movs	r3, #4
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e04a      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80049e4:	2308      	movs	r3, #8
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e046      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80049ec:	2310      	movs	r3, #16
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e042      	b.n	8004a7a <UART_SetConfig+0x2e6>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <UART_SetConfig+0x2c4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d13a      	bne.n	8004a74 <UART_SetConfig+0x2e0>
 80049fe:	4b18      	ldr	r3, [pc, #96]	@ (8004a60 <UART_SetConfig+0x2cc>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a0c:	d01a      	beq.n	8004a44 <UART_SetConfig+0x2b0>
 8004a0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a12:	d81b      	bhi.n	8004a4c <UART_SetConfig+0x2b8>
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a18:	d00c      	beq.n	8004a34 <UART_SetConfig+0x2a0>
 8004a1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1e:	d815      	bhi.n	8004a4c <UART_SetConfig+0x2b8>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <UART_SetConfig+0x298>
 8004a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a28:	d008      	beq.n	8004a3c <UART_SetConfig+0x2a8>
 8004a2a:	e00f      	b.n	8004a4c <UART_SetConfig+0x2b8>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a32:	e022      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004a34:	2302      	movs	r3, #2
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3a:	e01e      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a42:	e01a      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004a44:	2308      	movs	r3, #8
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4a:	e016      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a52:	e012      	b.n	8004a7a <UART_SetConfig+0x2e6>
 8004a54:	efff69f3 	.word	0xefff69f3
 8004a58:	40008000 	.word	0x40008000
 8004a5c:	40013800 	.word	0x40013800
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40004400 	.word	0x40004400
 8004a68:	40004800 	.word	0x40004800
 8004a6c:	40004c00 	.word	0x40004c00
 8004a70:	40005000 	.word	0x40005000
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a9f      	ldr	r2, [pc, #636]	@ (8004cfc <UART_SetConfig+0x568>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d17a      	bne.n	8004b7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d824      	bhi.n	8004ad6 <UART_SetConfig+0x342>
 8004a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <UART_SetConfig+0x300>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ad7 	.word	0x08004ad7
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004ad7 	.word	0x08004ad7
 8004aa4:	08004ac7 	.word	0x08004ac7
 8004aa8:	08004ad7 	.word	0x08004ad7
 8004aac:	08004ad7 	.word	0x08004ad7
 8004ab0:	08004ad7 	.word	0x08004ad7
 8004ab4:	08004acf 	.word	0x08004acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab8:	f7fe fb7e 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8004abc:	61f8      	str	r0, [r7, #28]
        break;
 8004abe:	e010      	b.n	8004ae2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8004d00 <UART_SetConfig+0x56c>)
 8004ac2:	61fb      	str	r3, [r7, #28]
        break;
 8004ac4:	e00d      	b.n	8004ae2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac6:	f7fe fadf 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8004aca:	61f8      	str	r0, [r7, #28]
        break;
 8004acc:	e009      	b.n	8004ae2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad2:	61fb      	str	r3, [r7, #28]
        break;
 8004ad4:	e005      	b.n	8004ae2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80fb 	beq.w	8004ce0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	4413      	add	r3, r2
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d305      	bcc.n	8004b06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d903      	bls.n	8004b0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b0c:	e0e8      	b.n	8004ce0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2200      	movs	r2, #0
 8004b12:	461c      	mov	r4, r3
 8004b14:	4615      	mov	r5, r2
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	022b      	lsls	r3, r5, #8
 8004b20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b24:	0222      	lsls	r2, r4, #8
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	6849      	ldr	r1, [r1, #4]
 8004b2a:	0849      	lsrs	r1, r1, #1
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	4688      	mov	r8, r1
 8004b30:	4681      	mov	r9, r0
 8004b32:	eb12 0a08 	adds.w	sl, r2, r8
 8004b36:	eb43 0b09 	adc.w	fp, r3, r9
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b48:	4650      	mov	r0, sl
 8004b4a:	4659      	mov	r1, fp
 8004b4c:	f7fb fb40 	bl	80001d0 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b5e:	d308      	bcc.n	8004b72 <UART_SetConfig+0x3de>
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b66:	d204      	bcs.n	8004b72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	e0b6      	b.n	8004ce0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b78:	e0b2      	b.n	8004ce0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b82:	d15e      	bne.n	8004c42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d828      	bhi.n	8004bde <UART_SetConfig+0x44a>
 8004b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b94 <UART_SetConfig+0x400>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004bc1 	.word	0x08004bc1
 8004b9c:	08004bc9 	.word	0x08004bc9
 8004ba0:	08004bdf 	.word	0x08004bdf
 8004ba4:	08004bcf 	.word	0x08004bcf
 8004ba8:	08004bdf 	.word	0x08004bdf
 8004bac:	08004bdf 	.word	0x08004bdf
 8004bb0:	08004bdf 	.word	0x08004bdf
 8004bb4:	08004bd7 	.word	0x08004bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb8:	f7fe fafe 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8004bbc:	61f8      	str	r0, [r7, #28]
        break;
 8004bbe:	e014      	b.n	8004bea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc0:	f7fe fb10 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8004bc4:	61f8      	str	r0, [r7, #28]
        break;
 8004bc6:	e010      	b.n	8004bea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8004d00 <UART_SetConfig+0x56c>)
 8004bca:	61fb      	str	r3, [r7, #28]
        break;
 8004bcc:	e00d      	b.n	8004bea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bce:	f7fe fa5b 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8004bd2:	61f8      	str	r0, [r7, #28]
        break;
 8004bd4:	e009      	b.n	8004bea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bda:	61fb      	str	r3, [r7, #28]
        break;
 8004bdc:	e005      	b.n	8004bea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d077      	beq.n	8004ce0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	005a      	lsls	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	441a      	add	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b0f      	cmp	r3, #15
 8004c0a:	d916      	bls.n	8004c3a <UART_SetConfig+0x4a6>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c12:	d212      	bcs.n	8004c3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f023 030f 	bic.w	r3, r3, #15
 8004c1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	8afb      	ldrh	r3, [r7, #22]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	8afa      	ldrh	r2, [r7, #22]
 8004c36:	60da      	str	r2, [r3, #12]
 8004c38:	e052      	b.n	8004ce0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c40:	e04e      	b.n	8004ce0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d827      	bhi.n	8004c9a <UART_SetConfig+0x506>
 8004c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c50 <UART_SetConfig+0x4bc>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	08004c9b 	.word	0x08004c9b
 8004c60:	08004c8b 	.word	0x08004c8b
 8004c64:	08004c9b 	.word	0x08004c9b
 8004c68:	08004c9b 	.word	0x08004c9b
 8004c6c:	08004c9b 	.word	0x08004c9b
 8004c70:	08004c93 	.word	0x08004c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c74:	f7fe faa0 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8004c78:	61f8      	str	r0, [r7, #28]
        break;
 8004c7a:	e014      	b.n	8004ca6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7fe fab2 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8004c80:	61f8      	str	r0, [r7, #28]
        break;
 8004c82:	e010      	b.n	8004ca6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c84:	4b1e      	ldr	r3, [pc, #120]	@ (8004d00 <UART_SetConfig+0x56c>)
 8004c86:	61fb      	str	r3, [r7, #28]
        break;
 8004c88:	e00d      	b.n	8004ca6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8a:	f7fe f9fd 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8004c8e:	61f8      	str	r0, [r7, #28]
        break;
 8004c90:	e009      	b.n	8004ca6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c96:	61fb      	str	r3, [r7, #28]
        break;
 8004c98:	e005      	b.n	8004ca6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ca4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d019      	beq.n	8004ce0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	085a      	lsrs	r2, r3, #1
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	441a      	add	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b0f      	cmp	r3, #15
 8004cc4:	d909      	bls.n	8004cda <UART_SetConfig+0x546>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ccc:	d205      	bcs.n	8004cda <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	e002      	b.n	8004ce0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	@ 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40008000 	.word	0x40008000
 8004d00:	00f42400 	.word	0x00f42400

08004d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01a      	beq.n	8004e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e02:	d10a      	bne.n	8004e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b098      	sub	sp, #96	@ 0x60
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e58:	f7fc fc52 	bl	8001700 <HAL_GetTick>
 8004e5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d12e      	bne.n	8004eca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e74:	2200      	movs	r2, #0
 8004e76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f88c 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d021      	beq.n	8004eca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e6      	bne.n	8004e86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e062      	b.n	8004f90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d149      	bne.n	8004f6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f856 	bl	8004f98 <UART_WaitOnFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03c      	beq.n	8004f6c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	623b      	str	r3, [r7, #32]
   return(result);
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e6      	bne.n	8004ef2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f44:	61fa      	str	r2, [r7, #28]
 8004f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	617b      	str	r3, [r7, #20]
   return(result);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e011      	b.n	8004f90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3758      	adds	r7, #88	@ 0x58
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa8:	e04f      	b.n	800504a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fb0:	d04b      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb2:	f7fc fba5 	bl	8001700 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e04e      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d037      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b80      	cmp	r3, #128	@ 0x80
 8004fde:	d034      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b40      	cmp	r3, #64	@ 0x40
 8004fe4:	d031      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d110      	bne.n	8005016 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f838 	bl	8005072 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2208      	movs	r2, #8
 8005006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e029      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005024:	d111      	bne.n	800504a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800502e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f81e 	bl	8005072 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2220      	movs	r2, #32
 800503a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e00f      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4013      	ands	r3, r2
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	bf0c      	ite	eq
 800505a:	2301      	moveq	r3, #1
 800505c:	2300      	movne	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	429a      	cmp	r2, r3
 8005066:	d0a0      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005072:	b480      	push	{r7}
 8005074:	b095      	sub	sp, #84	@ 0x54
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800508e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005098:	643b      	str	r3, [r7, #64]	@ 0x40
 800509a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800509e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e6      	bne.n	800507a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3308      	adds	r3, #8
 80050ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e5      	bne.n	80050ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d118      	bne.n	800511a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0310 	bic.w	r3, r3, #16
 80050fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	613b      	str	r3, [r7, #16]
   return(result);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800512e:	bf00      	nop
 8005130:	3754      	adds	r7, #84	@ 0x54
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800513a:	b084      	sub	sp, #16
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	f107 001c 	add.w	r0, r7, #28
 8005148:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa69 	bl	8005630 <USB_CoreReset>
 800515e:	4603      	mov	r3, r0
 8005160:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005162:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
 8005176:	e005      	b.n	8005184 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005190:	b004      	add	sp, #16
 8005192:	4770      	bx	lr

08005194 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f023 0201 	bic.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d115      	bne.n	8005204 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051e4:	200a      	movs	r0, #10
 80051e6:	f7fc fa97 	bl	8001718 <HAL_Delay>
      ms += 10U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	330a      	adds	r3, #10
 80051ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fa0f 	bl	8005614 <USB_GetMode>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d01e      	beq.n	800523a <USB_SetCurrentMode+0x84>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8005200:	d9f0      	bls.n	80051e4 <USB_SetCurrentMode+0x2e>
 8005202:	e01a      	b.n	800523a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d115      	bne.n	8005236 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005216:	200a      	movs	r0, #10
 8005218:	f7fc fa7e 	bl	8001718 <HAL_Delay>
      ms += 10U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	330a      	adds	r3, #10
 8005220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f9f6 	bl	8005614 <USB_GetMode>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <USB_SetCurrentMode+0x84>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2bc7      	cmp	r3, #199	@ 0xc7
 8005232:	d9f0      	bls.n	8005216 <USB_SetCurrentMode+0x60>
 8005234:	e001      	b.n	800523a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e005      	b.n	8005246 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2bc8      	cmp	r3, #200	@ 0xc8
 800523e:	d101      	bne.n	8005244 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005250:	b084      	sub	sp, #16
 8005252:	b580      	push	{r7, lr}
 8005254:	b086      	sub	sp, #24
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800525e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800526a:	2300      	movs	r3, #0
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e009      	b.n	8005284 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3340      	adds	r3, #64	@ 0x40
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	2200      	movs	r2, #0
 800527c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3301      	adds	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b0e      	cmp	r3, #14
 8005288:	d9f2      	bls.n	8005270 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800528a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11c      	bne.n	80052cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a0:	f043 0302 	orr.w	r3, r3, #2
 80052a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e005      	b.n	80052d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052de:	461a      	mov	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052e4:	2103      	movs	r1, #3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f95a 	bl	80055a0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052ec:	2110      	movs	r1, #16
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f8f6 	bl	80054e0 <USB_FlushTxFifo>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f920 	bl	8005544 <USB_FlushRxFifo>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005314:	461a      	mov	r2, r3
 8005316:	2300      	movs	r3, #0
 8005318:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005320:	461a      	mov	r2, r3
 8005322:	2300      	movs	r3, #0
 8005324:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532c:	461a      	mov	r2, r3
 800532e:	2300      	movs	r3, #0
 8005330:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	e043      	b.n	80053c0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800534a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800534e:	d118      	bne.n	8005382 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005362:	461a      	mov	r2, r3
 8005364:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	e013      	b.n	8005394 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005378:	461a      	mov	r2, r3
 800537a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e008      	b.n	8005394 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538e:	461a      	mov	r2, r3
 8005390:	2300      	movs	r3, #0
 8005392:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a0:	461a      	mov	r2, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b2:	461a      	mov	r2, r3
 80053b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3301      	adds	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053c4:	461a      	mov	r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d3b5      	bcc.n	8005338 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	e043      	b.n	800545a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053e8:	d118      	bne.n	800541c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fc:	461a      	mov	r2, r3
 80053fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	e013      	b.n	800542e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e008      	b.n	800542e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	2300      	movs	r3, #0
 800543e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544c:	461a      	mov	r2, r3
 800544e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005452:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	3301      	adds	r3, #1
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800545e:	461a      	mov	r2, r3
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4293      	cmp	r3, r2
 8005464:	d3b5      	bcc.n	80053d2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005478:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005486:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f043 0210 	orr.w	r2, r3, #16
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699a      	ldr	r2, [r3, #24]
 8005498:	4b10      	ldr	r3, [pc, #64]	@ (80054dc <USB_DevInit+0x28c>)
 800549a:	4313      	orrs	r3, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f043 0208 	orr.w	r2, r3, #8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d107      	bne.n	80054cc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054c4:	f043 0304 	orr.w	r3, r3, #4
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d8:	b004      	add	sp, #16
 80054da:	4770      	bx	lr
 80054dc:	803c3800 	.word	0x803c3800

080054e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054fa:	d901      	bls.n	8005500 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e01b      	b.n	8005538 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	daf2      	bge.n	80054ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	019b      	lsls	r3, r3, #6
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005524:	d901      	bls.n	800552a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e006      	b.n	8005538 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b20      	cmp	r3, #32
 8005534:	d0f0      	beq.n	8005518 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3301      	adds	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800555c:	d901      	bls.n	8005562 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e018      	b.n	8005594 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	daf2      	bge.n	8005550 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2210      	movs	r2, #16
 8005572:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3301      	adds	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005580:	d901      	bls.n	8005586 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e006      	b.n	8005594 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b10      	cmp	r3, #16
 8005590:	d0f0      	beq.n	8005574 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055c0:	4313      	orrs	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055ec:	f023 0303 	bic.w	r3, r3, #3
 80055f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0301 	and.w	r3, r3, #1
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005648:	d901      	bls.n	800564e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e01b      	b.n	8005686 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	daf2      	bge.n	800563c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3301      	adds	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005672:	d901      	bls.n	8005678 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e006      	b.n	8005686 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d0f0      	beq.n	8005666 <USB_CoreReset+0x36>

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <__NVIC_SetPriority>:
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	6039      	str	r1, [r7, #0]
 800569e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	db0a      	blt.n	80056be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	490c      	ldr	r1, [pc, #48]	@ (80056e0 <__NVIC_SetPriority+0x4c>)
 80056ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b2:	0112      	lsls	r2, r2, #4
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	440b      	add	r3, r1
 80056b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80056bc:	e00a      	b.n	80056d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	4908      	ldr	r1, [pc, #32]	@ (80056e4 <__NVIC_SetPriority+0x50>)
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	3b04      	subs	r3, #4
 80056cc:	0112      	lsls	r2, r2, #4
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	440b      	add	r3, r1
 80056d2:	761a      	strb	r2, [r3, #24]
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	e000e100 	.word	0xe000e100
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80056ec:	2100      	movs	r1, #0
 80056ee:	f06f 0004 	mvn.w	r0, #4
 80056f2:	f7ff ffcf 	bl	8005694 <__NVIC_SetPriority>
#endif
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005702:	f3ef 8305 	mrs	r3, IPSR
 8005706:	603b      	str	r3, [r7, #0]
  return(result);
 8005708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800570e:	f06f 0305 	mvn.w	r3, #5
 8005712:	607b      	str	r3, [r7, #4]
 8005714:	e00c      	b.n	8005730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005716:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <osKernelInitialize+0x44>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d105      	bne.n	800572a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800571e:	4b08      	ldr	r3, [pc, #32]	@ (8005740 <osKernelInitialize+0x44>)
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005724:	2300      	movs	r3, #0
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	e002      	b.n	8005730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800572a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800572e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005730:	687b      	ldr	r3, [r7, #4]
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	200007ec 	.word	0x200007ec

08005744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800574a:	f3ef 8305 	mrs	r3, IPSR
 800574e:	603b      	str	r3, [r7, #0]
  return(result);
 8005750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005756:	f06f 0305 	mvn.w	r3, #5
 800575a:	607b      	str	r3, [r7, #4]
 800575c:	e010      	b.n	8005780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800575e:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <osKernelStart+0x48>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d109      	bne.n	800577a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005766:	f7ff ffbf 	bl	80056e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800576a:	4b08      	ldr	r3, [pc, #32]	@ (800578c <osKernelStart+0x48>)
 800576c:	2202      	movs	r2, #2
 800576e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005770:	f001 fe40 	bl	80073f4 <vTaskStartScheduler>
      stat = osOK;
 8005774:	2300      	movs	r3, #0
 8005776:	607b      	str	r3, [r7, #4]
 8005778:	e002      	b.n	8005780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800577a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800577e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005780:	687b      	ldr	r3, [r7, #4]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200007ec 	.word	0x200007ec

08005790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	@ 0x38
 8005794:	af04      	add	r7, sp, #16
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a0:	f3ef 8305 	mrs	r3, IPSR
 80057a4:	617b      	str	r3, [r7, #20]
  return(result);
 80057a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d17e      	bne.n	80058aa <osThreadNew+0x11a>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d07b      	beq.n	80058aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057b2:	2380      	movs	r3, #128	@ 0x80
 80057b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057b6:	2318      	movs	r3, #24
 80057b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80057be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d045      	beq.n	8005856 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <osThreadNew+0x48>
        name = attr->name;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <osThreadNew+0x6e>
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b38      	cmp	r3, #56	@ 0x38
 80057f0:	d805      	bhi.n	80057fe <osThreadNew+0x6e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <osThreadNew+0x72>
        return (NULL);
 80057fe:	2300      	movs	r3, #0
 8005800:	e054      	b.n	80058ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	089b      	lsrs	r3, r3, #2
 8005810:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00e      	beq.n	8005838 <osThreadNew+0xa8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005820:	d90a      	bls.n	8005838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <osThreadNew+0xa8>
        mem = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e010      	b.n	800585a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10c      	bne.n	800585a <osThreadNew+0xca>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d108      	bne.n	800585a <osThreadNew+0xca>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d104      	bne.n	800585a <osThreadNew+0xca>
          mem = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e001      	b.n	800585a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d110      	bne.n	8005882 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005868:	9202      	str	r2, [sp, #8]
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f001 fc16 	bl	80070a8 <xTaskCreateStatic>
 800587c:	4603      	mov	r3, r0
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	e013      	b.n	80058aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d110      	bne.n	80058aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	b29a      	uxth	r2, r3
 800588c:	f107 0310 	add.w	r3, r7, #16
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f001 fc64 	bl	8007168 <xTaskCreate>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d001      	beq.n	80058aa <osThreadNew+0x11a>
            hTask = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058aa:	693b      	ldr	r3, [r7, #16]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3728      	adds	r7, #40	@ 0x28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c0:	f3ef 8305 	mrs	r3, IPSR
 80058c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80058c6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d174      	bne.n	80059b6 <osMutexNew+0x102>
    if (attr != NULL) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <osMutexNew+0x26>
      type = attr->attr_bits;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e001      	b.n	80058de <osMutexNew+0x2a>
    } else {
      type = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <osMutexNew+0x3a>
      rmtx = 1U;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	e001      	b.n	80058f2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d15c      	bne.n	80059b6 <osMutexNew+0x102>
      mem = -1;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005900:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d015      	beq.n	8005934 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <osMutexNew+0x6a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b4f      	cmp	r3, #79	@ 0x4f
 8005916:	d902      	bls.n	800591e <osMutexNew+0x6a>
          mem = 1;
 8005918:	2301      	movs	r3, #1
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	e00c      	b.n	8005938 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d108      	bne.n	8005938 <osMutexNew+0x84>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <osMutexNew+0x84>
            mem = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	e001      	b.n	8005938 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d112      	bne.n	8005964 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4619      	mov	r1, r3
 800594a:	2004      	movs	r0, #4
 800594c:	f000 fc3f 	bl	80061ce <xQueueCreateMutexStatic>
 8005950:	61f8      	str	r0, [r7, #28]
 8005952:	e016      	b.n	8005982 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	4619      	mov	r1, r3
 800595a:	2001      	movs	r0, #1
 800595c:	f000 fc37 	bl	80061ce <xQueueCreateMutexStatic>
 8005960:	61f8      	str	r0, [r7, #28]
 8005962:	e00e      	b.n	8005982 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10b      	bne.n	8005982 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005970:	2004      	movs	r0, #4
 8005972:	f000 fc14 	bl	800619e <xQueueCreateMutex>
 8005976:	61f8      	str	r0, [r7, #28]
 8005978:	e003      	b.n	8005982 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800597a:	2001      	movs	r0, #1
 800597c:	f000 fc0f 	bl	800619e <xQueueCreateMutex>
 8005980:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <osMutexNew+0xee>
        if (attr != NULL) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <osMutexNew+0xe2>
          name = attr->name;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e001      	b.n	800599a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	69f8      	ldr	r0, [r7, #28]
 800599e:	f001 fafb 	bl	8006f98 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <osMutexNew+0x102>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80059b6:	69fb      	ldr	r3, [r7, #28]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3720      	adds	r7, #32
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059de:	f3ef 8305 	mrs	r3, IPSR
 80059e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80059e4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80059ea:	f06f 0305 	mvn.w	r3, #5
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	e02c      	b.n	8005a4c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d103      	bne.n	8005a00 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80059f8:	f06f 0303 	mvn.w	r3, #3
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e025      	b.n	8005a4c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d011      	beq.n	8005a2a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6938      	ldr	r0, [r7, #16]
 8005a0a:	f000 fc30 	bl	800626e <xQueueTakeMutexRecursive>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d01b      	beq.n	8005a4c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005a1a:	f06f 0301 	mvn.w	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e014      	b.n	8005a4c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a22:	f06f 0302 	mvn.w	r3, #2
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e010      	b.n	8005a4c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6938      	ldr	r0, [r7, #16]
 8005a2e:	f000 ffd5 	bl	80069dc <xQueueSemaphoreTake>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d009      	beq.n	8005a4c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005a3e:	f06f 0301 	mvn.w	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e002      	b.n	8005a4c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a46:	f06f 0302 	mvn.w	r3, #2
 8005a4a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005a4c:	697b      	ldr	r3, [r7, #20]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a72:	f3ef 8305 	mrs	r3, IPSR
 8005a76:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a78:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005a7e:	f06f 0305 	mvn.w	r3, #5
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e01f      	b.n	8005ac6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005a8c:	f06f 0303 	mvn.w	r3, #3
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	e018      	b.n	8005ac6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005a9a:	6938      	ldr	r0, [r7, #16]
 8005a9c:	f000 fbb2 	bl	8006204 <xQueueGiveMutexRecursive>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d00f      	beq.n	8005ac6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005aa6:	f06f 0302 	mvn.w	r3, #2
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e00b      	b.n	8005ac6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	6938      	ldr	r0, [r7, #16]
 8005ab6:	f000 fc7f 	bl	80063b8 <xQueueGenericSend>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d002      	beq.n	8005ac6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005ac0:	f06f 0302 	mvn.w	r3, #2
 8005ac4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ac6:	697b      	ldr	r3, [r7, #20]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	@ 0x28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae0:	f3ef 8305 	mrs	r3, IPSR
 8005ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8005ae6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d175      	bne.n	8005bd8 <osSemaphoreNew+0x108>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d072      	beq.n	8005bd8 <osSemaphoreNew+0x108>
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d86e      	bhi.n	8005bd8 <osSemaphoreNew+0x108>
    mem = -1;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005afe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d015      	beq.n	8005b32 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d006      	beq.n	8005b1c <osSemaphoreNew+0x4c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b14:	d902      	bls.n	8005b1c <osSemaphoreNew+0x4c>
        mem = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e00c      	b.n	8005b36 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d108      	bne.n	8005b36 <osSemaphoreNew+0x66>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <osSemaphoreNew+0x66>
          mem = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e001      	b.n	8005b36 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b3c:	d04c      	beq.n	8005bd8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d128      	bne.n	8005b96 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d10a      	bne.n	8005b60 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2203      	movs	r2, #3
 8005b50:	9200      	str	r2, [sp, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	2100      	movs	r1, #0
 8005b56:	2001      	movs	r0, #1
 8005b58:	f000 fa2c 	bl	8005fb4 <xQueueGenericCreateStatic>
 8005b5c:	61f8      	str	r0, [r7, #28]
 8005b5e:	e005      	b.n	8005b6c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005b60:	2203      	movs	r2, #3
 8005b62:	2100      	movs	r1, #0
 8005b64:	2001      	movs	r0, #1
 8005b66:	f000 faa2 	bl	80060ae <xQueueGenericCreate>
 8005b6a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d022      	beq.n	8005bb8 <osSemaphoreNew+0xe8>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01f      	beq.n	8005bb8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	69f8      	ldr	r0, [r7, #28]
 8005b80:	f000 fc1a 	bl	80063b8 <xQueueGenericSend>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d016      	beq.n	8005bb8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005b8a:	69f8      	ldr	r0, [r7, #28]
 8005b8c:	f001 f8b8 	bl	8006d00 <vQueueDelete>
            hSemaphore = NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	e010      	b.n	8005bb8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d108      	bne.n	8005bae <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 fb99 	bl	80062dc <xQueueCreateCountingSemaphoreStatic>
 8005baa:	61f8      	str	r0, [r7, #28]
 8005bac:	e004      	b.n	8005bb8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fbcc 	bl	800634e <xQueueCreateCountingSemaphore>
 8005bb6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <osSemaphoreNew+0xfc>
          name = attr->name;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e001      	b.n	8005bd0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005bd0:	6979      	ldr	r1, [r7, #20]
 8005bd2:	69f8      	ldr	r0, [r7, #28]
 8005bd4:	f001 f9e0 	bl	8006f98 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005bd8:	69fb      	ldr	r3, [r7, #28]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005bfc:	f06f 0303 	mvn.w	r3, #3
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e039      	b.n	8005c78 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c04:	f3ef 8305 	mrs	r3, IPSR
 8005c08:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d022      	beq.n	8005c56 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005c16:	f06f 0303 	mvn.w	r3, #3
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e02c      	b.n	8005c78 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	461a      	mov	r2, r3
 8005c28:	2100      	movs	r1, #0
 8005c2a:	6938      	ldr	r0, [r7, #16]
 8005c2c:	f000 ffe6 	bl	8006bfc <xQueueReceiveFromISR>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d003      	beq.n	8005c3e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005c36:	f06f 0302 	mvn.w	r3, #2
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e01c      	b.n	8005c78 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d019      	beq.n	8005c78 <osSemaphoreAcquire+0x94>
 8005c44:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <osSemaphoreAcquire+0xa0>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	e010      	b.n	8005c78 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6938      	ldr	r0, [r7, #16]
 8005c5a:	f000 febf 	bl	80069dc <xQueueSemaphoreTake>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d009      	beq.n	8005c78 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005c6a:	f06f 0301 	mvn.w	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e002      	b.n	8005c78 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005c72:	f06f 0302 	mvn.w	r3, #2
 8005c76:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005c78:	697b      	ldr	r3, [r7, #20]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005c9e:	f06f 0303 	mvn.w	r3, #3
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e02c      	b.n	8005d00 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ca6:	f3ef 8305 	mrs	r3, IPSR
 8005caa:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01a      	beq.n	8005ce8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6938      	ldr	r0, [r7, #16]
 8005cbe:	f000 fd1b 	bl	80066f8 <xQueueGiveFromISR>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d003      	beq.n	8005cd0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005cc8:	f06f 0302 	mvn.w	r3, #2
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e017      	b.n	8005d00 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d014      	beq.n	8005d00 <osSemaphoreRelease+0x78>
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d0c <osSemaphoreRelease+0x84>)
 8005cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	e00b      	b.n	8005d00 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2200      	movs	r2, #0
 8005cec:	2100      	movs	r1, #0
 8005cee:	6938      	ldr	r0, [r7, #16]
 8005cf0:	f000 fb62 	bl	80063b8 <xQueueGenericSend>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d002      	beq.n	8005d00 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005cfa:	f06f 0302 	mvn.w	r3, #2
 8005cfe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d00:	697b      	ldr	r3, [r7, #20]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4a07      	ldr	r2, [pc, #28]	@ (8005d3c <vApplicationGetIdleTaskMemory+0x2c>)
 8005d20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4a06      	ldr	r2, [pc, #24]	@ (8005d40 <vApplicationGetIdleTaskMemory+0x30>)
 8005d26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2280      	movs	r2, #128	@ 0x80
 8005d2c:	601a      	str	r2, [r3, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	200007f0 	.word	0x200007f0
 8005d40:	2000084c 	.word	0x2000084c

08005d44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a07      	ldr	r2, [pc, #28]	@ (8005d70 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	4a06      	ldr	r2, [pc, #24]	@ (8005d74 <vApplicationGetTimerTaskMemory+0x30>)
 8005d5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d62:	601a      	str	r2, [r3, #0]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	20000a4c 	.word	0x20000a4c
 8005d74:	20000aa8 	.word	0x20000aa8

08005d78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f103 0208 	add.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f103 0208 	add.w	r2, r3, #8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f103 0208 	add.w	r2, r3, #8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e30:	d103      	bne.n	8005e3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e00c      	b.n	8005e54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e002      	b.n	8005e48 <vListInsert+0x2e>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d2f6      	bcs.n	8005e42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6892      	ldr	r2, [r2, #8]
 8005ea2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6852      	ldr	r2, [r2, #4]
 8005eac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d103      	bne.n	8005ec0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	1e5a      	subs	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f0c:	f002 fd3c 	bl	8008988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f18:	68f9      	ldr	r1, [r7, #12]
 8005f1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	68f9      	ldr	r1, [r7, #12]
 8005f40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	441a      	add	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	22ff      	movs	r2, #255	@ 0xff
 8005f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	22ff      	movs	r2, #255	@ 0xff
 8005f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d114      	bne.n	8005f8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01a      	beq.n	8005fa0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fcce 	bl	8007910 <xTaskRemoveFromEventList>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d012      	beq.n	8005fa0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb0 <xQueueGenericReset+0xd0>)
 8005f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	e009      	b.n	8005fa0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3310      	adds	r3, #16
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff fef1 	bl	8005d78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3324      	adds	r3, #36	@ 0x24
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff feec 	bl	8005d78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fa0:	f002 fd24 	bl	80089ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fa4:	2301      	movs	r3, #1
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	e000ed04 	.word	0xe000ed04

08005fb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08e      	sub	sp, #56	@ 0x38
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	e7fd      	b.n	8005ffa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <xQueueGenericCreateStatic+0x56>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <xQueueGenericCreateStatic+0x5a>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueGenericCreateStatic+0x5c>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	623b      	str	r3, [r7, #32]
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	e7fd      	b.n	8006028 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <xQueueGenericCreateStatic+0x84>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <xQueueGenericCreateStatic+0x88>
 8006038:	2301      	movs	r3, #1
 800603a:	e000      	b.n	800603e <xQueueGenericCreateStatic+0x8a>
 800603c:	2300      	movs	r3, #0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	61fb      	str	r3, [r7, #28]
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	e7fd      	b.n	8006056 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800605a:	2350      	movs	r3, #80	@ 0x50
 800605c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b50      	cmp	r3, #80	@ 0x50
 8006062:	d00b      	beq.n	800607c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	61bb      	str	r3, [r7, #24]
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800607c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00d      	beq.n	80060a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006090:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f840 	bl	8006124 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3730      	adds	r7, #48	@ 0x30
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b08a      	sub	sp, #40	@ 0x28
 80060b2:	af02      	add	r7, sp, #8
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	4613      	mov	r3, r2
 80060ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <xQueueGenericCreate+0x2c>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	613b      	str	r3, [r7, #16]
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	e7fd      	b.n	80060d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	fb02 f303 	mul.w	r3, r2, r3
 80060e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	3350      	adds	r3, #80	@ 0x50
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 fd6f 	bl	8008bcc <pvPortMalloc>
 80060ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d011      	beq.n	800611a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	3350      	adds	r3, #80	@ 0x50
 80060fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006108:	79fa      	ldrb	r2, [r7, #7]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	4613      	mov	r3, r2
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f805 	bl	8006124 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800611a:	69bb      	ldr	r3, [r7, #24]
	}
 800611c:	4618      	mov	r0, r3
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e002      	b.n	8006146 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006152:	2101      	movs	r1, #1
 8006154:	69b8      	ldr	r0, [r7, #24]
 8006156:	f7ff fec3 	bl	8005ee0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	78fa      	ldrb	r2, [r7, #3]
 800615e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00e      	beq.n	8006196 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800618a:	2300      	movs	r3, #0
 800618c:	2200      	movs	r2, #0
 800618e:	2100      	movs	r1, #0
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f911 	bl	80063b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b086      	sub	sp, #24
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	4603      	mov	r3, r0
 80061a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	2300      	movs	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6939      	ldr	r1, [r7, #16]
 80061b6:	6978      	ldr	r0, [r7, #20]
 80061b8:	f7ff ff79 	bl	80060ae <xQueueGenericCreate>
 80061bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff ffd3 	bl	800616a <prvInitialiseMutex>

		return xNewQueue;
 80061c4:	68fb      	ldr	r3, [r7, #12]
	}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b088      	sub	sp, #32
 80061d2:	af02      	add	r7, sp, #8
 80061d4:	4603      	mov	r3, r0
 80061d6:	6039      	str	r1, [r7, #0]
 80061d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061da:	2301      	movs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2200      	movs	r2, #0
 80061ea:	6939      	ldr	r1, [r7, #16]
 80061ec:	6978      	ldr	r0, [r7, #20]
 80061ee:	f7ff fee1 	bl	8005fb4 <xQueueGenericCreateStatic>
 80061f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff ffb8 	bl	800616a <prvInitialiseMutex>

		return xNewQueue;
 80061fa:	68fb      	ldr	r3, [r7, #12]
	}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60fb      	str	r3, [r7, #12]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	689c      	ldr	r4, [r3, #8]
 8006232:	f001 fd2d 	bl	8007c90 <xTaskGetCurrentTaskHandle>
 8006236:	4603      	mov	r3, r0
 8006238:	429c      	cmp	r4, r3
 800623a:	d111      	bne.n	8006260 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	1e5a      	subs	r2, r3, #1
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d105      	bne.n	800625a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800624e:	2300      	movs	r3, #0
 8006250:	2200      	movs	r2, #0
 8006252:	2100      	movs	r1, #0
 8006254:	6938      	ldr	r0, [r7, #16]
 8006256:	f000 f8af 	bl	80063b8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800625a:	2301      	movs	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e001      	b.n	8006264 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006264:	697b      	ldr	r3, [r7, #20]
	}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	bd90      	pop	{r4, r7, pc}

0800626e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800626e:	b590      	push	{r4, r7, lr}
 8006270:	b087      	sub	sp, #28
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60fb      	str	r3, [r7, #12]
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	e7fd      	b.n	8006296 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	689c      	ldr	r4, [r3, #8]
 800629e:	f001 fcf7 	bl	8007c90 <xTaskGetCurrentTaskHandle>
 80062a2:	4603      	mov	r3, r0
 80062a4:	429c      	cmp	r4, r3
 80062a6:	d107      	bne.n	80062b8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80062b2:	2301      	movs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	e00c      	b.n	80062d2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6938      	ldr	r0, [r7, #16]
 80062bc:	f000 fb8e 	bl	80069dc <xQueueSemaphoreTake>
 80062c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80062d2:	697b      	ldr	r3, [r7, #20]
	}
 80062d4:	4618      	mov	r0, r3
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd90      	pop	{r4, r7, pc}

080062dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	@ 0x28
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	61bb      	str	r3, [r7, #24]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	429a      	cmp	r2, r3
 800630c:	d90b      	bls.n	8006326 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	617b      	str	r3, [r7, #20]
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	e7fd      	b.n	8006322 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006326:	2302      	movs	r3, #2
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	2100      	movs	r1, #0
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff fe3f 	bl	8005fb4 <xQueueGenericCreateStatic>
 8006336:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006344:	69fb      	ldr	r3, [r7, #28]
	}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800634e:	b580      	push	{r7, lr}
 8006350:	b086      	sub	sp, #24
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	613b      	str	r3, [r7, #16]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d90b      	bls.n	8006396 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	60fb      	str	r3, [r7, #12]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006396:	2202      	movs	r2, #2
 8006398:	2100      	movs	r1, #0
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fe87 	bl	80060ae <xQueueGenericCreate>
 80063a0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063ae:	697b      	ldr	r3, [r7, #20]
	}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08e      	sub	sp, #56	@ 0x38
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063c6:	2300      	movs	r3, #0
 80063c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <xQueueGenericSend+0x34>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	e7fd      	b.n	80063e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <xQueueGenericSend+0x42>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <xQueueGenericSend+0x46>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <xQueueGenericSend+0x48>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <xQueueGenericSend+0x64>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d103      	bne.n	800642a <xQueueGenericSend+0x72>
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <xQueueGenericSend+0x76>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <xQueueGenericSend+0x78>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <xQueueGenericSend+0x94>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	623b      	str	r3, [r7, #32]
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	e7fd      	b.n	8006448 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800644c:	f001 fc30 	bl	8007cb0 <xTaskGetSchedulerState>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <xQueueGenericSend+0xa4>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <xQueueGenericSend+0xa8>
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <xQueueGenericSend+0xaa>
 8006460:	2300      	movs	r3, #0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <xQueueGenericSend+0xc6>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	61fb      	str	r3, [r7, #28]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800647e:	f002 fa83 	bl	8008988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <xQueueGenericSend+0xdc>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d129      	bne.n	80064e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800649a:	f000 fc6d 	bl	8006d78 <prvCopyDataToQueue>
 800649e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d010      	beq.n	80064ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	3324      	adds	r3, #36	@ 0x24
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 fa2f 	bl	8007910 <xTaskRemoveFromEventList>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d013      	beq.n	80064e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064b8:	4b3f      	ldr	r3, [pc, #252]	@ (80065b8 <xQueueGenericSend+0x200>)
 80064ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	e00a      	b.n	80064e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064d0:	4b39      	ldr	r3, [pc, #228]	@ (80065b8 <xQueueGenericSend+0x200>)
 80064d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064e0:	f002 fa84 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e063      	b.n	80065b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064ee:	f002 fa7d 	bl	80089ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e05c      	b.n	80065b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064fc:	f107 0314 	add.w	r3, r7, #20
 8006500:	4618      	mov	r0, r3
 8006502:	f001 fa69 	bl	80079d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006506:	2301      	movs	r3, #1
 8006508:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800650a:	f002 fa6f 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800650e:	f000 ffd9 	bl	80074c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006512:	f002 fa39 	bl	8008988 <vPortEnterCritical>
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800651c:	b25b      	sxtb	r3, r3
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006522:	d103      	bne.n	800652c <xQueueGenericSend+0x174>
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006532:	b25b      	sxtb	r3, r3
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006538:	d103      	bne.n	8006542 <xQueueGenericSend+0x18a>
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006542:	f002 fa53 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006546:	1d3a      	adds	r2, r7, #4
 8006548:	f107 0314 	add.w	r3, r7, #20
 800654c:	4611      	mov	r1, r2
 800654e:	4618      	mov	r0, r3
 8006550:	f001 fa58 	bl	8007a04 <xTaskCheckForTimeOut>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d124      	bne.n	80065a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800655a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800655c:	f000 fd04 	bl	8006f68 <prvIsQueueFull>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d018      	beq.n	8006598 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	3310      	adds	r3, #16
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f97c 	bl	800786c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006576:	f000 fc8f 	bl	8006e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800657a:	f000 ffb1 	bl	80074e0 <xTaskResumeAll>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	f47f af7c 	bne.w	800647e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006586:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <xQueueGenericSend+0x200>)
 8006588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	e772      	b.n	800647e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800659a:	f000 fc7d 	bl	8006e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800659e:	f000 ff9f 	bl	80074e0 <xTaskResumeAll>
 80065a2:	e76c      	b.n	800647e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065a6:	f000 fc77 	bl	8006e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065aa:	f000 ff99 	bl	80074e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3738      	adds	r7, #56	@ 0x38
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b090      	sub	sp, #64	@ 0x40
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10b      	bne.n	80065ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	e7fd      	b.n	80065e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <xQueueGenericSendFromISR+0x3e>
 80065f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <xQueueGenericSendFromISR+0x42>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <xQueueGenericSendFromISR+0x44>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10b      	bne.n	800661c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d103      	bne.n	800662a <xQueueGenericSendFromISR+0x6e>
 8006622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <xQueueGenericSendFromISR+0x72>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <xQueueGenericSendFromISR+0x74>
 800662e:	2300      	movs	r3, #0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10b      	bne.n	800664c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	623b      	str	r3, [r7, #32]
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800664c:	f002 fa7c 	bl	8008b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006650:	f3ef 8211 	mrs	r2, BASEPRI
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	61fa      	str	r2, [r7, #28]
 8006666:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006668:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800666c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006674:	429a      	cmp	r2, r3
 8006676:	d302      	bcc.n	800667e <xQueueGenericSendFromISR+0xc2>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d12f      	bne.n	80066de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800667e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006694:	f000 fb70 	bl	8006d78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006698:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066a0:	d112      	bne.n	80066c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d016      	beq.n	80066d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	3324      	adds	r3, #36	@ 0x24
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 f92e 	bl	8007910 <xTaskRemoveFromEventList>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e007      	b.n	80066d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066cc:	3301      	adds	r3, #1
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	b25a      	sxtb	r2, r3
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066d8:	2301      	movs	r3, #1
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066dc:	e001      	b.n	80066e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3740      	adds	r7, #64	@ 0x40
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08e      	sub	sp, #56	@ 0x38
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	623b      	str	r3, [r7, #32]
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	61fb      	str	r3, [r7, #28]
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	e7fd      	b.n	8006740 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <xQueueGiveFromISR+0x5c>
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <xQueueGiveFromISR+0x60>
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <xQueueGiveFromISR+0x62>
 8006758:	2300      	movs	r3, #0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	61bb      	str	r3, [r7, #24]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006776:	f002 f9e7 	bl	8008b48 <vPortValidateInterruptPriority>
	__asm volatile
 800677a:	f3ef 8211 	mrs	r2, BASEPRI
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	617a      	str	r2, [r7, #20]
 8006790:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006792:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006794:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d22b      	bcs.n	80067fe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067c0:	d112      	bne.n	80067e8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d016      	beq.n	80067f8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	3324      	adds	r3, #36	@ 0x24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 f89e 	bl	8007910 <xTaskRemoveFromEventList>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00e      	beq.n	80067f8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	e007      	b.n	80067f8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067ec:	3301      	adds	r3, #1
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	b25a      	sxtb	r2, r3
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067f8:	2301      	movs	r3, #1
 80067fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fc:	e001      	b.n	8006802 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
 8006802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006804:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f383 8811 	msr	BASEPRI, r3
}
 800680c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800680e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006810:	4618      	mov	r0, r3
 8006812:	3738      	adds	r7, #56	@ 0x38
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	@ 0x30
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006824:	2300      	movs	r3, #0
 8006826:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <xQueueReceive+0x32>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	623b      	str	r3, [r7, #32]
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	e7fd      	b.n	8006846 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <xQueueReceive+0x40>
 8006850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <xQueueReceive+0x44>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <xQueueReceive+0x46>
 800685c:	2300      	movs	r3, #0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10b      	bne.n	800687a <xQueueReceive+0x62>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	61fb      	str	r3, [r7, #28]
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	e7fd      	b.n	8006876 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800687a:	f001 fa19 	bl	8007cb0 <xTaskGetSchedulerState>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <xQueueReceive+0x72>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <xQueueReceive+0x76>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueReceive+0x78>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <xQueueReceive+0x94>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	61bb      	str	r3, [r7, #24]
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	e7fd      	b.n	80068a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ac:	f002 f86c 	bl	8008988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01f      	beq.n	80068fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c0:	f000 fac4 	bl	8006e4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	1e5a      	subs	r2, r3, #1
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00f      	beq.n	80068f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	3310      	adds	r3, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f819 	bl	8007910 <xTaskRemoveFromEventList>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068e4:	4b3c      	ldr	r3, [pc, #240]	@ (80069d8 <xQueueReceive+0x1c0>)
 80068e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068f4:	f002 f87a 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e069      	b.n	80069d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006902:	f002 f873 	bl	80089ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006906:	2300      	movs	r3, #0
 8006908:	e062      	b.n	80069d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800690a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006910:	f107 0310 	add.w	r3, r7, #16
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f85f 	bl	80079d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800691a:	2301      	movs	r3, #1
 800691c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800691e:	f002 f865 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006922:	f000 fdcf 	bl	80074c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006926:	f002 f82f 	bl	8008988 <vPortEnterCritical>
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006930:	b25b      	sxtb	r3, r3
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006936:	d103      	bne.n	8006940 <xQueueReceive+0x128>
 8006938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006946:	b25b      	sxtb	r3, r3
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800694c:	d103      	bne.n	8006956 <xQueueReceive+0x13e>
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006956:	f002 f849 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800695a:	1d3a      	adds	r2, r7, #4
 800695c:	f107 0310 	add.w	r3, r7, #16
 8006960:	4611      	mov	r1, r2
 8006962:	4618      	mov	r0, r3
 8006964:	f001 f84e 	bl	8007a04 <xTaskCheckForTimeOut>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d123      	bne.n	80069b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800696e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006970:	f000 fae4 	bl	8006f3c <prvIsQueueEmpty>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d017      	beq.n	80069aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	3324      	adds	r3, #36	@ 0x24
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	4611      	mov	r1, r2
 8006982:	4618      	mov	r0, r3
 8006984:	f000 ff72 	bl	800786c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800698a:	f000 fa85 	bl	8006e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800698e:	f000 fda7 	bl	80074e0 <xTaskResumeAll>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d189      	bne.n	80068ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006998:	4b0f      	ldr	r3, [pc, #60]	@ (80069d8 <xQueueReceive+0x1c0>)
 800699a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	e780      	b.n	80068ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069ac:	f000 fa74 	bl	8006e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069b0:	f000 fd96 	bl	80074e0 <xTaskResumeAll>
 80069b4:	e77a      	b.n	80068ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069b8:	f000 fa6e 	bl	8006e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069bc:	f000 fd90 	bl	80074e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069c2:	f000 fabb 	bl	8006f3c <prvIsQueueEmpty>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f43f af6f 	beq.w	80068ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3730      	adds	r7, #48	@ 0x30
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	@ 0x38
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10b      	bne.n	8006a10 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	623b      	str	r3, [r7, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	e7fd      	b.n	8006a0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	61fb      	str	r3, [r7, #28]
}
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
 8006a2e:	e7fd      	b.n	8006a2c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a30:	f001 f93e 	bl	8007cb0 <xTaskGetSchedulerState>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <xQueueSemaphoreTake+0x64>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <xQueueSemaphoreTake+0x68>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <xQueueSemaphoreTake+0x6a>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	61bb      	str	r3, [r7, #24]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a62:	f001 ff91 	bl	8008988 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d024      	beq.n	8006abc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a74:	1e5a      	subs	r2, r3, #1
 8006a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a78:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a82:	f001 fa8f 	bl	8007fa4 <pvTaskIncrementMutexHeldCount>
 8006a86:	4602      	mov	r2, r0
 8006a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00f      	beq.n	8006ab4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	3310      	adds	r3, #16
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 ff39 	bl	8007910 <xTaskRemoveFromEventList>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aa4:	4b54      	ldr	r3, [pc, #336]	@ (8006bf8 <xQueueSemaphoreTake+0x21c>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ab4:	f001 ff9a 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e098      	b.n	8006bee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d112      	bne.n	8006ae8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	617b      	str	r3, [r7, #20]
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	e7fd      	b.n	8006adc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ae0:	f001 ff84 	bl	80089ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e082      	b.n	8006bee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aee:	f107 030c 	add.w	r3, r7, #12
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 ff70 	bl	80079d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006af8:	2301      	movs	r3, #1
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006afc:	f001 ff76 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b00:	f000 fce0 	bl	80074c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b04:	f001 ff40 	bl	8008988 <vPortEnterCritical>
 8006b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b0e:	b25b      	sxtb	r3, r3
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b14:	d103      	bne.n	8006b1e <xQueueSemaphoreTake+0x142>
 8006b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b2a:	d103      	bne.n	8006b34 <xQueueSemaphoreTake+0x158>
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b34:	f001 ff5a 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b38:	463a      	mov	r2, r7
 8006b3a:	f107 030c 	add.w	r3, r7, #12
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 ff5f 	bl	8007a04 <xTaskCheckForTimeOut>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d132      	bne.n	8006bb2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b4e:	f000 f9f5 	bl	8006f3c <prvIsQueueEmpty>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d026      	beq.n	8006ba6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d109      	bne.n	8006b74 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b60:	f001 ff12 	bl	8008988 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 f8bf 	bl	8007cec <xTaskPriorityInherit>
 8006b6e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b70:	f001 ff3c 	bl	80089ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b76:	3324      	adds	r3, #36	@ 0x24
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fe75 	bl	800786c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b84:	f000 f988 	bl	8006e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b88:	f000 fcaa 	bl	80074e0 <xTaskResumeAll>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f47f af67 	bne.w	8006a62 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b94:	4b18      	ldr	r3, [pc, #96]	@ (8006bf8 <xQueueSemaphoreTake+0x21c>)
 8006b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	e75d      	b.n	8006a62 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ba6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ba8:	f000 f976 	bl	8006e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bac:	f000 fc98 	bl	80074e0 <xTaskResumeAll>
 8006bb0:	e757      	b.n	8006a62 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006bb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bb4:	f000 f970 	bl	8006e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bb8:	f000 fc92 	bl	80074e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bbe:	f000 f9bd 	bl	8006f3c <prvIsQueueEmpty>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f43f af4c 	beq.w	8006a62 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006bd0:	f001 feda 	bl	8008988 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006bd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bd6:	f000 f8b7 	bl	8006d48 <prvGetDisinheritPriorityAfterTimeout>
 8006bda:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 f95a 	bl	8007e9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006be8:	f001 ff00 	bl	80089ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3738      	adds	r7, #56	@ 0x38
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08e      	sub	sp, #56	@ 0x38
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	623b      	str	r3, [r7, #32]
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	e7fd      	b.n	8006c26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <xQueueReceiveFromISR+0x3c>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <xQueueReceiveFromISR+0x40>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <xQueueReceiveFromISR+0x42>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	61fb      	str	r3, [r7, #28]
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	e7fd      	b.n	8006c56 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c5a:	f001 ff75 	bl	8008b48 <vPortValidateInterruptPriority>
	__asm volatile
 8006c5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	61ba      	str	r2, [r7, #24]
 8006c74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d02f      	beq.n	8006ce6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c94:	f000 f8da 	bl	8006e4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	1e5a      	subs	r2, r3, #1
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ca8:	d112      	bne.n	8006cd0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d016      	beq.n	8006ce0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	3310      	adds	r3, #16
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fe2a 	bl	8007910 <xTaskRemoveFromEventList>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00e      	beq.n	8006ce0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e007      	b.n	8006ce0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	b25a      	sxtb	r2, r3
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce4:	e001      	b.n	8006cea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f383 8811 	msr	BASEPRI, r3
}
 8006cf4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3738      	adds	r7, #56	@ 0x38
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <vQueueDelete+0x2a>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60bb      	str	r3, [r7, #8]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f95e 	bl	8006fec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f002 f814 	bl	8008d68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d006      	beq.n	8006d66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	e001      	b.n	8006d6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10d      	bne.n	8006db2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d14d      	bne.n	8006e3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f80a 	bl	8007dbc <xTaskPriorityDisinherit>
 8006da8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	609a      	str	r2, [r3, #8]
 8006db0:	e043      	b.n	8006e3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d119      	bne.n	8006dec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6858      	ldr	r0, [r3, #4]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	f002 f91c 	bl	8009000 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d32b      	bcc.n	8006e3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	605a      	str	r2, [r3, #4]
 8006dea:	e026      	b.n	8006e3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68d8      	ldr	r0, [r3, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	461a      	mov	r2, r3
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	f002 f902 	bl	8009000 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e04:	425b      	negs	r3, r3
 8006e06:	441a      	add	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d207      	bcs.n	8006e28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e20:	425b      	negs	r3, r3
 8006e22:	441a      	add	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d105      	bne.n	8006e3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e42:	697b      	ldr	r3, [r7, #20]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d018      	beq.n	8006e90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e66:	441a      	add	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d303      	bcc.n	8006e80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68d9      	ldr	r1, [r3, #12]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6838      	ldr	r0, [r7, #0]
 8006e8c:	f002 f8b8 	bl	8009000 <memcpy>
	}
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ea0:	f001 fd72 	bl	8008988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006eac:	e011      	b.n	8006ed2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d012      	beq.n	8006edc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3324      	adds	r3, #36	@ 0x24
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fd28 	bl	8007910 <xTaskRemoveFromEventList>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ec6:	f000 fe01 	bl	8007acc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dce9      	bgt.n	8006eae <prvUnlockQueue+0x16>
 8006eda:	e000      	b.n	8006ede <prvUnlockQueue+0x46>
					break;
 8006edc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	22ff      	movs	r2, #255	@ 0xff
 8006ee2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ee6:	f001 fd81 	bl	80089ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006eea:	f001 fd4d 	bl	8008988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ef4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ef6:	e011      	b.n	8006f1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d012      	beq.n	8006f26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3310      	adds	r3, #16
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fd03 	bl	8007910 <xTaskRemoveFromEventList>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f10:	f000 fddc 	bl	8007acc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	dce9      	bgt.n	8006ef8 <prvUnlockQueue+0x60>
 8006f24:	e000      	b.n	8006f28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	22ff      	movs	r2, #255	@ 0xff
 8006f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f30:	f001 fd5c 	bl	80089ec <vPortExitCritical>
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f44:	f001 fd20 	bl	8008988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f50:	2301      	movs	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e001      	b.n	8006f5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f5a:	f001 fd47 	bl	80089ec <vPortExitCritical>

	return xReturn;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f70:	f001 fd0a 	bl	8008988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d102      	bne.n	8006f86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f80:	2301      	movs	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e001      	b.n	8006f8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f8a:	f001 fd2f 	bl	80089ec <vPortExitCritical>

	return xReturn;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	e014      	b.n	8006fd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8006fe8 <vQueueAddToRegistry+0x50>)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10b      	bne.n	8006fcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fb4:	490c      	ldr	r1, [pc, #48]	@ (8006fe8 <vQueueAddToRegistry+0x50>)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe8 <vQueueAddToRegistry+0x50>)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	4413      	add	r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fca:	e006      	b.n	8006fda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b07      	cmp	r3, #7
 8006fd6:	d9e7      	bls.n	8006fa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000ea8 	.word	0x20000ea8

08006fec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e016      	b.n	8007028 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006ffa:	4a10      	ldr	r2, [pc, #64]	@ (800703c <vQueueUnregisterQueue+0x50>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d10b      	bne.n	8007022 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800700a:	4a0c      	ldr	r2, [pc, #48]	@ (800703c <vQueueUnregisterQueue+0x50>)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2100      	movs	r1, #0
 8007010:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007014:	4a09      	ldr	r2, [pc, #36]	@ (800703c <vQueueUnregisterQueue+0x50>)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	4413      	add	r3, r2
 800701c:	2200      	movs	r2, #0
 800701e:	605a      	str	r2, [r3, #4]
				break;
 8007020:	e006      	b.n	8007030 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b07      	cmp	r3, #7
 800702c:	d9e5      	bls.n	8006ffa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	20000ea8 	.word	0x20000ea8

08007040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007050:	f001 fc9a 	bl	8008988 <vPortEnterCritical>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800705a:	b25b      	sxtb	r3, r3
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007060:	d103      	bne.n	800706a <vQueueWaitForMessageRestricted+0x2a>
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007070:	b25b      	sxtb	r3, r3
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007076:	d103      	bne.n	8007080 <vQueueWaitForMessageRestricted+0x40>
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007080:	f001 fcb4 	bl	80089ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	3324      	adds	r3, #36	@ 0x24
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fc0f 	bl	80078b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800709a:	6978      	ldr	r0, [r7, #20]
 800709c:	f7ff fefc 	bl	8006e98 <prvUnlockQueue>
	}
 80070a0:	bf00      	nop
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08e      	sub	sp, #56	@ 0x38
 80070ac:	af04      	add	r7, sp, #16
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10b      	bne.n	80070d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	623b      	str	r3, [r7, #32]
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	61fb      	str	r3, [r7, #28]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070f2:	235c      	movs	r3, #92	@ 0x5c
 80070f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80070fa:	d00b      	beq.n	8007114 <xTaskCreateStatic+0x6c>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	61bb      	str	r3, [r7, #24]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007114:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01e      	beq.n	800715a <xTaskCreateStatic+0xb2>
 800711c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01b      	beq.n	800715a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800712a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	2202      	movs	r2, #2
 8007130:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007134:	2300      	movs	r3, #0
 8007136:	9303      	str	r3, [sp, #12]
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	9302      	str	r3, [sp, #8]
 800713c:	f107 0314 	add.w	r3, r7, #20
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f850 	bl	80071f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007154:	f000 f8de 	bl	8007314 <prvAddNewTaskToReadyList>
 8007158:	e001      	b.n	800715e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800715e:	697b      	ldr	r3, [r7, #20]
	}
 8007160:	4618      	mov	r0, r3
 8007162:	3728      	adds	r7, #40	@ 0x28
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08c      	sub	sp, #48	@ 0x30
 800716c:	af04      	add	r7, sp, #16
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4618      	mov	r0, r3
 800717e:	f001 fd25 	bl	8008bcc <pvPortMalloc>
 8007182:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00e      	beq.n	80071a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800718a:	205c      	movs	r0, #92	@ 0x5c
 800718c:	f001 fd1e 	bl	8008bcc <pvPortMalloc>
 8007190:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	631a      	str	r2, [r3, #48]	@ 0x30
 800719e:	e005      	b.n	80071ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071a0:	6978      	ldr	r0, [r7, #20]
 80071a2:	f001 fde1 	bl	8008d68 <vPortFree>
 80071a6:	e001      	b.n	80071ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d017      	beq.n	80071e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071ba:	88fa      	ldrh	r2, [r7, #6]
 80071bc:	2300      	movs	r3, #0
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	9302      	str	r3, [sp, #8]
 80071c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f80e 	bl	80071f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071d6:	69f8      	ldr	r0, [r7, #28]
 80071d8:	f000 f89c 	bl	8007314 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071dc:	2301      	movs	r3, #1
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	e002      	b.n	80071e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071e8:	69bb      	ldr	r3, [r7, #24]
	}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b088      	sub	sp, #32
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	461a      	mov	r2, r3
 800720a:	21a5      	movs	r1, #165	@ 0xa5
 800720c:	f001 fecc 	bl	8008fa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800721a:	3b01      	subs	r3, #1
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	f023 0307 	bic.w	r3, r3, #7
 8007228:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	617b      	str	r3, [r7, #20]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01f      	beq.n	8007292 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	e012      	b.n	800727e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	7819      	ldrb	r1, [r3, #0]
 8007260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	3334      	adds	r3, #52	@ 0x34
 8007268:	460a      	mov	r2, r1
 800726a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d006      	beq.n	8007286 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	3301      	adds	r3, #1
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	2b0f      	cmp	r3, #15
 8007282:	d9e9      	bls.n	8007258 <prvInitialiseNewTask+0x66>
 8007284:	e000      	b.n	8007288 <prvInitialiseNewTask+0x96>
			{
				break;
 8007286:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007290:	e003      	b.n	800729a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729c:	2b37      	cmp	r3, #55	@ 0x37
 800729e:	d901      	bls.n	80072a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072a0:	2337      	movs	r3, #55	@ 0x37
 80072a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	2200      	movs	r2, #0
 80072b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	3304      	adds	r3, #4
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fd7c 	bl	8005db8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	3318      	adds	r3, #24
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fd77 	bl	8005db8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	2200      	movs	r2, #0
 80072e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	69b8      	ldr	r0, [r7, #24]
 80072f4:	f001 fa18 	bl	8008728 <pxPortInitialiseStack>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800730a:	bf00      	nop
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800731c:	f001 fb34 	bl	8008988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007320:	4b2d      	ldr	r3, [pc, #180]	@ (80073d8 <prvAddNewTaskToReadyList+0xc4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	4a2c      	ldr	r2, [pc, #176]	@ (80073d8 <prvAddNewTaskToReadyList+0xc4>)
 8007328:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800732a:	4b2c      	ldr	r3, [pc, #176]	@ (80073dc <prvAddNewTaskToReadyList+0xc8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007332:	4a2a      	ldr	r2, [pc, #168]	@ (80073dc <prvAddNewTaskToReadyList+0xc8>)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007338:	4b27      	ldr	r3, [pc, #156]	@ (80073d8 <prvAddNewTaskToReadyList+0xc4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d110      	bne.n	8007362 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007340:	f000 fbe8 	bl	8007b14 <prvInitialiseTaskLists>
 8007344:	e00d      	b.n	8007362 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007346:	4b26      	ldr	r3, [pc, #152]	@ (80073e0 <prvAddNewTaskToReadyList+0xcc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800734e:	4b23      	ldr	r3, [pc, #140]	@ (80073dc <prvAddNewTaskToReadyList+0xc8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	429a      	cmp	r2, r3
 800735a:	d802      	bhi.n	8007362 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800735c:	4a1f      	ldr	r2, [pc, #124]	@ (80073dc <prvAddNewTaskToReadyList+0xc8>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007362:	4b20      	ldr	r3, [pc, #128]	@ (80073e4 <prvAddNewTaskToReadyList+0xd0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3301      	adds	r3, #1
 8007368:	4a1e      	ldr	r2, [pc, #120]	@ (80073e4 <prvAddNewTaskToReadyList+0xd0>)
 800736a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800736c:	4b1d      	ldr	r3, [pc, #116]	@ (80073e4 <prvAddNewTaskToReadyList+0xd0>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007378:	4b1b      	ldr	r3, [pc, #108]	@ (80073e8 <prvAddNewTaskToReadyList+0xd4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d903      	bls.n	8007388 <prvAddNewTaskToReadyList+0x74>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007384:	4a18      	ldr	r2, [pc, #96]	@ (80073e8 <prvAddNewTaskToReadyList+0xd4>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4a15      	ldr	r2, [pc, #84]	@ (80073ec <prvAddNewTaskToReadyList+0xd8>)
 8007396:	441a      	add	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fe fd17 	bl	8005dd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073a4:	f001 fb22 	bl	80089ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073a8:	4b0d      	ldr	r3, [pc, #52]	@ (80073e0 <prvAddNewTaskToReadyList+0xcc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00e      	beq.n	80073ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073b0:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <prvAddNewTaskToReadyList+0xc8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d207      	bcs.n	80073ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073be:	4b0c      	ldr	r3, [pc, #48]	@ (80073f0 <prvAddNewTaskToReadyList+0xdc>)
 80073c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	200013bc 	.word	0x200013bc
 80073dc:	20000ee8 	.word	0x20000ee8
 80073e0:	200013c8 	.word	0x200013c8
 80073e4:	200013d8 	.word	0x200013d8
 80073e8:	200013c4 	.word	0x200013c4
 80073ec:	20000eec 	.word	0x20000eec
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	@ 0x28
 80073f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007402:	463a      	mov	r2, r7
 8007404:	1d39      	adds	r1, r7, #4
 8007406:	f107 0308 	add.w	r3, r7, #8
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fc80 	bl	8005d10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	9202      	str	r2, [sp, #8]
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	2300      	movs	r3, #0
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2300      	movs	r3, #0
 8007420:	460a      	mov	r2, r1
 8007422:	4922      	ldr	r1, [pc, #136]	@ (80074ac <vTaskStartScheduler+0xb8>)
 8007424:	4822      	ldr	r0, [pc, #136]	@ (80074b0 <vTaskStartScheduler+0xbc>)
 8007426:	f7ff fe3f 	bl	80070a8 <xTaskCreateStatic>
 800742a:	4603      	mov	r3, r0
 800742c:	4a21      	ldr	r2, [pc, #132]	@ (80074b4 <vTaskStartScheduler+0xc0>)
 800742e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007430:	4b20      	ldr	r3, [pc, #128]	@ (80074b4 <vTaskStartScheduler+0xc0>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e001      	b.n	8007442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d102      	bne.n	800744e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007448:	f000 fe14 	bl	8008074 <xTimerCreateTimerTask>
 800744c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d116      	bne.n	8007482 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	613b      	str	r3, [r7, #16]
}
 8007466:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007468:	4b13      	ldr	r3, [pc, #76]	@ (80074b8 <vTaskStartScheduler+0xc4>)
 800746a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800746e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007470:	4b12      	ldr	r3, [pc, #72]	@ (80074bc <vTaskStartScheduler+0xc8>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007476:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <vTaskStartScheduler+0xcc>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800747c:	f001 f9e0 	bl	8008840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007480:	e00f      	b.n	80074a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007488:	d10b      	bne.n	80074a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60fb      	str	r3, [r7, #12]
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	e7fd      	b.n	800749e <vTaskStartScheduler+0xaa>
}
 80074a2:	bf00      	nop
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	08009088 	.word	0x08009088
 80074b0:	08007ae5 	.word	0x08007ae5
 80074b4:	200013e0 	.word	0x200013e0
 80074b8:	200013dc 	.word	0x200013dc
 80074bc:	200013c8 	.word	0x200013c8
 80074c0:	200013c0 	.word	0x200013c0

080074c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074c8:	4b04      	ldr	r3, [pc, #16]	@ (80074dc <vTaskSuspendAll+0x18>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	4a03      	ldr	r2, [pc, #12]	@ (80074dc <vTaskSuspendAll+0x18>)
 80074d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074d2:	bf00      	nop
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	200013e4 	.word	0x200013e4

080074e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074ee:	4b42      	ldr	r3, [pc, #264]	@ (80075f8 <xTaskResumeAll+0x118>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <xTaskResumeAll+0x2e>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	603b      	str	r3, [r7, #0]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800750e:	f001 fa3b 	bl	8008988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007512:	4b39      	ldr	r3, [pc, #228]	@ (80075f8 <xTaskResumeAll+0x118>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3b01      	subs	r3, #1
 8007518:	4a37      	ldr	r2, [pc, #220]	@ (80075f8 <xTaskResumeAll+0x118>)
 800751a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800751c:	4b36      	ldr	r3, [pc, #216]	@ (80075f8 <xTaskResumeAll+0x118>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d162      	bne.n	80075ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007524:	4b35      	ldr	r3, [pc, #212]	@ (80075fc <xTaskResumeAll+0x11c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05e      	beq.n	80075ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800752c:	e02f      	b.n	800758e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800752e:	4b34      	ldr	r3, [pc, #208]	@ (8007600 <xTaskResumeAll+0x120>)
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3318      	adds	r3, #24
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fca6 	bl	8005e8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3304      	adds	r3, #4
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fca1 	bl	8005e8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754e:	4b2d      	ldr	r3, [pc, #180]	@ (8007604 <xTaskResumeAll+0x124>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d903      	bls.n	800755e <xTaskResumeAll+0x7e>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755a:	4a2a      	ldr	r2, [pc, #168]	@ (8007604 <xTaskResumeAll+0x124>)
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4a27      	ldr	r2, [pc, #156]	@ (8007608 <xTaskResumeAll+0x128>)
 800756c:	441a      	add	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3304      	adds	r3, #4
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f7fe fc2c 	bl	8005dd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757e:	4b23      	ldr	r3, [pc, #140]	@ (800760c <xTaskResumeAll+0x12c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	429a      	cmp	r2, r3
 8007586:	d302      	bcc.n	800758e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007588:	4b21      	ldr	r3, [pc, #132]	@ (8007610 <xTaskResumeAll+0x130>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800758e:	4b1c      	ldr	r3, [pc, #112]	@ (8007600 <xTaskResumeAll+0x120>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1cb      	bne.n	800752e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800759c:	f000 fb58 	bl	8007c50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075a0:	4b1c      	ldr	r3, [pc, #112]	@ (8007614 <xTaskResumeAll+0x134>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075ac:	f000 f846 	bl	800763c <xTaskIncrementTick>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80075b6:	4b16      	ldr	r3, [pc, #88]	@ (8007610 <xTaskResumeAll+0x130>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3b01      	subs	r3, #1
 80075c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f1      	bne.n	80075ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80075c8:	4b12      	ldr	r3, [pc, #72]	@ (8007614 <xTaskResumeAll+0x134>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075ce:	4b10      	ldr	r3, [pc, #64]	@ (8007610 <xTaskResumeAll+0x130>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075da:	4b0f      	ldr	r3, [pc, #60]	@ (8007618 <xTaskResumeAll+0x138>)
 80075dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075ea:	f001 f9ff 	bl	80089ec <vPortExitCritical>

	return xAlreadyYielded;
 80075ee:	68bb      	ldr	r3, [r7, #8]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	200013e4 	.word	0x200013e4
 80075fc:	200013bc 	.word	0x200013bc
 8007600:	2000137c 	.word	0x2000137c
 8007604:	200013c4 	.word	0x200013c4
 8007608:	20000eec 	.word	0x20000eec
 800760c:	20000ee8 	.word	0x20000ee8
 8007610:	200013d0 	.word	0x200013d0
 8007614:	200013cc 	.word	0x200013cc
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007622:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <xTaskGetTickCount+0x1c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007628:	687b      	ldr	r3, [r7, #4]
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	200013c0 	.word	0x200013c0

0800763c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007646:	4b4f      	ldr	r3, [pc, #316]	@ (8007784 <xTaskIncrementTick+0x148>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 8090 	bne.w	8007770 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007650:	4b4d      	ldr	r3, [pc, #308]	@ (8007788 <xTaskIncrementTick+0x14c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3301      	adds	r3, #1
 8007656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007658:	4a4b      	ldr	r2, [pc, #300]	@ (8007788 <xTaskIncrementTick+0x14c>)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d121      	bne.n	80076a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007664:	4b49      	ldr	r3, [pc, #292]	@ (800778c <xTaskIncrementTick+0x150>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <xTaskIncrementTick+0x4a>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	603b      	str	r3, [r7, #0]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <xTaskIncrementTick+0x46>
 8007686:	4b41      	ldr	r3, [pc, #260]	@ (800778c <xTaskIncrementTick+0x150>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	4b40      	ldr	r3, [pc, #256]	@ (8007790 <xTaskIncrementTick+0x154>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a3e      	ldr	r2, [pc, #248]	@ (800778c <xTaskIncrementTick+0x150>)
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	4a3e      	ldr	r2, [pc, #248]	@ (8007790 <xTaskIncrementTick+0x154>)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	4b3e      	ldr	r3, [pc, #248]	@ (8007794 <xTaskIncrementTick+0x158>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3301      	adds	r3, #1
 80076a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007794 <xTaskIncrementTick+0x158>)
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	f000 fad4 	bl	8007c50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007798 <xTaskIncrementTick+0x15c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d349      	bcc.n	8007746 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076b2:	4b36      	ldr	r3, [pc, #216]	@ (800778c <xTaskIncrementTick+0x150>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076bc:	4b36      	ldr	r3, [pc, #216]	@ (8007798 <xTaskIncrementTick+0x15c>)
 80076be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076c2:	601a      	str	r2, [r3, #0]
					break;
 80076c4:	e03f      	b.n	8007746 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076c6:	4b31      	ldr	r3, [pc, #196]	@ (800778c <xTaskIncrementTick+0x150>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d203      	bcs.n	80076e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076de:	4a2e      	ldr	r2, [pc, #184]	@ (8007798 <xTaskIncrementTick+0x15c>)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076e4:	e02f      	b.n	8007746 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fbce 	bl	8005e8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	3318      	adds	r3, #24
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe fbc5 	bl	8005e8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007706:	4b25      	ldr	r3, [pc, #148]	@ (800779c <xTaskIncrementTick+0x160>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	429a      	cmp	r2, r3
 800770c:	d903      	bls.n	8007716 <xTaskIncrementTick+0xda>
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007712:	4a22      	ldr	r2, [pc, #136]	@ (800779c <xTaskIncrementTick+0x160>)
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4a1f      	ldr	r2, [pc, #124]	@ (80077a0 <xTaskIncrementTick+0x164>)
 8007724:	441a      	add	r2, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	3304      	adds	r3, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f7fe fb50 	bl	8005dd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007736:	4b1b      	ldr	r3, [pc, #108]	@ (80077a4 <xTaskIncrementTick+0x168>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	429a      	cmp	r2, r3
 800773e:	d3b8      	bcc.n	80076b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007740:	2301      	movs	r3, #1
 8007742:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007744:	e7b5      	b.n	80076b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007746:	4b17      	ldr	r3, [pc, #92]	@ (80077a4 <xTaskIncrementTick+0x168>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774c:	4914      	ldr	r1, [pc, #80]	@ (80077a0 <xTaskIncrementTick+0x164>)
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	440b      	add	r3, r1
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d901      	bls.n	8007762 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800775e:	2301      	movs	r3, #1
 8007760:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007762:	4b11      	ldr	r3, [pc, #68]	@ (80077a8 <xTaskIncrementTick+0x16c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800776a:	2301      	movs	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	e004      	b.n	800777a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007770:	4b0e      	ldr	r3, [pc, #56]	@ (80077ac <xTaskIncrementTick+0x170>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3301      	adds	r3, #1
 8007776:	4a0d      	ldr	r2, [pc, #52]	@ (80077ac <xTaskIncrementTick+0x170>)
 8007778:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800777a:	697b      	ldr	r3, [r7, #20]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	200013e4 	.word	0x200013e4
 8007788:	200013c0 	.word	0x200013c0
 800778c:	20001374 	.word	0x20001374
 8007790:	20001378 	.word	0x20001378
 8007794:	200013d4 	.word	0x200013d4
 8007798:	200013dc 	.word	0x200013dc
 800779c:	200013c4 	.word	0x200013c4
 80077a0:	20000eec 	.word	0x20000eec
 80077a4:	20000ee8 	.word	0x20000ee8
 80077a8:	200013d0 	.word	0x200013d0
 80077ac:	200013cc 	.word	0x200013cc

080077b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077b6:	4b28      	ldr	r3, [pc, #160]	@ (8007858 <vTaskSwitchContext+0xa8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077be:	4b27      	ldr	r3, [pc, #156]	@ (800785c <vTaskSwitchContext+0xac>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077c4:	e042      	b.n	800784c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80077c6:	4b25      	ldr	r3, [pc, #148]	@ (800785c <vTaskSwitchContext+0xac>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077cc:	4b24      	ldr	r3, [pc, #144]	@ (8007860 <vTaskSwitchContext+0xb0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e011      	b.n	80077f8 <vTaskSwitchContext+0x48>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	607b      	str	r3, [r7, #4]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <vTaskSwitchContext+0x3e>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	491a      	ldr	r1, [pc, #104]	@ (8007864 <vTaskSwitchContext+0xb4>)
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0e3      	beq.n	80077d4 <vTaskSwitchContext+0x24>
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4a13      	ldr	r2, [pc, #76]	@ (8007864 <vTaskSwitchContext+0xb4>)
 8007818:	4413      	add	r3, r2
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	3308      	adds	r3, #8
 800782e:	429a      	cmp	r2, r3
 8007830:	d104      	bne.n	800783c <vTaskSwitchContext+0x8c>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	605a      	str	r2, [r3, #4]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	4a09      	ldr	r2, [pc, #36]	@ (8007868 <vTaskSwitchContext+0xb8>)
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	4a06      	ldr	r2, [pc, #24]	@ (8007860 <vTaskSwitchContext+0xb0>)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6013      	str	r3, [r2, #0]
}
 800784c:	bf00      	nop
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	200013e4 	.word	0x200013e4
 800785c:	200013d0 	.word	0x200013d0
 8007860:	200013c4 	.word	0x200013c4
 8007864:	20000eec 	.word	0x20000eec
 8007868:	20000ee8 	.word	0x20000ee8

0800786c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60fb      	str	r3, [r7, #12]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007894:	4b07      	ldr	r3, [pc, #28]	@ (80078b4 <vTaskPlaceOnEventList+0x48>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3318      	adds	r3, #24
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7fe fabc 	bl	8005e1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078a2:	2101      	movs	r1, #1
 80078a4:	6838      	ldr	r0, [r7, #0]
 80078a6:	f000 fb91 	bl	8007fcc <prvAddCurrentTaskToDelayedList>
}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000ee8 	.word	0x20000ee8

080078b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	617b      	str	r3, [r7, #20]
}
 80078dc:	bf00      	nop
 80078de:	bf00      	nop
 80078e0:	e7fd      	b.n	80078de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078e2:	4b0a      	ldr	r3, [pc, #40]	@ (800790c <vTaskPlaceOnEventListRestricted+0x54>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3318      	adds	r3, #24
 80078e8:	4619      	mov	r1, r3
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7fe fa71 	bl	8005dd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	68b8      	ldr	r0, [r7, #8]
 8007900:	f000 fb64 	bl	8007fcc <prvAddCurrentTaskToDelayedList>
	}
 8007904:	bf00      	nop
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000ee8 	.word	0x20000ee8

08007910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10b      	bne.n	800793e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	60fb      	str	r3, [r7, #12]
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	e7fd      	b.n	800793a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	3318      	adds	r3, #24
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe faa2 	bl	8005e8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007948:	4b1d      	ldr	r3, [pc, #116]	@ (80079c0 <xTaskRemoveFromEventList+0xb0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d11d      	bne.n	800798c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	3304      	adds	r3, #4
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fa99 	bl	8005e8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795e:	4b19      	ldr	r3, [pc, #100]	@ (80079c4 <xTaskRemoveFromEventList+0xb4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d903      	bls.n	800796e <xTaskRemoveFromEventList+0x5e>
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	4a16      	ldr	r2, [pc, #88]	@ (80079c4 <xTaskRemoveFromEventList+0xb4>)
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4a13      	ldr	r2, [pc, #76]	@ (80079c8 <xTaskRemoveFromEventList+0xb8>)
 800797c:	441a      	add	r2, r3
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3304      	adds	r3, #4
 8007982:	4619      	mov	r1, r3
 8007984:	4610      	mov	r0, r2
 8007986:	f7fe fa24 	bl	8005dd2 <vListInsertEnd>
 800798a:	e005      	b.n	8007998 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	3318      	adds	r3, #24
 8007990:	4619      	mov	r1, r3
 8007992:	480e      	ldr	r0, [pc, #56]	@ (80079cc <xTaskRemoveFromEventList+0xbc>)
 8007994:	f7fe fa1d 	bl	8005dd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799c:	4b0c      	ldr	r3, [pc, #48]	@ (80079d0 <xTaskRemoveFromEventList+0xc0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d905      	bls.n	80079b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079a6:	2301      	movs	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079aa:	4b0a      	ldr	r3, [pc, #40]	@ (80079d4 <xTaskRemoveFromEventList+0xc4>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e001      	b.n	80079b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80079b6:	697b      	ldr	r3, [r7, #20]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	200013e4 	.word	0x200013e4
 80079c4:	200013c4 	.word	0x200013c4
 80079c8:	20000eec 	.word	0x20000eec
 80079cc:	2000137c 	.word	0x2000137c
 80079d0:	20000ee8 	.word	0x20000ee8
 80079d4:	200013d0 	.word	0x200013d0

080079d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079e0:	4b06      	ldr	r3, [pc, #24]	@ (80079fc <vTaskInternalSetTimeOutState+0x24>)
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079e8:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <vTaskInternalSetTimeOutState+0x28>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	605a      	str	r2, [r3, #4]
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	200013d4 	.word	0x200013d4
 8007a00:	200013c0 	.word	0x200013c0

08007a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10b      	bne.n	8007a2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	613b      	str	r3, [r7, #16]
}
 8007a26:	bf00      	nop
 8007a28:	bf00      	nop
 8007a2a:	e7fd      	b.n	8007a28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10b      	bne.n	8007a4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	60fb      	str	r3, [r7, #12]
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop
 8007a48:	e7fd      	b.n	8007a46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007a4a:	f000 ff9d 	bl	8008988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac4 <xTaskCheckForTimeOut+0xc0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a66:	d102      	bne.n	8007a6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e023      	b.n	8007ab6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4b15      	ldr	r3, [pc, #84]	@ (8007ac8 <xTaskCheckForTimeOut+0xc4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d007      	beq.n	8007a8a <xTaskCheckForTimeOut+0x86>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d302      	bcc.n	8007a8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	e015      	b.n	8007ab6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d20b      	bcs.n	8007aac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	1ad2      	subs	r2, r2, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff ff99 	bl	80079d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	e004      	b.n	8007ab6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ab6:	f000 ff99 	bl	80089ec <vPortExitCritical>

	return xReturn;
 8007aba:	69fb      	ldr	r3, [r7, #28]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	200013c0 	.word	0x200013c0
 8007ac8:	200013d4 	.word	0x200013d4

08007acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ad0:	4b03      	ldr	r3, [pc, #12]	@ (8007ae0 <vTaskMissedYield+0x14>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	200013d0 	.word	0x200013d0

08007ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007aec:	f000 f852 	bl	8007b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007af0:	4b06      	ldr	r3, [pc, #24]	@ (8007b0c <prvIdleTask+0x28>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d9f9      	bls.n	8007aec <prvIdleTask+0x8>
			{
				taskYIELD();
 8007af8:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <prvIdleTask+0x2c>)
 8007afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b08:	e7f0      	b.n	8007aec <prvIdleTask+0x8>
 8007b0a:	bf00      	nop
 8007b0c:	20000eec 	.word	0x20000eec
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	e00c      	b.n	8007b3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4a12      	ldr	r2, [pc, #72]	@ (8007b74 <prvInitialiseTaskLists+0x60>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe f922 	bl	8005d78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3301      	adds	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b37      	cmp	r3, #55	@ 0x37
 8007b3e:	d9ef      	bls.n	8007b20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b40:	480d      	ldr	r0, [pc, #52]	@ (8007b78 <prvInitialiseTaskLists+0x64>)
 8007b42:	f7fe f919 	bl	8005d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b46:	480d      	ldr	r0, [pc, #52]	@ (8007b7c <prvInitialiseTaskLists+0x68>)
 8007b48:	f7fe f916 	bl	8005d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b4c:	480c      	ldr	r0, [pc, #48]	@ (8007b80 <prvInitialiseTaskLists+0x6c>)
 8007b4e:	f7fe f913 	bl	8005d78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b52:	480c      	ldr	r0, [pc, #48]	@ (8007b84 <prvInitialiseTaskLists+0x70>)
 8007b54:	f7fe f910 	bl	8005d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b58:	480b      	ldr	r0, [pc, #44]	@ (8007b88 <prvInitialiseTaskLists+0x74>)
 8007b5a:	f7fe f90d 	bl	8005d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b8c <prvInitialiseTaskLists+0x78>)
 8007b60:	4a05      	ldr	r2, [pc, #20]	@ (8007b78 <prvInitialiseTaskLists+0x64>)
 8007b62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b64:	4b0a      	ldr	r3, [pc, #40]	@ (8007b90 <prvInitialiseTaskLists+0x7c>)
 8007b66:	4a05      	ldr	r2, [pc, #20]	@ (8007b7c <prvInitialiseTaskLists+0x68>)
 8007b68:	601a      	str	r2, [r3, #0]
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000eec 	.word	0x20000eec
 8007b78:	2000134c 	.word	0x2000134c
 8007b7c:	20001360 	.word	0x20001360
 8007b80:	2000137c 	.word	0x2000137c
 8007b84:	20001390 	.word	0x20001390
 8007b88:	200013a8 	.word	0x200013a8
 8007b8c:	20001374 	.word	0x20001374
 8007b90:	20001378 	.word	0x20001378

08007b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b9a:	e019      	b.n	8007bd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b9c:	f000 fef4 	bl	8008988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba0:	4b10      	ldr	r3, [pc, #64]	@ (8007be4 <prvCheckTasksWaitingTermination+0x50>)
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe f96d 	bl	8005e8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007be8 <prvCheckTasksWaitingTermination+0x54>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8007be8 <prvCheckTasksWaitingTermination+0x54>)
 8007bba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007bec <prvCheckTasksWaitingTermination+0x58>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8007bec <prvCheckTasksWaitingTermination+0x58>)
 8007bc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bc6:	f000 ff11 	bl	80089ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f810 	bl	8007bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bd0:	4b06      	ldr	r3, [pc, #24]	@ (8007bec <prvCheckTasksWaitingTermination+0x58>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e1      	bne.n	8007b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20001390 	.word	0x20001390
 8007be8:	200013bc 	.word	0x200013bc
 8007bec:	200013a4 	.word	0x200013a4

08007bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d108      	bne.n	8007c14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f8ae 	bl	8008d68 <vPortFree>
				vPortFree( pxTCB );
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 f8ab 	bl	8008d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c12:	e019      	b.n	8007c48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d103      	bne.n	8007c26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f8a2 	bl	8008d68 <vPortFree>
	}
 8007c24:	e010      	b.n	8007c48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d00b      	beq.n	8007c48 <prvDeleteTCB+0x58>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60fb      	str	r3, [r7, #12]
}
 8007c42:	bf00      	nop
 8007c44:	bf00      	nop
 8007c46:	e7fd      	b.n	8007c44 <prvDeleteTCB+0x54>
	}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c56:	4b0c      	ldr	r3, [pc, #48]	@ (8007c88 <prvResetNextTaskUnblockTime+0x38>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c60:	4b0a      	ldr	r3, [pc, #40]	@ (8007c8c <prvResetNextTaskUnblockTime+0x3c>)
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c68:	e008      	b.n	8007c7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6a:	4b07      	ldr	r3, [pc, #28]	@ (8007c88 <prvResetNextTaskUnblockTime+0x38>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	4a04      	ldr	r2, [pc, #16]	@ (8007c8c <prvResetNextTaskUnblockTime+0x3c>)
 8007c7a:	6013      	str	r3, [r2, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	20001374 	.word	0x20001374
 8007c8c:	200013dc 	.word	0x200013dc

08007c90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007c96:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <xTaskGetCurrentTaskHandle+0x1c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007c9c:	687b      	ldr	r3, [r7, #4]
	}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	20000ee8 	.word	0x20000ee8

08007cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce4 <xTaskGetSchedulerState+0x34>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	607b      	str	r3, [r7, #4]
 8007cc2:	e008      	b.n	8007cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cc4:	4b08      	ldr	r3, [pc, #32]	@ (8007ce8 <xTaskGetSchedulerState+0x38>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ccc:	2302      	movs	r3, #2
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	e001      	b.n	8007cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cd6:	687b      	ldr	r3, [r7, #4]
	}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	200013c8 	.word	0x200013c8
 8007ce8:	200013e4 	.word	0x200013e4

08007cec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d051      	beq.n	8007da6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d06:	4b2a      	ldr	r3, [pc, #168]	@ (8007db0 <xTaskPriorityInherit+0xc4>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d241      	bcs.n	8007d94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	db06      	blt.n	8007d26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d18:	4b25      	ldr	r3, [pc, #148]	@ (8007db0 <xTaskPriorityInherit+0xc4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6959      	ldr	r1, [r3, #20]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4a1f      	ldr	r2, [pc, #124]	@ (8007db4 <xTaskPriorityInherit+0xc8>)
 8007d38:	4413      	add	r3, r2
 8007d3a:	4299      	cmp	r1, r3
 8007d3c:	d122      	bne.n	8007d84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	3304      	adds	r3, #4
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe f8a2 	bl	8005e8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d48:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <xTaskPriorityInherit+0xc4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	4b18      	ldr	r3, [pc, #96]	@ (8007db8 <xTaskPriorityInherit+0xcc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d903      	bls.n	8007d66 <xTaskPriorityInherit+0x7a>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	4a15      	ldr	r2, [pc, #84]	@ (8007db8 <xTaskPriorityInherit+0xcc>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4a10      	ldr	r2, [pc, #64]	@ (8007db4 <xTaskPriorityInherit+0xc8>)
 8007d74:	441a      	add	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe f828 	bl	8005dd2 <vListInsertEnd>
 8007d82:	e004      	b.n	8007d8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d84:	4b0a      	ldr	r3, [pc, #40]	@ (8007db0 <xTaskPriorityInherit+0xc4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e008      	b.n	8007da6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d98:	4b05      	ldr	r3, [pc, #20]	@ (8007db0 <xTaskPriorityInherit+0xc4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d201      	bcs.n	8007da6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007da2:	2301      	movs	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007da6:	68fb      	ldr	r3, [r7, #12]
	}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000ee8 	.word	0x20000ee8
 8007db4:	20000eec 	.word	0x20000eec
 8007db8:	200013c4 	.word	0x200013c4

08007dbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d058      	beq.n	8007e84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8007e90 <xTaskPriorityDisinherit+0xd4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d00b      	beq.n	8007df4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	60fb      	str	r3, [r7, #12]
}
 8007dee:	bf00      	nop
 8007df0:	bf00      	nop
 8007df2:	e7fd      	b.n	8007df0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10b      	bne.n	8007e14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	60bb      	str	r3, [r7, #8]
}
 8007e0e:	bf00      	nop
 8007e10:	bf00      	nop
 8007e12:	e7fd      	b.n	8007e10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d02c      	beq.n	8007e84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d128      	bne.n	8007e84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe f828 	bl	8005e8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e54:	4b0f      	ldr	r3, [pc, #60]	@ (8007e94 <xTaskPriorityDisinherit+0xd8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d903      	bls.n	8007e64 <xTaskPriorityDisinherit+0xa8>
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e60:	4a0c      	ldr	r2, [pc, #48]	@ (8007e94 <xTaskPriorityDisinherit+0xd8>)
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4a09      	ldr	r2, [pc, #36]	@ (8007e98 <xTaskPriorityDisinherit+0xdc>)
 8007e72:	441a      	add	r2, r3
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f7fd ffa9 	bl	8005dd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e84:	697b      	ldr	r3, [r7, #20]
	}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000ee8 	.word	0x20000ee8
 8007e94:	200013c4 	.word	0x200013c4
 8007e98:	20000eec 	.word	0x20000eec

08007e9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d06c      	beq.n	8007f8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10b      	bne.n	8007ed4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	60fb      	str	r3, [r7, #12]
}
 8007ece:	bf00      	nop
 8007ed0:	bf00      	nop
 8007ed2:	e7fd      	b.n	8007ed0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d902      	bls.n	8007ee4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	61fb      	str	r3, [r7, #28]
 8007ee2:	e002      	b.n	8007eea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ee8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d04c      	beq.n	8007f8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d147      	bne.n	8007f8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007efe:	4b26      	ldr	r3, [pc, #152]	@ (8007f98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d10b      	bne.n	8007f20 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	60bb      	str	r3, [r7, #8]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	db04      	blt.n	8007f3e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	6959      	ldr	r1, [r3, #20]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4a13      	ldr	r2, [pc, #76]	@ (8007f9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007f4e:	4413      	add	r3, r2
 8007f50:	4299      	cmp	r1, r3
 8007f52:	d11c      	bne.n	8007f8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fd ff97 	bl	8005e8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f62:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d903      	bls.n	8007f72 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4a07      	ldr	r2, [pc, #28]	@ (8007f9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007f80:	441a      	add	r2, r3
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4619      	mov	r1, r3
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f7fd ff22 	bl	8005dd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f8e:	bf00      	nop
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000ee8 	.word	0x20000ee8
 8007f9c:	20000eec 	.word	0x20000eec
 8007fa0:	200013c4 	.word	0x200013c4

08007fa4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007fa8:	4b07      	ldr	r3, [pc, #28]	@ (8007fc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007fb0:	4b05      	ldr	r3, [pc, #20]	@ (8007fc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fb6:	3201      	adds	r2, #1
 8007fb8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007fba:	4b03      	ldr	r3, [pc, #12]	@ (8007fc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
	}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	20000ee8 	.word	0x20000ee8

08007fcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fd6:	4b21      	ldr	r3, [pc, #132]	@ (800805c <prvAddCurrentTaskToDelayedList+0x90>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fdc:	4b20      	ldr	r3, [pc, #128]	@ (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fd ff52 	bl	8005e8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fee:	d10a      	bne.n	8008006 <prvAddCurrentTaskToDelayedList+0x3a>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d007      	beq.n	8008006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	4819      	ldr	r0, [pc, #100]	@ (8008064 <prvAddCurrentTaskToDelayedList+0x98>)
 8008000:	f7fd fee7 	bl	8005dd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008004:	e026      	b.n	8008054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800800e:	4b14      	ldr	r3, [pc, #80]	@ (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	429a      	cmp	r2, r3
 800801c:	d209      	bcs.n	8008032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800801e:	4b12      	ldr	r3, [pc, #72]	@ (8008068 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b0f      	ldr	r3, [pc, #60]	@ (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3304      	adds	r3, #4
 8008028:	4619      	mov	r1, r3
 800802a:	4610      	mov	r0, r2
 800802c:	f7fd fef5 	bl	8005e1a <vListInsert>
}
 8008030:	e010      	b.n	8008054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008032:	4b0e      	ldr	r3, [pc, #56]	@ (800806c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b0a      	ldr	r3, [pc, #40]	@ (8008060 <prvAddCurrentTaskToDelayedList+0x94>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f7fd feeb 	bl	8005e1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008044:	4b0a      	ldr	r3, [pc, #40]	@ (8008070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	429a      	cmp	r2, r3
 800804c:	d202      	bcs.n	8008054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800804e:	4a08      	ldr	r2, [pc, #32]	@ (8008070 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	6013      	str	r3, [r2, #0]
}
 8008054:	bf00      	nop
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200013c0 	.word	0x200013c0
 8008060:	20000ee8 	.word	0x20000ee8
 8008064:	200013a8 	.word	0x200013a8
 8008068:	20001378 	.word	0x20001378
 800806c:	20001374 	.word	0x20001374
 8008070:	200013dc 	.word	0x200013dc

08008074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08a      	sub	sp, #40	@ 0x28
 8008078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800807a:	2300      	movs	r3, #0
 800807c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800807e:	f000 fb13 	bl	80086a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008082:	4b1d      	ldr	r3, [pc, #116]	@ (80080f8 <xTimerCreateTimerTask+0x84>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d021      	beq.n	80080ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800808e:	2300      	movs	r3, #0
 8008090:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008092:	1d3a      	adds	r2, r7, #4
 8008094:	f107 0108 	add.w	r1, r7, #8
 8008098:	f107 030c 	add.w	r3, r7, #12
 800809c:	4618      	mov	r0, r3
 800809e:	f7fd fe51 	bl	8005d44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	9202      	str	r2, [sp, #8]
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	2302      	movs	r3, #2
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	2300      	movs	r3, #0
 80080b2:	460a      	mov	r2, r1
 80080b4:	4911      	ldr	r1, [pc, #68]	@ (80080fc <xTimerCreateTimerTask+0x88>)
 80080b6:	4812      	ldr	r0, [pc, #72]	@ (8008100 <xTimerCreateTimerTask+0x8c>)
 80080b8:	f7fe fff6 	bl	80070a8 <xTaskCreateStatic>
 80080bc:	4603      	mov	r3, r0
 80080be:	4a11      	ldr	r2, [pc, #68]	@ (8008104 <xTimerCreateTimerTask+0x90>)
 80080c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <xTimerCreateTimerTask+0x90>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080ca:	2301      	movs	r3, #1
 80080cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10b      	bne.n	80080ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	613b      	str	r3, [r7, #16]
}
 80080e6:	bf00      	nop
 80080e8:	bf00      	nop
 80080ea:	e7fd      	b.n	80080e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80080ec:	697b      	ldr	r3, [r7, #20]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20001418 	.word	0x20001418
 80080fc:	08009090 	.word	0x08009090
 8008100:	08008241 	.word	0x08008241
 8008104:	2000141c 	.word	0x2000141c

08008108 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08a      	sub	sp, #40	@ 0x28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008116:	2300      	movs	r3, #0
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10b      	bne.n	8008138 <xTimerGenericCommand+0x30>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	623b      	str	r3, [r7, #32]
}
 8008132:	bf00      	nop
 8008134:	bf00      	nop
 8008136:	e7fd      	b.n	8008134 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008138:	4b19      	ldr	r3, [pc, #100]	@ (80081a0 <xTimerGenericCommand+0x98>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d02a      	beq.n	8008196 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b05      	cmp	r3, #5
 8008150:	dc18      	bgt.n	8008184 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008152:	f7ff fdad 	bl	8007cb0 <xTaskGetSchedulerState>
 8008156:	4603      	mov	r3, r0
 8008158:	2b02      	cmp	r3, #2
 800815a:	d109      	bne.n	8008170 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800815c:	4b10      	ldr	r3, [pc, #64]	@ (80081a0 <xTimerGenericCommand+0x98>)
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	f107 0110 	add.w	r1, r7, #16
 8008164:	2300      	movs	r3, #0
 8008166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008168:	f7fe f926 	bl	80063b8 <xQueueGenericSend>
 800816c:	6278      	str	r0, [r7, #36]	@ 0x24
 800816e:	e012      	b.n	8008196 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <xTimerGenericCommand+0x98>)
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	f107 0110 	add.w	r1, r7, #16
 8008178:	2300      	movs	r3, #0
 800817a:	2200      	movs	r2, #0
 800817c:	f7fe f91c 	bl	80063b8 <xQueueGenericSend>
 8008180:	6278      	str	r0, [r7, #36]	@ 0x24
 8008182:	e008      	b.n	8008196 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008184:	4b06      	ldr	r3, [pc, #24]	@ (80081a0 <xTimerGenericCommand+0x98>)
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	f107 0110 	add.w	r1, r7, #16
 800818c:	2300      	movs	r3, #0
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	f7fe fa14 	bl	80065bc <xQueueGenericSendFromISR>
 8008194:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008198:	4618      	mov	r0, r3
 800819a:	3728      	adds	r7, #40	@ 0x28
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20001418 	.word	0x20001418

080081a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ae:	4b23      	ldr	r3, [pc, #140]	@ (800823c <prvProcessExpiredTimer+0x98>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	3304      	adds	r3, #4
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fd fe65 	bl	8005e8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d023      	beq.n	8008218 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	699a      	ldr	r2, [r3, #24]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	18d1      	adds	r1, r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	6978      	ldr	r0, [r7, #20]
 80081de:	f000 f8d5 	bl	800838c <prvInsertTimerInActiveList>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d020      	beq.n	800822a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081e8:	2300      	movs	r3, #0
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	2300      	movs	r3, #0
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	2100      	movs	r1, #0
 80081f2:	6978      	ldr	r0, [r7, #20]
 80081f4:	f7ff ff88 	bl	8008108 <xTimerGenericCommand>
 80081f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d114      	bne.n	800822a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	60fb      	str	r3, [r7, #12]
}
 8008212:	bf00      	nop
 8008214:	bf00      	nop
 8008216:	e7fd      	b.n	8008214 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800821e:	f023 0301 	bic.w	r3, r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	6978      	ldr	r0, [r7, #20]
 8008230:	4798      	blx	r3
}
 8008232:	bf00      	nop
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20001410 	.word	0x20001410

08008240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008248:	f107 0308 	add.w	r3, r7, #8
 800824c:	4618      	mov	r0, r3
 800824e:	f000 f859 	bl	8008304 <prvGetNextExpireTime>
 8008252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4619      	mov	r1, r3
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 f805 	bl	8008268 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800825e:	f000 f8d7 	bl	8008410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008262:	bf00      	nop
 8008264:	e7f0      	b.n	8008248 <prvTimerTask+0x8>
	...

08008268 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008272:	f7ff f927 	bl	80074c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008276:	f107 0308 	add.w	r3, r7, #8
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f866 	bl	800834c <prvSampleTimeNow>
 8008280:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d130      	bne.n	80082ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <prvProcessTimerOrBlockTask+0x3c>
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	429a      	cmp	r2, r3
 8008294:	d806      	bhi.n	80082a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008296:	f7ff f923 	bl	80074e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800829a:	68f9      	ldr	r1, [r7, #12]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff ff81 	bl	80081a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082a2:	e024      	b.n	80082ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d008      	beq.n	80082bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082aa:	4b13      	ldr	r3, [pc, #76]	@ (80082f8 <prvProcessTimerOrBlockTask+0x90>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <prvProcessTimerOrBlockTask+0x50>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <prvProcessTimerOrBlockTask+0x52>
 80082b8:	2300      	movs	r3, #0
 80082ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082bc:	4b0f      	ldr	r3, [pc, #60]	@ (80082fc <prvProcessTimerOrBlockTask+0x94>)
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	4619      	mov	r1, r3
 80082ca:	f7fe feb9 	bl	8007040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082ce:	f7ff f907 	bl	80074e0 <xTaskResumeAll>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082d8:	4b09      	ldr	r3, [pc, #36]	@ (8008300 <prvProcessTimerOrBlockTask+0x98>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
}
 80082e8:	e001      	b.n	80082ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082ea:	f7ff f8f9 	bl	80074e0 <xTaskResumeAll>
}
 80082ee:	bf00      	nop
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20001414 	.word	0x20001414
 80082fc:	20001418 	.word	0x20001418
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800830c:	4b0e      	ldr	r3, [pc, #56]	@ (8008348 <prvGetNextExpireTime+0x44>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <prvGetNextExpireTime+0x16>
 8008316:	2201      	movs	r2, #1
 8008318:	e000      	b.n	800831c <prvGetNextExpireTime+0x18>
 800831a:	2200      	movs	r2, #0
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d105      	bne.n	8008334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008328:	4b07      	ldr	r3, [pc, #28]	@ (8008348 <prvGetNextExpireTime+0x44>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	e001      	b.n	8008338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008338:	68fb      	ldr	r3, [r7, #12]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	20001410 	.word	0x20001410

0800834c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008354:	f7ff f962 	bl	800761c <xTaskGetTickCount>
 8008358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800835a:	4b0b      	ldr	r3, [pc, #44]	@ (8008388 <prvSampleTimeNow+0x3c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	429a      	cmp	r2, r3
 8008362:	d205      	bcs.n	8008370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008364:	f000 f93a 	bl	80085dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	e002      	b.n	8008376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008376:	4a04      	ldr	r2, [pc, #16]	@ (8008388 <prvSampleTimeNow+0x3c>)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800837c:	68fb      	ldr	r3, [r7, #12]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20001420 	.word	0x20001420

0800838c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d812      	bhi.n	80083d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	617b      	str	r3, [r7, #20]
 80083c4:	e01b      	b.n	80083fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083c6:	4b10      	ldr	r3, [pc, #64]	@ (8008408 <prvInsertTimerInActiveList+0x7c>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3304      	adds	r3, #4
 80083ce:	4619      	mov	r1, r3
 80083d0:	4610      	mov	r0, r2
 80083d2:	f7fd fd22 	bl	8005e1a <vListInsert>
 80083d6:	e012      	b.n	80083fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d206      	bcs.n	80083ee <prvInsertTimerInActiveList+0x62>
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d302      	bcc.n	80083ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083e8:	2301      	movs	r3, #1
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	e007      	b.n	80083fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083ee:	4b07      	ldr	r3, [pc, #28]	@ (800840c <prvInsertTimerInActiveList+0x80>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f7fd fd0e 	bl	8005e1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083fe:	697b      	ldr	r3, [r7, #20]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20001414 	.word	0x20001414
 800840c:	20001410 	.word	0x20001410

08008410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08e      	sub	sp, #56	@ 0x38
 8008414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008416:	e0ce      	b.n	80085b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	da19      	bge.n	8008452 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800841e:	1d3b      	adds	r3, r7, #4
 8008420:	3304      	adds	r3, #4
 8008422:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	61fb      	str	r3, [r7, #28]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008448:	6850      	ldr	r0, [r2, #4]
 800844a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800844c:	6892      	ldr	r2, [r2, #8]
 800844e:	4611      	mov	r1, r2
 8008450:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	f2c0 80ae 	blt.w	80085b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800845e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008468:	3304      	adds	r3, #4
 800846a:	4618      	mov	r0, r3
 800846c:	f7fd fd0e 	bl	8005e8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008470:	463b      	mov	r3, r7
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff ff6a 	bl	800834c <prvSampleTimeNow>
 8008478:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b09      	cmp	r3, #9
 800847e:	f200 8097 	bhi.w	80085b0 <prvProcessReceivedCommands+0x1a0>
 8008482:	a201      	add	r2, pc, #4	@ (adr r2, 8008488 <prvProcessReceivedCommands+0x78>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084b1 	.word	0x080084b1
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b1 	.word	0x080084b1
 8008494:	08008527 	.word	0x08008527
 8008498:	0800853b 	.word	0x0800853b
 800849c:	08008587 	.word	0x08008587
 80084a0:	080084b1 	.word	0x080084b1
 80084a4:	080084b1 	.word	0x080084b1
 80084a8:	08008527 	.word	0x08008527
 80084ac:	0800853b 	.word	0x0800853b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084b6:	f043 0301 	orr.w	r3, r3, #1
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	18d1      	adds	r1, r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084d0:	f7ff ff5c 	bl	800838c <prvInsertTimerInActiveList>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d06c      	beq.n	80085b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d061      	beq.n	80085b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	441a      	add	r2, r3
 80084f8:	2300      	movs	r3, #0
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	2300      	movs	r3, #0
 80084fe:	2100      	movs	r1, #0
 8008500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008502:	f7ff fe01 	bl	8008108 <xTimerGenericCommand>
 8008506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d152      	bne.n	80085b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	61bb      	str	r3, [r7, #24]
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	e7fd      	b.n	8008522 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800852c:	f023 0301 	bic.w	r3, r3, #1
 8008530:	b2da      	uxtb	r2, r3
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008538:	e03d      	b.n	80085b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800853a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008540:	f043 0301 	orr.w	r3, r3, #1
 8008544:	b2da      	uxtb	r2, r3
 8008546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008550:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	617b      	str	r3, [r7, #20]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	18d1      	adds	r1, r2, r3
 800857a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800857e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008580:	f7ff ff04 	bl	800838c <prvInsertTimerInActiveList>
					break;
 8008584:	e017      	b.n	80085b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d103      	bne.n	800859c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008596:	f000 fbe7 	bl	8008d68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800859a:	e00c      	b.n	80085b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800859c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085a2:	f023 0301 	bic.w	r3, r3, #1
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80085ae:	e002      	b.n	80085b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80085b0:	bf00      	nop
 80085b2:	e000      	b.n	80085b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80085b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085b6:	4b08      	ldr	r3, [pc, #32]	@ (80085d8 <prvProcessReceivedCommands+0x1c8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	1d39      	adds	r1, r7, #4
 80085bc:	2200      	movs	r2, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe f92a 	bl	8006818 <xQueueReceive>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f47f af26 	bne.w	8008418 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	3730      	adds	r7, #48	@ 0x30
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20001418 	.word	0x20001418

080085dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b088      	sub	sp, #32
 80085e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085e2:	e049      	b.n	8008678 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085e4:	4b2e      	ldr	r3, [pc, #184]	@ (80086a0 <prvSwitchTimerLists+0xc4>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ee:	4b2c      	ldr	r3, [pc, #176]	@ (80086a0 <prvSwitchTimerLists+0xc4>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	3304      	adds	r3, #4
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fd fc45 	bl	8005e8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d02f      	beq.n	8008678 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	429a      	cmp	r2, r3
 8008628:	d90e      	bls.n	8008648 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008636:	4b1a      	ldr	r3, [pc, #104]	@ (80086a0 <prvSwitchTimerLists+0xc4>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fd fbea 	bl	8005e1a <vListInsert>
 8008646:	e017      	b.n	8008678 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008648:	2300      	movs	r3, #0
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	2300      	movs	r3, #0
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	2100      	movs	r1, #0
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f7ff fd58 	bl	8008108 <xTimerGenericCommand>
 8008658:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10b      	bne.n	8008678 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	603b      	str	r3, [r7, #0]
}
 8008672:	bf00      	nop
 8008674:	bf00      	nop
 8008676:	e7fd      	b.n	8008674 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008678:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <prvSwitchTimerLists+0xc4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1b0      	bne.n	80085e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008682:	4b07      	ldr	r3, [pc, #28]	@ (80086a0 <prvSwitchTimerLists+0xc4>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008688:	4b06      	ldr	r3, [pc, #24]	@ (80086a4 <prvSwitchTimerLists+0xc8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a04      	ldr	r2, [pc, #16]	@ (80086a0 <prvSwitchTimerLists+0xc4>)
 800868e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008690:	4a04      	ldr	r2, [pc, #16]	@ (80086a4 <prvSwitchTimerLists+0xc8>)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	6013      	str	r3, [r2, #0]
}
 8008696:	bf00      	nop
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20001410 	.word	0x20001410
 80086a4:	20001414 	.word	0x20001414

080086a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086ae:	f000 f96b 	bl	8008988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086b2:	4b15      	ldr	r3, [pc, #84]	@ (8008708 <prvCheckForValidListAndQueue+0x60>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d120      	bne.n	80086fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086ba:	4814      	ldr	r0, [pc, #80]	@ (800870c <prvCheckForValidListAndQueue+0x64>)
 80086bc:	f7fd fb5c 	bl	8005d78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80086c0:	4813      	ldr	r0, [pc, #76]	@ (8008710 <prvCheckForValidListAndQueue+0x68>)
 80086c2:	f7fd fb59 	bl	8005d78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80086c6:	4b13      	ldr	r3, [pc, #76]	@ (8008714 <prvCheckForValidListAndQueue+0x6c>)
 80086c8:	4a10      	ldr	r2, [pc, #64]	@ (800870c <prvCheckForValidListAndQueue+0x64>)
 80086ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086cc:	4b12      	ldr	r3, [pc, #72]	@ (8008718 <prvCheckForValidListAndQueue+0x70>)
 80086ce:	4a10      	ldr	r2, [pc, #64]	@ (8008710 <prvCheckForValidListAndQueue+0x68>)
 80086d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086d2:	2300      	movs	r3, #0
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	4b11      	ldr	r3, [pc, #68]	@ (800871c <prvCheckForValidListAndQueue+0x74>)
 80086d8:	4a11      	ldr	r2, [pc, #68]	@ (8008720 <prvCheckForValidListAndQueue+0x78>)
 80086da:	2110      	movs	r1, #16
 80086dc:	200a      	movs	r0, #10
 80086de:	f7fd fc69 	bl	8005fb4 <xQueueGenericCreateStatic>
 80086e2:	4603      	mov	r3, r0
 80086e4:	4a08      	ldr	r2, [pc, #32]	@ (8008708 <prvCheckForValidListAndQueue+0x60>)
 80086e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086e8:	4b07      	ldr	r3, [pc, #28]	@ (8008708 <prvCheckForValidListAndQueue+0x60>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086f0:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <prvCheckForValidListAndQueue+0x60>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	490b      	ldr	r1, [pc, #44]	@ (8008724 <prvCheckForValidListAndQueue+0x7c>)
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fc4e 	bl	8006f98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086fc:	f000 f976 	bl	80089ec <vPortExitCritical>
}
 8008700:	bf00      	nop
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20001418 	.word	0x20001418
 800870c:	200013e8 	.word	0x200013e8
 8008710:	200013fc 	.word	0x200013fc
 8008714:	20001410 	.word	0x20001410
 8008718:	20001414 	.word	0x20001414
 800871c:	200014c4 	.word	0x200014c4
 8008720:	20001424 	.word	0x20001424
 8008724:	08009098 	.word	0x08009098

08008728 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3b04      	subs	r3, #4
 8008738:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3b04      	subs	r3, #4
 8008746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f023 0201 	bic.w	r2, r3, #1
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3b04      	subs	r3, #4
 8008756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008758:	4a0c      	ldr	r2, [pc, #48]	@ (800878c <pxPortInitialiseStack+0x64>)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3b14      	subs	r3, #20
 8008762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3b04      	subs	r3, #4
 800876e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f06f 0202 	mvn.w	r2, #2
 8008776:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3b20      	subs	r3, #32
 800877c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800877e:	68fb      	ldr	r3, [r7, #12]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	08008791 	.word	0x08008791

08008790 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800879a:	4b13      	ldr	r3, [pc, #76]	@ (80087e8 <prvTaskExitError+0x58>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087a2:	d00b      	beq.n	80087bc <prvTaskExitError+0x2c>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	60fb      	str	r3, [r7, #12]
}
 80087b6:	bf00      	nop
 80087b8:	bf00      	nop
 80087ba:	e7fd      	b.n	80087b8 <prvTaskExitError+0x28>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	60bb      	str	r3, [r7, #8]
}
 80087ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087d0:	bf00      	nop
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0fc      	beq.n	80087d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	2000000c 	.word	0x2000000c
 80087ec:	00000000 	.word	0x00000000

080087f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087f0:	4b07      	ldr	r3, [pc, #28]	@ (8008810 <pxCurrentTCBConst2>)
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	6808      	ldr	r0, [r1, #0]
 80087f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	f380 8809 	msr	PSP, r0
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f380 8811 	msr	BASEPRI, r0
 800880a:	4770      	bx	lr
 800880c:	f3af 8000 	nop.w

08008810 <pxCurrentTCBConst2>:
 8008810:	20000ee8 	.word	0x20000ee8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008818:	4808      	ldr	r0, [pc, #32]	@ (800883c <prvPortStartFirstTask+0x24>)
 800881a:	6800      	ldr	r0, [r0, #0]
 800881c:	6800      	ldr	r0, [r0, #0]
 800881e:	f380 8808 	msr	MSP, r0
 8008822:	f04f 0000 	mov.w	r0, #0
 8008826:	f380 8814 	msr	CONTROL, r0
 800882a:	b662      	cpsie	i
 800882c:	b661      	cpsie	f
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	df00      	svc	0
 8008838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800883a:	bf00      	nop
 800883c:	e000ed08 	.word	0xe000ed08

08008840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008846:	4b47      	ldr	r3, [pc, #284]	@ (8008964 <xPortStartScheduler+0x124>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a47      	ldr	r2, [pc, #284]	@ (8008968 <xPortStartScheduler+0x128>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d10b      	bne.n	8008868 <xPortStartScheduler+0x28>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	613b      	str	r3, [r7, #16]
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008868:	4b3e      	ldr	r3, [pc, #248]	@ (8008964 <xPortStartScheduler+0x124>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a3f      	ldr	r2, [pc, #252]	@ (800896c <xPortStartScheduler+0x12c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d10b      	bne.n	800888a <xPortStartScheduler+0x4a>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	60fb      	str	r3, [r7, #12]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800888a:	4b39      	ldr	r3, [pc, #228]	@ (8008970 <xPortStartScheduler+0x130>)
 800888c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	22ff      	movs	r2, #255	@ 0xff
 800889a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	4b31      	ldr	r3, [pc, #196]	@ (8008974 <xPortStartScheduler+0x134>)
 80088b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088b2:	4b31      	ldr	r3, [pc, #196]	@ (8008978 <xPortStartScheduler+0x138>)
 80088b4:	2207      	movs	r2, #7
 80088b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088b8:	e009      	b.n	80088ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80088ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008978 <xPortStartScheduler+0x138>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3b01      	subs	r3, #1
 80088c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008978 <xPortStartScheduler+0x138>)
 80088c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d6:	2b80      	cmp	r3, #128	@ 0x80
 80088d8:	d0ef      	beq.n	80088ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088da:	4b27      	ldr	r3, [pc, #156]	@ (8008978 <xPortStartScheduler+0x138>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f1c3 0307 	rsb	r3, r3, #7
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d00b      	beq.n	80088fe <xPortStartScheduler+0xbe>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	60bb      	str	r3, [r7, #8]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008978 <xPortStartScheduler+0x138>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	4a1c      	ldr	r2, [pc, #112]	@ (8008978 <xPortStartScheduler+0x138>)
 8008906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008908:	4b1b      	ldr	r3, [pc, #108]	@ (8008978 <xPortStartScheduler+0x138>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008910:	4a19      	ldr	r2, [pc, #100]	@ (8008978 <xPortStartScheduler+0x138>)
 8008912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800891c:	4b17      	ldr	r3, [pc, #92]	@ (800897c <xPortStartScheduler+0x13c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a16      	ldr	r2, [pc, #88]	@ (800897c <xPortStartScheduler+0x13c>)
 8008922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008928:	4b14      	ldr	r3, [pc, #80]	@ (800897c <xPortStartScheduler+0x13c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a13      	ldr	r2, [pc, #76]	@ (800897c <xPortStartScheduler+0x13c>)
 800892e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008934:	f000 f8da 	bl	8008aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008938:	4b11      	ldr	r3, [pc, #68]	@ (8008980 <xPortStartScheduler+0x140>)
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800893e:	f000 f8f9 	bl	8008b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008942:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <xPortStartScheduler+0x144>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a0f      	ldr	r2, [pc, #60]	@ (8008984 <xPortStartScheduler+0x144>)
 8008948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800894c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800894e:	f7ff ff63 	bl	8008818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008952:	f7fe ff2d 	bl	80077b0 <vTaskSwitchContext>
	prvTaskExitError();
 8008956:	f7ff ff1b 	bl	8008790 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	e000ed00 	.word	0xe000ed00
 8008968:	410fc271 	.word	0x410fc271
 800896c:	410fc270 	.word	0x410fc270
 8008970:	e000e400 	.word	0xe000e400
 8008974:	20001514 	.word	0x20001514
 8008978:	20001518 	.word	0x20001518
 800897c:	e000ed20 	.word	0xe000ed20
 8008980:	2000000c 	.word	0x2000000c
 8008984:	e000ef34 	.word	0xe000ef34

08008988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	607b      	str	r3, [r7, #4]
}
 80089a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089a2:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	4a0e      	ldr	r2, [pc, #56]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089ac:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d110      	bne.n	80089d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089b4:	4b0c      	ldr	r3, [pc, #48]	@ (80089e8 <vPortEnterCritical+0x60>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	603b      	str	r3, [r7, #0]
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	e7fd      	b.n	80089d2 <vPortEnterCritical+0x4a>
	}
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	2000000c 	.word	0x2000000c
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089f2:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <vPortExitCritical+0x50>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <vPortExitCritical+0x26>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	607b      	str	r3, [r7, #4]
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	e7fd      	b.n	8008a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a12:	4b0a      	ldr	r3, [pc, #40]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	4a08      	ldr	r2, [pc, #32]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a1c:	4b07      	ldr	r3, [pc, #28]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <vPortExitCritical+0x44>
 8008a24:	2300      	movs	r3, #0
 8008a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	f383 8811 	msr	BASEPRI, r3
}
 8008a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	2000000c 	.word	0x2000000c

08008a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a40:	f3ef 8009 	mrs	r0, PSP
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <pxCurrentTCBConst>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	f01e 0f10 	tst.w	lr, #16
 8008a50:	bf08      	it	eq
 8008a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	6010      	str	r0, [r2, #0]
 8008a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a64:	f380 8811 	msr	BASEPRI, r0
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f7fe fe9e 	bl	80077b0 <vTaskSwitchContext>
 8008a74:	f04f 0000 	mov.w	r0, #0
 8008a78:	f380 8811 	msr	BASEPRI, r0
 8008a7c:	bc09      	pop	{r0, r3}
 8008a7e:	6819      	ldr	r1, [r3, #0]
 8008a80:	6808      	ldr	r0, [r1, #0]
 8008a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a86:	f01e 0f10 	tst.w	lr, #16
 8008a8a:	bf08      	it	eq
 8008a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a90:	f380 8809 	msr	PSP, r0
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	f3af 8000 	nop.w

08008aa0 <pxCurrentTCBConst>:
 8008aa0:	20000ee8 	.word	0x20000ee8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ac2:	f7fe fdbb 	bl	800763c <xTaskIncrementTick>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008acc:	4b06      	ldr	r3, [pc, #24]	@ (8008ae8 <xPortSysTickHandler+0x40>)
 8008ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f383 8811 	msr	BASEPRI, r3
}
 8008ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008af0:	4b0b      	ldr	r3, [pc, #44]	@ (8008b20 <vPortSetupTimerInterrupt+0x34>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008af6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b24 <vPortSetupTimerInterrupt+0x38>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008afc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <vPortSetupTimerInterrupt+0x3c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a0a      	ldr	r2, [pc, #40]	@ (8008b2c <vPortSetupTimerInterrupt+0x40>)
 8008b02:	fba2 2303 	umull	r2, r3, r2, r3
 8008b06:	099b      	lsrs	r3, r3, #6
 8008b08:	4a09      	ldr	r2, [pc, #36]	@ (8008b30 <vPortSetupTimerInterrupt+0x44>)
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b0e:	4b04      	ldr	r3, [pc, #16]	@ (8008b20 <vPortSetupTimerInterrupt+0x34>)
 8008b10:	2207      	movs	r2, #7
 8008b12:	601a      	str	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	e000e010 	.word	0xe000e010
 8008b24:	e000e018 	.word	0xe000e018
 8008b28:	20000000 	.word	0x20000000
 8008b2c:	10624dd3 	.word	0x10624dd3
 8008b30:	e000e014 	.word	0xe000e014

08008b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b44 <vPortEnableVFP+0x10>
 8008b38:	6801      	ldr	r1, [r0, #0]
 8008b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b3e:	6001      	str	r1, [r0, #0]
 8008b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b42:	bf00      	nop
 8008b44:	e000ed88 	.word	0xe000ed88

08008b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b4e:	f3ef 8305 	mrs	r3, IPSR
 8008b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b0f      	cmp	r3, #15
 8008b58:	d915      	bls.n	8008b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b5a:	4a18      	ldr	r2, [pc, #96]	@ (8008bbc <vPortValidateInterruptPriority+0x74>)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b64:	4b16      	ldr	r3, [pc, #88]	@ (8008bc0 <vPortValidateInterruptPriority+0x78>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	7afa      	ldrb	r2, [r7, #11]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d20b      	bcs.n	8008b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b86:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <vPortValidateInterruptPriority+0x7c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc8 <vPortValidateInterruptPriority+0x80>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d90b      	bls.n	8008bae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	603b      	str	r3, [r7, #0]
}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	e7fd      	b.n	8008baa <vPortValidateInterruptPriority+0x62>
	}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	e000e3f0 	.word	0xe000e3f0
 8008bc0:	20001514 	.word	0x20001514
 8008bc4:	e000ed0c 	.word	0xe000ed0c
 8008bc8:	20001518 	.word	0x20001518

08008bcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	@ 0x28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bd8:	f7fe fc74 	bl	80074c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8008d50 <pvPortMalloc+0x184>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008be4:	f000 f924 	bl	8008e30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008be8:	4b5a      	ldr	r3, [pc, #360]	@ (8008d54 <pvPortMalloc+0x188>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 8095 	bne.w	8008d20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01e      	beq.n	8008c3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d015      	beq.n	8008c3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f023 0307 	bic.w	r3, r3, #7
 8008c14:	3308      	adds	r3, #8
 8008c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <pvPortMalloc+0x6e>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	617b      	str	r3, [r7, #20]
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	e7fd      	b.n	8008c36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d06f      	beq.n	8008d20 <pvPortMalloc+0x154>
 8008c40:	4b45      	ldr	r3, [pc, #276]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d86a      	bhi.n	8008d20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c4a:	4b44      	ldr	r3, [pc, #272]	@ (8008d5c <pvPortMalloc+0x190>)
 8008c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c4e:	4b43      	ldr	r3, [pc, #268]	@ (8008d5c <pvPortMalloc+0x190>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c54:	e004      	b.n	8008c60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d903      	bls.n	8008c72 <pvPortMalloc+0xa6>
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f1      	bne.n	8008c56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c72:	4b37      	ldr	r3, [pc, #220]	@ (8008d50 <pvPortMalloc+0x184>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d051      	beq.n	8008d20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2208      	movs	r2, #8
 8008c82:	4413      	add	r3, r2
 8008c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	1ad2      	subs	r2, r2, r3
 8008c96:	2308      	movs	r3, #8
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d920      	bls.n	8008ce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <pvPortMalloc+0xfc>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	613b      	str	r3, [r7, #16]
}
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cda:	69b8      	ldr	r0, [r7, #24]
 8008cdc:	f000 f90a 	bl	8008ef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	4a1b      	ldr	r2, [pc, #108]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cee:	4b1a      	ldr	r3, [pc, #104]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d60 <pvPortMalloc+0x194>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d203      	bcs.n	8008d02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cfa:	4b17      	ldr	r3, [pc, #92]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a18      	ldr	r2, [pc, #96]	@ (8008d60 <pvPortMalloc+0x194>)
 8008d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <pvPortMalloc+0x188>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d16:	4b13      	ldr	r3, [pc, #76]	@ (8008d64 <pvPortMalloc+0x198>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	4a11      	ldr	r2, [pc, #68]	@ (8008d64 <pvPortMalloc+0x198>)
 8008d1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d20:	f7fe fbde 	bl	80074e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <pvPortMalloc+0x17a>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	60fb      	str	r3, [r7, #12]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <pvPortMalloc+0x176>
	return pvReturn;
 8008d46:	69fb      	ldr	r3, [r7, #28]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	@ 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	200020dc 	.word	0x200020dc
 8008d54:	200020f0 	.word	0x200020f0
 8008d58:	200020e0 	.word	0x200020e0
 8008d5c:	200020d4 	.word	0x200020d4
 8008d60:	200020e4 	.word	0x200020e4
 8008d64:	200020e8 	.word	0x200020e8

08008d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d04f      	beq.n	8008e1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	425b      	negs	r3, r3
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	4413      	add	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	4b25      	ldr	r3, [pc, #148]	@ (8008e24 <vPortFree+0xbc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10b      	bne.n	8008dae <vPortFree+0x46>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	60fb      	str	r3, [r7, #12]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00b      	beq.n	8008dce <vPortFree+0x66>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	60bb      	str	r3, [r7, #8]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	4b14      	ldr	r3, [pc, #80]	@ (8008e24 <vPortFree+0xbc>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01e      	beq.n	8008e1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d11a      	bne.n	8008e1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e24 <vPortFree+0xbc>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	43db      	mvns	r3, r3
 8008dee:	401a      	ands	r2, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008df4:	f7fe fb66 	bl	80074c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e28 <vPortFree+0xc0>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4413      	add	r3, r2
 8008e02:	4a09      	ldr	r2, [pc, #36]	@ (8008e28 <vPortFree+0xc0>)
 8008e04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e06:	6938      	ldr	r0, [r7, #16]
 8008e08:	f000 f874 	bl	8008ef4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e0c:	4b07      	ldr	r3, [pc, #28]	@ (8008e2c <vPortFree+0xc4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	4a06      	ldr	r2, [pc, #24]	@ (8008e2c <vPortFree+0xc4>)
 8008e14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e16:	f7fe fb63 	bl	80074e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e1a:	bf00      	nop
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	200020f0 	.word	0x200020f0
 8008e28:	200020e0 	.word	0x200020e0
 8008e2c:	200020ec 	.word	0x200020ec

08008e30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e36:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008e3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e3c:	4b27      	ldr	r3, [pc, #156]	@ (8008edc <prvHeapInit+0xac>)
 8008e3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00c      	beq.n	8008e64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3307      	adds	r3, #7
 8008e4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 0307 	bic.w	r3, r3, #7
 8008e56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008edc <prvHeapInit+0xac>)
 8008e60:	4413      	add	r3, r2
 8008e62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e68:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee0 <prvHeapInit+0xb0>)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee0 <prvHeapInit+0xb0>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4413      	add	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e7c:	2208      	movs	r2, #8
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1a9b      	subs	r3, r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 0307 	bic.w	r3, r3, #7
 8008e8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4a15      	ldr	r2, [pc, #84]	@ (8008ee4 <prvHeapInit+0xb4>)
 8008e90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e92:	4b14      	ldr	r3, [pc, #80]	@ (8008ee4 <prvHeapInit+0xb4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2200      	movs	r2, #0
 8008e98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e9a:	4b12      	ldr	r3, [pc, #72]	@ (8008ee4 <prvHeapInit+0xb4>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee4 <prvHeapInit+0xb4>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8008ee8 <prvHeapInit+0xb8>)
 8008ebe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a09      	ldr	r2, [pc, #36]	@ (8008eec <prvHeapInit+0xbc>)
 8008ec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ec8:	4b09      	ldr	r3, [pc, #36]	@ (8008ef0 <prvHeapInit+0xc0>)
 8008eca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008ece:	601a      	str	r2, [r3, #0]
}
 8008ed0:	bf00      	nop
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	2000151c 	.word	0x2000151c
 8008ee0:	200020d4 	.word	0x200020d4
 8008ee4:	200020dc 	.word	0x200020dc
 8008ee8:	200020e4 	.word	0x200020e4
 8008eec:	200020e0 	.word	0x200020e0
 8008ef0:	200020f0 	.word	0x200020f0

08008ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008efc:	4b28      	ldr	r3, [pc, #160]	@ (8008fa0 <prvInsertBlockIntoFreeList+0xac>)
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	e002      	b.n	8008f08 <prvInsertBlockIntoFreeList+0x14>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d8f7      	bhi.n	8008f02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d108      	bne.n	8008f36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	441a      	add	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	441a      	add	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d118      	bne.n	8008f7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	4b15      	ldr	r3, [pc, #84]	@ (8008fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d00d      	beq.n	8008f72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	441a      	add	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	e008      	b.n	8008f84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f72:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	e003      	b.n	8008f84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d002      	beq.n	8008f92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f92:	bf00      	nop
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	200020d4 	.word	0x200020d4
 8008fa4:	200020dc 	.word	0x200020dc

08008fa8 <memset>:
 8008fa8:	4402      	add	r2, r0
 8008faa:	4603      	mov	r3, r0
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d100      	bne.n	8008fb2 <memset+0xa>
 8008fb0:	4770      	bx	lr
 8008fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb6:	e7f9      	b.n	8008fac <memset+0x4>

08008fb8 <__libc_init_array>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	4d0d      	ldr	r5, [pc, #52]	@ (8008ff0 <__libc_init_array+0x38>)
 8008fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8008ff4 <__libc_init_array+0x3c>)
 8008fbe:	1b64      	subs	r4, r4, r5
 8008fc0:	10a4      	asrs	r4, r4, #2
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	42a6      	cmp	r6, r4
 8008fc6:	d109      	bne.n	8008fdc <__libc_init_array+0x24>
 8008fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8008ff8 <__libc_init_array+0x40>)
 8008fca:	4c0c      	ldr	r4, [pc, #48]	@ (8008ffc <__libc_init_array+0x44>)
 8008fcc:	f000 f826 	bl	800901c <_init>
 8008fd0:	1b64      	subs	r4, r4, r5
 8008fd2:	10a4      	asrs	r4, r4, #2
 8008fd4:	2600      	movs	r6, #0
 8008fd6:	42a6      	cmp	r6, r4
 8008fd8:	d105      	bne.n	8008fe6 <__libc_init_array+0x2e>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe0:	4798      	blx	r3
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7ee      	b.n	8008fc4 <__libc_init_array+0xc>
 8008fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fea:	4798      	blx	r3
 8008fec:	3601      	adds	r6, #1
 8008fee:	e7f2      	b.n	8008fd6 <__libc_init_array+0x1e>
 8008ff0:	0800919c 	.word	0x0800919c
 8008ff4:	0800919c 	.word	0x0800919c
 8008ff8:	0800919c 	.word	0x0800919c
 8008ffc:	080091a0 	.word	0x080091a0

08009000 <memcpy>:
 8009000:	440a      	add	r2, r1
 8009002:	4291      	cmp	r1, r2
 8009004:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009008:	d100      	bne.n	800900c <memcpy+0xc>
 800900a:	4770      	bx	lr
 800900c:	b510      	push	{r4, lr}
 800900e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009016:	4291      	cmp	r1, r2
 8009018:	d1f9      	bne.n	800900e <memcpy+0xe>
 800901a:	bd10      	pop	{r4, pc}

0800901c <_init>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr

08009028 <_fini>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr
