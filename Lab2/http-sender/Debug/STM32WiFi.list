
STM32WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08006cc0  08006cc0  00007cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007248  08007248  000091e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007248  08007248  00008248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007250  08007250  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007250  08007250  00008250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007258  08007258  00008258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007260  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000100c  200001e0  08007440  000091e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011ec  08007440  000091ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011aa4  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255a  00000000  00000000  0001acb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00006f8f  00000000  00000000  0001d20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  000241a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000098f  00000000  00000000  00024e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268f8  00000000  00000000  000257b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d3d  00000000  00000000  0004c0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7e71  00000000  00000000  0005edec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146c5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033a8  00000000  00000000  00146ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0014a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ca8 	.word	0x08006ca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006ca8 	.word	0x08006ca8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	2400      	movs	r4, #0
 8000bb0:	9403      	str	r4, [sp, #12]
 8000bb2:	9404      	str	r4, [sp, #16]
 8000bb4:	9405      	str	r4, [sp, #20]
 8000bb6:	9406      	str	r4, [sp, #24]
 8000bb8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b2e      	ldr	r3, [pc, #184]	@ (8000c74 <MX_GPIO_Init+0xcc>)
 8000bbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bbe:	f042 0210 	orr.w	r2, r2, #16
 8000bc2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bc6:	f002 0210 	and.w	r2, r2, #16
 8000bca:	9200      	str	r2, [sp, #0]
 8000bcc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bd0:	f042 0202 	orr.w	r2, r2, #2
 8000bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bd8:	f002 0202 	and.w	r2, r2, #2
 8000bdc:	9201      	str	r2, [sp, #4]
 8000bde:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000be2:	f042 0204 	orr.w	r2, r2, #4
 8000be6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WIFI_RESET_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000bf2:	4e21      	ldr	r6, [pc, #132]	@ (8000c78 <MX_GPIO_Init+0xd0>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f240 1101 	movw	r1, #257	@ 0x101
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	f001 fb2f 	bl	800225e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_RESET_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c00:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8000c80 <MX_GPIO_Init+0xd8>
 8000c04:	4622      	mov	r2, r4
 8000c06:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	f001 fb27 	bl	800225e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin;
 8000c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c14:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2501      	movs	r5, #1
 8000c18:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1c:	2702      	movs	r7, #2
 8000c1e:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c20:	a903      	add	r1, sp, #12
 8000c22:	4630      	mov	r0, r6
 8000c24:	f001 fa28 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_RESET_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin|LED_BLUE_Pin;
 8000c28:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c2c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	a903      	add	r1, sp, #12
 8000c36:	4640      	mov	r0, r8
 8000c38:	f001 fa1e 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_CS_Pin */
  GPIO_InitStruct.Pin = WIFI_CS_Pin;
 8000c3c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(WIFI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c44:	a903      	add	r1, sp, #12
 8000c46:	4630      	mov	r0, r6
 8000c48:	f001 fa16 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_INT_Pin */
  GPIO_InitStruct.Pin = WIFI_INT_Pin;
 8000c4c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_GPIO_Init+0xd4>)
 8000c50:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(WIFI_INT_GPIO_Port, &GPIO_InitStruct);
 8000c54:	a903      	add	r1, sp, #12
 8000c56:	4630      	mov	r0, r6
 8000c58:	f001 fa0e 	bl	8002078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c5c:	4622      	mov	r2, r4
 8000c5e:	4621      	mov	r1, r4
 8000c60:	2007      	movs	r0, #7
 8000c62:	f001 f9e1 	bl	8002028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c66:	2007      	movs	r0, #7
 8000c68:	f001 f9ee 	bl	8002048 <HAL_NVIC_EnableIRQ>

}
 8000c6c:	b008      	add	sp, #32
 8000c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48001000 	.word	0x48001000
 8000c7c:	10110000 	.word	0x10110000
 8000c80:	48000800 	.word	0x48000800

08000c84 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <Error_Handler+0x2>

08000c88 <MX_SPI3_Init>:
{
 8000c88:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8000c8a:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <MX_SPI3_Init+0x40>)
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_SPI3_Init+0x44>)
 8000c8e:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c90:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000c94:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	2300      	movs	r3, #0
 8000c98:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c9a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c9e:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca0:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca2:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ca8:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000caa:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cac:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cae:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb0:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cb6:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cbc:	f002 ff97 	bl	8003bee <HAL_SPI_Init>
 8000cc0:	b900      	cbnz	r0, 8000cc4 <MX_SPI3_Init+0x3c>
}
 8000cc2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cc4:	f7ff ffde 	bl	8000c84 <Error_Handler>
 8000cc8:	200001fc 	.word	0x200001fc
 8000ccc:	40003c00 	.word	0x40003c00

08000cd0 <MX_I2C2_Init>:
{
 8000cd0:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8000cd2:	4813      	ldr	r0, [pc, #76]	@ (8000d20 <MX_I2C2_Init+0x50>)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <MX_I2C2_Init+0x54>)
 8000cd6:	6643      	str	r3, [r0, #100]	@ 0x64
  hi2c2.Init.Timing = 0x00000E14;
 8000cd8:	f640 6314 	movw	r3, #3604	@ 0xe14
 8000cdc:	6683      	str	r3, [r0, #104]	@ 0x68
  hi2c2.Init.OwnAddress1 = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	66c3      	str	r3, [r0, #108]	@ 0x6c
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	6702      	str	r2, [r0, #112]	@ 0x70
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce6:	6743      	str	r3, [r0, #116]	@ 0x74
  hi2c2.Init.OwnAddress2 = 0;
 8000ce8:	6783      	str	r3, [r0, #120]	@ 0x78
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cea:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf0:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cf4:	3064      	adds	r0, #100	@ 0x64
 8000cf6:	f001 fc06 	bl	8002506 <HAL_I2C_Init>
 8000cfa:	b950      	cbnz	r0, 8000d12 <MX_I2C2_Init+0x42>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	480a      	ldr	r0, [pc, #40]	@ (8000d28 <MX_I2C2_Init+0x58>)
 8000d00:	f001 fddc 	bl	80028bc <HAL_I2CEx_ConfigAnalogFilter>
 8000d04:	b938      	cbnz	r0, 8000d16 <MX_I2C2_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <MX_I2C2_Init+0x58>)
 8000d0a:	f001 fe05 	bl	8002918 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0e:	b920      	cbnz	r0, 8000d1a <MX_I2C2_Init+0x4a>
}
 8000d10:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d12:	f7ff ffb7 	bl	8000c84 <Error_Handler>
    Error_Handler();
 8000d16:	f7ff ffb5 	bl	8000c84 <Error_Handler>
    Error_Handler();
 8000d1a:	f7ff ffb3 	bl	8000c84 <Error_Handler>
 8000d1e:	bf00      	nop
 8000d20:	200001fc 	.word	0x200001fc
 8000d24:	40005800 	.word	0x40005800
 8000d28:	20000260 	.word	0x20000260

08000d2c <SystemClock_Config>:
{
 8000d2c:	b500      	push	{lr}
 8000d2e:	b0b9      	sub	sp, #228	@ 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d30:	2244      	movs	r2, #68	@ 0x44
 8000d32:	2100      	movs	r1, #0
 8000d34:	a827      	add	r0, sp, #156	@ 0x9c
 8000d36:	f003 feaa 	bl	8004a8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	9122      	str	r1, [sp, #136]	@ 0x88
 8000d3e:	9123      	str	r1, [sp, #140]	@ 0x8c
 8000d40:	9124      	str	r1, [sp, #144]	@ 0x90
 8000d42:	9125      	str	r1, [sp, #148]	@ 0x94
 8000d44:	9126      	str	r1, [sp, #152]	@ 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d46:	2288      	movs	r2, #136	@ 0x88
 8000d48:	4668      	mov	r0, sp
 8000d4a:	f003 fea0 	bl	8004a8e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	9327      	str	r3, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d52:	2301      	movs	r3, #1
 8000d54:	932d      	str	r3, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d56:	2360      	movs	r3, #96	@ 0x60
 8000d58:	932f      	str	r3, [sp, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	a827      	add	r0, sp, #156	@ 0x9c
 8000d5c:	f001 fefa 	bl	8002b54 <HAL_RCC_OscConfig>
 8000d60:	b9d0      	cbnz	r0, 8000d98 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d62:	230f      	movs	r3, #15
 8000d64:	9322      	str	r3, [sp, #136]	@ 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d66:	2100      	movs	r1, #0
 8000d68:	9123      	str	r1, [sp, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6a:	9124      	str	r1, [sp, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	9125      	str	r1, [sp, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	9126      	str	r1, [sp, #152]	@ 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d70:	a822      	add	r0, sp, #136	@ 0x88
 8000d72:	f002 fa05 	bl	8003180 <HAL_RCC_ClockConfig>
 8000d76:	b988      	cbnz	r0, 8000d9c <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d80:	4668      	mov	r0, sp
 8000d82:	f002 fc09 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	b958      	cbnz	r0, 8000da0 <SystemClock_Config+0x74>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d88:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d8c:	f001 fdf8 	bl	8002980 <HAL_PWREx_ControlVoltageScaling>
 8000d90:	b940      	cbnz	r0, 8000da4 <SystemClock_Config+0x78>
}
 8000d92:	b039      	add	sp, #228	@ 0xe4
 8000d94:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d98:	f7ff ff74 	bl	8000c84 <Error_Handler>
    Error_Handler();
 8000d9c:	f7ff ff72 	bl	8000c84 <Error_Handler>
    Error_Handler();
 8000da0:	f7ff ff70 	bl	8000c84 <Error_Handler>
    Error_Handler();
 8000da4:	f7ff ff6e 	bl	8000c84 <Error_Handler>

08000da8 <main>:
{
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	b086      	sub	sp, #24
  HAL_Init();
 8000dac:	f001 f8b2 	bl	8001f14 <HAL_Init>
  SystemClock_Config();
 8000db0:	f7ff ffbc 	bl	8000d2c <SystemClock_Config>
  MX_GPIO_Init();
 8000db4:	f7ff fef8 	bl	8000ba8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000db8:	f7ff ff66 	bl	8000c88 <MX_SPI3_Init>
  MX_I2C2_Init();
 8000dbc:	f7ff ff88 	bl	8000cd0 <MX_I2C2_Init>
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port,WIFI_RESET_Pin,GPIO_PIN_RESET);
 8000dc0:	4c40      	ldr	r4, [pc, #256]	@ (8000ec4 <main+0x11c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f001 fa48 	bl	800225e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000dce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dd2:	f001 f8c1 	bl	8001f58 <HAL_Delay>
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port,WIFI_RESET_Pin,GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f001 fa3e 	bl	800225e <HAL_GPIO_WritePin>
   result=getWifiModuleReady();
 8000de2:	f000 fd65 	bl	80018b0 <getWifiModuleReady>
  }while(!result);
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d0fb      	beq.n	8000de2 <main+0x3a>
  startWifi();
 8000dea:	f001 f841 	bl	8001e70 <startWifi>
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2140      	movs	r1, #64	@ 0x40
 8000df2:	4835      	ldr	r0, [pc, #212]	@ (8000ec8 <main+0x120>)
 8000df4:	f001 fa33 	bl	800225e <HAL_GPIO_WritePin>
  startToF();
 8000df8:	f000 fa6a 	bl	80012d0 <startToF>
  HAL_Delay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f001 f8ab 	bl	8001f58 <HAL_Delay>
  initHTS221();
 8000e02:	f000 f877 	bl	8000ef4 <initHTS221>
  HAL_Delay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f001 f8a6 	bl	8001f58 <HAL_Delay>
  init_accelerometer();
 8000e0c:	f000 faa6 	bl	800135c <init_accelerometer>
  init_magnetometer();
 8000e10:	f000 fb64 	bl	80014dc <init_magnetometer>
  int distance=0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	9302      	str	r3, [sp, #8]
      getDistance(&distance);
 8000e18:	a802      	add	r0, sp, #8
 8000e1a:	f000 fa6d 	bl	80012f8 <getDistance>
	  getAxisAccelerometer(&accx,&accy,&accz);
 8000e1e:	f10d 0212 	add.w	r2, sp, #18
 8000e22:	a905      	add	r1, sp, #20
 8000e24:	f10d 0016 	add.w	r0, sp, #22
 8000e28:	f000 faac 	bl	8001384 <getAxisAccelerometer>
	  getAxisMagnetometer(&magx,&magy,&magz);
 8000e2c:	aa03      	add	r2, sp, #12
 8000e2e:	f10d 010e 	add.w	r1, sp, #14
 8000e32:	a804      	add	r0, sp, #16
 8000e34:	f000 fb64 	bl	8001500 <getAxisMagnetometer>
	  getHumidity(&hum);
 8000e38:	4668      	mov	r0, sp
 8000e3a:	f000 f9bd 	bl	80011b8 <getHumidity>
	  getTemperature(&temp);
 8000e3e:	a801      	add	r0, sp, #4
 8000e40:	f000 fa00 	bl	8001244 <getTemperature>
	  startToF();
 8000e44:	f000 fa44 	bl	80012d0 <startToF>
	  setSensor("Accelerometer");
 8000e48:	4820      	ldr	r0, [pc, #128]	@ (8000ecc <main+0x124>)
 8000e4a:	f000 fe2f 	bl	8001aac <setSensor>
	  setDataInt("x",accx);
 8000e4e:	4e20      	ldr	r6, [pc, #128]	@ (8000ed0 <main+0x128>)
 8000e50:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8000e54:	4630      	mov	r0, r6
 8000e56:	f000 fe95 	bl	8001b84 <setDataInt>
	  setDataInt("y",accy);
 8000e5a:	4d1e      	ldr	r5, [pc, #120]	@ (8000ed4 <main+0x12c>)
 8000e5c:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8000e60:	4628      	mov	r0, r5
 8000e62:	f000 fe8f 	bl	8001b84 <setDataInt>
	  setDataInt("z",accz);
 8000e66:	4c1c      	ldr	r4, [pc, #112]	@ (8000ed8 <main+0x130>)
 8000e68:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f000 fe89 	bl	8001b84 <setDataInt>
	  setSensor("Magnetometer");
 8000e72:	481a      	ldr	r0, [pc, #104]	@ (8000edc <main+0x134>)
 8000e74:	f000 fe1a 	bl	8001aac <setSensor>
	  setDataInt("x",magx);
 8000e78:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f000 fe81 	bl	8001b84 <setDataInt>
	  setDataInt("y",magy);
 8000e82:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8000e86:	4628      	mov	r0, r5
 8000e88:	f000 fe7c 	bl	8001b84 <setDataInt>
	  setDataInt("z",magz);
 8000e8c:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8000e90:	4620      	mov	r0, r4
 8000e92:	f000 fe77 	bl	8001b84 <setDataInt>
	  setSensor("Environmental");
 8000e96:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <main+0x138>)
 8000e98:	f000 fe08 	bl	8001aac <setSensor>
	  setDataFloat("Humidity",hum);
 8000e9c:	ed9d 0a00 	vldr	s0, [sp]
 8000ea0:	4810      	ldr	r0, [pc, #64]	@ (8000ee4 <main+0x13c>)
 8000ea2:	f000 fecd 	bl	8001c40 <setDataFloat>
	  setDataFloat("Temperature",temp);
 8000ea6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8000eaa:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <main+0x140>)
 8000eac:	f000 fec8 	bl	8001c40 <setDataFloat>
      setSensor("Time of flight");
 8000eb0:	480e      	ldr	r0, [pc, #56]	@ (8000eec <main+0x144>)
 8000eb2:	f000 fdfb 	bl	8001aac <setSensor>
      setDataInt("distance",distance);
 8000eb6:	9902      	ldr	r1, [sp, #8]
 8000eb8:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <main+0x148>)
 8000eba:	f000 fe63 	bl	8001b84 <setDataInt>
	  sendData();
 8000ebe:	f000 ff27 	bl	8001d10 <sendData>
  while (1)
 8000ec2:	e7a9      	b.n	8000e18 <main+0x70>
 8000ec4:	48001000 	.word	0x48001000
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	08006d08 	.word	0x08006d08
 8000ed0:	08006d18 	.word	0x08006d18
 8000ed4:	08006d1c 	.word	0x08006d1c
 8000ed8:	08006d20 	.word	0x08006d20
 8000edc:	08006d24 	.word	0x08006d24
 8000ee0:	08006d34 	.word	0x08006d34
 8000ee4:	08006d44 	.word	0x08006d44
 8000ee8:	08006d50 	.word	0x08006d50
 8000eec:	08006d5c 	.word	0x08006d5c
 8000ef0:	08006d6c 	.word	0x08006d6c

08000ef4 <initHTS221>:

	*pressure=((float)lsb)/((float)(4096));

}

void initHTS221(){
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	b08e      	sub	sp, #56	@ 0x38
	uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	uint8_t turnOn[]={0x20,0x81};//The address of the register and the value of the register to turn on the sensor
 8000ef8:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000efc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    uint8_t data[2];

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8000f00:	4eab      	ldr	r6, [pc, #684]	@ (80011b0 <initHTS221+0x2bc>)
 8000f02:	2401      	movs	r4, #1
 8000f04:	9400      	str	r4, [sp, #0]
 8000f06:	2302      	movs	r3, #2
 8000f08:	aa0d      	add	r2, sp, #52	@ 0x34
 8000f0a:	21be      	movs	r1, #190	@ 0xbe
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f001 fb59 	bl	80025c4 <HAL_I2C_Master_Transmit>


    uint8_t tempMinAddress[]={0x32};
 8000f12:	2332      	movs	r3, #50	@ 0x32
 8000f14:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    uint8_t tempMaxAddress[]={0x33};
 8000f18:	2333      	movs	r3, #51	@ 0x33
 8000f1a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
    //reading low temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMinAddress,1,1);
 8000f1e:	9400      	str	r4, [sp, #0]
 8000f20:	4623      	mov	r3, r4
 8000f22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8000f24:	21be      	movs	r1, #190	@ 0xbe
 8000f26:	4630      	mov	r0, r6
 8000f28:	f001 fb4c 	bl	80025c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8000f2c:	9400      	str	r4, [sp, #0]
 8000f2e:	4623      	mov	r3, r4
 8000f30:	aa0c      	add	r2, sp, #48	@ 0x30
 8000f32:	21bf      	movs	r1, #191	@ 0xbf
 8000f34:	4630      	mov	r0, r6
 8000f36:	f001 fc03 	bl	8002740 <HAL_I2C_Master_Receive>
    T_C0=data[0];
 8000f3a:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8000f3e:	4d9d      	ldr	r5, [pc, #628]	@ (80011b4 <initHTS221+0x2c0>)
 8000f40:	602b      	str	r3, [r5, #0]

    //reading high temperature calibration lsb
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempMaxAddress,1,1);
 8000f42:	9400      	str	r4, [sp, #0]
 8000f44:	4623      	mov	r3, r4
 8000f46:	aa0a      	add	r2, sp, #40	@ 0x28
 8000f48:	21be      	movs	r1, #190	@ 0xbe
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	f001 fb3a 	bl	80025c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8000f50:	9400      	str	r4, [sp, #0]
 8000f52:	4623      	mov	r3, r4
 8000f54:	aa0c      	add	r2, sp, #48	@ 0x30
 8000f56:	21bf      	movs	r1, #191	@ 0xbf
 8000f58:	4630      	mov	r0, r6
 8000f5a:	f001 fbf1 	bl	8002740 <HAL_I2C_Master_Receive>
    T_C1=data[0];
 8000f5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8000f62:	606b      	str	r3, [r5, #4]

	uint8_t MSB_temp[]={0x35};
 8000f64:	2335      	movs	r3, #53	@ 0x35
 8000f66:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MSB_temp,1,1);
 8000f6a:	9400      	str	r4, [sp, #0]
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	aa09      	add	r2, sp, #36	@ 0x24
 8000f70:	21be      	movs	r1, #190	@ 0xbe
 8000f72:	4630      	mov	r0, r6
 8000f74:	f001 fb26 	bl	80025c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8000f78:	9400      	str	r4, [sp, #0]
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	aa0c      	add	r2, sp, #48	@ 0x30
 8000f7e:	21bf      	movs	r1, #191	@ 0xbf
 8000f80:	4630      	mov	r0, r6
 8000f82:	f001 fbdd 	bl	8002740 <HAL_I2C_Master_Receive>

	T_C0|=((data[0]&0x03)<<8);
 8000f86:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8000f8a:	021a      	lsls	r2, r3, #8
 8000f8c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8000f90:	6829      	ldr	r1, [r5, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	602a      	str	r2, [r5, #0]
	T_C1|=(((data[0]&0x0c)>>2)<<8);
 8000f96:	109b      	asrs	r3, r3, #2
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000f9e:	6869      	ldr	r1, [r5, #4]
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	606b      	str	r3, [r5, #4]

	T_C0=T_C0>>3;
 8000fa4:	10d2      	asrs	r2, r2, #3
 8000fa6:	602a      	str	r2, [r5, #0]
	T_C1=T_C1>>3;
 8000fa8:	10db      	asrs	r3, r3, #3
 8000faa:	606b      	str	r3, [r5, #4]

	uint8_t ADC0L[]={0x3c};
 8000fac:	233c      	movs	r3, #60	@ 0x3c
 8000fae:	f88d 3020 	strb.w	r3, [sp, #32]
	uint8_t ADC0H[]={0x3d};
 8000fb2:	233d      	movs	r3, #61	@ 0x3d
 8000fb4:	f88d 301c 	strb.w	r3, [sp, #28]
	//get the calibration adc min
	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 8000fb8:	9400      	str	r4, [sp, #0]
 8000fba:	4623      	mov	r3, r4
 8000fbc:	aa08      	add	r2, sp, #32
 8000fbe:	21be      	movs	r1, #190	@ 0xbe
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	f001 faff 	bl	80025c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8000fc6:	9400      	str	r4, [sp, #0]
 8000fc8:	4623      	mov	r3, r4
 8000fca:	aa0c      	add	r2, sp, #48	@ 0x30
 8000fcc:	21bf      	movs	r1, #191	@ 0xbf
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f001 fbb6 	bl	8002740 <HAL_I2C_Master_Receive>
	T_C0_lsb=data[0];
 8000fd4:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8000fd8:	812b      	strh	r3, [r5, #8]

	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 8000fda:	9400      	str	r4, [sp, #0]
 8000fdc:	4623      	mov	r3, r4
 8000fde:	aa07      	add	r2, sp, #28
 8000fe0:	21be      	movs	r1, #190	@ 0xbe
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	f001 faee 	bl	80025c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8000fe8:	9400      	str	r4, [sp, #0]
 8000fea:	4623      	mov	r3, r4
 8000fec:	aa0c      	add	r2, sp, #48	@ 0x30
 8000fee:	21bf      	movs	r1, #191	@ 0xbf
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	f001 fba5 	bl	8002740 <HAL_I2C_Master_Receive>
	T_C0_lsb|=data[0]<<8;
 8000ff6:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 8000ffa:	892b      	ldrh	r3, [r5, #8]
 8000ffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001000:	812b      	strh	r3, [r5, #8]


    uint8_t ADC1L[]={0x3e};
 8001002:	233e      	movs	r3, #62	@ 0x3e
 8001004:	f88d 3018 	strb.w	r3, [sp, #24]
    uint8_t ADC1H[]={0x3f};
 8001008:	233f      	movs	r3, #63	@ 0x3f
 800100a:	f88d 3014 	strb.w	r3, [sp, #20]
    //leggo temperatura
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 800100e:	9400      	str	r4, [sp, #0]
 8001010:	4623      	mov	r3, r4
 8001012:	aa06      	add	r2, sp, #24
 8001014:	21be      	movs	r1, #190	@ 0xbe
 8001016:	4630      	mov	r0, r6
 8001018:	f001 fad4 	bl	80025c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800101c:	9400      	str	r4, [sp, #0]
 800101e:	4623      	mov	r3, r4
 8001020:	aa0c      	add	r2, sp, #48	@ 0x30
 8001022:	21bf      	movs	r1, #191	@ 0xbf
 8001024:	4630      	mov	r0, r6
 8001026:	f001 fb8b 	bl	8002740 <HAL_I2C_Master_Receive>
    T_C1_lsb=data[0];
 800102a:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800102e:	816b      	strh	r3, [r5, #10]

    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 8001030:	9400      	str	r4, [sp, #0]
 8001032:	4623      	mov	r3, r4
 8001034:	aa05      	add	r2, sp, #20
 8001036:	21be      	movs	r1, #190	@ 0xbe
 8001038:	4630      	mov	r0, r6
 800103a:	f001 fac3 	bl	80025c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800103e:	9400      	str	r4, [sp, #0]
 8001040:	4623      	mov	r3, r4
 8001042:	aa0c      	add	r2, sp, #48	@ 0x30
 8001044:	21bf      	movs	r1, #191	@ 0xbf
 8001046:	4630      	mov	r0, r6
 8001048:	f001 fb7a 	bl	8002740 <HAL_I2C_Master_Receive>
    T_C1_lsb|=data[0]<<8;
 800104c:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 8001050:	896b      	ldrh	r3, [r5, #10]
 8001052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001056:	b21b      	sxth	r3, r3
 8001058:	816b      	strh	r3, [r5, #10]

    m=((float)(T_C1-T_C0))/((float)(T_C1_lsb-T_C0_lsb));
 800105a:	686a      	ldr	r2, [r5, #4]
 800105c:	6829      	ldr	r1, [r5, #0]
 800105e:	1a52      	subs	r2, r2, r1
 8001060:	ee07 2a90 	vmov	s15, r2
 8001064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001068:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001076:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800107a:	edc5 6a03 	vstr	s13, [r5, #12]


    uint8_t HumMinAddress[]={0x30};
 800107e:	2330      	movs	r3, #48	@ 0x30
 8001080:	f88d 3010 	strb.w	r3, [sp, #16]
     uint8_t HumMaxAddress[]={0x31};
 8001084:	2331      	movs	r3, #49	@ 0x31
 8001086:	f88d 300c 	strb.w	r3, [sp, #12]
     //reading low temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMinAddress,1,1);
 800108a:	9400      	str	r4, [sp, #0]
 800108c:	4623      	mov	r3, r4
 800108e:	aa04      	add	r2, sp, #16
 8001090:	21be      	movs	r1, #190	@ 0xbe
 8001092:	4630      	mov	r0, r6
 8001094:	f001 fa96 	bl	80025c4 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001098:	9400      	str	r4, [sp, #0]
 800109a:	4623      	mov	r3, r4
 800109c:	aa0c      	add	r2, sp, #48	@ 0x30
 800109e:	21bf      	movs	r1, #191	@ 0xbf
 80010a0:	4630      	mov	r0, r6
 80010a2:	f001 fb4d 	bl	8002740 <HAL_I2C_Master_Receive>
     H_0=data[0];
 80010a6:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80010aa:	742b      	strb	r3, [r5, #16]

     //reading high temperature calibration lsb
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,HumMaxAddress,1,1);
 80010ac:	9400      	str	r4, [sp, #0]
 80010ae:	4623      	mov	r3, r4
 80010b0:	aa03      	add	r2, sp, #12
 80010b2:	21be      	movs	r1, #190	@ 0xbe
 80010b4:	4630      	mov	r0, r6
 80010b6:	f001 fa85 	bl	80025c4 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80010ba:	9400      	str	r4, [sp, #0]
 80010bc:	4623      	mov	r3, r4
 80010be:	aa0c      	add	r2, sp, #48	@ 0x30
 80010c0:	21bf      	movs	r1, #191	@ 0xbf
 80010c2:	4630      	mov	r0, r6
 80010c4:	f001 fb3c 	bl	8002740 <HAL_I2C_Master_Receive>
     H_1=data[0];
 80010c8:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 80010cc:	746b      	strb	r3, [r5, #17]


 	H_0=H_0>>1;
 80010ce:	7c2a      	ldrb	r2, [r5, #16]
 80010d0:	40e2      	lsrs	r2, r4
 80010d2:	742a      	strb	r2, [r5, #16]
 	H_1=H_1>>1;
 80010d4:	40e3      	lsrs	r3, r4
 80010d6:	746b      	strb	r3, [r5, #17]

 	ADC0L[0]=0x36;
 80010d8:	2336      	movs	r3, #54	@ 0x36
 80010da:	f88d 3020 	strb.w	r3, [sp, #32]
 	ADC0H[0]=0x37;
 80010de:	2337      	movs	r3, #55	@ 0x37
 80010e0:	f88d 301c 	strb.w	r3, [sp, #28]
 	//get the calibration adc min
 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0L,1,1);
 80010e4:	9400      	str	r4, [sp, #0]
 80010e6:	4623      	mov	r3, r4
 80010e8:	aa08      	add	r2, sp, #32
 80010ea:	21be      	movs	r1, #190	@ 0xbe
 80010ec:	4630      	mov	r0, r6
 80010ee:	f001 fa69 	bl	80025c4 <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80010f2:	9400      	str	r4, [sp, #0]
 80010f4:	4623      	mov	r3, r4
 80010f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80010f8:	21bf      	movs	r1, #191	@ 0xbf
 80010fa:	4630      	mov	r0, r6
 80010fc:	f001 fb20 	bl	8002740 <HAL_I2C_Master_Receive>
 	H_0_lsb=data[0];
 8001100:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8001104:	826b      	strh	r3, [r5, #18]

 	HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC0H,1,1);
 8001106:	9400      	str	r4, [sp, #0]
 8001108:	4623      	mov	r3, r4
 800110a:	aa07      	add	r2, sp, #28
 800110c:	21be      	movs	r1, #190	@ 0xbe
 800110e:	4630      	mov	r0, r6
 8001110:	f001 fa58 	bl	80025c4 <HAL_I2C_Master_Transmit>
 	HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001114:	9400      	str	r4, [sp, #0]
 8001116:	4623      	mov	r3, r4
 8001118:	aa0c      	add	r2, sp, #48	@ 0x30
 800111a:	21bf      	movs	r1, #191	@ 0xbf
 800111c:	4630      	mov	r0, r6
 800111e:	f001 fb0f 	bl	8002740 <HAL_I2C_Master_Receive>
 	H_0_lsb|=data[0]<<8;
 8001122:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 8001126:	8a6b      	ldrh	r3, [r5, #18]
 8001128:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800112c:	826b      	strh	r3, [r5, #18]


    ADC1L[0]=0x3a;
 800112e:	233a      	movs	r3, #58	@ 0x3a
 8001130:	f88d 3018 	strb.w	r3, [sp, #24]
    ADC1H[0]=0x3b;
 8001134:	233b      	movs	r3, #59	@ 0x3b
 8001136:	f88d 3014 	strb.w	r3, [sp, #20]
     //leggo temperatura
     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1L,1,1);
 800113a:	9400      	str	r4, [sp, #0]
 800113c:	4623      	mov	r3, r4
 800113e:	aa06      	add	r2, sp, #24
 8001140:	21be      	movs	r1, #190	@ 0xbe
 8001142:	4630      	mov	r0, r6
 8001144:	f001 fa3e 	bl	80025c4 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001148:	9400      	str	r4, [sp, #0]
 800114a:	4623      	mov	r3, r4
 800114c:	aa0c      	add	r2, sp, #48	@ 0x30
 800114e:	21bf      	movs	r1, #191	@ 0xbf
 8001150:	4630      	mov	r0, r6
 8001152:	f001 faf5 	bl	8002740 <HAL_I2C_Master_Receive>
     H_1_lsb=data[0];
 8001156:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 800115a:	82ab      	strh	r3, [r5, #20]

     HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ADC1H,1,1);
 800115c:	9400      	str	r4, [sp, #0]
 800115e:	4623      	mov	r3, r4
 8001160:	aa05      	add	r2, sp, #20
 8001162:	21be      	movs	r1, #190	@ 0xbe
 8001164:	4630      	mov	r0, r6
 8001166:	f001 fa2d 	bl	80025c4 <HAL_I2C_Master_Transmit>
     HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 800116a:	9400      	str	r4, [sp, #0]
 800116c:	4623      	mov	r3, r4
 800116e:	aa0c      	add	r2, sp, #48	@ 0x30
 8001170:	21bf      	movs	r1, #191	@ 0xbf
 8001172:	4630      	mov	r0, r6
 8001174:	f001 fae4 	bl	8002740 <HAL_I2C_Master_Receive>
     H_1_lsb|=data[0]<<8;
 8001178:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 800117c:	8aab      	ldrh	r3, [r5, #20]
 800117e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001182:	b21b      	sxth	r3, r3
 8001184:	82ab      	strh	r3, [r5, #20]

     mh=((float)(H_1-H_0))/((float)(H_1_lsb-H_0_lsb));
 8001186:	7c6a      	ldrb	r2, [r5, #17]
 8001188:	7c29      	ldrb	r1, [r5, #16]
 800118a:	1a52      	subs	r2, r2, r1
 800118c:	ee07 2a90 	vmov	s15, r2
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011a6:	edc5 6a06 	vstr	s13, [r5, #24]



}
 80011aa:	b00e      	add	sp, #56	@ 0x38
 80011ac:	bd70      	pop	{r4, r5, r6, pc}
 80011ae:	bf00      	nop
 80011b0:	20000260 	.word	0x20000260
 80011b4:	200002ac 	.word	0x200002ac

080011b8 <getHumidity>:

void getHumidity(float *humidity){
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	b087      	sub	sp, #28
 80011bc:	4607      	mov	r7, r0

    uint8_t humL[]={0x28};
 80011be:	2328      	movs	r3, #40	@ 0x28
 80011c0:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t humH[]={0x29};
 80011c4:	2329      	movs	r3, #41	@ 0x29
 80011c6:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t hum;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humL,1,1);
 80011ca:	4e1c      	ldr	r6, [pc, #112]	@ (800123c <getHumidity+0x84>)
 80011cc:	2401      	movs	r4, #1
 80011ce:	9400      	str	r4, [sp, #0]
 80011d0:	4623      	mov	r3, r4
 80011d2:	aa05      	add	r2, sp, #20
 80011d4:	21be      	movs	r1, #190	@ 0xbe
 80011d6:	4630      	mov	r0, r6
 80011d8:	f001 f9f4 	bl	80025c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80011dc:	9400      	str	r4, [sp, #0]
 80011de:	4623      	mov	r3, r4
 80011e0:	aa03      	add	r2, sp, #12
 80011e2:	21bf      	movs	r1, #191	@ 0xbf
 80011e4:	4630      	mov	r0, r6
 80011e6:	f001 faab 	bl	8002740 <HAL_I2C_Master_Receive>
    hum=data[0];
 80011ea:	f89d 500c 	ldrb.w	r5, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,humH,1,1);
 80011ee:	9400      	str	r4, [sp, #0]
 80011f0:	4623      	mov	r3, r4
 80011f2:	aa04      	add	r2, sp, #16
 80011f4:	21be      	movs	r1, #190	@ 0xbe
 80011f6:	4630      	mov	r0, r6
 80011f8:	f001 f9e4 	bl	80025c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 80011fc:	9400      	str	r4, [sp, #0]
 80011fe:	4623      	mov	r3, r4
 8001200:	aa03      	add	r2, sp, #12
 8001202:	21bf      	movs	r1, #191	@ 0xbf
 8001204:	4630      	mov	r0, r6
 8001206:	f001 fa9b 	bl	8002740 <HAL_I2C_Master_Receive>
    hum|=data[0]<<1;
 800120a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800120e:	ea45 0343 	orr.w	r3, r5, r3, lsl #1
 8001212:	ee07 3a90 	vmov	s15, r3

    *humidity=H_0+mh*hum;
 8001216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <getHumidity+0x88>)
 800121c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	7c1b      	ldrb	r3, [r3, #16]
 8001226:	ee07 3a10 	vmov	s14, r3
 800122a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800122e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001232:	edc7 7a00 	vstr	s15, [r7]

}
 8001236:	b007      	add	sp, #28
 8001238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123a:	bf00      	nop
 800123c:	20000260 	.word	0x20000260
 8001240:	200002ac 	.word	0x200002ac

08001244 <getTemperature>:



void getTemperature(float *temperature){
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b087      	sub	sp, #28
 8001248:	4607      	mov	r7, r0

    uint8_t tempL[]={0x2A};
 800124a:	232a      	movs	r3, #42	@ 0x2a
 800124c:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t tempH[]={0x2B};
 8001250:	232b      	movs	r3, #43	@ 0x2b
 8001252:	f88d 3010 	strb.w	r3, [sp, #16]
    uint8_t data[2];
    uint8_t addressWrite=0xbe;
	uint8_t addressRead=0xbf;
	int16_t temp;
    //reading temperature
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempL,1,1);
 8001256:	4e1c      	ldr	r6, [pc, #112]	@ (80012c8 <getTemperature+0x84>)
 8001258:	2501      	movs	r5, #1
 800125a:	9500      	str	r5, [sp, #0]
 800125c:	462b      	mov	r3, r5
 800125e:	aa05      	add	r2, sp, #20
 8001260:	21be      	movs	r1, #190	@ 0xbe
 8001262:	4630      	mov	r0, r6
 8001264:	f001 f9ae 	bl	80025c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001268:	9500      	str	r5, [sp, #0]
 800126a:	462b      	mov	r3, r5
 800126c:	aa03      	add	r2, sp, #12
 800126e:	21bf      	movs	r1, #191	@ 0xbf
 8001270:	4630      	mov	r0, r6
 8001272:	f001 fa65 	bl	8002740 <HAL_I2C_Master_Receive>
    temp=data[0];
 8001276:	f89d 400c 	ldrb.w	r4, [sp, #12]

    //high register
    HAL_I2C_Master_Transmit(&hi2c2,addressWrite,tempH,1,1);
 800127a:	9500      	str	r5, [sp, #0]
 800127c:	462b      	mov	r3, r5
 800127e:	aa04      	add	r2, sp, #16
 8001280:	21be      	movs	r1, #190	@ 0xbe
 8001282:	4630      	mov	r0, r6
 8001284:	f001 f99e 	bl	80025c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2,addressRead,data,1,1);
 8001288:	9500      	str	r5, [sp, #0]
 800128a:	462b      	mov	r3, r5
 800128c:	aa03      	add	r2, sp, #12
 800128e:	21bf      	movs	r1, #191	@ 0xbf
 8001290:	4630      	mov	r0, r6
 8001292:	f001 fa55 	bl	8002740 <HAL_I2C_Master_Receive>
    temp|=data[0]<<8;
 8001296:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800129a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800129e:	b224      	sxth	r4, r4

    *temperature=T_C0+m*temp;
 80012a0:	ee07 4a90 	vmov	s15, r4
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <getTemperature+0x88>)
 80012aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b2:	ed93 7a00 	vldr	s14, [r3]
 80012b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012be:	edc7 7a00 	vstr	s15, [r7]

}
 80012c2:	b007      	add	sp, #28
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000260 	.word	0x20000260
 80012cc:	200002ac 	.word	0x200002ac

080012d0 <startToF>:


void startToF(){
 80012d0:	b500      	push	{lr}
 80012d2:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x52;
	 uint8_t turnOn[]={0x00,0x01};
 80012d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012d8:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2302      	movs	r3, #2
 80012e2:	aa03      	add	r2, sp, #12
 80012e4:	2152      	movs	r1, #82	@ 0x52
 80012e6:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <startToF+0x24>)
 80012e8:	f001 f96c 	bl	80025c4 <HAL_I2C_Master_Transmit>
}
 80012ec:	b005      	add	sp, #20
 80012ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80012f2:	bf00      	nop
 80012f4:	20000260 	.word	0x20000260

080012f8 <getDistance>:

void getDistance(int *distance){
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	4604      	mov	r4, r0
	 uint8_t addressWrite=0x52;
	  uint8_t addressRead=0x53;
	  uint8_t resultAddress[]={0x1e};
 80012fe:	231e      	movs	r3, #30
 8001300:	f88d 300c 	strb.w	r3, [sp, #12]
	  uint8_t rawData[]={0,0};
 8001304:	2300      	movs	r3, #0
 8001306:	f8ad 3008 	strh.w	r3, [sp, #8]

	  HAL_I2C_Master_Transmit(&hi2c2,addressWrite,resultAddress,1,1);
 800130a:	4e13      	ldr	r6, [pc, #76]	@ (8001358 <getDistance+0x60>)
 800130c:	2501      	movs	r5, #1
 800130e:	9500      	str	r5, [sp, #0]
 8001310:	462b      	mov	r3, r5
 8001312:	aa03      	add	r2, sp, #12
 8001314:	2152      	movs	r1, #82	@ 0x52
 8001316:	4630      	mov	r0, r6
 8001318:	f001 f954 	bl	80025c4 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2,addressRead,rawData,2,1);
 800131c:	9500      	str	r5, [sp, #0]
 800131e:	2302      	movs	r3, #2
 8001320:	aa02      	add	r2, sp, #8
 8001322:	2153      	movs	r1, #83	@ 0x53
 8001324:	4630      	mov	r0, r6
 8001326:	f001 fa0b 	bl	8002740 <HAL_I2C_Master_Receive>
	  *distance=(rawData[0]<<8)+rawData[1]-20;
 800132a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800132e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001332:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001336:	3b14      	subs	r3, #20
 8001338:	6023      	str	r3, [r4, #0]

	  if(*distance<0){
 800133a:	2b00      	cmp	r3, #0
 800133c:	db08      	blt.n	8001350 <getDistance+0x58>
		  *distance=0;
	  }
	  if(*distance>2000){
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001344:	dd02      	ble.n	800134c <getDistance+0x54>
		  *distance=2000;
 8001346:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800134a:	6023      	str	r3, [r4, #0]
	  }
}
 800134c:	b004      	add	sp, #16
 800134e:	bd70      	pop	{r4, r5, r6, pc}
		  *distance=0;
 8001350:	2300      	movs	r3, #0
 8001352:	6023      	str	r3, [r4, #0]
 8001354:	e7f3      	b.n	800133e <getDistance+0x46>
 8001356:	bf00      	nop
 8001358:	20000260 	.word	0x20000260

0800135c <init_accelerometer>:



void init_accelerometer(){
 800135c:	b500      	push	{lr}
 800135e:	b085      	sub	sp, #20

	 uint8_t addressWrite=0xd4;
	 uint8_t turnOn[]={0x10,0x10};
 8001360:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001364:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8001368:	2301      	movs	r3, #1
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2302      	movs	r3, #2
 800136e:	aa03      	add	r2, sp, #12
 8001370:	21d4      	movs	r1, #212	@ 0xd4
 8001372:	4803      	ldr	r0, [pc, #12]	@ (8001380 <init_accelerometer+0x24>)
 8001374:	f001 f926 	bl	80025c4 <HAL_I2C_Master_Transmit>


	}
 8001378:	b005      	add	sp, #20
 800137a:	f85d fb04 	ldr.w	pc, [sp], #4
 800137e:	bf00      	nop
 8001380:	20000260 	.word	0x20000260

08001384 <getAxisAccelerometer>:


void getAxisAccelerometer(int16_t *accx, int16_t *accy, int16_t *accz){
 8001384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	4680      	mov	r8, r0
 800138c:	460f      	mov	r7, r1
 800138e:	4616      	mov	r6, r2
	 uint8_t ACCcmd[1];
	 uint8_t ACCread[1];


	   //ACC X
	   ACCcmd[0]=0x28;
 8001390:	2328      	movs	r3, #40	@ 0x28
 8001392:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001396:	4d50      	ldr	r5, [pc, #320]	@ (80014d8 <getAxisAccelerometer+0x154>)
 8001398:	2401      	movs	r4, #1
 800139a:	9400      	str	r4, [sp, #0]
 800139c:	4623      	mov	r3, r4
 800139e:	aa03      	add	r2, sp, #12
 80013a0:	21d4      	movs	r1, #212	@ 0xd4
 80013a2:	4628      	mov	r0, r5
 80013a4:	f001 f90e 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 80013a8:	9400      	str	r4, [sp, #0]
 80013aa:	4623      	mov	r3, r4
 80013ac:	aa02      	add	r2, sp, #8
 80013ae:	21d5      	movs	r1, #213	@ 0xd5
 80013b0:	4628      	mov	r0, r5
 80013b2:	f001 f9c5 	bl	8002740 <HAL_I2C_Master_Receive>
	   *accx=ACCread[0];
 80013b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80013ba:	f8a8 3000 	strh.w	r3, [r8]

	   ACCcmd[0]=0x29;
 80013be:	2329      	movs	r3, #41	@ 0x29
 80013c0:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 80013c4:	9400      	str	r4, [sp, #0]
 80013c6:	4623      	mov	r3, r4
 80013c8:	aa03      	add	r2, sp, #12
 80013ca:	21d4      	movs	r1, #212	@ 0xd4
 80013cc:	4628      	mov	r0, r5
 80013ce:	f001 f8f9 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 80013d2:	9400      	str	r4, [sp, #0]
 80013d4:	4623      	mov	r3, r4
 80013d6:	aa02      	add	r2, sp, #8
 80013d8:	21d5      	movs	r1, #213	@ 0xd5
 80013da:	4628      	mov	r0, r5
 80013dc:	f001 f9b0 	bl	8002740 <HAL_I2C_Master_Receive>
	   *accx|=((ACCread[0])<<8);
 80013e0:	f9b8 3000 	ldrsh.w	r3, [r8]
 80013e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80013e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80013ec:	f8a8 3000 	strh.w	r3, [r8]



	   //ACC Y

	   ACCcmd[0]=0x2a;
 80013f0:	232a      	movs	r3, #42	@ 0x2a
 80013f2:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 80013f6:	9400      	str	r4, [sp, #0]
 80013f8:	4623      	mov	r3, r4
 80013fa:	aa03      	add	r2, sp, #12
 80013fc:	21d4      	movs	r1, #212	@ 0xd4
 80013fe:	4628      	mov	r0, r5
 8001400:	f001 f8e0 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001404:	9400      	str	r4, [sp, #0]
 8001406:	4623      	mov	r3, r4
 8001408:	aa02      	add	r2, sp, #8
 800140a:	21d5      	movs	r1, #213	@ 0xd5
 800140c:	4628      	mov	r0, r5
 800140e:	f001 f997 	bl	8002740 <HAL_I2C_Master_Receive>
	   *accy=ACCread[0];
 8001412:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001416:	803b      	strh	r3, [r7, #0]

	   ACCcmd[0]=0x2b;
 8001418:	232b      	movs	r3, #43	@ 0x2b
 800141a:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 800141e:	9400      	str	r4, [sp, #0]
 8001420:	4623      	mov	r3, r4
 8001422:	aa03      	add	r2, sp, #12
 8001424:	21d4      	movs	r1, #212	@ 0xd4
 8001426:	4628      	mov	r0, r5
 8001428:	f001 f8cc 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 800142c:	9400      	str	r4, [sp, #0]
 800142e:	4623      	mov	r3, r4
 8001430:	aa02      	add	r2, sp, #8
 8001432:	21d5      	movs	r1, #213	@ 0xd5
 8001434:	4628      	mov	r0, r5
 8001436:	f001 f983 	bl	8002740 <HAL_I2C_Master_Receive>
	   *accy|=((ACCread[0])<<8);
 800143a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800143e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001442:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001446:	803b      	strh	r3, [r7, #0]



	   //ACC Z

	   ACCcmd[0]=0x2c;
 8001448:	232c      	movs	r3, #44	@ 0x2c
 800144a:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 800144e:	9400      	str	r4, [sp, #0]
 8001450:	4623      	mov	r3, r4
 8001452:	aa03      	add	r2, sp, #12
 8001454:	21d4      	movs	r1, #212	@ 0xd4
 8001456:	4628      	mov	r0, r5
 8001458:	f001 f8b4 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 800145c:	9400      	str	r4, [sp, #0]
 800145e:	4623      	mov	r3, r4
 8001460:	aa02      	add	r2, sp, #8
 8001462:	21d5      	movs	r1, #213	@ 0xd5
 8001464:	4628      	mov	r0, r5
 8001466:	f001 f96b 	bl	8002740 <HAL_I2C_Master_Receive>
	   *accz=ACCread[0];
 800146a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800146e:	8033      	strh	r3, [r6, #0]

	   ACCcmd[0]=0x2d;
 8001470:	232d      	movs	r3, #45	@ 0x2d
 8001472:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,ACCcmd,1,1);
 8001476:	9400      	str	r4, [sp, #0]
 8001478:	4623      	mov	r3, r4
 800147a:	aa03      	add	r2, sp, #12
 800147c:	21d4      	movs	r1, #212	@ 0xd4
 800147e:	4628      	mov	r0, r5
 8001480:	f001 f8a0 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,ACCread,1,1);
 8001484:	9400      	str	r4, [sp, #0]
 8001486:	4623      	mov	r3, r4
 8001488:	aa02      	add	r2, sp, #8
 800148a:	21d5      	movs	r1, #213	@ 0xd5
 800148c:	4628      	mov	r0, r5
 800148e:	f001 f957 	bl	8002740 <HAL_I2C_Master_Receive>
	   *accz|=((ACCread[0])<<8);
 8001492:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001496:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800149a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800149e:	8033      	strh	r3, [r6, #0]

	   *accx=*accx/16;
 80014a0:	f9b8 3000 	ldrsh.w	r3, [r8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db11      	blt.n	80014cc <getAxisAccelerometer+0x148>
 80014a8:	111b      	asrs	r3, r3, #4
 80014aa:	f8a8 3000 	strh.w	r3, [r8]
	   *accy=*accy/16;
 80014ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0c      	blt.n	80014d0 <getAxisAccelerometer+0x14c>
 80014b6:	111b      	asrs	r3, r3, #4
 80014b8:	803b      	strh	r3, [r7, #0]
	   *accz=*accz/16;
 80014ba:	f9b6 3000 	ldrsh.w	r3, [r6]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db08      	blt.n	80014d4 <getAxisAccelerometer+0x150>
 80014c2:	111b      	asrs	r3, r3, #4
 80014c4:	8033      	strh	r3, [r6, #0]



}
 80014c6:	b004      	add	sp, #16
 80014c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *accx=*accx/16;
 80014cc:	330f      	adds	r3, #15
 80014ce:	e7eb      	b.n	80014a8 <getAxisAccelerometer+0x124>
	   *accy=*accy/16;
 80014d0:	330f      	adds	r3, #15
 80014d2:	e7f0      	b.n	80014b6 <getAxisAccelerometer+0x132>
	   *accz=*accz/16;
 80014d4:	330f      	adds	r3, #15
 80014d6:	e7f4      	b.n	80014c2 <getAxisAccelerometer+0x13e>
 80014d8:	20000260 	.word	0x20000260

080014dc <init_magnetometer>:
	counter++;
	}
	return counter;
}

void init_magnetometer(){
 80014dc:	b500      	push	{lr}
 80014de:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x3c;
	 uint8_t turnOn[]={0x22,0x00};
 80014e0:	2322      	movs	r3, #34	@ 0x22
 80014e2:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 80014e6:	2301      	movs	r3, #1
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2302      	movs	r3, #2
 80014ec:	aa03      	add	r2, sp, #12
 80014ee:	213c      	movs	r1, #60	@ 0x3c
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <init_magnetometer+0x20>)
 80014f2:	f001 f867 	bl	80025c4 <HAL_I2C_Master_Transmit>


}
 80014f6:	b005      	add	sp, #20
 80014f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80014fc:	20000260 	.word	0x20000260

08001500 <getAxisMagnetometer>:


void getAxisMagnetometer(int16_t *magx, int16_t *magy, int16_t *magz){
 8001500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	4680      	mov	r8, r0
 8001508:	460f      	mov	r7, r1
 800150a:	4616      	mov	r6, r2

	 uint8_t MAGcmd[1];
	 uint8_t MAGread[1];

	   //MAG X
	   MAGcmd[0]=0x28;
 800150c:	2328      	movs	r3, #40	@ 0x28
 800150e:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001512:	4d50      	ldr	r5, [pc, #320]	@ (8001654 <getAxisMagnetometer+0x154>)
 8001514:	2401      	movs	r4, #1
 8001516:	9400      	str	r4, [sp, #0]
 8001518:	4623      	mov	r3, r4
 800151a:	aa03      	add	r2, sp, #12
 800151c:	213c      	movs	r1, #60	@ 0x3c
 800151e:	4628      	mov	r0, r5
 8001520:	f001 f850 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001524:	9400      	str	r4, [sp, #0]
 8001526:	4623      	mov	r3, r4
 8001528:	aa02      	add	r2, sp, #8
 800152a:	213d      	movs	r1, #61	@ 0x3d
 800152c:	4628      	mov	r0, r5
 800152e:	f001 f907 	bl	8002740 <HAL_I2C_Master_Receive>
	   *magx=MAGread[0];
 8001532:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001536:	f8a8 3000 	strh.w	r3, [r8]

	   MAGcmd[0]=0x29;
 800153a:	2329      	movs	r3, #41	@ 0x29
 800153c:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001540:	9400      	str	r4, [sp, #0]
 8001542:	4623      	mov	r3, r4
 8001544:	aa03      	add	r2, sp, #12
 8001546:	213c      	movs	r1, #60	@ 0x3c
 8001548:	4628      	mov	r0, r5
 800154a:	f001 f83b 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 800154e:	9400      	str	r4, [sp, #0]
 8001550:	4623      	mov	r3, r4
 8001552:	aa02      	add	r2, sp, #8
 8001554:	213d      	movs	r1, #61	@ 0x3d
 8001556:	4628      	mov	r0, r5
 8001558:	f001 f8f2 	bl	8002740 <HAL_I2C_Master_Receive>
	   *magx|=((MAGread[0])<<8);
 800155c:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001560:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001564:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001568:	f8a8 3000 	strh.w	r3, [r8]

	   //MAG Y
	   MAGcmd[0]=0x2a;
 800156c:	232a      	movs	r3, #42	@ 0x2a
 800156e:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 8001572:	9400      	str	r4, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	aa03      	add	r2, sp, #12
 8001578:	213c      	movs	r1, #60	@ 0x3c
 800157a:	4628      	mov	r0, r5
 800157c:	f001 f822 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001580:	9400      	str	r4, [sp, #0]
 8001582:	4623      	mov	r3, r4
 8001584:	aa02      	add	r2, sp, #8
 8001586:	213d      	movs	r1, #61	@ 0x3d
 8001588:	4628      	mov	r0, r5
 800158a:	f001 f8d9 	bl	8002740 <HAL_I2C_Master_Receive>
	   *magy=MAGread[0];
 800158e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001592:	803b      	strh	r3, [r7, #0]

	   MAGcmd[0]=0x2b;
 8001594:	232b      	movs	r3, #43	@ 0x2b
 8001596:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 800159a:	9400      	str	r4, [sp, #0]
 800159c:	4623      	mov	r3, r4
 800159e:	aa03      	add	r2, sp, #12
 80015a0:	213c      	movs	r1, #60	@ 0x3c
 80015a2:	4628      	mov	r0, r5
 80015a4:	f001 f80e 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80015a8:	9400      	str	r4, [sp, #0]
 80015aa:	4623      	mov	r3, r4
 80015ac:	aa02      	add	r2, sp, #8
 80015ae:	213d      	movs	r1, #61	@ 0x3d
 80015b0:	4628      	mov	r0, r5
 80015b2:	f001 f8c5 	bl	8002740 <HAL_I2C_Master_Receive>
	   *magy|=((MAGread[0])<<8);
 80015b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015ba:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80015be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015c2:	803b      	strh	r3, [r7, #0]

	   //MAG Z
	   MAGcmd[0]=0x2c;
 80015c4:	232c      	movs	r3, #44	@ 0x2c
 80015c6:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80015ca:	9400      	str	r4, [sp, #0]
 80015cc:	4623      	mov	r3, r4
 80015ce:	aa03      	add	r2, sp, #12
 80015d0:	213c      	movs	r1, #60	@ 0x3c
 80015d2:	4628      	mov	r0, r5
 80015d4:	f000 fff6 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 80015d8:	9400      	str	r4, [sp, #0]
 80015da:	4623      	mov	r3, r4
 80015dc:	aa02      	add	r2, sp, #8
 80015de:	213d      	movs	r1, #61	@ 0x3d
 80015e0:	4628      	mov	r0, r5
 80015e2:	f001 f8ad 	bl	8002740 <HAL_I2C_Master_Receive>
	   *magz=MAGread[0];
 80015e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80015ea:	8033      	strh	r3, [r6, #0]

	   MAGcmd[0]=0x2d;
 80015ec:	232d      	movs	r3, #45	@ 0x2d
 80015ee:	f88d 300c 	strb.w	r3, [sp, #12]
	   HAL_I2C_Master_Transmit(&hi2c2,addressWrite,MAGcmd,1,1);
 80015f2:	9400      	str	r4, [sp, #0]
 80015f4:	4623      	mov	r3, r4
 80015f6:	aa03      	add	r2, sp, #12
 80015f8:	213c      	movs	r1, #60	@ 0x3c
 80015fa:	4628      	mov	r0, r5
 80015fc:	f000 ffe2 	bl	80025c4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c2,addressRead,MAGread,1,1);
 8001600:	9400      	str	r4, [sp, #0]
 8001602:	4623      	mov	r3, r4
 8001604:	aa02      	add	r2, sp, #8
 8001606:	213d      	movs	r1, #61	@ 0x3d
 8001608:	4628      	mov	r0, r5
 800160a:	f001 f899 	bl	8002740 <HAL_I2C_Master_Receive>
	   *magz|=((MAGread[0])<<8);
 800160e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001612:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001616:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800161a:	8033      	strh	r3, [r6, #0]

	   *magx=*magx/8;
 800161c:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db11      	blt.n	8001648 <getAxisMagnetometer+0x148>
 8001624:	10db      	asrs	r3, r3, #3
 8001626:	f8a8 3000 	strh.w	r3, [r8]
	   *magy=*magy/8;
 800162a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0c      	blt.n	800164c <getAxisMagnetometer+0x14c>
 8001632:	10db      	asrs	r3, r3, #3
 8001634:	803b      	strh	r3, [r7, #0]
	   *magz=*magz/8;
 8001636:	f9b6 3000 	ldrsh.w	r3, [r6]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db08      	blt.n	8001650 <getAxisMagnetometer+0x150>
 800163e:	10db      	asrs	r3, r3, #3
 8001640:	8033      	strh	r3, [r6, #0]



}
 8001642:	b004      	add	sp, #16
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	   *magx=*magx/8;
 8001648:	3307      	adds	r3, #7
 800164a:	e7eb      	b.n	8001624 <getAxisMagnetometer+0x124>
	   *magy=*magy/8;
 800164c:	3307      	adds	r3, #7
 800164e:	e7f0      	b.n	8001632 <getAxisMagnetometer+0x132>
	   *magz=*magz/8;
 8001650:	3307      	adds	r3, #7
 8001652:	e7f4      	b.n	800163e <getAxisMagnetometer+0x13e>
 8001654:	20000260 	.word	0x20000260

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_MspInit+0x2c>)
 800165c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	661a      	str	r2, [r3, #96]	@ 0x60
 8001664:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001666:	f002 0201 	and.w	r2, r2, #1
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001670:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001674:	659a      	str	r2, [r3, #88]	@ 0x58
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001680:	b002      	add	sp, #8
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b510      	push	{r4, lr}
 800168a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	2300      	movs	r3, #0
 800168e:	9303      	str	r3, [sp, #12]
 8001690:	9304      	str	r3, [sp, #16]
 8001692:	9305      	str	r3, [sp, #20]
 8001694:	9306      	str	r3, [sp, #24]
 8001696:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8001698:	6802      	ldr	r2, [r0, #0]
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <HAL_I2C_MspInit+0x64>)
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016a0:	b008      	add	sp, #32
 80016a2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	4c12      	ldr	r4, [pc, #72]	@ (80016f0 <HAL_I2C_MspInit+0x68>)
 80016a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80016ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016be:	2312      	movs	r3, #18
 80016c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ca:	2304      	movs	r3, #4
 80016cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	a903      	add	r1, sp, #12
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <HAL_I2C_MspInit+0x6c>)
 80016d2:	f000 fcd1 	bl	8002078 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80016d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016dc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80016de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80016e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	9b02      	ldr	r3, [sp, #8]
}
 80016e8:	e7da      	b.n	80016a0 <HAL_I2C_MspInit+0x18>
 80016ea:	bf00      	nop
 80016ec:	40005800 	.word	0x40005800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48000400 	.word	0x48000400

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b500      	push	{lr}
 80016fa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	2300      	movs	r3, #0
 80016fe:	9303      	str	r3, [sp, #12]
 8001700:	9304      	str	r3, [sp, #16]
 8001702:	9305      	str	r3, [sp, #20]
 8001704:	9306      	str	r3, [sp, #24]
 8001706:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8001708:	6802      	ldr	r2, [r0, #0]
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <HAL_SPI_MspInit+0x64>)
 800170c:	429a      	cmp	r2, r3
 800170e:	d002      	beq.n	8001716 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001710:	b009      	add	sp, #36	@ 0x24
 8001712:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001716:	f503 33ea 	add.w	r3, r3, #119808	@ 0x1d400
 800171a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800171c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001720:	659a      	str	r2, [r3, #88]	@ 0x58
 8001722:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001724:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8001728:	9201      	str	r2, [sp, #4]
 800172a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800172e:	f042 0204 	orr.w	r2, r2, #4
 8001732:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800173e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001742:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800174c:	2306      	movs	r3, #6
 800174e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	a903      	add	r1, sp, #12
 8001752:	4803      	ldr	r0, [pc, #12]	@ (8001760 <HAL_SPI_MspInit+0x68>)
 8001754:	f000 fc90 	bl	8002078 <HAL_GPIO_Init>
}
 8001758:	e7da      	b.n	8001710 <HAL_SPI_MspInit+0x18>
 800175a:	bf00      	nop
 800175c:	40003c00 	.word	0x40003c00
 8001760:	48000800 	.word	0x48000800

08001764 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler>

08001766 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler>

08001768 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler>

0800176a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler>

0800176c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler>

0800176e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f000 fbdd 	bl	8001f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bd08      	pop	{r3, pc}

0800177c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800177c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800177e:	2002      	movs	r0, #2
 8001780:	f000 fd74 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

		flagData=1;
 8001784:	4b01      	ldr	r3, [pc, #4]	@ (800178c <EXTI1_IRQHandler+0x10>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]




  /* USER CODE END EXTI1_IRQn 1 */
}
 800178a:	bd08      	pop	{r3, pc}
 800178c:	200002d0 	.word	0x200002d0

08001790 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001790:	2001      	movs	r0, #1
 8001792:	4770      	bx	lr

08001794 <_kill>:

int _kill(int pid, int sig)
{
 8001794:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001796:	f003 f987 	bl	8004aa8 <__errno>
 800179a:	2316      	movs	r3, #22
 800179c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800179e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017a2:	bd08      	pop	{r3, pc}

080017a4 <_exit>:

void _exit (int status)
{
 80017a4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80017a6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017aa:	f7ff fff3 	bl	8001794 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ae:	e7fe      	b.n	80017ae <_exit+0xa>

080017b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	460c      	mov	r4, r1
 80017b4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	2500      	movs	r5, #0
 80017b8:	e006      	b.n	80017c8 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 80017ba:	f3af 8000 	nop.w
 80017be:	4621      	mov	r1, r4
 80017c0:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80017c6:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	42b5      	cmp	r5, r6
 80017ca:	dbf6      	blt.n	80017ba <_read+0xa>
	}

return len;
}
 80017cc:	4630      	mov	r0, r6
 80017ce:	bd70      	pop	{r4, r5, r6, pc}

080017d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d0:	b570      	push	{r4, r5, r6, lr}
 80017d2:	460c      	mov	r4, r1
 80017d4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2500      	movs	r5, #0
 80017d8:	e004      	b.n	80017e4 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80017da:	f814 0b01 	ldrb.w	r0, [r4], #1
 80017de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	3501      	adds	r5, #1
 80017e4:	42b5      	cmp	r5, r6
 80017e6:	dbf8      	blt.n	80017da <_write+0xa>
	}
	return len;
}
 80017e8:	4630      	mov	r0, r6
 80017ea:	bd70      	pop	{r4, r5, r6, pc}

080017ec <_sbrk>:

caddr_t _sbrk(int incr)
{
 80017ec:	b508      	push	{r3, lr}
 80017ee:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <_sbrk+0x34>)
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	b142      	cbz	r2, 8001808 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <_sbrk+0x34>)
 80017f8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80017fa:	4403      	add	r3, r0
 80017fc:	466a      	mov	r2, sp
 80017fe:	4293      	cmp	r3, r2
 8001800:	d806      	bhi.n	8001810 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001802:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <_sbrk+0x34>)
 8001804:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001806:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001808:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <_sbrk+0x34>)
 800180a:	4906      	ldr	r1, [pc, #24]	@ (8001824 <_sbrk+0x38>)
 800180c:	6011      	str	r1, [r2, #0]
 800180e:	e7f2      	b.n	80017f6 <_sbrk+0xa>
		errno = ENOMEM;
 8001810:	f003 f94a 	bl	8004aa8 <__errno>
 8001814:	230c      	movs	r3, #12
 8001816:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800181c:	e7f3      	b.n	8001806 <_sbrk+0x1a>
 800181e:	bf00      	nop
 8001820:	200002c8 	.word	0x200002c8
 8001824:	200011f0 	.word	0x200011f0

08001828 <_close>:

int _close(int file)
{
	return -1;
}
 8001828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800182c:	4770      	bx	lr

0800182e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800182e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001832:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001834:	2000      	movs	r0, #0
 8001836:	4770      	bx	lr

08001838 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001838:	2001      	movs	r0, #1
 800183a:	4770      	bx	lr

0800183c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800183c:	2000      	movs	r0, #0
 800183e:	4770      	bx	lr

08001840 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001840:	490f      	ldr	r1, [pc, #60]	@ (8001880 <SystemInit+0x40>)
 8001842:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001846:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800184a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <SystemInit+0x44>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001858:	2000      	movs	r0, #0
 800185a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 8001862:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8001866:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800186c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001874:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001876:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001878:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800187c:	608b      	str	r3, [r1, #8]
#endif
}
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00
 8001884:	40021000 	.word	0x40021000

08001888 <checkWifiEvent>:


int checkWifiEvent(uint8_t * input, uint8_t *event, int size){

	int i=0;
	for(i=0;i<size;i++){
 8001888:	2300      	movs	r3, #0
 800188a:	4293      	cmp	r3, r2
 800188c:	da0e      	bge.n	80018ac <checkWifiEvent+0x24>
int checkWifiEvent(uint8_t * input, uint8_t *event, int size){
 800188e:	b500      	push	{lr}
    if(input[i]!=event[i]){
 8001890:	f810 e003 	ldrb.w	lr, [r0, r3]
 8001894:	f811 c003 	ldrb.w	ip, [r1, r3]
 8001898:	45e6      	cmp	lr, ip
 800189a:	d105      	bne.n	80018a8 <checkWifiEvent+0x20>
	for(i=0;i<size;i++){
 800189c:	3301      	adds	r3, #1
 800189e:	4293      	cmp	r3, r2
 80018a0:	dbf6      	blt.n	8001890 <checkWifiEvent+0x8>
    	return 0;
    }


	}
	return 1;
 80018a2:	2001      	movs	r0, #1

}
 80018a4:	f85d fb04 	ldr.w	pc, [sp], #4
    	return 0;
 80018a8:	2000      	movs	r0, #0
 80018aa:	e7fb      	b.n	80018a4 <checkWifiEvent+0x1c>
	return 1;
 80018ac:	2001      	movs	r0, #1
}
 80018ae:	4770      	bx	lr

080018b0 <getWifiModuleReady>:


int getWifiModuleReady(){
 80018b0:	b510      	push	{r4, lr}
 80018b2:	b082      	sub	sp, #8

  while(!flagData);
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <getWifiModuleReady+0x7c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0fb      	beq.n	80018b4 <getWifiModuleReady+0x4>
  flagData=0;
 80018bc:	2400      	movs	r4, #0
 80018be:	481b      	ldr	r0, [pc, #108]	@ (800192c <getWifiModuleReady+0x7c>)
 80018c0:	f840 4b04 	str.w	r4, [r0], #4
  memset(buffer,0,sizeof(buffer));
 80018c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c8:	4621      	mov	r1, r4
 80018ca:	f003 f8e0 	bl	8004a8e <memset>
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 80018ce:	4622      	mov	r2, r4
 80018d0:	2101      	movs	r1, #1
 80018d2:	4817      	ldr	r0, [pc, #92]	@ (8001930 <getWifiModuleReady+0x80>)
 80018d4:	f000 fcc3 	bl	800225e <HAL_GPIO_WritePin>
  do{

	  HAL_SPI_TransmitReceive(&hspi3,dummy,buffer+index,2,1);
 80018d8:	4c14      	ldr	r4, [pc, #80]	@ (800192c <getWifiModuleReady+0x7c>)
 80018da:	1d21      	adds	r1, r4, #4
 80018dc:	f8d4 23ec 	ldr.w	r2, [r4, #1004]	@ 0x3ec
 80018e0:	2301      	movs	r3, #1
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2302      	movs	r3, #2
 80018e6:	440a      	add	r2, r1
 80018e8:	4912      	ldr	r1, [pc, #72]	@ (8001934 <getWifiModuleReady+0x84>)
 80018ea:	4813      	ldr	r0, [pc, #76]	@ (8001938 <getWifiModuleReady+0x88>)
 80018ec:	f002 f9ee 	bl	8003ccc <HAL_SPI_TransmitReceive>
	  index+=2;
 80018f0:	f8d4 33ec 	ldr.w	r3, [r4, #1004]	@ 0x3ec
 80018f4:	3302      	adds	r3, #2
 80018f6:	f8c4 33ec 	str.w	r3, [r4, #1004]	@ 0x3ec

  }while(HAL_GPIO_ReadPin(WIFI_INT_GPIO_Port,WIFI_INT_Pin)==1);
 80018fa:	2102      	movs	r1, #2
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <getWifiModuleReady+0x80>)
 80018fe:	f000 fca7 	bl	8002250 <HAL_GPIO_ReadPin>
 8001902:	2801      	cmp	r0, #1
 8001904:	d0e8      	beq.n	80018d8 <getWifiModuleReady+0x28>
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	4611      	mov	r1, r2
 800190a:	4809      	ldr	r0, [pc, #36]	@ (8001930 <getWifiModuleReady+0x80>)
 800190c:	f000 fca7 	bl	800225e <HAL_GPIO_WritePin>

  if(checkWifiEvent(buffer,ready,sizeof(ready))){
 8001910:	2206      	movs	r2, #6
 8001912:	490a      	ldr	r1, [pc, #40]	@ (800193c <getWifiModuleReady+0x8c>)
 8001914:	1d20      	adds	r0, r4, #4
 8001916:	f7ff ffb7 	bl	8001888 <checkWifiEvent>
 800191a:	b920      	cbnz	r0, 8001926 <getWifiModuleReady+0x76>
	  return 1;
  }
  index=0;
 800191c:	2200      	movs	r2, #0
 800191e:	f8c4 23ec 	str.w	r2, [r4, #1004]	@ 0x3ec
  return 0;

}
 8001922:	b002      	add	sp, #8
 8001924:	bd10      	pop	{r4, pc}
	  return 1;
 8001926:	2001      	movs	r0, #1
 8001928:	e7fb      	b.n	8001922 <getWifiModuleReady+0x72>
 800192a:	bf00      	nop
 800192c:	200002d0 	.word	0x200002d0
 8001930:	48001000 	.word	0x48001000
 8001934:	20000004 	.word	0x20000004
 8001938:	200001fc 	.word	0x200001fc
 800193c:	20000008 	.word	0x20000008

08001940 <littleToBig>:


void littleToBig(uint8_t *input, uint8_t *output, int size){

	int temp,i;
	for(i=0;i<size;i+=2){
 8001940:	2300      	movs	r3, #0
 8001942:	4293      	cmp	r3, r2
 8001944:	da0f      	bge.n	8001966 <littleToBig+0x26>
void littleToBig(uint8_t *input, uint8_t *output, int size){
 8001946:	b500      	push	{lr}
		output[i]=input[i+1];
 8001948:	f103 0c01 	add.w	ip, r3, #1
 800194c:	f810 e00c 	ldrb.w	lr, [r0, ip]
 8001950:	f801 e003 	strb.w	lr, [r1, r3]
		output[i+1]=input[i];
 8001954:	f810 e003 	ldrb.w	lr, [r0, r3]
 8001958:	f801 e00c 	strb.w	lr, [r1, ip]
	for(i=0;i<size;i+=2){
 800195c:	3302      	adds	r3, #2
 800195e:	4293      	cmp	r3, r2
 8001960:	dbf2      	blt.n	8001948 <littleToBig+0x8>

	}


}
 8001962:	f85d fb04 	ldr.w	pc, [sp], #4
 8001966:	4770      	bx	lr

08001968 <bigToLittle>:

void bigToLittle(uint8_t *input, uint8_t *output, int size){

	int temp,i;
	for(i=0;i<size;i+=2){
 8001968:	2300      	movs	r3, #0
 800196a:	4293      	cmp	r3, r2
 800196c:	da0f      	bge.n	800198e <bigToLittle+0x26>
void bigToLittle(uint8_t *input, uint8_t *output, int size){
 800196e:	b500      	push	{lr}
		output[i]=input[i+1];
 8001970:	f103 0c01 	add.w	ip, r3, #1
 8001974:	f810 e00c 	ldrb.w	lr, [r0, ip]
 8001978:	f801 e003 	strb.w	lr, [r1, r3]
		output[i+1]=input[i];
 800197c:	f810 e003 	ldrb.w	lr, [r0, r3]
 8001980:	f801 e00c 	strb.w	lr, [r1, ip]
	for(i=0;i<size;i+=2){
 8001984:	3302      	adds	r3, #2
 8001986:	4293      	cmp	r3, r2
 8001988:	dbf2      	blt.n	8001970 <bigToLittle+0x8>

	}


}
 800198a:	f85d fb04 	ldr.w	pc, [sp], #4
 800198e:	4770      	bx	lr

08001990 <sendCommand>:
void sendCommand(uint8_t *command,int size){
 8001990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	4607      	mov	r7, r0
 8001998:	460d      	mov	r5, r1
	while(!flagData);
 800199a:	4b40      	ldr	r3, [pc, #256]	@ (8001a9c <sendCommand+0x10c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0fb      	beq.n	800199a <sendCommand+0xa>
	flagData=0;
 80019a2:	4e3e      	ldr	r6, [pc, #248]	@ (8001a9c <sendCommand+0x10c>)
 80019a4:	2400      	movs	r4, #0
 80019a6:	6034      	str	r4, [r6, #0]
    index=0;
 80019a8:	f8c6 43ec 	str.w	r4, [r6, #1004]	@ 0x3ec
	memset(buffer,0,sizeof(buffer));
 80019ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019b0:	4621      	mov	r1, r4
 80019b2:	1d30      	adds	r0, r6, #4
 80019b4:	f003 f86b 	bl	8004a8e <memset>
	memset(commandbuffer,0x0a,sizeof(commandbuffer));
 80019b8:	f506 787c 	add.w	r8, r6, #1008	@ 0x3f0
 80019bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80019c0:	210a      	movs	r1, #10
 80019c2:	4640      	mov	r0, r8
 80019c4:	f003 f863 	bl	8004a8e <memset>
	bigToLittle(command,commandbuffer,size);
 80019c8:	462a      	mov	r2, r5
 80019ca:	4641      	mov	r1, r8
 80019cc:	4638      	mov	r0, r7
 80019ce:	f7ff ffcb 	bl	8001968 <bigToLittle>
	index=0;
 80019d2:	f8c6 43ec 	str.w	r4, [r6, #1004]	@ 0x3ec
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 80019d6:	4622      	mov	r2, r4
 80019d8:	2101      	movs	r1, #1
 80019da:	4831      	ldr	r0, [pc, #196]	@ (8001aa0 <sendCommand+0x110>)
 80019dc:	f000 fc3f 	bl	800225e <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,commandbuffer+index,buffer+index,2,1);
 80019e0:	4c2e      	ldr	r4, [pc, #184]	@ (8001a9c <sendCommand+0x10c>)
 80019e2:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	@ 0x3ec
 80019e6:	1d22      	adds	r2, r4, #4
 80019e8:	f504 717c 	add.w	r1, r4, #1008	@ 0x3f0
 80019ec:	2301      	movs	r3, #1
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2302      	movs	r3, #2
 80019f2:	4402      	add	r2, r0
 80019f4:	4401      	add	r1, r0
 80019f6:	482b      	ldr	r0, [pc, #172]	@ (8001aa4 <sendCommand+0x114>)
 80019f8:	f002 f968 	bl	8003ccc <HAL_SPI_TransmitReceive>
	index+=2;
 80019fc:	f8d4 33ec 	ldr.w	r3, [r4, #1004]	@ 0x3ec
 8001a00:	3302      	adds	r3, #2
 8001a02:	f8c4 33ec 	str.w	r3, [r4, #1004]	@ 0x3ec
	}while(index<size);
 8001a06:	42ab      	cmp	r3, r5
 8001a08:	dbea      	blt.n	80019e0 <sendCommand+0x50>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4824      	ldr	r0, [pc, #144]	@ (8001aa0 <sendCommand+0x110>)
 8001a10:	f000 fc25 	bl	800225e <HAL_GPIO_WritePin>
	while(!flagData);
 8001a14:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <sendCommand+0x10c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0fb      	beq.n	8001a14 <sendCommand+0x84>
	flagData=0;
 8001a1c:	481f      	ldr	r0, [pc, #124]	@ (8001a9c <sendCommand+0x10c>)
 8001a1e:	2400      	movs	r4, #0
 8001a20:	6004      	str	r4, [r0, #0]
	index=0;
 8001a22:	f8c0 43ec 	str.w	r4, [r0, #1004]	@ 0x3ec
	memset(buffer,0,sizeof(buffer));
 8001a26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	3004      	adds	r0, #4
 8001a2e:	f003 f82e 	bl	8004a8e <memset>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 8001a32:	4622      	mov	r2, r4
 8001a34:	2101      	movs	r1, #1
 8001a36:	481a      	ldr	r0, [pc, #104]	@ (8001aa0 <sendCommand+0x110>)
 8001a38:	f000 fc11 	bl	800225e <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,dummy,buffer+index,2,1);
 8001a3c:	4c17      	ldr	r4, [pc, #92]	@ (8001a9c <sendCommand+0x10c>)
 8001a3e:	1d21      	adds	r1, r4, #4
 8001a40:	f8d4 23ec 	ldr.w	r2, [r4, #1004]	@ 0x3ec
 8001a44:	2301      	movs	r3, #1
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2302      	movs	r3, #2
 8001a4a:	440a      	add	r2, r1
 8001a4c:	4916      	ldr	r1, [pc, #88]	@ (8001aa8 <sendCommand+0x118>)
 8001a4e:	4815      	ldr	r0, [pc, #84]	@ (8001aa4 <sendCommand+0x114>)
 8001a50:	f002 f93c 	bl	8003ccc <HAL_SPI_TransmitReceive>
	index+=2;
 8001a54:	f8d4 33ec 	ldr.w	r3, [r4, #1004]	@ 0x3ec
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f8c4 33ec 	str.w	r3, [r4, #1004]	@ 0x3ec
	}while(HAL_GPIO_ReadPin(WIFI_INT_GPIO_Port,WIFI_INT_Pin)==1);
 8001a5e:	2102      	movs	r1, #2
 8001a60:	480f      	ldr	r0, [pc, #60]	@ (8001aa0 <sendCommand+0x110>)
 8001a62:	f000 fbf5 	bl	8002250 <HAL_GPIO_ReadPin>
 8001a66:	2801      	cmp	r0, #1
 8001a68:	d0e8      	beq.n	8001a3c <sendCommand+0xac>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	480c      	ldr	r0, [pc, #48]	@ (8001aa0 <sendCommand+0x110>)
 8001a70:	f000 fbf5 	bl	800225e <HAL_GPIO_WritePin>
	memset(bufferBig,0,sizeof(bufferBig));
 8001a74:	f204 55e4 	addw	r5, r4, #1508	@ 0x5e4
 8001a78:	f44f 767a 	mov.w	r6, #1000	@ 0x3e8
 8001a7c:	4632      	mov	r2, r6
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4628      	mov	r0, r5
 8001a82:	f003 f804 	bl	8004a8e <memset>
	littleToBig(buffer,bufferBig,sizeof(buffer));
 8001a86:	4632      	mov	r2, r6
 8001a88:	4629      	mov	r1, r5
 8001a8a:	1d20      	adds	r0, r4, #4
 8001a8c:	f7ff ff58 	bl	8001940 <littleToBig>
	HAL_Delay(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f000 fa61 	bl	8001f58 <HAL_Delay>
}
 8001a96:	b002      	add	sp, #8
 8001a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a9c:	200002d0 	.word	0x200002d0
 8001aa0:	48001000 	.word	0x48001000
 8001aa4:	200001fc 	.word	0x200001fc
 8001aa8:	20000004 	.word	0x20000004

08001aac <setSensor>:

void setSensor(uint8_t *name){
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	4605      	mov	r5, r0
	uint8_t value[50];
	if(indexsensor!=0){
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b70 <setSensor+0xc4>)
 8001ab2:	f8d3 39cc 	ldr.w	r3, [r3, #2508]	@ 0x9cc
 8001ab6:	b3bb      	cbz	r3, 8001b28 <setSensor+0x7c>
	strcat(payloadsensors,"} ] },{ \"sensor\":");
 8001ab8:	4c2e      	ldr	r4, [pc, #184]	@ (8001b74 <setSensor+0xc8>)
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7fe fbd8 	bl	8000270 <strlen>
 8001ac0:	4686      	mov	lr, r0
 8001ac2:	eb04 0c00 	add.w	ip, r4, r0
 8001ac6:	4e2c      	ldr	r6, [pc, #176]	@ (8001b78 <setSensor+0xcc>)
 8001ac8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001aca:	f844 000e 	str.w	r0, [r4, lr]
 8001ace:	f8cc 1004 	str.w	r1, [ip, #4]
 8001ad2:	f8cc 2008 	str.w	r2, [ip, #8]
 8001ad6:	f8cc 300c 	str.w	r3, [ip, #12]
 8001ada:	8833      	ldrh	r3, [r6, #0]
 8001adc:	f8ac 3010 	strh.w	r3, [ip, #16]
	strcat(payloadsensors,"\"");
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7fe fbc5 	bl	8000270 <strlen>
 8001ae6:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <setSensor+0xd0>)
 8001ae8:	881e      	ldrh	r6, [r3, #0]
 8001aea:	5226      	strh	r6, [r4, r0]
	strcat(payloadsensors,name);
 8001aec:	4629      	mov	r1, r5
 8001aee:	4620      	mov	r0, r4
 8001af0:	f002 ffbe 	bl	8004a70 <strcat>
	strcat(payloadsensors,"\"");
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7fe fbbb 	bl	8000270 <strlen>
 8001afa:	5226      	strh	r6, [r4, r0]
	strcat(payloadsensors,", \"data\": [ {");
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7fe fbb7 	bl	8000270 <strlen>
 8001b02:	4605      	mov	r5, r0
 8001b04:	1826      	adds	r6, r4, r0
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <setSensor+0xd4>)
 8001b08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b0a:	5160      	str	r0, [r4, r5]
 8001b0c:	6071      	str	r1, [r6, #4]
 8001b0e:	60b2      	str	r2, [r6, #8]
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	81b3      	strh	r3, [r6, #12]
	strcpy(payloadsensors,"\"");
	strcat(payloadsensors,name);
	strcat(payloadsensors,"\"");
	strcat(payloadsensors,", \"data\": [ {");
	}
	indexsensor++;
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <setSensor+0xc4>)
 8001b16:	f8d3 29cc 	ldr.w	r2, [r3, #2508]	@ 0x9cc
 8001b1a:	3201      	adds	r2, #1
 8001b1c:	f8c3 29cc 	str.w	r2, [r3, #2508]	@ 0x9cc
	indexdata=0;
 8001b20:	2200      	movs	r2, #0
 8001b22:	f8c3 2db8 	str.w	r2, [r3, #3512]	@ 0xdb8

}
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
	memset(payloadsensors,0,sizeof(payloadsensors));
 8001b28:	4e11      	ldr	r6, [pc, #68]	@ (8001b70 <setSensor+0xc4>)
 8001b2a:	f506 641d 	add.w	r4, r6, #2512	@ 0x9d0
 8001b2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b32:	2100      	movs	r1, #0
 8001b34:	4620      	mov	r0, r4
 8001b36:	f002 ffaa 	bl	8004a8e <memset>
	strcpy(payloadsensors,"\"");
 8001b3a:	2322      	movs	r3, #34	@ 0x22
 8001b3c:	f8a6 39d0 	strh.w	r3, [r6, #2512]	@ 0x9d0
	strcat(payloadsensors,name);
 8001b40:	4629      	mov	r1, r5
 8001b42:	4620      	mov	r0, r4
 8001b44:	f002 ff94 	bl	8004a70 <strcat>
	strcat(payloadsensors,"\"");
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7fe fb91 	bl	8000270 <strlen>
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <setSensor+0xd0>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	5223      	strh	r3, [r4, r0]
	strcat(payloadsensors,", \"data\": [ {");
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7fe fb8b 	bl	8000270 <strlen>
 8001b5a:	4605      	mov	r5, r0
 8001b5c:	1826      	adds	r6, r4, r0
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <setSensor+0xd4>)
 8001b60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b62:	5160      	str	r0, [r4, r5]
 8001b64:	6071      	str	r1, [r6, #4]
 8001b66:	60b2      	str	r2, [r6, #8]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	81b3      	strh	r3, [r6, #12]
 8001b6c:	e7d2      	b.n	8001b14 <setSensor+0x68>
 8001b6e:	bf00      	nop
 8001b70:	200002d0 	.word	0x200002d0
 8001b74:	20000ca0 	.word	0x20000ca0
 8001b78:	08006d78 	.word	0x08006d78
 8001b7c:	08006d8c 	.word	0x08006d8c
 8001b80:	08006d90 	.word	0x08006d90

08001b84 <setDataInt>:

void setDataInt(uint8_t *payload, int data){
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	4606      	mov	r6, r0
 8001b8a:	460d      	mov	r5, r1
	uint8_t value[10];
	if(indexdata!=0){
 8001b8c:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <setDataInt+0xa8>)
 8001b8e:	f8d3 3db8 	ldr.w	r3, [r3, #3512]	@ 0xdb8
 8001b92:	b363      	cbz	r3, 8001bee <setDataInt+0x6a>
		sprintf(value,",");
 8001b94:	232c      	movs	r3, #44	@ 0x2c
 8001b96:	f8ad 3004 	strh.w	r3, [sp, #4]
		strcat(payloadsensors,value);
 8001b9a:	4c25      	ldr	r4, [pc, #148]	@ (8001c30 <setDataInt+0xac>)
 8001b9c:	a901      	add	r1, sp, #4
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f002 ff66 	bl	8004a70 <strcat>
		strcat(payloadsensors,"\"");
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7fe fb63 	bl	8000270 <strlen>
 8001baa:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <setDataInt+0xb0>)
 8001bac:	881f      	ldrh	r7, [r3, #0]
 8001bae:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,payload);
 8001bb0:	4631      	mov	r1, r6
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f002 ff5c 	bl	8004a70 <strcat>
		strcat(payloadsensors,"\"");
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7fe fb59 	bl	8000270 <strlen>
 8001bbe:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,":");
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7fe fb55 	bl	8000270 <strlen>
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <setDataInt+0xb4>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	5223      	strh	r3, [r4, r0]
		sprintf(value,"\"%d\"",data);
 8001bcc:	462a      	mov	r2, r5
 8001bce:	491b      	ldr	r1, [pc, #108]	@ (8001c3c <setDataInt+0xb8>)
 8001bd0:	a801      	add	r0, sp, #4
 8001bd2:	f002 fe6b 	bl	80048ac <siprintf>
		strcat(payloadsensors,value);
 8001bd6:	a901      	add	r1, sp, #4
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f002 ff49 	bl	8004a70 <strcat>
		strcat(payloadsensors,":");
		sprintf(value,"\"%d\"",data);
		strcat(payloadsensors,value);

	}
	indexdata++;
 8001bde:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <setDataInt+0xa8>)
 8001be0:	f8d2 3db8 	ldr.w	r3, [r2, #3512]	@ 0xdb8
 8001be4:	3301      	adds	r3, #1
 8001be6:	f8c2 3db8 	str.w	r3, [r2, #3512]	@ 0xdb8


}
 8001bea:	b005      	add	sp, #20
 8001bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(payloadsensors,"\"");
 8001bee:	4c10      	ldr	r4, [pc, #64]	@ (8001c30 <setDataInt+0xac>)
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7fe fb3d 	bl	8000270 <strlen>
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <setDataInt+0xb0>)
 8001bf8:	881f      	ldrh	r7, [r3, #0]
 8001bfa:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,payload);
 8001bfc:	4631      	mov	r1, r6
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f002 ff36 	bl	8004a70 <strcat>
		strcat(payloadsensors,"\"");
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7fe fb33 	bl	8000270 <strlen>
 8001c0a:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,":");
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7fe fb2f 	bl	8000270 <strlen>
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <setDataInt+0xb4>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	5223      	strh	r3, [r4, r0]
		sprintf(value,"\"%d\"",data);
 8001c18:	462a      	mov	r2, r5
 8001c1a:	4908      	ldr	r1, [pc, #32]	@ (8001c3c <setDataInt+0xb8>)
 8001c1c:	a801      	add	r0, sp, #4
 8001c1e:	f002 fe45 	bl	80048ac <siprintf>
		strcat(payloadsensors,value);
 8001c22:	a901      	add	r1, sp, #4
 8001c24:	4620      	mov	r0, r4
 8001c26:	f002 ff23 	bl	8004a70 <strcat>
 8001c2a:	e7d8      	b.n	8001bde <setDataInt+0x5a>
 8001c2c:	200002d0 	.word	0x200002d0
 8001c30:	20000ca0 	.word	0x20000ca0
 8001c34:	08006d8c 	.word	0x08006d8c
 8001c38:	08006d88 	.word	0x08006d88
 8001c3c:	08006da0 	.word	0x08006da0

08001c40 <setDataFloat>:

void setDataFloat(uint8_t *payload, float data){
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b085      	sub	sp, #20
 8001c44:	4606      	mov	r6, r0
 8001c46:	ee10 5a10 	vmov	r5, s0
	uint8_t value[10];
	if(indexdata!=0){
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <setDataFloat+0xbc>)
 8001c4c:	f8d3 3db8 	ldr.w	r3, [r3, #3512]	@ 0xdb8
 8001c50:	b383      	cbz	r3, 8001cb4 <setDataFloat+0x74>
		sprintf(value,",");
 8001c52:	232c      	movs	r3, #44	@ 0x2c
 8001c54:	f8ad 3004 	strh.w	r3, [sp, #4]
		strcat(payloadsensors,value);
 8001c58:	4c29      	ldr	r4, [pc, #164]	@ (8001d00 <setDataFloat+0xc0>)
 8001c5a:	a901      	add	r1, sp, #4
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f002 ff07 	bl	8004a70 <strcat>
		strcat(payloadsensors,"\"");
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7fe fb04 	bl	8000270 <strlen>
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <setDataFloat+0xc4>)
 8001c6a:	881f      	ldrh	r7, [r3, #0]
 8001c6c:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,payload);
 8001c6e:	4631      	mov	r1, r6
 8001c70:	4620      	mov	r0, r4
 8001c72:	f002 fefd 	bl	8004a70 <strcat>
		strcat(payloadsensors,"\"");
 8001c76:	4620      	mov	r0, r4
 8001c78:	f7fe fafa 	bl	8000270 <strlen>
 8001c7c:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,":");
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f7fe faf6 	bl	8000270 <strlen>
 8001c84:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <setDataFloat+0xc8>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	5223      	strh	r3, [r4, r0]
		sprintf(value,"\"%.2f\"",data);
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f7fe fc5c 	bl	8000548 <__aeabi_f2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	491d      	ldr	r1, [pc, #116]	@ (8001d0c <setDataFloat+0xcc>)
 8001c96:	a801      	add	r0, sp, #4
 8001c98:	f002 fe08 	bl	80048ac <siprintf>
		strcat(payloadsensors,value);
 8001c9c:	a901      	add	r1, sp, #4
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f002 fee6 	bl	8004a70 <strcat>
		strcat(payloadsensors,":");
		sprintf(value,"\"%.2f\"",data);
		strcat(payloadsensors,value);

	}
	indexdata++;
 8001ca4:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <setDataFloat+0xbc>)
 8001ca6:	f8d2 3db8 	ldr.w	r3, [r2, #3512]	@ 0xdb8
 8001caa:	3301      	adds	r3, #1
 8001cac:	f8c2 3db8 	str.w	r3, [r2, #3512]	@ 0xdb8


}
 8001cb0:	b005      	add	sp, #20
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(payloadsensors,"\"");
 8001cb4:	4c12      	ldr	r4, [pc, #72]	@ (8001d00 <setDataFloat+0xc0>)
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7fe fada 	bl	8000270 <strlen>
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <setDataFloat+0xc4>)
 8001cbe:	881f      	ldrh	r7, [r3, #0]
 8001cc0:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,payload);
 8001cc2:	4631      	mov	r1, r6
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f002 fed3 	bl	8004a70 <strcat>
		strcat(payloadsensors,"\"");
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7fe fad0 	bl	8000270 <strlen>
 8001cd0:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,":");
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7fe facc 	bl	8000270 <strlen>
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <setDataFloat+0xc8>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	5223      	strh	r3, [r4, r0]
		sprintf(value,"\"%.2f\"",data);
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f7fe fc32 	bl	8000548 <__aeabi_f2d>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <setDataFloat+0xcc>)
 8001cea:	a801      	add	r0, sp, #4
 8001cec:	f002 fdde 	bl	80048ac <siprintf>
		strcat(payloadsensors,value);
 8001cf0:	a901      	add	r1, sp, #4
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f002 febc 	bl	8004a70 <strcat>
 8001cf8:	e7d4      	b.n	8001ca4 <setDataFloat+0x64>
 8001cfa:	bf00      	nop
 8001cfc:	200002d0 	.word	0x200002d0
 8001d00:	20000ca0 	.word	0x20000ca0
 8001d04:	08006d8c 	.word	0x08006d8c
 8001d08:	08006d88 	.word	0x08006d88
 8001d0c:	08006da8 	.word	0x08006da8

08001d10 <sendData>:

void sendData(){
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	f2ad 7de4 	subw	sp, sp, #2020	@ 0x7e4
	 sendCommand((uint8_t*)STARTTCPcommand, strlen(STARTTCPcommand));
 8001d16:	2106      	movs	r1, #6
 8001d18:	484c      	ldr	r0, [pc, #304]	@ (8001e4c <sendData+0x13c>)
 8001d1a:	f7ff fe39 	bl	8001990 <sendCommand>


	 int payloadsize=strlen(POSTmid)+strlen(payloadsensors)+strlen(POSTclose)-4;
 8001d1e:	4e4c      	ldr	r6, [pc, #304]	@ (8001e50 <sendData+0x140>)
 8001d20:	4630      	mov	r0, r6
 8001d22:	f7fe faa5 	bl	8000270 <strlen>
 8001d26:	f100 0549 	add.w	r5, r0, #73	@ 0x49
	  uint8_t DATAcommand[1000];
	  uint8_t DATAsend[1000];
	  memset(DATAcommand,0,sizeof(DATAcommand));
 8001d2a:	acfe      	add	r4, sp, #1016	@ 0x3f8
 8001d2c:	f44f 777a 	mov.w	r7, #1000	@ 0x3e8
 8001d30:	463a      	mov	r2, r7
 8001d32:	2100      	movs	r1, #0
 8001d34:	4620      	mov	r0, r4
 8001d36:	f002 feaa 	bl	8004a8e <memset>
	  memset(DATAsend,0,sizeof(DATAsend));
 8001d3a:	463a      	mov	r2, r7
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	a804      	add	r0, sp, #16
 8001d40:	f002 fea5 	bl	8004a8e <memset>
	  strcpy(DATAcommand,POSTinit);
 8001d44:	2264      	movs	r2, #100	@ 0x64
 8001d46:	4943      	ldr	r1, [pc, #268]	@ (8001e54 <sendData+0x144>)
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f002 feda 	bl	8004b02 <memcpy>
	  uint8_t data[10];
	  memset(data,0,sizeof(data));
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	9302      	str	r3, [sp, #8]
 8001d54:	f8ad 300c 	strh.w	r3, [sp, #12]
	  sprintf(data,"%d",payloadsize);
 8001d58:	462a      	mov	r2, r5
 8001d5a:	493f      	ldr	r1, [pc, #252]	@ (8001e58 <sendData+0x148>)
 8001d5c:	a801      	add	r0, sp, #4
 8001d5e:	f002 fda5 	bl	80048ac <siprintf>
	  strcat(DATAcommand,data);
 8001d62:	a901      	add	r1, sp, #4
 8001d64:	4620      	mov	r0, r4
 8001d66:	f002 fe83 	bl	8004a70 <strcat>
	  strcat(DATAcommand,POSTmid);
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7fe fa80 	bl	8000270 <strlen>
 8001d70:	4686      	mov	lr, r0
 8001d72:	eb04 0c00 	add.w	ip, r4, r0
 8001d76:	4d39      	ldr	r5, [pc, #228]	@ (8001e5c <sendData+0x14c>)
 8001d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7a:	f844 000e 	str.w	r0, [r4, lr]
 8001d7e:	f8cc 1004 	str.w	r1, [ip, #4]
 8001d82:	f8cc 2008 	str.w	r2, [ip, #8]
 8001d86:	f8cc 300c 	str.w	r3, [ip, #12]
 8001d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8c:	f8cc 0010 	str.w	r0, [ip, #16]
 8001d90:	f8cc 1014 	str.w	r1, [ip, #20]
 8001d94:	f8cc 2018 	str.w	r2, [ip, #24]
 8001d98:	f8cc 301c 	str.w	r3, [ip, #28]
	  strcat(DATAcommand,payloadsensors);
 8001d9c:	4631      	mov	r1, r6
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f002 fe66 	bl	8004a70 <strcat>
	  strcat(DATAcommand,POSTclose);
 8001da4:	4620      	mov	r0, r4
 8001da6:	f7fe fa63 	bl	8000270 <strlen>
 8001daa:	4d2d      	ldr	r5, [pc, #180]	@ (8001e60 <sendData+0x150>)
 8001dac:	eb04 0c00 	add.w	ip, r4, r0
 8001db0:	f105 0620 	add.w	r6, r5, #32
 8001db4:	462c      	mov	r4, r5
 8001db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db8:	f8cc 0000 	str.w	r0, [ip]
 8001dbc:	f8cc 1004 	str.w	r1, [ip, #4]
 8001dc0:	f8cc 2008 	str.w	r2, [ip, #8]
 8001dc4:	f8cc 300c 	str.w	r3, [ip, #12]
 8001dc8:	4625      	mov	r5, r4
 8001dca:	f10c 0c10 	add.w	ip, ip, #16
 8001dce:	42b4      	cmp	r4, r6
 8001dd0:	d1f0      	bne.n	8001db4 <sendData+0xa4>
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001dd6:	f8cc 0000 	str.w	r0, [ip]
 8001dda:	f8cc 1004 	str.w	r1, [ip, #4]
 8001dde:	f8cc 2008 	str.w	r2, [ip, #8]
 8001de2:	881a      	ldrh	r2, [r3, #0]
 8001de4:	789b      	ldrb	r3, [r3, #2]
 8001de6:	f8ac 200c 	strh.w	r2, [ip, #12]
 8001dea:	f88c 300e 	strb.w	r3, [ip, #14]
	  strcpy(DATAsend,TCPSENDcommand);
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <sendData+0x154>)
 8001df0:	9304      	str	r3, [sp, #16]
	  memset(data,0,sizeof(data));
 8001df2:	2400      	movs	r4, #0
 8001df4:	9401      	str	r4, [sp, #4]
 8001df6:	9402      	str	r4, [sp, #8]
 8001df8:	f8ad 400c 	strh.w	r4, [sp, #12]
	  sprintf(data,"%d",strlen(DATAcommand)-1);
 8001dfc:	a8fe      	add	r0, sp, #1016	@ 0x3f8
 8001dfe:	f7fe fa37 	bl	8000270 <strlen>
 8001e02:	1e42      	subs	r2, r0, #1
 8001e04:	4914      	ldr	r1, [pc, #80]	@ (8001e58 <sendData+0x148>)
 8001e06:	a801      	add	r0, sp, #4
 8001e08:	f002 fd50 	bl	80048ac <siprintf>
	  strcat(DATAsend,data);
 8001e0c:	a901      	add	r1, sp, #4
 8001e0e:	a804      	add	r0, sp, #16
 8001e10:	f002 fe2e 	bl	8004a70 <strcat>
	  strcat(DATAsend,DATAcommand);
 8001e14:	a9fe      	add	r1, sp, #1016	@ 0x3f8
 8001e16:	a804      	add	r0, sp, #16
 8001e18:	f002 fe2a 	bl	8004a70 <strcat>
	  sendCommand(DATAsend,strlen(DATAsend));
 8001e1c:	a804      	add	r0, sp, #16
 8001e1e:	f7fe fa27 	bl	8000270 <strlen>
 8001e22:	4601      	mov	r1, r0
 8001e24:	a804      	add	r0, sp, #16
 8001e26:	f7ff fdb3 	bl	8001990 <sendCommand>
	  sendCommand((uint8_t*)CLOSETCPcommand, strlen(CLOSETCPcommand));
 8001e2a:	2106      	movs	r1, #6
 8001e2c:	480e      	ldr	r0, [pc, #56]	@ (8001e68 <sendData+0x158>)
 8001e2e:	f7ff fdaf 	bl	8001990 <sendCommand>
	  HAL_Delay(TIME_INTERVAL);
 8001e32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e36:	f000 f88f 	bl	8001f58 <HAL_Delay>
	  indexdata=0;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <sendData+0x15c>)
 8001e3c:	f8c3 4db8 	str.w	r4, [r3, #3512]	@ 0xdb8
	  indexsensor=0;
 8001e40:	f8c3 49cc 	str.w	r4, [r3, #2508]	@ 0x9cc
}
 8001e44:	f20d 7de4 	addw	sp, sp, #2020	@ 0x7e4
 8001e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08006db0 	.word	0x08006db0
 8001e50:	20000ca0 	.word	0x20000ca0
 8001e54:	08006db8 	.word	0x08006db8
 8001e58:	08006e1c 	.word	0x08006e1c
 8001e5c:	08006e20 	.word	0x08006e20
 8001e60:	08006e40 	.word	0x08006e40
 8001e64:	003d3353 	.word	0x003d3353
 8001e68:	08006e70 	.word	0x08006e70
 8001e6c:	200002d0 	.word	0x200002d0

08001e70 <startWifi>:

void startWifi(){
 8001e70:	b508      	push	{r3, lr}
	  //let's set the wifi settings
	  sendCommand((uint8_t*) SSIDcommand,strlen(SSIDcommand));
 8001e72:	2111      	movs	r1, #17
 8001e74:	480d      	ldr	r0, [pc, #52]	@ (8001eac <startWifi+0x3c>)
 8001e76:	f7ff fd8b 	bl	8001990 <sendCommand>
	  sendCommand((uint8_t*) PSWcommand,strlen(PSWcommand));
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <startWifi+0x40>)
 8001e7e:	f7ff fd87 	bl	8001990 <sendCommand>
	  sendCommand((uint8_t*) SECcommad,strlen(SECcommad));
 8001e82:	2106      	movs	r1, #6
 8001e84:	480b      	ldr	r0, [pc, #44]	@ (8001eb4 <startWifi+0x44>)
 8001e86:	f7ff fd83 	bl	8001990 <sendCommand>
	  sendCommand((uint8_t*) CONNECTcommand,strlen(CONNECTcommand));
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	480a      	ldr	r0, [pc, #40]	@ (8001eb8 <startWifi+0x48>)
 8001e8e:	f7ff fd7f 	bl	8001990 <sendCommand>
	  sendCommand((uint8_t*)TCPcommand,strlen(TCPcommand));
 8001e92:	2106      	movs	r1, #6
 8001e94:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <startWifi+0x4c>)
 8001e96:	f7ff fd7b 	bl	8001990 <sendCommand>
	  sendCommand((uint8_t*)IPcommand, strlen(IPcommand));
 8001e9a:	2113      	movs	r1, #19
 8001e9c:	4808      	ldr	r0, [pc, #32]	@ (8001ec0 <startWifi+0x50>)
 8001e9e:	f7ff fd77 	bl	8001990 <sendCommand>
	  sendCommand((uint8_t*)PORTcommand, strlen(PORTcommand));
 8001ea2:	210a      	movs	r1, #10
 8001ea4:	4807      	ldr	r0, [pc, #28]	@ (8001ec4 <startWifi+0x54>)
 8001ea6:	f7ff fd73 	bl	8001990 <sendCommand>
}
 8001eaa:	bd08      	pop	{r3, pc}
 8001eac:	08006e78 	.word	0x08006e78
 8001eb0:	08006e8c 	.word	0x08006e8c
 8001eb4:	08006e9c 	.word	0x08006e9c
 8001eb8:	08006ea4 	.word	0x08006ea4
 8001ebc:	08006eac 	.word	0x08006eac
 8001ec0:	08006eb4 	.word	0x08006eb4
 8001ec4:	08006ec8 	.word	0x08006ec8

08001ec8 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ec8:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <HAL_InitTick+0x44>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b90b      	cbnz	r3, 8001ed2 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ece:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001ed0:	4770      	bx	lr
{
 8001ed2:	b510      	push	{r4, lr}
 8001ed4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ed6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	4a0c      	ldr	r2, [pc, #48]	@ (8001f10 <HAL_InitTick+0x48>)
 8001ee0:	6810      	ldr	r0, [r2, #0]
 8001ee2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ee6:	f000 f8b3 	bl	8002050 <HAL_SYSTICK_Config>
 8001eea:	b968      	cbnz	r0, 8001f08 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eec:	2c0f      	cmp	r4, #15
 8001eee:	d901      	bls.n	8001ef4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	e00a      	b.n	8001f0a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001efc:	f000 f894 	bl	8002028 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f00:	4b02      	ldr	r3, [pc, #8]	@ (8001f0c <HAL_InitTick+0x44>)
 8001f02:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f04:	2000      	movs	r0, #0
 8001f06:	e000      	b.n	8001f0a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001f08:	2001      	movs	r0, #1
}
 8001f0a:	bd10      	pop	{r4, pc}
 8001f0c:	20000010 	.word	0x20000010
 8001f10:	20000000 	.word	0x20000000

08001f14 <HAL_Init>:
{
 8001f14:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f16:	2003      	movs	r0, #3
 8001f18:	f000 f874 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff ffd3 	bl	8001ec8 <HAL_InitTick>
 8001f22:	b110      	cbz	r0, 8001f2a <HAL_Init+0x16>
    status = HAL_ERROR;
 8001f24:	2401      	movs	r4, #1
}
 8001f26:	4620      	mov	r0, r4
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	4604      	mov	r4, r0
    HAL_MspInit();
 8001f2c:	f7ff fb94 	bl	8001658 <HAL_MspInit>
 8001f30:	e7f9      	b.n	8001f26 <HAL_Init+0x12>
	...

08001f34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f34:	4b03      	ldr	r3, [pc, #12]	@ (8001f44 <HAL_IncTick+0x10>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4a03      	ldr	r2, [pc, #12]	@ (8001f48 <HAL_IncTick+0x14>)
 8001f3a:	6811      	ldr	r1, [r2, #0]
 8001f3c:	440b      	add	r3, r1
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000010 	.word	0x20000010
 8001f48:	2000109c 	.word	0x2000109c

08001f4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f4c:	4b01      	ldr	r3, [pc, #4]	@ (8001f54 <HAL_GetTick+0x8>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	2000109c 	.word	0x2000109c

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff fff6 	bl	8001f4c <HAL_GetTick>
 8001f60:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001f66:	d002      	beq.n	8001f6e <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <HAL_Delay+0x24>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6e:	f7ff ffed 	bl	8001f4c <HAL_GetTick>
 8001f72:	1b40      	subs	r0, r0, r5
 8001f74:	42a0      	cmp	r0, r4
 8001f76:	d3fa      	bcc.n	8001f6e <HAL_Delay+0x16>
  {
  }
}
 8001f78:	bd38      	pop	{r3, r4, r5, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000010 	.word	0x20000010

08001f80 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001f80:	2800      	cmp	r0, #0
 8001f82:	db07      	blt.n	8001f94 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f84:	f000 021f 	and.w	r2, r0, #31
 8001f88:	0940      	lsrs	r0, r0, #5
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	4a02      	ldr	r2, [pc, #8]	@ (8001f98 <__NVIC_EnableIRQ+0x18>)
 8001f90:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	db08      	blt.n	8001fb2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	0109      	lsls	r1, r1, #4
 8001fa2:	b2c9      	uxtb	r1, r1
 8001fa4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001fa8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001fac:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001fb0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	f000 000f 	and.w	r0, r0, #15
 8001fb6:	0109      	lsls	r1, r1, #4
 8001fb8:	b2c9      	uxtb	r1, r1
 8001fba:	4b01      	ldr	r3, [pc, #4]	@ (8001fc0 <__NVIC_SetPriority+0x24>)
 8001fbc:	5419      	strb	r1, [r3, r0]
  }
}
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed14 	.word	0xe000ed14

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fca:	f1c0 0c07 	rsb	ip, r0, #7
 8001fce:	f1bc 0f04 	cmp.w	ip, #4
 8001fd2:	bf28      	it	cs
 8001fd4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd8:	1d03      	adds	r3, r0, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d90f      	bls.n	8001ffe <NVIC_EncodePriority+0x3a>
 8001fde:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8001fe4:	fa0e f00c 	lsl.w	r0, lr, ip
 8001fe8:	ea21 0100 	bic.w	r1, r1, r0
 8001fec:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fee:	fa0e fe03 	lsl.w	lr, lr, r3
 8001ff2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001ff6:	ea41 0002 	orr.w	r0, r1, r2
 8001ffa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	2300      	movs	r3, #0
 8002000:	e7ee      	b.n	8001fe0 <NVIC_EncodePriority+0x1c>
	...

08002004 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4a07      	ldr	r2, [pc, #28]	@ (8002024 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002006:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002008:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	0200      	lsls	r0, r0, #8
 8002012:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002016:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002020:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_NVIC_SetPriority+0x1c>)
 800202e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002030:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002034:	f7ff ffc6 	bl	8001fc4 <NVIC_EncodePriority>
 8002038:	4601      	mov	r1, r0
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff ffae 	bl	8001f9c <__NVIC_SetPriority>
}
 8002040:	bd10      	pop	{r4, pc}
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204a:	f7ff ff99 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800204e:	bd08      	pop	{r3, pc}

08002050 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	3801      	subs	r0, #1
 8002052:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002056:	d20b      	bcs.n	8002070 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002058:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800205c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <HAL_SYSTICK_Config+0x24>)
 8002060:	21f0      	movs	r1, #240	@ 0xf0
 8002062:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002066:	2000      	movs	r0, #0
 8002068:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206a:	2207      	movs	r2, #7
 800206c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002070:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207a:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800207c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	e03f      	b.n	8002100 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002080:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002082:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002086:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800208a:	409c      	lsls	r4, r3
 800208c:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 800208e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8002090:	e062      	b.n	8002158 <HAL_GPIO_Init+0xe0>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002092:	2406      	movs	r4, #6
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x20>
 8002096:	2400      	movs	r4, #0
 8002098:	40b4      	lsls	r4, r6
 800209a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800209c:	3502      	adds	r5, #2
 800209e:	4e68      	ldr	r6, [pc, #416]	@ (8002240 <HAL_GPIO_Init+0x1c8>)
 80020a0:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020a4:	4c67      	ldr	r4, [pc, #412]	@ (8002244 <HAL_GPIO_Init+0x1cc>)
 80020a6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80020a8:	43d4      	mvns	r4, r2
 80020aa:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ae:	684f      	ldr	r7, [r1, #4]
 80020b0:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 80020b4:	d001      	beq.n	80020ba <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 80020b6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80020ba:	4d62      	ldr	r5, [pc, #392]	@ (8002244 <HAL_GPIO_Init+0x1cc>)
 80020bc:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80020be:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80020c0:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c4:	684f      	ldr	r7, [r1, #4]
 80020c6:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 80020ca:	d001      	beq.n	80020d0 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 80020cc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80020d0:	4d5c      	ldr	r5, [pc, #368]	@ (8002244 <HAL_GPIO_Init+0x1cc>)
 80020d2:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d4:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80020d6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020da:	684f      	ldr	r7, [r1, #4]
 80020dc:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 80020e0:	d001      	beq.n	80020e6 <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 80020e2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80020e6:	4d57      	ldr	r5, [pc, #348]	@ (8002244 <HAL_GPIO_Init+0x1cc>)
 80020e8:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80020ea:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80020ec:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ee:	684e      	ldr	r6, [r1, #4]
 80020f0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80020f4:	d001      	beq.n	80020fa <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 80020f6:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80020fa:	4a52      	ldr	r2, [pc, #328]	@ (8002244 <HAL_GPIO_Init+0x1cc>)
 80020fc:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80020fe:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	680a      	ldr	r2, [r1, #0]
 8002102:	fa32 f403 	lsrs.w	r4, r2, r3
 8002106:	f000 8098 	beq.w	800223a <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800210a:	f04f 0c01 	mov.w	ip, #1
 800210e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002112:	ea1c 0202 	ands.w	r2, ip, r2
 8002116:	d0f2      	beq.n	80020fe <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002118:	684c      	ldr	r4, [r1, #4]
 800211a:	1e65      	subs	r5, r4, #1
 800211c:	2d01      	cmp	r5, #1
 800211e:	d903      	bls.n	8002128 <HAL_GPIO_Init+0xb0>
 8002120:	2c11      	cmp	r4, #17
 8002122:	d001      	beq.n	8002128 <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002124:	2c12      	cmp	r4, #18
 8002126:	d112      	bne.n	800214e <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8002128:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800212a:	005e      	lsls	r6, r3, #1
 800212c:	2403      	movs	r4, #3
 800212e:	40b4      	lsls	r4, r6
 8002130:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002134:	68cc      	ldr	r4, [r1, #12]
 8002136:	40b4      	lsls	r4, r6
 8002138:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800213a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800213c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800213e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002142:	684c      	ldr	r4, [r1, #4]
 8002144:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002148:	409c      	lsls	r4, r3
 800214a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800214c:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800214e:	684c      	ldr	r4, [r1, #4]
 8002150:	f004 0503 	and.w	r5, r4, #3
 8002154:	2d03      	cmp	r5, #3
 8002156:	d093      	beq.n	8002080 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8002158:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800215a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800215e:	2403      	movs	r4, #3
 8002160:	fa04 f40e 	lsl.w	r4, r4, lr
 8002164:	ea6f 0c04 	mvn.w	ip, r4
 8002168:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800216c:	688c      	ldr	r4, [r1, #8]
 800216e:	fa04 f40e 	lsl.w	r4, r4, lr
 8002172:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002174:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002176:	684c      	ldr	r4, [r1, #4]
 8002178:	2c02      	cmp	r4, #2
 800217a:	d001      	beq.n	8002180 <HAL_GPIO_Init+0x108>
 800217c:	2c12      	cmp	r4, #18
 800217e:	d10f      	bne.n	80021a0 <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3u];
 8002180:	08dd      	lsrs	r5, r3, #3
 8002182:	3508      	adds	r5, #8
 8002184:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002188:	f003 0607 	and.w	r6, r3, #7
 800218c:	00b6      	lsls	r6, r6, #2
 800218e:	240f      	movs	r4, #15
 8002190:	40b4      	lsls	r4, r6
 8002192:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002196:	690c      	ldr	r4, [r1, #16]
 8002198:	40b4      	lsls	r4, r6
 800219a:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 800219c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 80021a0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021a2:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a6:	684c      	ldr	r4, [r1, #4]
 80021a8:	f004 0403 	and.w	r4, r4, #3
 80021ac:	fa04 f40e 	lsl.w	r4, r4, lr
 80021b0:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80021b4:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021b6:	684c      	ldr	r4, [r1, #4]
 80021b8:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 80021bc:	d09f      	beq.n	80020fe <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	4c22      	ldr	r4, [pc, #136]	@ (8002248 <HAL_GPIO_Init+0x1d0>)
 80021c0:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80021c2:	f045 0501 	orr.w	r5, r5, #1
 80021c6:	6625      	str	r5, [r4, #96]	@ 0x60
 80021c8:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 80021ca:	f004 0401 	and.w	r4, r4, #1
 80021ce:	9401      	str	r4, [sp, #4]
 80021d0:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80021d2:	089d      	lsrs	r5, r3, #2
 80021d4:	1cae      	adds	r6, r5, #2
 80021d6:	4c1a      	ldr	r4, [pc, #104]	@ (8002240 <HAL_GPIO_Init+0x1c8>)
 80021d8:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021dc:	f003 0603 	and.w	r6, r3, #3
 80021e0:	00b6      	lsls	r6, r6, #2
 80021e2:	240f      	movs	r4, #15
 80021e4:	40b4      	lsls	r4, r6
 80021e6:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021ea:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80021ee:	f43f af52 	beq.w	8002096 <HAL_GPIO_Init+0x1e>
 80021f2:	4c16      	ldr	r4, [pc, #88]	@ (800224c <HAL_GPIO_Init+0x1d4>)
 80021f4:	42a0      	cmp	r0, r4
 80021f6:	d016      	beq.n	8002226 <HAL_GPIO_Init+0x1ae>
 80021f8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80021fc:	42a0      	cmp	r0, r4
 80021fe:	d014      	beq.n	800222a <HAL_GPIO_Init+0x1b2>
 8002200:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002204:	42a0      	cmp	r0, r4
 8002206:	d012      	beq.n	800222e <HAL_GPIO_Init+0x1b6>
 8002208:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800220c:	42a0      	cmp	r0, r4
 800220e:	d010      	beq.n	8002232 <HAL_GPIO_Init+0x1ba>
 8002210:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002214:	42a0      	cmp	r0, r4
 8002216:	d00e      	beq.n	8002236 <HAL_GPIO_Init+0x1be>
 8002218:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800221c:	42a0      	cmp	r0, r4
 800221e:	f43f af38 	beq.w	8002092 <HAL_GPIO_Init+0x1a>
 8002222:	2407      	movs	r4, #7
 8002224:	e738      	b.n	8002098 <HAL_GPIO_Init+0x20>
 8002226:	2401      	movs	r4, #1
 8002228:	e736      	b.n	8002098 <HAL_GPIO_Init+0x20>
 800222a:	2402      	movs	r4, #2
 800222c:	e734      	b.n	8002098 <HAL_GPIO_Init+0x20>
 800222e:	2403      	movs	r4, #3
 8002230:	e732      	b.n	8002098 <HAL_GPIO_Init+0x20>
 8002232:	2404      	movs	r4, #4
 8002234:	e730      	b.n	8002098 <HAL_GPIO_Init+0x20>
 8002236:	2405      	movs	r4, #5
 8002238:	e72e      	b.n	8002098 <HAL_GPIO_Init+0x20>
  }
}
 800223a:	b003      	add	sp, #12
 800223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	40010400 	.word	0x40010400
 8002248:	40021000 	.word	0x40021000
 800224c:	48000400 	.word	0x48000400

08002250 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002250:	6903      	ldr	r3, [r0, #16]
 8002252:	4219      	tst	r1, r3
 8002254:	d001      	beq.n	800225a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002256:	2001      	movs	r0, #1
 8002258:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800225c:	4770      	bx	lr

0800225e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800225e:	b10a      	cbz	r2, 8002264 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002260:	6181      	str	r1, [r0, #24]
 8002262:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002264:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002266:	4770      	bx	lr

08002268 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002268:	4770      	bx	lr
	...

0800226c <HAL_GPIO_EXTI_IRQHandler>:
{
 800226c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4203      	tst	r3, r0
 8002274:	d100      	bne.n	8002278 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002276:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002278:	4b02      	ldr	r3, [pc, #8]	@ (8002284 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800227a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800227c:	f7ff fff4 	bl	8002268 <HAL_GPIO_EXTI_Callback>
}
 8002280:	e7f9      	b.n	8002276 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002282:	bf00      	nop
 8002284:	40010400 	.word	0x40010400

08002288 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002288:	6803      	ldr	r3, [r0, #0]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	f012 0f02 	tst.w	r2, #2
 8002290:	d001      	beq.n	8002296 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002296:	6803      	ldr	r3, [r0, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	f012 0f01 	tst.w	r2, #1
 800229e:	d103      	bne.n	80022a8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	619a      	str	r2, [r3, #24]
  }
}
 80022a8:	4770      	bx	lr

080022aa <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022aa:	b430      	push	{r4, r5}
 80022ac:	9d02      	ldr	r5, [sp, #8]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80022ae:	6804      	ldr	r4, [r0, #0]
 80022b0:	6860      	ldr	r0, [r4, #4]
 80022b2:	ea4f 5c55 	mov.w	ip, r5, lsr #21
 80022b6:	f40c 6c80 	and.w	ip, ip, #1024	@ 0x400
 80022ba:	f04c 7c7f 	orr.w	ip, ip, #66846720	@ 0x3fc0000
 80022be:	f44c 3c58 	orr.w	ip, ip, #221184	@ 0x36000
 80022c2:	f44c 7c7f 	orr.w	ip, ip, #1020	@ 0x3fc
 80022c6:	f04c 0c03 	orr.w	ip, ip, #3
 80022ca:	ea20 000c 	bic.w	r0, r0, ip
 80022ce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80022d2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80022d6:	4319      	orrs	r1, r3
 80022d8:	4329      	orrs	r1, r5
 80022da:	4308      	orrs	r0, r1
 80022dc:	6060      	str	r0, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80022de:	bc30      	pop	{r4, r5}
 80022e0:	4770      	bx	lr

080022e2 <I2C_IsAcknowledgeFailed>:
{
 80022e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e4:	4605      	mov	r5, r0
 80022e6:	460e      	mov	r6, r1
 80022e8:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ea:	6803      	ldr	r3, [r0, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f013 0f10 	tst.w	r3, #16
 80022f2:	d101      	bne.n	80022f8 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 80022f4:	2000      	movs	r0, #0
}
 80022f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	699c      	ldr	r4, [r3, #24]
 80022fc:	f014 0f20 	tst.w	r4, #32
 8002300:	d117      	bne.n	8002332 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8002302:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8002306:	d0f7      	beq.n	80022f8 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002308:	f7ff fe20 	bl	8001f4c <HAL_GetTick>
 800230c:	1bc0      	subs	r0, r0, r7
 800230e:	42b0      	cmp	r0, r6
 8002310:	d801      	bhi.n	8002316 <I2C_IsAcknowledgeFailed+0x34>
 8002312:	2e00      	cmp	r6, #0
 8002314:	d1f0      	bne.n	80022f8 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002316:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002318:	f043 0320 	orr.w	r3, r3, #32
 800231c:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800231e:	2320      	movs	r3, #32
 8002320:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	2300      	movs	r3, #0
 8002326:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800232a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
 8002330:	e7e1      	b.n	80022f6 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002332:	2210      	movs	r2, #16
 8002334:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002336:	682b      	ldr	r3, [r5, #0]
 8002338:	2420      	movs	r4, #32
 800233a:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800233c:	4628      	mov	r0, r5
 800233e:	f7ff ffa3 	bl	8002288 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002342:	682a      	ldr	r2, [r5, #0]
 8002344:	6853      	ldr	r3, [r2, #4]
 8002346:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800234a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800234e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002358:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	f885 4041 	strb.w	r4, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	2300      	movs	r3, #0
 8002366:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800236a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
    return HAL_ERROR;
 800236e:	2001      	movs	r0, #1
 8002370:	e7c1      	b.n	80022f6 <I2C_IsAcknowledgeFailed+0x14>

08002372 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002372:	b570      	push	{r4, r5, r6, lr}
 8002374:	4604      	mov	r4, r0
 8002376:	460d      	mov	r5, r1
 8002378:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f013 0f02 	tst.w	r3, #2
 8002382:	d11d      	bne.n	80023c0 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002384:	4632      	mov	r2, r6
 8002386:	4629      	mov	r1, r5
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff ffaa 	bl	80022e2 <I2C_IsAcknowledgeFailed>
 800238e:	b9c8      	cbnz	r0, 80023c4 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002390:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002394:	d0f1      	beq.n	800237a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff fdd9 	bl	8001f4c <HAL_GetTick>
 800239a:	1b80      	subs	r0, r0, r6
 800239c:	42a8      	cmp	r0, r5
 800239e:	d801      	bhi.n	80023a4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80023a0:	2d00      	cmp	r5, #0
 80023a2:	d1ea      	bne.n	800237a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80023a6:	f043 0320 	orr.w	r3, r3, #32
 80023aa:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	2320      	movs	r3, #32
 80023ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80023b8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80023bc:	2001      	movs	r0, #1
 80023be:	e000      	b.n	80023c2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80023c0:	2000      	movs	r0, #0
}
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80023c4:	2001      	movs	r0, #1
 80023c6:	e7fc      	b.n	80023c2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080023c8 <I2C_WaitOnFlagUntilTimeout>:
{
 80023c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023cc:	4606      	mov	r6, r0
 80023ce:	4688      	mov	r8, r1
 80023d0:	4617      	mov	r7, r2
 80023d2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d4:	6834      	ldr	r4, [r6, #0]
 80023d6:	69a4      	ldr	r4, [r4, #24]
 80023d8:	ea38 0404 	bics.w	r4, r8, r4
 80023dc:	bf0c      	ite	eq
 80023de:	2401      	moveq	r4, #1
 80023e0:	2400      	movne	r4, #0
 80023e2:	42bc      	cmp	r4, r7
 80023e4:	d118      	bne.n	8002418 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80023e6:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80023ea:	d0f3      	beq.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ec:	f7ff fdae 	bl	8001f4c <HAL_GetTick>
 80023f0:	9b06      	ldr	r3, [sp, #24]
 80023f2:	1ac0      	subs	r0, r0, r3
 80023f4:	42a8      	cmp	r0, r5
 80023f6:	d801      	bhi.n	80023fc <I2C_WaitOnFlagUntilTimeout+0x34>
 80023f8:	2d00      	cmp	r5, #0
 80023fa:	d1eb      	bne.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002404:	2320      	movs	r3, #32
 8002406:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	2300      	movs	r3, #0
 800240c:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8002410:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
 8002416:	e000      	b.n	800241a <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8002418:	2000      	movs	r0, #0
}
 800241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800241e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800241e:	b570      	push	{r4, r5, r6, lr}
 8002420:	4605      	mov	r5, r0
 8002422:	460c      	mov	r4, r1
 8002424:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002426:	682b      	ldr	r3, [r5, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f013 0f20 	tst.w	r3, #32
 800242e:	d11a      	bne.n	8002466 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002430:	4632      	mov	r2, r6
 8002432:	4621      	mov	r1, r4
 8002434:	4628      	mov	r0, r5
 8002436:	f7ff ff54 	bl	80022e2 <I2C_IsAcknowledgeFailed>
 800243a:	b9b0      	cbnz	r0, 800246a <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243c:	f7ff fd86 	bl	8001f4c <HAL_GetTick>
 8002440:	1b80      	subs	r0, r0, r6
 8002442:	42a0      	cmp	r0, r4
 8002444:	d801      	bhi.n	800244a <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8002446:	2c00      	cmp	r4, #0
 8002448:	d1ed      	bne.n	8002426 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800244a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800244c:	f043 0320 	orr.w	r3, r3, #32
 8002450:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002452:	2320      	movs	r3, #32
 8002454:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002458:	2300      	movs	r3, #0
 800245a:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800245e:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
}
 8002464:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002466:	2000      	movs	r0, #0
 8002468:	e7fc      	b.n	8002464 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800246a:	2001      	movs	r0, #1
 800246c:	e7fa      	b.n	8002464 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800246e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800246e:	b570      	push	{r4, r5, r6, lr}
 8002470:	4604      	mov	r4, r0
 8002472:	460d      	mov	r5, r1
 8002474:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f013 0f04 	tst.w	r3, #4
 800247e:	d13e      	bne.n	80024fe <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002480:	4632      	mov	r2, r6
 8002482:	4629      	mov	r1, r5
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff ff2c 	bl	80022e2 <I2C_IsAcknowledgeFailed>
 800248a:	4601      	mov	r1, r0
 800248c:	2800      	cmp	r0, #0
 800248e:	d138      	bne.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	f012 0f20 	tst.w	r2, #32
 8002498:	d113      	bne.n	80024c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249a:	f7ff fd57 	bl	8001f4c <HAL_GetTick>
 800249e:	1b80      	subs	r0, r0, r6
 80024a0:	42a8      	cmp	r0, r5
 80024a2:	d801      	bhi.n	80024a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80024a4:	2d00      	cmp	r5, #0
 80024a6:	d1e6      	bne.n	8002476 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80024aa:	f043 0320 	orr.w	r3, r3, #32
 80024ae:	6463      	str	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	2320      	movs	r3, #32
 80024b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      __HAL_UNLOCK(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80024bc:	2101      	movs	r1, #1
}
 80024be:	4608      	mov	r0, r1
 80024c0:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	f012 0f04 	tst.w	r2, #4
 80024c8:	d002      	beq.n	80024d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80024ca:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80024cc:	2a00      	cmp	r2, #0
 80024ce:	d1f6      	bne.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d0:	2220      	movs	r2, #32
 80024d2:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80024d4:	6821      	ldr	r1, [r4, #0]
 80024d6:	684b      	ldr	r3, [r1, #4]
 80024d8:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80024dc:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80024e0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80024f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80024fa:	2101      	movs	r1, #1
 80024fc:	e7df      	b.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 80024fe:	2100      	movs	r1, #0
 8002500:	e7dd      	b.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8002502:	2101      	movs	r1, #1
 8002504:	e7db      	b.n	80024be <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08002506 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002506:	2800      	cmp	r0, #0
 8002508:	d059      	beq.n	80025be <HAL_I2C_Init+0xb8>
{
 800250a:	b510      	push	{r4, lr}
 800250c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002512:	2b00      	cmp	r3, #0
 8002514:	d043      	beq.n	800259e <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002516:	2324      	movs	r3, #36	@ 0x24
 8002518:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800251c:	6822      	ldr	r2, [r4, #0]
 800251e:	6813      	ldr	r3, [r2, #0]
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002526:	6863      	ldr	r3, [r4, #4]
 8002528:	6822      	ldr	r2, [r4, #0]
 800252a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800252e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	6893      	ldr	r3, [r2, #8]
 8002534:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002538:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800253a:	68e3      	ldr	r3, [r4, #12]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d033      	beq.n	80025a8 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002540:	68a3      	ldr	r3, [r4, #8]
 8002542:	6822      	ldr	r2, [r4, #0]
 8002544:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8002548:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800254a:	68e3      	ldr	r3, [r4, #12]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d031      	beq.n	80025b4 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002550:	6822      	ldr	r2, [r4, #0]
 8002552:	6853      	ldr	r3, [r2, #4]
 8002554:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800255c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800255e:	6822      	ldr	r2, [r4, #0]
 8002560:	68d3      	ldr	r3, [r2, #12]
 8002562:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002566:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002568:	6923      	ldr	r3, [r4, #16]
 800256a:	6962      	ldr	r2, [r4, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	69a1      	ldr	r1, [r4, #24]
 8002570:	6822      	ldr	r2, [r4, #0]
 8002572:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002576:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002578:	69e3      	ldr	r3, [r4, #28]
 800257a:	6a21      	ldr	r1, [r4, #32]
 800257c:	6822      	ldr	r2, [r4, #0]
 800257e:	430b      	orrs	r3, r1
 8002580:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258c:	2000      	movs	r0, #0
 800258e:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002590:	2320      	movs	r3, #32
 8002592:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002596:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800259c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800259e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80025a2:	f7ff f871 	bl	8001688 <HAL_I2C_MspInit>
 80025a6:	e7b6      	b.n	8002516 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025a8:	68a3      	ldr	r3, [r4, #8]
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025b0:	6093      	str	r3, [r2, #8]
 80025b2:	e7ca      	b.n	800254a <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	e7c8      	b.n	8002550 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80025be:	2001      	movs	r0, #1
}
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_I2C_Master_Transmit>:
{
 80025c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	460f      	mov	r7, r1
 80025cc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80025d2:	b2c9      	uxtb	r1, r1
 80025d4:	2920      	cmp	r1, #32
 80025d6:	f040 80a3 	bne.w	8002720 <HAL_I2C_Master_Transmit+0x15c>
 80025da:	4604      	mov	r4, r0
 80025dc:	4690      	mov	r8, r2
 80025de:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80025e0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	f000 809f 	beq.w	8002728 <HAL_I2C_Master_Transmit+0x164>
 80025ea:	f04f 0a01 	mov.w	sl, #1
 80025ee:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80025f2:	f7ff fcab 	bl	8001f4c <HAL_GetTick>
 80025f6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025f8:	9000      	str	r0, [sp, #0]
 80025fa:	2319      	movs	r3, #25
 80025fc:	4652      	mov	r2, sl
 80025fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff fee0 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002608:	2800      	cmp	r0, #0
 800260a:	f040 808f 	bne.w	800272c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800260e:	2321      	movs	r3, #33	@ 0x21
 8002610:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002614:	2310      	movs	r3, #16
 8002616:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261a:	2300      	movs	r3, #0
 800261c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800261e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002622:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002626:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002628:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	2bff      	cmp	r3, #255	@ 0xff
 800262e:	d90a      	bls.n	8002646 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002630:	22ff      	movs	r2, #255	@ 0xff
 8002632:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002634:	4b41      	ldr	r3, [pc, #260]	@ (800273c <HAL_I2C_Master_Transmit+0x178>)
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800263c:	4639      	mov	r1, r7
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff fe33 	bl	80022aa <I2C_TransferConfig>
 8002644:	e018      	b.n	8002678 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8002646:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002648:	b292      	uxth	r2, r2
 800264a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800264c:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <HAL_I2C_Master_Transmit+0x178>)
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	4639      	mov	r1, r7
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff fe26 	bl	80022aa <I2C_TransferConfig>
 800265e:	e00b      	b.n	8002678 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002660:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002662:	b292      	uxth	r2, r2
 8002664:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002666:	2300      	movs	r3, #0
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	4639      	mov	r1, r7
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff fe19 	bl	80022aa <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002678:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d033      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002680:	462a      	mov	r2, r5
 8002682:	4631      	mov	r1, r6
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff fe74 	bl	8002372 <I2C_WaitOnTXISFlagUntilTimeout>
 800268a:	2800      	cmp	r0, #0
 800268c:	d150      	bne.n	8002730 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800268e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	7812      	ldrb	r2, [r2, #0]
 8002694:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002696:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002698:	3301      	adds	r3, #1
 800269a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800269c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80026a6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80026b0:	b292      	uxth	r2, r2
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	d0e0      	beq.n	8002678 <HAL_I2C_Master_Transmit+0xb4>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1de      	bne.n	8002678 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ba:	9500      	str	r5, [sp, #0]
 80026bc:	4633      	mov	r3, r6
 80026be:	2200      	movs	r2, #0
 80026c0:	2180      	movs	r1, #128	@ 0x80
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff fe80 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 80026c8:	bba0      	cbnz	r0, 8002734 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2bff      	cmp	r3, #255	@ 0xff
 80026d0:	d9c6      	bls.n	8002660 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d2:	22ff      	movs	r2, #255	@ 0xff
 80026d4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026d6:	2300      	movs	r3, #0
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026de:	4639      	mov	r1, r7
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff fde2 	bl	80022aa <I2C_TransferConfig>
 80026e6:	e7c7      	b.n	8002678 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e8:	462a      	mov	r2, r5
 80026ea:	4631      	mov	r1, r6
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff fe96 	bl	800241e <I2C_WaitOnSTOPFlagUntilTimeout>
 80026f2:	bb08      	cbnz	r0, 8002738 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	2220      	movs	r2, #32
 80026f8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80026fa:	6821      	ldr	r1, [r4, #0]
 80026fc:	684b      	ldr	r3, [r1, #4]
 80026fe:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002702:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8002706:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002710:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002714:	2300      	movs	r3, #0
 8002716:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800271a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800271e:	e000      	b.n	8002722 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8002720:	2002      	movs	r0, #2
}
 8002722:	b002      	add	sp, #8
 8002724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002728:	2002      	movs	r0, #2
 800272a:	e7fa      	b.n	8002722 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 800272c:	2001      	movs	r0, #1
 800272e:	e7f8      	b.n	8002722 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8002730:	2001      	movs	r0, #1
 8002732:	e7f6      	b.n	8002722 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8002734:	2001      	movs	r0, #1
 8002736:	e7f4      	b.n	8002722 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8002738:	2001      	movs	r0, #1
 800273a:	e7f2      	b.n	8002722 <HAL_I2C_Master_Transmit+0x15e>
 800273c:	80002000 	.word	0x80002000

08002740 <HAL_I2C_Master_Receive>:
{
 8002740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	460f      	mov	r7, r1
 8002748:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800274a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800274e:	b2c9      	uxtb	r1, r1
 8002750:	2920      	cmp	r1, #32
 8002752:	f040 80a2 	bne.w	800289a <HAL_I2C_Master_Receive+0x15a>
 8002756:	4604      	mov	r4, r0
 8002758:	4690      	mov	r8, r2
 800275a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 800275c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002760:	2b01      	cmp	r3, #1
 8002762:	f000 809e 	beq.w	80028a2 <HAL_I2C_Master_Receive+0x162>
 8002766:	f04f 0a01 	mov.w	sl, #1
 800276a:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800276e:	f7ff fbed 	bl	8001f4c <HAL_GetTick>
 8002772:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002774:	9000      	str	r0, [sp, #0]
 8002776:	2319      	movs	r3, #25
 8002778:	4652      	mov	r2, sl
 800277a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff fe22 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002784:	2800      	cmp	r0, #0
 8002786:	f040 808e 	bne.w	80028a6 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800278a:	2322      	movs	r3, #34	@ 0x22
 800278c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002790:	2310      	movs	r3, #16
 8002792:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002796:	2300      	movs	r3, #0
 8002798:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800279a:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800279e:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027a2:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2bff      	cmp	r3, #255	@ 0xff
 80027aa:	d90a      	bls.n	80027c2 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ac:	22ff      	movs	r2, #255	@ 0xff
 80027ae:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80027b0:	4b41      	ldr	r3, [pc, #260]	@ (80028b8 <HAL_I2C_Master_Receive+0x178>)
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027b8:	4639      	mov	r1, r7
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7ff fd75 	bl	80022aa <I2C_TransferConfig>
 80027c0:	e018      	b.n	80027f4 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 80027c2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80027c4:	b292      	uxth	r2, r2
 80027c6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80027c8:	4b3b      	ldr	r3, [pc, #236]	@ (80028b8 <HAL_I2C_Master_Receive+0x178>)
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	4639      	mov	r1, r7
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7ff fd68 	bl	80022aa <I2C_TransferConfig>
 80027da:	e00b      	b.n	80027f4 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80027dc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80027de:	b292      	uxth	r2, r2
 80027e0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027e2:	2300      	movs	r3, #0
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4639      	mov	r1, r7
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fd5b 	bl	80022aa <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d032      	beq.n	8002862 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fc:	462a      	mov	r2, r5
 80027fe:	4631      	mov	r1, r6
 8002800:	4620      	mov	r0, r4
 8002802:	f7ff fe34 	bl	800246e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002806:	2800      	cmp	r0, #0
 8002808:	d14f      	bne.n	80028aa <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800280e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002810:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002812:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002814:	3301      	adds	r3, #1
 8002816:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002818:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800281a:	3a01      	subs	r2, #1
 800281c:	b292      	uxth	r2, r2
 800281e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002820:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29b      	uxth	r3, r3
 8002828:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800282a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0e0      	beq.n	80027f4 <HAL_I2C_Master_Receive+0xb4>
 8002832:	2a00      	cmp	r2, #0
 8002834:	d1de      	bne.n	80027f4 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002836:	9500      	str	r5, [sp, #0]
 8002838:	4633      	mov	r3, r6
 800283a:	2180      	movs	r1, #128	@ 0x80
 800283c:	4620      	mov	r0, r4
 800283e:	f7ff fdc3 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002842:	bba0      	cbnz	r0, 80028ae <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002844:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2bff      	cmp	r3, #255	@ 0xff
 800284a:	d9c7      	bls.n	80027dc <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800284c:	22ff      	movs	r2, #255	@ 0xff
 800284e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002858:	4639      	mov	r1, r7
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff fd25 	bl	80022aa <I2C_TransferConfig>
 8002860:	e7c8      	b.n	80027f4 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002862:	462a      	mov	r2, r5
 8002864:	4631      	mov	r1, r6
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff fdd9 	bl	800241e <I2C_WaitOnSTOPFlagUntilTimeout>
 800286c:	bb08      	cbnz	r0, 80028b2 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	2220      	movs	r2, #32
 8002872:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002874:	6821      	ldr	r1, [r4, #0]
 8002876:	684b      	ldr	r3, [r1, #4]
 8002878:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800287c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8002880:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800288e:	2300      	movs	r3, #0
 8002890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002894:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8002898:	e000      	b.n	800289c <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 800289a:	2002      	movs	r0, #2
}
 800289c:	b002      	add	sp, #8
 800289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80028a2:	2002      	movs	r0, #2
 80028a4:	e7fa      	b.n	800289c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80028a6:	2001      	movs	r0, #1
 80028a8:	e7f8      	b.n	800289c <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 80028aa:	2001      	movs	r0, #1
 80028ac:	e7f6      	b.n	800289c <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 80028ae:	2001      	movs	r0, #1
 80028b0:	e7f4      	b.n	800289c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 80028b2:	2001      	movs	r0, #1
 80028b4:	e7f2      	b.n	800289c <HAL_I2C_Master_Receive+0x15c>
 80028b6:	bf00      	nop
 80028b8:	80002400 	.word	0x80002400

080028bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028bc:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	2a20      	cmp	r2, #32
 80028c6:	d123      	bne.n	8002910 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80028cc:	2a01      	cmp	r2, #1
 80028ce:	d021      	beq.n	8002914 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80028d0:	2201      	movs	r2, #1
 80028d2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d6:	2224      	movs	r2, #36	@ 0x24
 80028d8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028dc:	6800      	ldr	r0, [r0, #0]
 80028de:	6802      	ldr	r2, [r0, #0]
 80028e0:	f022 0201 	bic.w	r2, r2, #1
 80028e4:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	6802      	ldr	r2, [r0, #0]
 80028ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028ee:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	6802      	ldr	r2, [r0, #0]
 80028f4:	4311      	orrs	r1, r2
 80028f6:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	680a      	ldr	r2, [r1, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	2000      	movs	r0, #0
 800290a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800290e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002910:	2002      	movs	r0, #2
 8002912:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002914:	2002      	movs	r0, #2
  }
}
 8002916:	4770      	bx	lr

08002918 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002918:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	2a20      	cmp	r2, #32
 8002922:	d121      	bne.n	8002968 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002924:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002928:	2a01      	cmp	r2, #1
 800292a:	d01f      	beq.n	800296c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800292c:	2201      	movs	r2, #1
 800292e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002932:	2224      	movs	r2, #36	@ 0x24
 8002934:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002938:	6800      	ldr	r0, [r0, #0]
 800293a:	6802      	ldr	r2, [r0, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002946:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800294a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800294e:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	680a      	ldr	r2, [r1, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002960:	2000      	movs	r0, #0
 8002962:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8002966:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002968:	2002      	movs	r0, #2
 800296a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800296c:	2002      	movs	r0, #2
  }
}
 800296e:	4770      	bx	lr

08002970 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002970:	4b02      	ldr	r3, [pc, #8]	@ (800297c <HAL_PWREx_GetVoltageRange+0xc>)
 8002972:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002974:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40007000 	.word	0x40007000

08002980 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002980:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002984:	d00f      	beq.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002986:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002992:	d034      	beq.n	80029fe <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002994:	4a1b      	ldr	r2, [pc, #108]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002996:	6813      	ldr	r3, [r2, #0]
 8002998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800299c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029a2:	2000      	movs	r0, #0
 80029a4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b2:	d020      	beq.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b4:	4a13      	ldr	r2, [pc, #76]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80029b6:	6813      	ldr	r3, [r2, #0]
 80029b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029c0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029c2:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2232      	movs	r2, #50	@ 0x32
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	4a0f      	ldr	r2, [pc, #60]	@ (8002a0c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d6:	e000      	b.n	80029da <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 80029d8:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80029dc:	6952      	ldr	r2, [r2, #20]
 80029de:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80029e2:	d001      	beq.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x68>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f7      	bne.n	80029d8 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80029f0:	d103      	bne.n	80029fa <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 80029f2:	2000      	movs	r0, #0
 80029f4:	4770      	bx	lr
 80029f6:	2000      	movs	r0, #0
 80029f8:	4770      	bx	lr
        return HAL_TIMEOUT;
 80029fa:	2003      	movs	r0, #3
 80029fc:	4770      	bx	lr
  return HAL_OK;
 80029fe:	2000      	movs	r0, #0
}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40007000 	.word	0x40007000
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a10:	b530      	push	{r4, r5, lr}
 8002a12:	b083      	sub	sp, #12
 8002a14:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a16:	4b20      	ldr	r3, [pc, #128]	@ (8002a98 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002a1e:	d00b      	beq.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a20:	f7ff ffa6 	bl	8002970 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a24:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002a28:	d017      	beq.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a2a:	2c80      	cmp	r4, #128	@ 0x80
 8002a2c:	d81f      	bhi.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a2e:	d02d      	beq.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a30:	2c70      	cmp	r4, #112	@ 0x70
 8002a32:	d02d      	beq.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a34:	2100      	movs	r1, #0
 8002a36:	e01b      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	4d17      	ldr	r5, [pc, #92]	@ (8002a98 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002a3a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002a42:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002a4c:	f7ff ff90 	bl	8002970 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002a58:	e7e4      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002a5a:	2c80      	cmp	r4, #128	@ 0x80
 8002a5c:	d903      	bls.n	8002a66 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8002a5e:	2ca0      	cmp	r4, #160	@ 0xa0
 8002a60:	d903      	bls.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a62:	2102      	movs	r1, #2
 8002a64:	e004      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a66:	2100      	movs	r1, #0
 8002a68:	e002      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	e000      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a6e:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a70:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	f023 0307 	bic.w	r3, r3, #7
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	428b      	cmp	r3, r1
 8002a84:	d106      	bne.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002a86:	2000      	movs	r0, #0
}
 8002a88:	b003      	add	sp, #12
 8002a8a:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	e7ef      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a90:	2101      	movs	r1, #1
 8002a92:	e7ed      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
 8002a96:	e7f7      	b.n	8002a88 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa0:	4a28      	ldr	r2, [pc, #160]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aa2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aaa:	f013 030c 	ands.w	r3, r3, #12
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x26>
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d006      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d01f      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002abc:	2000      	movs	r0, #0
 8002abe:	4602      	mov	r2, r0
 8002ac0:	e010      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ac2:	2a01      	cmp	r2, #1
 8002ac4:	d1f6      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	f012 0f08 	tst.w	r2, #8
 8002ace:	d10c      	bne.n	8002aea <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ad2:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8002ad6:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002ada:	491b      	ldr	r1, [pc, #108]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002adc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae0:	b143      	cbz	r3, 8002af4 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ae2:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d00d      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x64>
}
 8002ae8:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002aea:	4a16      	ldr	r2, [pc, #88]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002af2:	e7f2      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002af4:	4610      	mov	r0, r2
 8002af6:	e7f5      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002af8:	4814      	ldr	r0, [pc, #80]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002afa:	2200      	movs	r2, #0
 8002afc:	e7f2      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002afe:	4814      	ldr	r0, [pc, #80]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b00:	2200      	movs	r2, #0
 8002b02:	e7ef      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d016      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x9e>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d100      	bne.n	8002b16 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8002b14:	4a0e      	ldr	r2, [pc, #56]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b16:	490b      	ldr	r1, [pc, #44]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b18:	68cb      	ldr	r3, [r1, #12]
 8002b1a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002b1e:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b20:	68c8      	ldr	r0, [r1, #12]
 8002b22:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002b26:	fb02 f000 	mul.w	r0, r2, r0
 8002b2a:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b2e:	68cb      	ldr	r3, [r1, #12]
 8002b30:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002b34:	3301      	adds	r3, #1
 8002b36:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8002b38:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002b3c:	e7d4      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8002b3e:	4a03      	ldr	r2, [pc, #12]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0xac>)
 8002b40:	e7e9      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x76>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08006cc0 	.word	0x08006cc0
 8002b4c:	00f42400 	.word	0x00f42400
 8002b50:	007a1200 	.word	0x007a1200

08002b54 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002b54:	2800      	cmp	r0, #0
 8002b56:	f000 82fc 	beq.w	8003152 <HAL_RCC_OscConfig+0x5fe>
{
 8002b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b60:	4b96      	ldr	r3, [pc, #600]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002b62:	689d      	ldr	r5, [r3, #8]
 8002b64:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b68:	68de      	ldr	r6, [r3, #12]
 8002b6a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b6e:	6803      	ldr	r3, [r0, #0]
 8002b70:	f013 0f10 	tst.w	r3, #16
 8002b74:	d05a      	beq.n	8002c2c <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b76:	b1e5      	cbz	r5, 8002bb2 <HAL_RCC_OscConfig+0x5e>
 8002b78:	2d0c      	cmp	r5, #12
 8002b7a:	d018      	beq.n	8002bae <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b7c:	69a3      	ldr	r3, [r4, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 80bb 	beq.w	8002cfa <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002b84:	4a8d      	ldr	r2, [pc, #564]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002b86:	6813      	ldr	r3, [r2, #0]
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b8e:	f7ff f9dd 	bl	8001f4c <HAL_GetTick>
 8002b92:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b94:	4b89      	ldr	r3, [pc, #548]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f013 0f02 	tst.w	r3, #2
 8002b9c:	f040 809a 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba0:	f7ff f9d4 	bl	8001f4c <HAL_GetTick>
 8002ba4:	1bc0      	subs	r0, r0, r7
 8002ba6:	2802      	cmp	r0, #2
 8002ba8:	d9f4      	bls.n	8002b94 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8002baa:	2003      	movs	r0, #3
 8002bac:	e2dc      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bae:	2e01      	cmp	r6, #1
 8002bb0:	d1e4      	bne.n	8002b7c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bb2:	4b82      	ldr	r3, [pc, #520]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f013 0f02 	tst.w	r3, #2
 8002bba:	d003      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x70>
 8002bbc:	69a3      	ldr	r3, [r4, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 82c9 	beq.w	8003156 <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bc4:	6a20      	ldr	r0, [r4, #32]
 8002bc6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f013 0f08 	tst.w	r3, #8
 8002bce:	d05b      	beq.n	8002c88 <HAL_RCC_OscConfig+0x134>
 8002bd0:	4b7a      	ldr	r3, [pc, #488]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd8:	4298      	cmp	r0, r3
 8002bda:	d85c      	bhi.n	8002c96 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bdc:	4b77      	ldr	r3, [pc, #476]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	f042 0208 	orr.w	r2, r2, #8
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002bec:	6a21      	ldr	r1, [r4, #32]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002bf8:	69e1      	ldr	r1, [r4, #28]
 8002bfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002bfe:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c00:	2d00      	cmp	r5, #0
 8002c02:	d060      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c04:	f7ff ff4c 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002c08:	4b6c      	ldr	r3, [pc, #432]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c10:	4a6b      	ldr	r2, [pc, #428]	@ (8002dc0 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	40d8      	lsrs	r0, r3
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc4 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	f7ff f951 	bl	8001ec8 <HAL_InitTick>
        if(status != HAL_OK)
 8002c26:	2800      	cmp	r0, #0
 8002c28:	f040 829e 	bne.w	8003168 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	f013 0f01 	tst.w	r3, #1
 8002c32:	f000 8081 	beq.w	8002d38 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c36:	2d08      	cmp	r5, #8
 8002c38:	d075      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1d2>
 8002c3a:	2d0c      	cmp	r5, #12
 8002c3c:	d071      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3e:	6863      	ldr	r3, [r4, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	f000 8097 	beq.w	8002d76 <HAL_RCC_OscConfig+0x222>
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c4c:	f000 8099 	beq.w	8002d82 <HAL_RCC_OscConfig+0x22e>
 8002c50:	4b5a      	ldr	r3, [pc, #360]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c60:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c62:	6863      	ldr	r3, [r4, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8099 	beq.w	8002d9c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f96f 	bl	8001f4c <HAL_GetTick>
 8002c6e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c70:	4b52      	ldr	r3, [pc, #328]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002c78:	d15e      	bne.n	8002d38 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7a:	f7ff f967 	bl	8001f4c <HAL_GetTick>
 8002c7e:	1bc0      	subs	r0, r0, r7
 8002c80:	2864      	cmp	r0, #100	@ 0x64
 8002c82:	d9f5      	bls.n	8002c70 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002c84:	2003      	movs	r0, #3
 8002c86:	e26f      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c88:	4b4c      	ldr	r3, [pc, #304]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c94:	e7a0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c96:	f7ff febb 	bl	8002a10 <RCC_SetFlashLatencyFromMSIRange>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	f040 825d 	bne.w	800315a <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca0:	4b46      	ldr	r3, [pc, #280]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	f042 0208 	orr.w	r2, r2, #8
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002cb0:	6a21      	ldr	r1, [r4, #32]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002cbc:	69e1      	ldr	r1, [r4, #28]
 8002cbe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	e79e      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cc6:	6a20      	ldr	r0, [r4, #32]
 8002cc8:	f7ff fea2 	bl	8002a10 <RCC_SetFlashLatencyFromMSIRange>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d099      	beq.n	8002c04 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e249      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd4:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	f042 0208 	orr.w	r2, r2, #8
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002ce4:	6a21      	ldr	r1, [r4, #32]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002cf0:	69e1      	ldr	r1, [r4, #28]
 8002cf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	e798      	b.n	8002c2c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8002cfa:	4a30      	ldr	r2, [pc, #192]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002cfc:	6813      	ldr	r3, [r2, #0]
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d04:	f7ff f922 	bl	8001f4c <HAL_GetTick>
 8002d08:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f013 0f02 	tst.w	r3, #2
 8002d12:	d08b      	beq.n	8002c2c <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d14:	f7ff f91a 	bl	8001f4c <HAL_GetTick>
 8002d18:	1bc0      	subs	r0, r0, r7
 8002d1a:	2802      	cmp	r0, #2
 8002d1c:	d9f5      	bls.n	8002d0a <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8002d1e:	2003      	movs	r0, #3
 8002d20:	e222      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d22:	2e03      	cmp	r6, #3
 8002d24:	d18b      	bne.n	8002c3e <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002d2e:	d003      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1e4>
 8002d30:	6863      	ldr	r3, [r4, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8213 	beq.w	800315e <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	f013 0f02 	tst.w	r3, #2
 8002d3e:	d058      	beq.n	8002df2 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d40:	2d04      	cmp	r5, #4
 8002d42:	d045      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x27c>
 8002d44:	2d0c      	cmp	r5, #12
 8002d46:	d041      	beq.n	8002dcc <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d48:	68e3      	ldr	r3, [r4, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d077      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002d50:	6813      	ldr	r3, [r2, #0]
 8002d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d58:	f7ff f8f8 	bl	8001f4c <HAL_GetTick>
 8002d5c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5e:	4b17      	ldr	r3, [pc, #92]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002d66:	d161      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7ff f8f0 	bl	8001f4c <HAL_GetTick>
 8002d6c:	1b80      	subs	r0, r0, r6
 8002d6e:	2802      	cmp	r0, #2
 8002d70:	d9f5      	bls.n	8002d5e <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8002d72:	2003      	movs	r0, #3
 8002d74:	e1f8      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002d78:	6813      	ldr	r3, [r2, #0]
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e76f      	b.n	8002c62 <HAL_RCC_OscConfig+0x10e>
 8002d82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d86:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e762      	b.n	8002c62 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f8d6 	bl	8001f4c <HAL_GetTick>
 8002da0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_RCC_OscConfig+0x268>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002daa:	d0c5      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff f8ce 	bl	8001f4c <HAL_GetTick>
 8002db0:	1bc0      	subs	r0, r0, r7
 8002db2:	2864      	cmp	r0, #100	@ 0x64
 8002db4:	d9f5      	bls.n	8002da2 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8002db6:	2003      	movs	r0, #3
 8002db8:	e1d6      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08006cf0 	.word	0x08006cf0
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000014 	.word	0x20000014
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dcc:	2e02      	cmp	r6, #2
 8002dce:	d1bb      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd0:	4b95      	ldr	r3, [pc, #596]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_OscConfig+0x28e>
 8002dda:	68e3      	ldr	r3, [r4, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 81c0 	beq.w	8003162 <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4a91      	ldr	r2, [pc, #580]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002de4:	6853      	ldr	r3, [r2, #4]
 8002de6:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002dea:	6921      	ldr	r1, [r4, #16]
 8002dec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002df0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	f013 0f08 	tst.w	r3, #8
 8002df8:	d04c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dfa:	6963      	ldr	r3, [r4, #20]
 8002dfc:	b39b      	cbz	r3, 8002e66 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8002dfe:	4a8a      	ldr	r2, [pc, #552]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e00:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002e0c:	f7ff f89e 	bl	8001f4c <HAL_GetTick>
 8002e10:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e12:	4b85      	ldr	r3, [pc, #532]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e18:	f013 0f02 	tst.w	r3, #2
 8002e1c:	d13a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7ff f895 	bl	8001f4c <HAL_GetTick>
 8002e22:	1b80      	subs	r0, r0, r6
 8002e24:	2802      	cmp	r0, #2
 8002e26:	d9f4      	bls.n	8002e12 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002e28:	2003      	movs	r0, #3
 8002e2a:	e19d      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2c:	4a7e      	ldr	r2, [pc, #504]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e2e:	6853      	ldr	r3, [r2, #4]
 8002e30:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002e34:	6921      	ldr	r1, [r4, #16]
 8002e36:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002e3a:	6053      	str	r3, [r2, #4]
 8002e3c:	e7d9      	b.n	8002df2 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4a7a      	ldr	r2, [pc, #488]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e46:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e48:	f7ff f880 	bl	8001f4c <HAL_GetTick>
 8002e4c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4e:	4b76      	ldr	r3, [pc, #472]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002e56:	d0cc      	beq.n	8002df2 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7ff f878 	bl	8001f4c <HAL_GetTick>
 8002e5c:	1b80      	subs	r0, r0, r6
 8002e5e:	2802      	cmp	r0, #2
 8002e60:	d9f5      	bls.n	8002e4e <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8002e62:	2003      	movs	r0, #3
 8002e64:	e180      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 8002e66:	4a70      	ldr	r2, [pc, #448]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e68:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002e74:	f7ff f86a 	bl	8001f4c <HAL_GetTick>
 8002e78:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e7a:	4b6b      	ldr	r3, [pc, #428]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e80:	f013 0f02 	tst.w	r3, #2
 8002e84:	d006      	beq.n	8002e94 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e86:	f7ff f861 	bl	8001f4c <HAL_GetTick>
 8002e8a:	1b80      	subs	r0, r0, r6
 8002e8c:	2802      	cmp	r0, #2
 8002e8e:	d9f4      	bls.n	8002e7a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8002e90:	2003      	movs	r0, #3
 8002e92:	e169      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	f013 0f04 	tst.w	r3, #4
 8002e9a:	d07a      	beq.n	8002f92 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e9c:	4b62      	ldr	r3, [pc, #392]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002ea4:	d136      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	4b60      	ldr	r3, [pc, #384]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002ea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002eaa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002eae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002eba:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ec4:	d028      	beq.n	8002f18 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec6:	68a3      	ldr	r3, [r4, #8]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d039      	beq.n	8002f40 <HAL_RCC_OscConfig+0x3ec>
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d03f      	beq.n	8002f50 <HAL_RCC_OscConfig+0x3fc>
 8002ed0:	4b55      	ldr	r3, [pc, #340]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002ed2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002ede:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002ee2:	f022 0204 	bic.w	r2, r2, #4
 8002ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d03d      	beq.n	8002f6c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8002ef0:	f7ff f82c 	bl	8001f4c <HAL_GetTick>
 8002ef4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efc:	f013 0f02 	tst.w	r3, #2
 8002f00:	d146      	bne.n	8002f90 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7ff f823 	bl	8001f4c <HAL_GetTick>
 8002f06:	1bc0      	subs	r0, r0, r7
 8002f08:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f0c:	4298      	cmp	r0, r3
 8002f0e:	d9f2      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002f10:	2003      	movs	r0, #3
 8002f12:	e129      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8002f14:	2600      	movs	r6, #0
 8002f16:	e7d1      	b.n	8002ebc <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f18:	4a44      	ldr	r2, [pc, #272]	@ (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f20:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002f22:	f7ff f813 	bl	8001f4c <HAL_GetTick>
 8002f26:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f28:	4b40      	ldr	r3, [pc, #256]	@ (800302c <HAL_RCC_OscConfig+0x4d8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f30:	d1c9      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f32:	f7ff f80b 	bl	8001f4c <HAL_GetTick>
 8002f36:	1bc0      	subs	r0, r0, r7
 8002f38:	2802      	cmp	r0, #2
 8002f3a:	d9f5      	bls.n	8002f28 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	e113      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f40:	4a39      	ldr	r2, [pc, #228]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002f42:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f4e:	e7cc      	b.n	8002eea <HAL_RCC_OscConfig+0x396>
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002f52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002f56:	f042 0204 	orr.w	r2, r2, #4
 8002f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002f5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8002f6a:	e7be      	b.n	8002eea <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002f6c:	f7fe ffee 	bl	8001f4c <HAL_GetTick>
 8002f70:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f78:	f013 0f02 	tst.w	r3, #2
 8002f7c:	d008      	beq.n	8002f90 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe ffe5 	bl	8001f4c <HAL_GetTick>
 8002f82:	1bc0      	subs	r0, r0, r7
 8002f84:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f88:	4298      	cmp	r0, r3
 8002f8a:	d9f2      	bls.n	8002f72 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002f8c:	2003      	movs	r0, #3
 8002f8e:	e0eb      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8002f90:	bb6e      	cbnz	r6, 8002fee <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80e6 	beq.w	8003166 <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d02d      	beq.n	8002ffa <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f9e:	2d0c      	cmp	r5, #12
 8002fa0:	f000 80e8 	beq.w	8003174 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002fac:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f013 5f20 	tst.w	r3, #671088640	@ 0x28000000
 8002fb4:	d104      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	68d3      	ldr	r3, [r2, #12]
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fc0:	4a19      	ldr	r2, [pc, #100]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002fc2:	68d3      	ldr	r3, [r2, #12]
 8002fc4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fcc:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002fce:	f7fe ffbd 	bl	8001f4c <HAL_GetTick>
 8002fd2:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002fdc:	f000 80b7 	beq.w	800314e <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe ffb4 	bl	8001f4c <HAL_GetTick>
 8002fe4:	1b00      	subs	r0, r0, r4
 8002fe6:	2802      	cmp	r0, #2
 8002fe8:	d9f4      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8002fea:	2003      	movs	r0, #3
 8002fec:	e0bc      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4a0e      	ldr	r2, [pc, #56]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002ff0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff8:	e7cb      	b.n	8002f92 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	f003 0103 	and.w	r1, r3, #3
 8003002:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003004:	4291      	cmp	r1, r2
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003008:	2d0c      	cmp	r5, #12
 800300a:	f000 80af 	beq.w	800316c <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8003016:	f040 80ab 	bne.w	8003170 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800301a:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <HAL_RCC_OscConfig+0x4d4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003022:	d031      	beq.n	8003088 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8003024:	2001      	movs	r0, #1
 8003026:	e09f      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
 8003028:	40021000 	.word	0x40021000
 800302c:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003030:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003034:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003036:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003038:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800303c:	d1e4      	bne.n	8003008 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800303e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003042:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003044:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003048:	d1de      	bne.n	8003008 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800304a:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 800304e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003050:	3a07      	subs	r2, #7
 8003052:	bf18      	it	ne
 8003054:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003056:	4291      	cmp	r1, r2
 8003058:	d1d6      	bne.n	8003008 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800305e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003060:	0852      	lsrs	r2, r2, #1
 8003062:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003064:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003068:	d1ce      	bne.n	8003008 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800306a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800306e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003070:	0852      	lsrs	r2, r2, #1
 8003072:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003074:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003078:	d1c6      	bne.n	8003008 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	4b3f      	ldr	r3, [pc, #252]	@ (8003178 <HAL_RCC_OscConfig+0x624>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003082:	d04a      	beq.n	800311a <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8003084:	2000      	movs	r0, #0
 8003086:	e06f      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8003088:	4a3b      	ldr	r2, [pc, #236]	@ (8003178 <HAL_RCC_OscConfig+0x624>)
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003090:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003092:	f7fe ff5b 	bl	8001f4c <HAL_GetTick>
 8003096:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003098:	4b37      	ldr	r3, [pc, #220]	@ (8003178 <HAL_RCC_OscConfig+0x624>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80030a0:	d006      	beq.n	80030b0 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fe ff53 	bl	8001f4c <HAL_GetTick>
 80030a6:	1b40      	subs	r0, r0, r5
 80030a8:	2802      	cmp	r0, #2
 80030aa:	d9f5      	bls.n	8003098 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 80030ac:	2003      	movs	r0, #3
 80030ae:	e05b      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b0:	4a31      	ldr	r2, [pc, #196]	@ (8003178 <HAL_RCC_OscConfig+0x624>)
 80030b2:	68d3      	ldr	r3, [r2, #12]
 80030b4:	4931      	ldr	r1, [pc, #196]	@ (800317c <HAL_RCC_OscConfig+0x628>)
 80030b6:	4019      	ands	r1, r3
 80030b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80030ba:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80030bc:	3801      	subs	r0, #1
 80030be:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80030c2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80030c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80030c8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80030ca:	0840      	lsrs	r0, r0, #1
 80030cc:	3801      	subs	r0, #1
 80030ce:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80030d2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80030d4:	0840      	lsrs	r0, r0, #1
 80030d6:	3801      	subs	r0, #1
 80030d8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80030dc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80030de:	0900      	lsrs	r0, r0, #4
 80030e0:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80030e4:	4319      	orrs	r1, r3
 80030e6:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ee:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f0:	68d3      	ldr	r3, [r2, #12]
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80030f8:	f7fe ff28 	bl	8001f4c <HAL_GetTick>
 80030fc:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003178 <HAL_RCC_OscConfig+0x624>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003106:	d106      	bne.n	8003116 <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe ff20 	bl	8001f4c <HAL_GetTick>
 800310c:	1b00      	subs	r0, r0, r4
 800310e:	2802      	cmp	r0, #2
 8003110:	d9f5      	bls.n	80030fe <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 8003112:	2003      	movs	r0, #3
 8003114:	e028      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8003116:	2000      	movs	r0, #0
 8003118:	e026      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 800311a:	4b17      	ldr	r3, [pc, #92]	@ (8003178 <HAL_RCC_OscConfig+0x624>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003122:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800312a:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800312c:	f7fe ff0e 	bl	8001f4c <HAL_GetTick>
 8003130:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <HAL_RCC_OscConfig+0x624>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe ff06 	bl	8001f4c <HAL_GetTick>
 8003140:	1b03      	subs	r3, r0, r4
 8003142:	2b02      	cmp	r3, #2
 8003144:	d9f5      	bls.n	8003132 <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8003146:	2003      	movs	r0, #3
 8003148:	e00e      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 800314a:	2000      	movs	r0, #0
 800314c:	e00c      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
 800314e:	2000      	movs	r0, #0
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 8003152:	2001      	movs	r0, #1
}
 8003154:	4770      	bx	lr
        return HAL_ERROR;
 8003156:	2001      	movs	r0, #1
 8003158:	e006      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 800315a:	2001      	movs	r0, #1
 800315c:	e004      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800315e:	2001      	movs	r0, #1
 8003160:	e002      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8003162:	2001      	movs	r0, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8003166:	2000      	movs	r0, #0
}
 8003168:	b003      	add	sp, #12
 800316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800316c:	2001      	movs	r0, #1
 800316e:	e7fb      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8003170:	2001      	movs	r0, #1
 8003172:	e7f9      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8003174:	2001      	movs	r0, #1
 8003176:	e7f7      	b.n	8003168 <HAL_RCC_OscConfig+0x614>
 8003178:	40021000 	.word	0x40021000
 800317c:	f99d808c 	.word	0xf99d808c

08003180 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003180:	2800      	cmp	r0, #0
 8003182:	f000 8098 	beq.w	80032b6 <HAL_RCC_ClockConfig+0x136>
{
 8003186:	b570      	push	{r4, r5, r6, lr}
 8003188:	460c      	mov	r4, r1
 800318a:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b4e      	ldr	r3, [pc, #312]	@ (80032c8 <HAL_RCC_ClockConfig+0x148>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	428b      	cmp	r3, r1
 8003196:	d20b      	bcs.n	80031b0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003198:	4a4b      	ldr	r2, [pc, #300]	@ (80032c8 <HAL_RCC_ClockConfig+0x148>)
 800319a:	6813      	ldr	r3, [r2, #0]
 800319c:	f023 0307 	bic.w	r3, r3, #7
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a4:	6813      	ldr	r3, [r2, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	428b      	cmp	r3, r1
 80031ac:	f040 8085 	bne.w	80032ba <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	f013 0f01 	tst.w	r3, #1
 80031b6:	d039      	beq.n	800322c <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b8:	686b      	ldr	r3, [r5, #4]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d026      	beq.n	8003210 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031c2:	bb63      	cbnz	r3, 800321e <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c4:	4a41      	ldr	r2, [pc, #260]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	f012 0f02 	tst.w	r2, #2
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80031ce:	2001      	movs	r0, #1
 80031d0:	e070      	b.n	80032b4 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d2:	4a3e      	ldr	r2, [pc, #248]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80031da:	d070      	beq.n	80032be <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031dc:	493b      	ldr	r1, [pc, #236]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 80031de:	688a      	ldr	r2, [r1, #8]
 80031e0:	f022 0203 	bic.w	r2, r2, #3
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80031e8:	f7fe feb0 	bl	8001f4c <HAL_GetTick>
 80031ec:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b37      	ldr	r3, [pc, #220]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	686a      	ldr	r2, [r5, #4]
 80031f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031fc:	d016      	beq.n	800322c <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fe:	f7fe fea5 	bl	8001f4c <HAL_GetTick>
 8003202:	1b80      	subs	r0, r0, r6
 8003204:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003208:	4298      	cmp	r0, r3
 800320a:	d9f0      	bls.n	80031ee <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800320c:	2003      	movs	r0, #3
 800320e:	e051      	b.n	80032b4 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003210:	4a2e      	ldr	r2, [pc, #184]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003218:	d1e0      	bne.n	80031dc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 800321a:	2001      	movs	r0, #1
 800321c:	e04a      	b.n	80032b4 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321e:	4a2b      	ldr	r2, [pc, #172]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003226:	d1d9      	bne.n	80031dc <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8003228:	2001      	movs	r0, #1
 800322a:	e043      	b.n	80032b4 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	f013 0f02 	tst.w	r3, #2
 8003232:	d006      	beq.n	8003242 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4a25      	ldr	r2, [pc, #148]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 8003236:	6893      	ldr	r3, [r2, #8]
 8003238:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800323c:	68a9      	ldr	r1, [r5, #8]
 800323e:	430b      	orrs	r3, r1
 8003240:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003242:	4b21      	ldr	r3, [pc, #132]	@ (80032c8 <HAL_RCC_ClockConfig+0x148>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	42a3      	cmp	r3, r4
 800324c:	d90a      	bls.n	8003264 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4a1e      	ldr	r2, [pc, #120]	@ (80032c8 <HAL_RCC_ClockConfig+0x148>)
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	f023 0307 	bic.w	r3, r3, #7
 8003256:	4323      	orrs	r3, r4
 8003258:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	6813      	ldr	r3, [r2, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	42a3      	cmp	r3, r4
 8003262:	d12e      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	f013 0f04 	tst.w	r3, #4
 800326a:	d006      	beq.n	800327a <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 800326e:	6893      	ldr	r3, [r2, #8]
 8003270:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003274:	68e9      	ldr	r1, [r5, #12]
 8003276:	430b      	orrs	r3, r1
 8003278:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	682b      	ldr	r3, [r5, #0]
 800327c:	f013 0f08 	tst.w	r3, #8
 8003280:	d007      	beq.n	8003292 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 8003284:	6893      	ldr	r3, [r2, #8]
 8003286:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800328a:	6929      	ldr	r1, [r5, #16]
 800328c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003290:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003292:	f7ff fc05 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <HAL_RCC_ClockConfig+0x14c>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800329e:	4a0c      	ldr	r2, [pc, #48]	@ (80032d0 <HAL_RCC_ClockConfig+0x150>)
 80032a0:	5cd3      	ldrb	r3, [r2, r3]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	40d8      	lsrs	r0, r3
 80032a8:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <HAL_RCC_ClockConfig+0x154>)
 80032aa:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80032ac:	4b0a      	ldr	r3, [pc, #40]	@ (80032d8 <HAL_RCC_ClockConfig+0x158>)
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	f7fe fe0a 	bl	8001ec8 <HAL_InitTick>
}
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80032b6:	2001      	movs	r0, #1
}
 80032b8:	4770      	bx	lr
      return HAL_ERROR;
 80032ba:	2001      	movs	r0, #1
 80032bc:	e7fa      	b.n	80032b4 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 80032be:	2001      	movs	r0, #1
 80032c0:	e7f8      	b.n	80032b4 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 80032c2:	2001      	movs	r0, #1
 80032c4:	e7f6      	b.n	80032b4 <HAL_RCC_ClockConfig+0x134>
 80032c6:	bf00      	nop
 80032c8:	40022000 	.word	0x40022000
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08006cf0 	.word	0x08006cf0
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000014 	.word	0x20000014

080032dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	4604      	mov	r4, r0
 80032e0:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032e2:	4b59      	ldr	r3, [pc, #356]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f013 0f03 	tst.w	r3, #3
 80032ea:	d017      	beq.n	800331c <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032ec:	4b56      	ldr	r3, [pc, #344]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	6802      	ldr	r2, [r0, #0]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d001      	beq.n	80032fe <RCCEx_PLLSAI1_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80032fa:	2601      	movs	r6, #1
 80032fc:	e016      	b.n	800332c <RCCEx_PLLSAI1_Config+0x50>
       ||
 80032fe:	2a00      	cmp	r2, #0
 8003300:	f000 809f 	beq.w	8003442 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003304:	4b50      	ldr	r3, [pc, #320]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800330c:	3301      	adds	r3, #1
 800330e:	6842      	ldr	r2, [r0, #4]
       ||
 8003310:	4293      	cmp	r3, r2
 8003312:	d001      	beq.n	8003318 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 8003314:	2601      	movs	r6, #1
 8003316:	e009      	b.n	800332c <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2600      	movs	r6, #0
 800331a:	e01b      	b.n	8003354 <RCCEx_PLLSAI1_Config+0x78>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800331c:	6803      	ldr	r3, [r0, #0]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d058      	beq.n	80033d4 <RCCEx_PLLSAI1_Config+0xf8>
 8003322:	2b03      	cmp	r3, #3
 8003324:	d05d      	beq.n	80033e2 <RCCEx_PLLSAI1_Config+0x106>
 8003326:	2b01      	cmp	r3, #1
 8003328:	d002      	beq.n	8003330 <RCCEx_PLLSAI1_Config+0x54>
 800332a:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 800332c:	4630      	mov	r0, r6
 800332e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003330:	4a45      	ldr	r2, [pc, #276]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	f012 0f02 	tst.w	r2, #2
 8003338:	d05f      	beq.n	80033fa <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800333a:	4843      	ldr	r0, [pc, #268]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 800333c:	68c2      	ldr	r2, [r0, #12]
 800333e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8003342:	6861      	ldr	r1, [r4, #4]
 8003344:	3901      	subs	r1, #1
 8003346:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800334a:	4313      	orrs	r3, r2
 800334c:	60c3      	str	r3, [r0, #12]
 800334e:	2600      	movs	r6, #0
  if(status == HAL_OK)
 8003350:	2e00      	cmp	r6, #0
 8003352:	d1eb      	bne.n	800332c <RCCEx_PLLSAI1_Config+0x50>
    __HAL_RCC_PLLSAI1_DISABLE();
 8003354:	4a3c      	ldr	r2, [pc, #240]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 8003356:	6813      	ldr	r3, [r2, #0]
 8003358:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800335c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800335e:	f7fe fdf5 	bl	8001f4c <HAL_GetTick>
 8003362:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003364:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800336c:	d005      	beq.n	800337a <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800336e:	f7fe fded 	bl	8001f4c <HAL_GetTick>
 8003372:	1bc3      	subs	r3, r0, r7
 8003374:	2b02      	cmp	r3, #2
 8003376:	d9f5      	bls.n	8003364 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8003378:	2603      	movs	r6, #3
    if(status == HAL_OK)
 800337a:	2e00      	cmp	r6, #0
 800337c:	d1d6      	bne.n	800332c <RCCEx_PLLSAI1_Config+0x50>
      if(Divider == DIVIDER_P_UPDATE)
 800337e:	2d00      	cmp	r5, #0
 8003380:	d13d      	bne.n	80033fe <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003382:	4931      	ldr	r1, [pc, #196]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 8003384:	690b      	ldr	r3, [r1, #16]
 8003386:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800338a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338e:	68a0      	ldr	r0, [r4, #8]
 8003390:	68e2      	ldr	r2, [r4, #12]
 8003392:	0912      	lsrs	r2, r2, #4
 8003394:	0452      	lsls	r2, r2, #17
 8003396:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800339a:	4313      	orrs	r3, r2
 800339c:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800339e:	4a2a      	ldr	r2, [pc, #168]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033a6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80033a8:	f7fe fdd0 	bl	8001f4c <HAL_GetTick>
 80033ac:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ae:	4b26      	ldr	r3, [pc, #152]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80033b6:	d105      	bne.n	80033c4 <RCCEx_PLLSAI1_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033b8:	f7fe fdc8 	bl	8001f4c <HAL_GetTick>
 80033bc:	1b40      	subs	r0, r0, r5
 80033be:	2802      	cmp	r0, #2
 80033c0:	d9f5      	bls.n	80033ae <RCCEx_PLLSAI1_Config+0xd2>
          status = HAL_TIMEOUT;
 80033c2:	2603      	movs	r6, #3
      if(status == HAL_OK)
 80033c4:	2e00      	cmp	r6, #0
 80033c6:	d1b1      	bne.n	800332c <RCCEx_PLLSAI1_Config+0x50>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 80033ca:	6913      	ldr	r3, [r2, #16]
 80033cc:	69a1      	ldr	r1, [r4, #24]
 80033ce:	430b      	orrs	r3, r1
 80033d0:	6113      	str	r3, [r2, #16]
 80033d2:	e7ab      	b.n	800332c <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80033dc:	d1ad      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x5e>
 80033de:	2601      	movs	r6, #1
 80033e0:	e7a4      	b.n	800332c <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033e2:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80033ea:	d1a6      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x5e>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ec:	4a16      	ldr	r2, [pc, #88]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80033f4:	d1a1      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x5e>
 80033f6:	2601      	movs	r6, #1
 80033f8:	e798      	b.n	800332c <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80033fa:	2601      	movs	r6, #1
 80033fc:	e7a8      	b.n	8003350 <RCCEx_PLLSAI1_Config+0x74>
      else if(Divider == DIVIDER_Q_UPDATE)
 80033fe:	2d01      	cmp	r5, #1
 8003400:	d00f      	beq.n	8003422 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003402:	4811      	ldr	r0, [pc, #68]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 8003404:	6902      	ldr	r2, [r0, #16]
 8003406:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 800340a:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800340e:	68a1      	ldr	r1, [r4, #8]
 8003410:	6963      	ldr	r3, [r4, #20]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	065b      	lsls	r3, r3, #25
 8003418:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800341c:	431a      	orrs	r2, r3
 800341e:	6102      	str	r2, [r0, #16]
 8003420:	e7bd      	b.n	800339e <RCCEx_PLLSAI1_Config+0xc2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003422:	4809      	ldr	r0, [pc, #36]	@ (8003448 <RCCEx_PLLSAI1_Config+0x16c>)
 8003424:	6902      	ldr	r2, [r0, #16]
 8003426:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800342a:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800342e:	68a1      	ldr	r1, [r4, #8]
 8003430:	6923      	ldr	r3, [r4, #16]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	3b01      	subs	r3, #1
 8003436:	055b      	lsls	r3, r3, #21
 8003438:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800343c:	431a      	orrs	r2, r3
 800343e:	6102      	str	r2, [r0, #16]
 8003440:	e7ad      	b.n	800339e <RCCEx_PLLSAI1_Config+0xc2>
      status = HAL_ERROR;
 8003442:	2601      	movs	r6, #1
 8003444:	e772      	b.n	800332c <RCCEx_PLLSAI1_Config+0x50>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000

0800344c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	4604      	mov	r4, r0
 8003450:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003452:	4b50      	ldr	r3, [pc, #320]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f013 0f03 	tst.w	r3, #3
 800345a:	d017      	beq.n	800348c <RCCEx_PLLSAI2_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800345c:	4b4d      	ldr	r3, [pc, #308]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	6802      	ldr	r2, [r0, #0]
 8003466:	4293      	cmp	r3, r2
 8003468:	d001      	beq.n	800346e <RCCEx_PLLSAI2_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800346a:	2601      	movs	r6, #1
 800346c:	e016      	b.n	800349c <RCCEx_PLLSAI2_Config+0x50>
       ||
 800346e:	2a00      	cmp	r2, #0
 8003470:	f000 808d 	beq.w	800358e <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003474:	4b47      	ldr	r3, [pc, #284]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800347c:	3301      	adds	r3, #1
 800347e:	6842      	ldr	r2, [r0, #4]
       ||
 8003480:	4293      	cmp	r3, r2
 8003482:	d001      	beq.n	8003488 <RCCEx_PLLSAI2_Config+0x3c>
      status = HAL_ERROR;
 8003484:	2601      	movs	r6, #1
 8003486:	e009      	b.n	800349c <RCCEx_PLLSAI2_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8003488:	2600      	movs	r6, #0
 800348a:	e01b      	b.n	80034c4 <RCCEx_PLLSAI2_Config+0x78>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800348c:	6803      	ldr	r3, [r0, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d058      	beq.n	8003544 <RCCEx_PLLSAI2_Config+0xf8>
 8003492:	2b03      	cmp	r3, #3
 8003494:	d05d      	beq.n	8003552 <RCCEx_PLLSAI2_Config+0x106>
 8003496:	2b01      	cmp	r3, #1
 8003498:	d002      	beq.n	80034a0 <RCCEx_PLLSAI2_Config+0x54>
 800349a:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 800349c:	4630      	mov	r0, r6
 800349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	f012 0f02 	tst.w	r2, #2
 80034a8:	d05f      	beq.n	800356a <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034aa:	483a      	ldr	r0, [pc, #232]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 80034ac:	68c2      	ldr	r2, [r0, #12]
 80034ae:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80034b2:	6861      	ldr	r1, [r4, #4]
 80034b4:	3901      	subs	r1, #1
 80034b6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60c3      	str	r3, [r0, #12]
 80034be:	2600      	movs	r6, #0
  if(status == HAL_OK)
 80034c0:	2e00      	cmp	r6, #0
 80034c2:	d1eb      	bne.n	800349c <RCCEx_PLLSAI2_Config+0x50>
    __HAL_RCC_PLLSAI2_DISABLE();
 80034c4:	4a33      	ldr	r2, [pc, #204]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80034ce:	f7fe fd3d 	bl	8001f4c <HAL_GetTick>
 80034d2:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80034dc:	d005      	beq.n	80034ea <RCCEx_PLLSAI2_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034de:	f7fe fd35 	bl	8001f4c <HAL_GetTick>
 80034e2:	1bc3      	subs	r3, r0, r7
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d9f5      	bls.n	80034d4 <RCCEx_PLLSAI2_Config+0x88>
        status = HAL_TIMEOUT;
 80034e8:	2603      	movs	r6, #3
    if(status == HAL_OK)
 80034ea:	2e00      	cmp	r6, #0
 80034ec:	d1d6      	bne.n	800349c <RCCEx_PLLSAI2_Config+0x50>
      if(Divider == DIVIDER_P_UPDATE)
 80034ee:	2d00      	cmp	r5, #0
 80034f0:	d13d      	bne.n	800356e <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034f2:	4928      	ldr	r1, [pc, #160]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 80034f4:	694b      	ldr	r3, [r1, #20]
 80034f6:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80034fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034fe:	68a0      	ldr	r0, [r4, #8]
 8003500:	68e2      	ldr	r2, [r4, #12]
 8003502:	0912      	lsrs	r2, r2, #4
 8003504:	0452      	lsls	r2, r2, #17
 8003506:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800350a:	4313      	orrs	r3, r2
 800350c:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800350e:	4a21      	ldr	r2, [pc, #132]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 8003510:	6813      	ldr	r3, [r2, #0]
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003516:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003518:	f7fe fd18 	bl	8001f4c <HAL_GetTick>
 800351c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800351e:	4b1d      	ldr	r3, [pc, #116]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8003526:	d105      	bne.n	8003534 <RCCEx_PLLSAI2_Config+0xe8>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003528:	f7fe fd10 	bl	8001f4c <HAL_GetTick>
 800352c:	1b40      	subs	r0, r0, r5
 800352e:	2802      	cmp	r0, #2
 8003530:	d9f5      	bls.n	800351e <RCCEx_PLLSAI2_Config+0xd2>
          status = HAL_TIMEOUT;
 8003532:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8003534:	2e00      	cmp	r6, #0
 8003536:	d1b1      	bne.n	800349c <RCCEx_PLLSAI2_Config+0x50>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003538:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 800353a:	6953      	ldr	r3, [r2, #20]
 800353c:	6961      	ldr	r1, [r4, #20]
 800353e:	430b      	orrs	r3, r1
 8003540:	6153      	str	r3, [r2, #20]
 8003542:	e7ab      	b.n	800349c <RCCEx_PLLSAI2_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003544:	4a13      	ldr	r2, [pc, #76]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800354c:	d1ad      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0x5e>
 800354e:	2601      	movs	r6, #1
 8003550:	e7a4      	b.n	800349c <RCCEx_PLLSAI2_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003552:	4a10      	ldr	r2, [pc, #64]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800355a:	d1a6      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0x5e>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003564:	d1a1      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0x5e>
 8003566:	2601      	movs	r6, #1
 8003568:	e798      	b.n	800349c <RCCEx_PLLSAI2_Config+0x50>
        status = HAL_ERROR;
 800356a:	2601      	movs	r6, #1
 800356c:	e7a8      	b.n	80034c0 <RCCEx_PLLSAI2_Config+0x74>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800356e:	4809      	ldr	r0, [pc, #36]	@ (8003594 <RCCEx_PLLSAI2_Config+0x148>)
 8003570:	6942      	ldr	r2, [r0, #20]
 8003572:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003576:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800357a:	68a1      	ldr	r1, [r4, #8]
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	3b01      	subs	r3, #1
 8003582:	065b      	lsls	r3, r3, #25
 8003584:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003588:	431a      	orrs	r2, r3
 800358a:	6142      	str	r2, [r0, #20]
 800358c:	e7bf      	b.n	800350e <RCCEx_PLLSAI2_Config+0xc2>
      status = HAL_ERROR;
 800358e:	2601      	movs	r6, #1
 8003590:	e784      	b.n	800349c <RCCEx_PLLSAI2_Config+0x50>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035a0:	6803      	ldr	r3, [r0, #0]
 80035a2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80035a6:	d033      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 80035a8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80035aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035ae:	d01f      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80035b0:	d80c      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80035b2:	b323      	cbz	r3, 80035fe <HAL_RCCEx_PeriphCLKConfig+0x66>
 80035b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b8:	d105      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ba:	2100      	movs	r1, #0
 80035bc:	3020      	adds	r0, #32
 80035be:	f7ff ff45 	bl	800344c <RCCEx_PLLSAI2_Config>
 80035c2:	4606      	mov	r6, r0
      break;
 80035c4:	e020      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80035c6:	2701      	movs	r7, #1
 80035c8:	463e      	mov	r6, r7
 80035ca:	e023      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80035d0:	d10b      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035d2:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d4:	4a60      	ldr	r2, [pc, #384]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80035da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80035de:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80035e0:	430b      	orrs	r3, r1
 80035e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035e6:	2700      	movs	r7, #0
 80035e8:	e014      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80035ea:	2701      	movs	r7, #1
 80035ec:	463e      	mov	r6, r7
 80035ee:	e011      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035f0:	4a59      	ldr	r2, [pc, #356]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035f2:	68d3      	ldr	r3, [r2, #12]
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035fa:	2600      	movs	r6, #0
 80035fc:	e7ea      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035fe:	2100      	movs	r1, #0
 8003600:	3004      	adds	r0, #4
 8003602:	f7ff fe6b 	bl	80032dc <RCCEx_PLLSAI1_Config>
 8003606:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003608:	2e00      	cmp	r6, #0
 800360a:	d0e3      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800360c:	4637      	mov	r7, r6
 800360e:	e001      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003610:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003612:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800361a:	d030      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 800361c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800361e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003622:	d01f      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003624:	d80d      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8003626:	b31b      	cbz	r3, 8003670 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8003628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800362c:	d106      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800362e:	2100      	movs	r1, #0
 8003630:	f104 0020 	add.w	r0, r4, #32
 8003634:	f7ff ff0a 	bl	800344c <RCCEx_PLLSAI2_Config>
 8003638:	4606      	mov	r6, r0
      break;
 800363a:	e005      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 800363c:	2701      	movs	r7, #1
 800363e:	463e      	mov	r6, r7
 8003640:	e01d      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003642:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003646:	d10a      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8003648:	b9c6      	cbnz	r6, 800367c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800364a:	4a43      	ldr	r2, [pc, #268]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800364c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003650:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8003654:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003656:	430b      	orrs	r3, r1
 8003658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800365c:	e00f      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 800365e:	2701      	movs	r7, #1
 8003660:	463e      	mov	r6, r7
 8003662:	e00c      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003664:	4a3c      	ldr	r2, [pc, #240]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003666:	68d3      	ldr	r3, [r2, #12]
 8003668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366c:	60d3      	str	r3, [r2, #12]
      break;
 800366e:	e7eb      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003670:	2100      	movs	r1, #0
 8003672:	1d20      	adds	r0, r4, #4
 8003674:	f7ff fe32 	bl	80032dc <RCCEx_PLLSAI1_Config>
 8003678:	4606      	mov	r6, r0
      break;
 800367a:	e7e5      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800367c:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003684:	d071      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003686:	4b34      	ldr	r3, [pc, #208]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800368e:	d14e      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b31      	ldr	r3, [pc, #196]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003692:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003694:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003698:	659a      	str	r2, [r3, #88]	@ 0x58
 800369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036a4:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80036b2:	f7fe fc4b 	bl	8001f4c <HAL_GetTick>
 80036b6:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036b8:	4b28      	ldr	r3, [pc, #160]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80036c0:	d105      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fe fc43 	bl	8001f4c <HAL_GetTick>
 80036c6:	1b40      	subs	r0, r0, r5
 80036c8:	2802      	cmp	r0, #2
 80036ca:	d9f5      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 80036cc:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 80036ce:	2e00      	cmp	r6, #0
 80036d0:	d146      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036d2:	4b21      	ldr	r3, [pc, #132]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036d8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80036dc:	d016      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x174>
 80036de:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d012      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80036e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80036ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80036f0:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80036f4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80036f8:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036fc:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8003700:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003704:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8003708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800370c:	f013 0f01 	tst.w	r3, #1
 8003710:	d110      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 8003712:	2e00      	cmp	r6, #0
 8003714:	f040 8127 	bne.w	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003718:	4a0f      	ldr	r2, [pc, #60]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800371a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800371e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003722:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8003726:	430b      	orrs	r3, r1
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800372c:	e019      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 800372e:	f04f 0800 	mov.w	r8, #0
 8003732:	e7b9      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8003734:	f7fe fc0a 	bl	8001f4c <HAL_GetTick>
 8003738:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800373a:	4b07      	ldr	r3, [pc, #28]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003740:	f013 0f02 	tst.w	r3, #2
 8003744:	d1e5      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fe fc01 	bl	8001f4c <HAL_GetTick>
 800374a:	1b40      	subs	r0, r0, r5
 800374c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003750:	4298      	cmp	r0, r3
 8003752:	d9f2      	bls.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8003754:	2603      	movs	r6, #3
 8003756:	e7dc      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
      status = ret;
 8003760:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8003762:	f1b8 0f00 	cmp.w	r8, #0
 8003766:	f040 8100 	bne.w	800396a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	f013 0f01 	tst.w	r3, #1
 8003770:	d008      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003772:	4a9d      	ldr	r2, [pc, #628]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003774:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003778:	f023 0303 	bic.w	r3, r3, #3
 800377c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800377e:	430b      	orrs	r3, r1
 8003780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f013 0f02 	tst.w	r3, #2
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800378c:	4a96      	ldr	r2, [pc, #600]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800378e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003792:	f023 030c 	bic.w	r3, r3, #12
 8003796:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003798:	430b      	orrs	r3, r1
 800379a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	f013 0f04 	tst.w	r3, #4
 80037a4:	d008      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a6:	4a90      	ldr	r2, [pc, #576]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80037ac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80037b0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80037b2:	430b      	orrs	r3, r1
 80037b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	f013 0f08 	tst.w	r3, #8
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c0:	4a89      	ldr	r2, [pc, #548]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80037c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80037ca:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80037cc:	430b      	orrs	r3, r1
 80037ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	f013 0f10 	tst.w	r3, #16
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037da:	4a83      	ldr	r2, [pc, #524]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80037e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80037e6:	430b      	orrs	r3, r1
 80037e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	f013 0f20 	tst.w	r3, #32
 80037f2:	d008      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f4:	4a7c      	ldr	r2, [pc, #496]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80037fa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80037fe:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003800:	430b      	orrs	r3, r1
 8003802:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800380c:	d008      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800380e:	4a76      	ldr	r2, [pc, #472]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003810:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003814:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8003818:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800381a:	430b      	orrs	r3, r1
 800381c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003828:	4a6f      	ldr	r2, [pc, #444]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800382a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800382e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003832:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003834:	430b      	orrs	r3, r1
 8003836:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003840:	d008      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003842:	4a69      	ldr	r2, [pc, #420]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003844:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003848:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800384c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800384e:	430b      	orrs	r3, r1
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800385a:	d008      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800385c:	4a62      	ldr	r2, [pc, #392]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800385e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003862:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003866:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8003868:	430b      	orrs	r3, r1
 800386a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003876:	4a5c      	ldr	r2, [pc, #368]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003878:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800387c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003880:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003882:	430b      	orrs	r3, r1
 8003884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800388e:	d00f      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003890:	4a55      	ldr	r2, [pc, #340]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003892:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003896:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800389a:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800389c:	430b      	orrs	r3, r1
 800389e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038a2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80038a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038a8:	d065      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038ae:	d067      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80038b6:	d00f      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038b8:	4a4b      	ldr	r2, [pc, #300]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80038be:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80038c2:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80038c4:	430b      	orrs	r3, r1
 80038c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038ca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80038cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038d0:	d05e      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038d6:	d060      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80038de:	d00f      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038e0:	4a41      	ldr	r2, [pc, #260]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80038e6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80038ea:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80038ec:	430b      	orrs	r3, r1
 80038ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038f2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80038f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038f8:	d057      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038fe:	d059      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8003906:	d00f      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003908:	4a37      	ldr	r2, [pc, #220]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800390a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800390e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8003912:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003914:	430b      	orrs	r3, r1
 8003916:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800391a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800391c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003920:	d050      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003926:	d055      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003930:	4a2d      	ldr	r2, [pc, #180]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003932:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003936:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800393a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800393c:	430b      	orrs	r3, r1
 800393e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003948:	d009      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800394a:	4a27      	ldr	r2, [pc, #156]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800394c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003954:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003958:	430b      	orrs	r3, r1
 800395a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800395e:	4638      	mov	r0, r7
 8003960:	b002      	add	sp, #8
 8003962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8003966:	4637      	mov	r7, r6
 8003968:	e6fb      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4a1f      	ldr	r2, [pc, #124]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800396c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800396e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003972:	6593      	str	r3, [r2, #88]	@ 0x58
 8003974:	e6f9      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003976:	68d3      	ldr	r3, [r2, #12]
 8003978:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397c:	60d3      	str	r3, [r2, #12]
 800397e:	e797      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003980:	2101      	movs	r1, #1
 8003982:	1d20      	adds	r0, r4, #4
 8003984:	f7ff fcaa 	bl	80032dc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003988:	2800      	cmp	r0, #0
 800398a:	d091      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 800398c:	4607      	mov	r7, r0
 800398e:	e78f      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003990:	68d3      	ldr	r3, [r2, #12]
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003996:	60d3      	str	r3, [r2, #12]
 8003998:	e79e      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399a:	2101      	movs	r1, #1
 800399c:	1d20      	adds	r0, r4, #4
 800399e:	f7ff fc9d 	bl	80032dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d098      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 80039a6:	4607      	mov	r7, r0
 80039a8:	e796      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039aa:	68d3      	ldr	r3, [r2, #12]
 80039ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039b0:	60d3      	str	r3, [r2, #12]
 80039b2:	e7a5      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039b4:	2101      	movs	r1, #1
 80039b6:	1d20      	adds	r0, r4, #4
 80039b8:	f7ff fc90 	bl	80032dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80039bc:	2800      	cmp	r0, #0
 80039be:	d09f      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 80039c0:	4607      	mov	r7, r0
 80039c2:	e79d      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039c4:	2102      	movs	r1, #2
 80039c6:	1d20      	adds	r0, r4, #4
 80039c8:	f7ff fc88 	bl	80032dc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d0ab      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 80039d0:	4607      	mov	r7, r0
 80039d2:	e7a9      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039d4:	2102      	movs	r1, #2
 80039d6:	f104 0020 	add.w	r0, r4, #32
 80039da:	f7ff fd37 	bl	800344c <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 80039de:	2800      	cmp	r0, #0
 80039e0:	d0a2      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 80039e2:	4607      	mov	r7, r0
 80039e4:	e7a0      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x390>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000

080039ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	4605      	mov	r5, r0
 80039f4:	4688      	mov	r8, r1
 80039f6:	4617      	mov	r7, r2
 80039f8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039fa:	f7fe faa7 	bl	8001f4c <HAL_GetTick>
 80039fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a00:	1a1b      	subs	r3, r3, r0
 8003a02:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003a06:	f7fe faa1 	bl	8001f4c <HAL_GetTick>
 8003a0a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a0c:	4b28      	ldr	r3, [pc, #160]	@ (8003ab0 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003a14:	fb09 f303 	mul.w	r3, r9, r3
 8003a18:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	689c      	ldr	r4, [r3, #8]
 8003a1e:	ea38 0404 	bics.w	r4, r8, r4
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	42bb      	cmp	r3, r7
 8003a2a:	d03d      	beq.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8003a30:	d0f3      	beq.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a32:	f7fe fa8b 	bl	8001f4c <HAL_GetTick>
 8003a36:	eba0 000a 	sub.w	r0, r0, sl
 8003a3a:	4548      	cmp	r0, r9
 8003a3c:	d207      	bcs.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a3e:	9a01      	ldr	r2, [sp, #4]
 8003a40:	b102      	cbz	r2, 8003a44 <SPI_WaitFlagStateUntilTimeout+0x58>
 8003a42:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	4691      	mov	r9, r2
 8003a4c:	e7e5      	b.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a4e:	682a      	ldr	r2, [r5, #0]
 8003a50:	6853      	ldr	r3, [r2, #4]
 8003a52:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003a56:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a58:	686b      	ldr	r3, [r5, #4]
 8003a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a5e:	d00b      	beq.n	8003a78 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a60:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a66:	d014      	beq.n	8003a92 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
 8003a76:	e018      	b.n	8003aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a78:	68ab      	ldr	r3, [r5, #8]
 8003a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a7e:	d002      	beq.n	8003a86 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a84:	d1ec      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8003a86:	682a      	ldr	r2, [r5, #0]
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e7e6      	b.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8003a92:	682a      	ldr	r2, [r5, #0]
 8003a94:	6813      	ldr	r3, [r2, #0]
 8003a96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	682a      	ldr	r2, [r5, #0]
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e7df      	b.n	8003a68 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8003aa8:	2000      	movs	r0, #0
}
 8003aaa:	b002      	add	sp, #8
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab0:	20000000 	.word	0x20000000

08003ab4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	4607      	mov	r7, r0
 8003abc:	460d      	mov	r5, r1
 8003abe:	4616      	mov	r6, r2
 8003ac0:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ac2:	f7fe fa43 	bl	8001f4c <HAL_GetTick>
 8003ac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ac8:	1a1b      	subs	r3, r3, r0
 8003aca:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8003ace:	f7fe fa3d 	bl	8001f4c <HAL_GetTick>
 8003ad2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b88 <SPI_WaitFifoStateUntilTimeout+0xd4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003adc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003ae0:	0d1b      	lsrs	r3, r3, #20
 8003ae2:	fb09 f303 	mul.w	r3, r9, r3
 8003ae6:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ae8:	e002      	b.n	8003af0 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8003aea:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003aee:	d10c      	bne.n	8003b0a <SPI_WaitFifoStateUntilTimeout+0x56>
  while ((hspi->Instance->SR & Fifo) != State)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689c      	ldr	r4, [r3, #8]
 8003af4:	ea04 0c05 	and.w	ip, r4, r5
 8003af8:	45b4      	cmp	ip, r6
 8003afa:	d041      	beq.n	8003b80 <SPI_WaitFifoStateUntilTimeout+0xcc>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003afc:	f5b5 6fc0 	cmp.w	r5, #1536	@ 0x600
 8003b00:	d1f3      	bne.n	8003aea <SPI_WaitFifoStateUntilTimeout+0x36>
 8003b02:	2e00      	cmp	r6, #0
 8003b04:	d1f1      	bne.n	8003aea <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b06:	7b1b      	ldrb	r3, [r3, #12]
 8003b08:	e7ef      	b.n	8003aea <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b0a:	f7fe fa1f 	bl	8001f4c <HAL_GetTick>
 8003b0e:	eba0 000a 	sub.w	r0, r0, sl
 8003b12:	4548      	cmp	r0, r9
 8003b14:	d207      	bcs.n	8003b26 <SPI_WaitFifoStateUntilTimeout+0x72>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b16:	9a01      	ldr	r2, [sp, #4]
 8003b18:	b102      	cbz	r2, 8003b1c <SPI_WaitFifoStateUntilTimeout+0x68>
 8003b1a:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	4691      	mov	r9, r2
 8003b24:	e7e4      	b.n	8003af0 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	6853      	ldr	r3, [r2, #4]
 8003b2a:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003b2e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b36:	d00b      	beq.n	8003b50 <SPI_WaitFifoStateUntilTimeout+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3e:	d014      	beq.n	8003b6a <SPI_WaitFifoStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003b4c:	2003      	movs	r0, #3
 8003b4e:	e018      	b.n	8003b82 <SPI_WaitFifoStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b56:	d002      	beq.n	8003b5e <SPI_WaitFifoStateUntilTimeout+0xaa>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5c:	d1ec      	bne.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0x84>
          __HAL_SPI_DISABLE(hspi);
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	6813      	ldr	r3, [r2, #0]
 8003b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e7e6      	b.n	8003b38 <SPI_WaitFifoStateUntilTimeout+0x84>
          SPI_RESET_CRC(hspi);
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	6813      	ldr	r3, [r2, #0]
 8003b6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e7df      	b.n	8003b40 <SPI_WaitFifoStateUntilTimeout+0x8c>
    }
  }

  return HAL_OK;
 8003b80:	2000      	movs	r0, #0
}
 8003b82:	b002      	add	sp, #8
 8003b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b88:	20000000 	.word	0x20000000

08003b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	4604      	mov	r4, r0
 8003b92:	460d      	mov	r5, r1
 8003b94:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b96:	9200      	str	r2, [sp, #0]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ba0:	f7ff ff88 	bl	8003ab4 <SPI_WaitFifoStateUntilTimeout>
 8003ba4:	b9b0      	cbnz	r0, 8003bd4 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba6:	9600      	str	r6, [sp, #0]
 8003ba8:	462b      	mov	r3, r5
 8003baa:	2200      	movs	r2, #0
 8003bac:	2180      	movs	r1, #128	@ 0x80
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f7ff ff1c 	bl	80039ec <SPI_WaitFlagStateUntilTimeout>
 8003bb4:	b9a8      	cbnz	r0, 8003be2 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bb6:	9600      	str	r6, [sp, #0]
 8003bb8:	462b      	mov	r3, r5
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7ff ff77 	bl	8003ab4 <SPI_WaitFifoStateUntilTimeout>
 8003bc6:	b150      	cbz	r0, 8003bde <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bc8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003bca:	f043 0320 	orr.w	r3, r3, #32
 8003bce:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bd0:	2003      	movs	r0, #3
 8003bd2:	e004      	b.n	8003bde <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003bd6:	f043 0320 	orr.w	r3, r3, #32
 8003bda:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bdc:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003bde:	b002      	add	sp, #8
 8003be0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8003be4:	f043 0320 	orr.w	r3, r3, #32
 8003be8:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bea:	2003      	movs	r0, #3
 8003bec:	e7f7      	b.n	8003bde <SPI_EndRxTxTransaction+0x52>

08003bee <HAL_SPI_Init>:
  if (hspi == NULL)
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d06a      	beq.n	8003cc8 <HAL_SPI_Init+0xda>
{
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bf6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003bf8:	b933      	cbnz	r3, 8003c08 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bfa:	6843      	ldr	r3, [r0, #4]
 8003bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c00:	d005      	beq.n	8003c0e <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61c3      	str	r3, [r0, #28]
 8003c06:	e002      	b.n	8003c0e <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c0c:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c12:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04d      	beq.n	8003cb6 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c28:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c30:	d947      	bls.n	8003cc2 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c32:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c34:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c38:	d004      	beq.n	8003c44 <HAL_SPI_Init+0x56>
 8003c3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c3e:	d001      	beq.n	8003c44 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c44:	6863      	ldr	r3, [r4, #4]
 8003c46:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8003c4a:	68a1      	ldr	r1, [r4, #8]
 8003c4c:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6921      	ldr	r1, [r4, #16]
 8003c54:	f001 0102 	and.w	r1, r1, #2
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6961      	ldr	r1, [r4, #20]
 8003c5c:	f001 0101 	and.w	r1, r1, #1
 8003c60:	430b      	orrs	r3, r1
 8003c62:	69a1      	ldr	r1, [r4, #24]
 8003c64:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	69e1      	ldr	r1, [r4, #28]
 8003c6c:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6a21      	ldr	r1, [r4, #32]
 8003c74:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003c7c:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	430b      	orrs	r3, r1
 8003c84:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c86:	8b63      	ldrh	r3, [r4, #26]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003c8e:	f001 0110 	and.w	r1, r1, #16
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c96:	f001 0108 	and.w	r1, r1, #8
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	68e1      	ldr	r1, [r4, #12]
 8003c9e:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6821      	ldr	r1, [r4, #0]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003caa:	2000      	movs	r0, #0
 8003cac:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8003cb4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003cb6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7fd fd1c 	bl	80016f8 <HAL_SPI_MspInit>
 8003cc0:	e7ab      	b.n	8003c1a <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cc6:	e7b5      	b.n	8003c34 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003cc8:	2001      	movs	r0, #1
}
 8003cca:	4770      	bx	lr

08003ccc <HAL_SPI_TransmitReceive>:
{
 8003ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd0:	461f      	mov	r7, r3
 8003cd2:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003cd4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f000 8164 	beq.w	8003fa6 <HAL_SPI_TransmitReceive+0x2da>
 8003cde:	4604      	mov	r4, r0
 8003ce0:	4688      	mov	r8, r1
 8003ce2:	4691      	mov	r9, r2
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8003cea:	f7fe f92f 	bl	8001f4c <HAL_GetTick>
 8003cee:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003cf0:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8003cf4:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003cf6:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d00a      	beq.n	8003d12 <HAL_SPI_TransmitReceive+0x46>
 8003cfc:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003d00:	f040 8138 	bne.w	8003f74 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d04:	68a2      	ldr	r2, [r4, #8]
 8003d06:	2a00      	cmp	r2, #0
 8003d08:	f040 813d 	bne.w	8003f86 <HAL_SPI_TransmitReceive+0x2ba>
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	f040 813c 	bne.w	8003f8a <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d12:	f1b8 0f00 	cmp.w	r8, #0
 8003d16:	f000 813a 	beq.w	8003f8e <HAL_SPI_TransmitReceive+0x2c2>
 8003d1a:	f1b9 0f00 	cmp.w	r9, #0
 8003d1e:	f000 8138 	beq.w	8003f92 <HAL_SPI_TransmitReceive+0x2c6>
 8003d22:	2f00      	cmp	r7, #0
 8003d24:	f000 8137 	beq.w	8003f96 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d28:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d002      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d32:	2305      	movs	r3, #5
 8003d34:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d3c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003d40:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003d44:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d48:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003d4c:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003d4e:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 8003d50:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d52:	6523      	str	r3, [r4, #80]	@ 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d54:	68e3      	ldr	r3, [r4, #12]
 8003d56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d5a:	d801      	bhi.n	8003d60 <HAL_SPI_TransmitReceive+0x94>
 8003d5c:	2f01      	cmp	r7, #1
 8003d5e:	d923      	bls.n	8003da8 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d60:	6822      	ldr	r2, [r4, #0]
 8003d62:	6853      	ldr	r3, [r2, #4]
 8003d64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d68:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003d72:	d103      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d7a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d7c:	68e3      	ldr	r3, [r4, #12]
 8003d7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d82:	d958      	bls.n	8003e36 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d84:	6863      	ldr	r3, [r4, #4]
 8003d86:	b10b      	cbz	r3, 8003d8c <HAL_SPI_TransmitReceive+0xc0>
 8003d88:	2f01      	cmp	r7, #1
 8003d8a:	d10b      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	8812      	ldrh	r2, [r2, #0]
 8003d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003d96:	3302      	adds	r3, #2
 8003d98:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d9a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003da4:	2701      	movs	r7, #1
 8003da6:	e031      	b.n	8003e0c <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	6853      	ldr	r3, [r2, #4]
 8003dac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003db0:	6053      	str	r3, [r2, #4]
 8003db2:	e7da      	b.n	8003d6a <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003db4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003db6:	8812      	ldrh	r2, [r2, #0]
 8003db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dba:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dc0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8003dca:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	f012 0f01 	tst.w	r2, #1
 8003dd4:	d011      	beq.n	8003dfa <HAL_SPI_TransmitReceive+0x12e>
 8003dd6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8003dda:	b292      	uxth	r2, r2
 8003ddc:	b16a      	cbz	r2, 8003dfa <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003de4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003de6:	3302      	adds	r3, #2
 8003de8:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8003dea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8003df8:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dfa:	f7fe f8a7 	bl	8001f4c <HAL_GetTick>
 8003dfe:	1b83      	subs	r3, r0, r6
 8003e00:	42ab      	cmp	r3, r5
 8003e02:	d303      	bcc.n	8003e0c <HAL_SPI_TransmitReceive+0x140>
 8003e04:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8003e08:	f040 80c7 	bne.w	8003f9a <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e0c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	b92b      	cbnz	r3, 8003e1e <HAL_SPI_TransmitReceive+0x152>
 8003e12:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a1 	beq.w	8003f60 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	f012 0f02 	tst.w	r2, #2
 8003e26:	d0d1      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x100>
 8003e28:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003e2a:	b292      	uxth	r2, r2
 8003e2c:	2a00      	cmp	r2, #0
 8003e2e:	d0cd      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x100>
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	d0cb      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x100>
 8003e34:	e7be      	b.n	8003db4 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	b10b      	cbz	r3, 8003e3e <HAL_SPI_TransmitReceive+0x172>
 8003e3a:	2f01      	cmp	r7, #1
 8003e3c:	d10f      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8003e3e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d90d      	bls.n	8003e62 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e46:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	8812      	ldrh	r2, [r2, #0]
 8003e4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e50:	3302      	adds	r3, #2
 8003e52:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e54:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b02      	subs	r3, #2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8003e5e:	2701      	movs	r7, #1
 8003e60:	e049      	b.n	8003ef6 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e62:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e64:	6823      	ldr	r3, [r4, #0]
 8003e66:	7812      	ldrb	r2, [r2, #0]
 8003e68:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003e6a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e70:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003e7a:	e7f0      	b.n	8003e5e <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003e7c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003e7e:	b292      	uxth	r2, r2
 8003e80:	2a01      	cmp	r2, #1
 8003e82:	d90c      	bls.n	8003e9e <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e84:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003e86:	8812      	ldrh	r2, [r2, #0]
 8003e88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e90:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b02      	subs	r3, #2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8003e9a:	2700      	movs	r7, #0
 8003e9c:	e03d      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e9e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003ea0:	7812      	ldrb	r2, [r2, #0]
 8003ea2:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003ea4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8003eaa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8003eb4:	2700      	movs	r7, #0
 8003eb6:	e030      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eb8:	6822      	ldr	r2, [r4, #0]
 8003eba:	6853      	ldr	r3, [r2, #4]
 8003ebc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ec0:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003ec2:	2701      	movs	r7, #1
 8003ec4:	e00d      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ec6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003ec8:	7b1b      	ldrb	r3, [r3, #12]
 8003eca:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003ecc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ece:	3301      	adds	r3, #1
 8003ed0:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8003ed2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8003ee0:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ee2:	f7fe f833 	bl	8001f4c <HAL_GetTick>
 8003ee6:	1b80      	subs	r0, r0, r6
 8003ee8:	42a8      	cmp	r0, r5
 8003eea:	d302      	bcc.n	8003ef2 <HAL_SPI_TransmitReceive+0x226>
 8003eec:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8003ef0:	d155      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x2d2>
 8003ef2:	2d00      	cmp	r5, #0
 8003ef4:	d055      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b923      	cbnz	r3, 8003f06 <HAL_SPI_TransmitReceive+0x23a>
 8003efc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02c      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	f012 0f02 	tst.w	r2, #2
 8003f0e:	d004      	beq.n	8003f1a <HAL_SPI_TransmitReceive+0x24e>
 8003f10:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8003f12:	b292      	uxth	r2, r2
 8003f14:	b10a      	cbz	r2, 8003f1a <HAL_SPI_TransmitReceive+0x24e>
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	d1b0      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	f012 0f01 	tst.w	r2, #1
 8003f22:	d0de      	beq.n	8003ee2 <HAL_SPI_TransmitReceive+0x216>
 8003f24:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	d0d9      	beq.n	8003ee2 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8003f2e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8003f32:	b292      	uxth	r2, r2
 8003f34:	2a01      	cmp	r2, #1
 8003f36:	d9c6      	bls.n	8003ec6 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f3c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f40:	3302      	adds	r3, #2
 8003f42:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003f44:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b02      	subs	r3, #2
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003f52:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d9ad      	bls.n	8003eb8 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003f5c:	2701      	movs	r7, #1
 8003f5e:	e7c0      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f60:	4632      	mov	r2, r6
 8003f62:	4629      	mov	r1, r5
 8003f64:	4620      	mov	r0, r4
 8003f66:	f7ff fe11 	bl	8003b8c <SPI_EndRxTxTransaction>
 8003f6a:	b120      	cbz	r0, 8003f76 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003f70:	2001      	movs	r0, #1
 8003f72:	e000      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003f74:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8003f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003f86:	2002      	movs	r0, #2
 8003f88:	e7f5      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
 8003f8a:	2002      	movs	r0, #2
 8003f8c:	e7f3      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8003f8e:	2001      	movs	r0, #1
 8003f90:	e7f1      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
 8003f92:	2001      	movs	r0, #1
 8003f94:	e7ef      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
 8003f96:	2001      	movs	r0, #1
 8003f98:	e7ed      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003f9a:	2003      	movs	r0, #3
 8003f9c:	e7eb      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003f9e:	2003      	movs	r0, #3
 8003fa0:	e7e9      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
 8003fa2:	2003      	movs	r0, #3
 8003fa4:	e7e7      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8003fa6:	2002      	movs	r0, #2
 8003fa8:	e7eb      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x2b6>
	...

08003fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fb0:	f7fd fc46 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fb6:	e003      	b.n	8003fc0 <LoopCopyDataInit>

08003fb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fbe:	3104      	adds	r1, #4

08003fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fc0:	480a      	ldr	r0, [pc, #40]	@ (8003fec <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fc8:	d3f6      	bcc.n	8003fb8 <CopyDataInit>
	ldr	r2, =_sbss
 8003fca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003fcc:	e002      	b.n	8003fd4 <LoopFillZerobss>

08003fce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003fce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003fd0:	f842 3b04 	str.w	r3, [r2], #4

08003fd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003fd4:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <LoopForever+0x16>)
	cmp	r2, r3
 8003fd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003fd8:	d3f9      	bcc.n	8003fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fda:	f000 fd6b 	bl	8004ab4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fde:	f7fc fee3 	bl	8000da8 <main>

08003fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8003fe2:	e7fe      	b.n	8003fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fe4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003fe8:	08007260 	.word	0x08007260
	ldr	r0, =_sdata
 8003fec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003ff0:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8003ff4:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8003ff8:	200011ec 	.word	0x200011ec

08003ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ffc:	e7fe      	b.n	8003ffc <ADC1_2_IRQHandler>

08003ffe <__cvt>:
 8003ffe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004002:	ec57 6b10 	vmov	r6, r7, d0
 8004006:	2f00      	cmp	r7, #0
 8004008:	460c      	mov	r4, r1
 800400a:	4619      	mov	r1, r3
 800400c:	463b      	mov	r3, r7
 800400e:	bfbb      	ittet	lt
 8004010:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004014:	461f      	movlt	r7, r3
 8004016:	2300      	movge	r3, #0
 8004018:	232d      	movlt	r3, #45	@ 0x2d
 800401a:	700b      	strb	r3, [r1, #0]
 800401c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800401e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004022:	4691      	mov	r9, r2
 8004024:	f023 0820 	bic.w	r8, r3, #32
 8004028:	bfbc      	itt	lt
 800402a:	4632      	movlt	r2, r6
 800402c:	4616      	movlt	r6, r2
 800402e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004032:	d005      	beq.n	8004040 <__cvt+0x42>
 8004034:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004038:	d100      	bne.n	800403c <__cvt+0x3e>
 800403a:	3401      	adds	r4, #1
 800403c:	2102      	movs	r1, #2
 800403e:	e000      	b.n	8004042 <__cvt+0x44>
 8004040:	2103      	movs	r1, #3
 8004042:	ab03      	add	r3, sp, #12
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	ab02      	add	r3, sp, #8
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	ec47 6b10 	vmov	d0, r6, r7
 800404e:	4653      	mov	r3, sl
 8004050:	4622      	mov	r2, r4
 8004052:	f000 fded 	bl	8004c30 <_dtoa_r>
 8004056:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800405a:	4605      	mov	r5, r0
 800405c:	d119      	bne.n	8004092 <__cvt+0x94>
 800405e:	f019 0f01 	tst.w	r9, #1
 8004062:	d00e      	beq.n	8004082 <__cvt+0x84>
 8004064:	eb00 0904 	add.w	r9, r0, r4
 8004068:	2200      	movs	r2, #0
 800406a:	2300      	movs	r3, #0
 800406c:	4630      	mov	r0, r6
 800406e:	4639      	mov	r1, r7
 8004070:	f7fc fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004074:	b108      	cbz	r0, 800407a <__cvt+0x7c>
 8004076:	f8cd 900c 	str.w	r9, [sp, #12]
 800407a:	2230      	movs	r2, #48	@ 0x30
 800407c:	9b03      	ldr	r3, [sp, #12]
 800407e:	454b      	cmp	r3, r9
 8004080:	d31e      	bcc.n	80040c0 <__cvt+0xc2>
 8004082:	9b03      	ldr	r3, [sp, #12]
 8004084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004086:	1b5b      	subs	r3, r3, r5
 8004088:	4628      	mov	r0, r5
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	b004      	add	sp, #16
 800408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004092:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004096:	eb00 0904 	add.w	r9, r0, r4
 800409a:	d1e5      	bne.n	8004068 <__cvt+0x6a>
 800409c:	7803      	ldrb	r3, [r0, #0]
 800409e:	2b30      	cmp	r3, #48	@ 0x30
 80040a0:	d10a      	bne.n	80040b8 <__cvt+0xba>
 80040a2:	2200      	movs	r2, #0
 80040a4:	2300      	movs	r3, #0
 80040a6:	4630      	mov	r0, r6
 80040a8:	4639      	mov	r1, r7
 80040aa:	f7fc fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80040ae:	b918      	cbnz	r0, 80040b8 <__cvt+0xba>
 80040b0:	f1c4 0401 	rsb	r4, r4, #1
 80040b4:	f8ca 4000 	str.w	r4, [sl]
 80040b8:	f8da 3000 	ldr.w	r3, [sl]
 80040bc:	4499      	add	r9, r3
 80040be:	e7d3      	b.n	8004068 <__cvt+0x6a>
 80040c0:	1c59      	adds	r1, r3, #1
 80040c2:	9103      	str	r1, [sp, #12]
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	e7d9      	b.n	800407c <__cvt+0x7e>

080040c8 <__exponent>:
 80040c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ca:	2900      	cmp	r1, #0
 80040cc:	bfba      	itte	lt
 80040ce:	4249      	neglt	r1, r1
 80040d0:	232d      	movlt	r3, #45	@ 0x2d
 80040d2:	232b      	movge	r3, #43	@ 0x2b
 80040d4:	2909      	cmp	r1, #9
 80040d6:	7002      	strb	r2, [r0, #0]
 80040d8:	7043      	strb	r3, [r0, #1]
 80040da:	dd29      	ble.n	8004130 <__exponent+0x68>
 80040dc:	f10d 0307 	add.w	r3, sp, #7
 80040e0:	461d      	mov	r5, r3
 80040e2:	270a      	movs	r7, #10
 80040e4:	461a      	mov	r2, r3
 80040e6:	fbb1 f6f7 	udiv	r6, r1, r7
 80040ea:	fb07 1416 	mls	r4, r7, r6, r1
 80040ee:	3430      	adds	r4, #48	@ 0x30
 80040f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040f4:	460c      	mov	r4, r1
 80040f6:	2c63      	cmp	r4, #99	@ 0x63
 80040f8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80040fc:	4631      	mov	r1, r6
 80040fe:	dcf1      	bgt.n	80040e4 <__exponent+0x1c>
 8004100:	3130      	adds	r1, #48	@ 0x30
 8004102:	1e94      	subs	r4, r2, #2
 8004104:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004108:	1c41      	adds	r1, r0, #1
 800410a:	4623      	mov	r3, r4
 800410c:	42ab      	cmp	r3, r5
 800410e:	d30a      	bcc.n	8004126 <__exponent+0x5e>
 8004110:	f10d 0309 	add.w	r3, sp, #9
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	42ac      	cmp	r4, r5
 8004118:	bf88      	it	hi
 800411a:	2300      	movhi	r3, #0
 800411c:	3302      	adds	r3, #2
 800411e:	4403      	add	r3, r0
 8004120:	1a18      	subs	r0, r3, r0
 8004122:	b003      	add	sp, #12
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004126:	f813 6b01 	ldrb.w	r6, [r3], #1
 800412a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800412e:	e7ed      	b.n	800410c <__exponent+0x44>
 8004130:	2330      	movs	r3, #48	@ 0x30
 8004132:	3130      	adds	r1, #48	@ 0x30
 8004134:	7083      	strb	r3, [r0, #2]
 8004136:	70c1      	strb	r1, [r0, #3]
 8004138:	1d03      	adds	r3, r0, #4
 800413a:	e7f1      	b.n	8004120 <__exponent+0x58>

0800413c <_printf_float>:
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	b08d      	sub	sp, #52	@ 0x34
 8004142:	460c      	mov	r4, r1
 8004144:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004148:	4616      	mov	r6, r2
 800414a:	461f      	mov	r7, r3
 800414c:	4605      	mov	r5, r0
 800414e:	f000 fca7 	bl	8004aa0 <_localeconv_r>
 8004152:	6803      	ldr	r3, [r0, #0]
 8004154:	9304      	str	r3, [sp, #16]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc f88a 	bl	8000270 <strlen>
 800415c:	2300      	movs	r3, #0
 800415e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004160:	f8d8 3000 	ldr.w	r3, [r8]
 8004164:	9005      	str	r0, [sp, #20]
 8004166:	3307      	adds	r3, #7
 8004168:	f023 0307 	bic.w	r3, r3, #7
 800416c:	f103 0208 	add.w	r2, r3, #8
 8004170:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004174:	f8d4 b000 	ldr.w	fp, [r4]
 8004178:	f8c8 2000 	str.w	r2, [r8]
 800417c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004180:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004184:	9307      	str	r3, [sp, #28]
 8004186:	f8cd 8018 	str.w	r8, [sp, #24]
 800418a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800418e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004192:	4b9c      	ldr	r3, [pc, #624]	@ (8004404 <_printf_float+0x2c8>)
 8004194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004198:	f7fc fcc8 	bl	8000b2c <__aeabi_dcmpun>
 800419c:	bb70      	cbnz	r0, 80041fc <_printf_float+0xc0>
 800419e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a2:	4b98      	ldr	r3, [pc, #608]	@ (8004404 <_printf_float+0x2c8>)
 80041a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041a8:	f7fc fca2 	bl	8000af0 <__aeabi_dcmple>
 80041ac:	bb30      	cbnz	r0, 80041fc <_printf_float+0xc0>
 80041ae:	2200      	movs	r2, #0
 80041b0:	2300      	movs	r3, #0
 80041b2:	4640      	mov	r0, r8
 80041b4:	4649      	mov	r1, r9
 80041b6:	f7fc fc91 	bl	8000adc <__aeabi_dcmplt>
 80041ba:	b110      	cbz	r0, 80041c2 <_printf_float+0x86>
 80041bc:	232d      	movs	r3, #45	@ 0x2d
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041c2:	4a91      	ldr	r2, [pc, #580]	@ (8004408 <_printf_float+0x2cc>)
 80041c4:	4b91      	ldr	r3, [pc, #580]	@ (800440c <_printf_float+0x2d0>)
 80041c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041ca:	bf94      	ite	ls
 80041cc:	4690      	movls	r8, r2
 80041ce:	4698      	movhi	r8, r3
 80041d0:	2303      	movs	r3, #3
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	f02b 0304 	bic.w	r3, fp, #4
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	f04f 0900 	mov.w	r9, #0
 80041de:	9700      	str	r7, [sp, #0]
 80041e0:	4633      	mov	r3, r6
 80041e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80041e4:	4621      	mov	r1, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	f000 f9d2 	bl	8004590 <_printf_common>
 80041ec:	3001      	adds	r0, #1
 80041ee:	f040 808d 	bne.w	800430c <_printf_float+0x1d0>
 80041f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041f6:	b00d      	add	sp, #52	@ 0x34
 80041f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fc:	4642      	mov	r2, r8
 80041fe:	464b      	mov	r3, r9
 8004200:	4640      	mov	r0, r8
 8004202:	4649      	mov	r1, r9
 8004204:	f7fc fc92 	bl	8000b2c <__aeabi_dcmpun>
 8004208:	b140      	cbz	r0, 800421c <_printf_float+0xe0>
 800420a:	464b      	mov	r3, r9
 800420c:	2b00      	cmp	r3, #0
 800420e:	bfbc      	itt	lt
 8004210:	232d      	movlt	r3, #45	@ 0x2d
 8004212:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004216:	4a7e      	ldr	r2, [pc, #504]	@ (8004410 <_printf_float+0x2d4>)
 8004218:	4b7e      	ldr	r3, [pc, #504]	@ (8004414 <_printf_float+0x2d8>)
 800421a:	e7d4      	b.n	80041c6 <_printf_float+0x8a>
 800421c:	6863      	ldr	r3, [r4, #4]
 800421e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004222:	9206      	str	r2, [sp, #24]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	d13b      	bne.n	80042a0 <_printf_float+0x164>
 8004228:	2306      	movs	r3, #6
 800422a:	6063      	str	r3, [r4, #4]
 800422c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004230:	2300      	movs	r3, #0
 8004232:	6022      	str	r2, [r4, #0]
 8004234:	9303      	str	r3, [sp, #12]
 8004236:	ab0a      	add	r3, sp, #40	@ 0x28
 8004238:	e9cd a301 	strd	sl, r3, [sp, #4]
 800423c:	ab09      	add	r3, sp, #36	@ 0x24
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	6861      	ldr	r1, [r4, #4]
 8004242:	ec49 8b10 	vmov	d0, r8, r9
 8004246:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800424a:	4628      	mov	r0, r5
 800424c:	f7ff fed7 	bl	8003ffe <__cvt>
 8004250:	9b06      	ldr	r3, [sp, #24]
 8004252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004254:	2b47      	cmp	r3, #71	@ 0x47
 8004256:	4680      	mov	r8, r0
 8004258:	d129      	bne.n	80042ae <_printf_float+0x172>
 800425a:	1cc8      	adds	r0, r1, #3
 800425c:	db02      	blt.n	8004264 <_printf_float+0x128>
 800425e:	6863      	ldr	r3, [r4, #4]
 8004260:	4299      	cmp	r1, r3
 8004262:	dd41      	ble.n	80042e8 <_printf_float+0x1ac>
 8004264:	f1aa 0a02 	sub.w	sl, sl, #2
 8004268:	fa5f fa8a 	uxtb.w	sl, sl
 800426c:	3901      	subs	r1, #1
 800426e:	4652      	mov	r2, sl
 8004270:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004274:	9109      	str	r1, [sp, #36]	@ 0x24
 8004276:	f7ff ff27 	bl	80040c8 <__exponent>
 800427a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800427c:	1813      	adds	r3, r2, r0
 800427e:	2a01      	cmp	r2, #1
 8004280:	4681      	mov	r9, r0
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	dc02      	bgt.n	800428c <_printf_float+0x150>
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	07d2      	lsls	r2, r2, #31
 800428a:	d501      	bpl.n	8004290 <_printf_float+0x154>
 800428c:	3301      	adds	r3, #1
 800428e:	6123      	str	r3, [r4, #16]
 8004290:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0a2      	beq.n	80041de <_printf_float+0xa2>
 8004298:	232d      	movs	r3, #45	@ 0x2d
 800429a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800429e:	e79e      	b.n	80041de <_printf_float+0xa2>
 80042a0:	9a06      	ldr	r2, [sp, #24]
 80042a2:	2a47      	cmp	r2, #71	@ 0x47
 80042a4:	d1c2      	bne.n	800422c <_printf_float+0xf0>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1c0      	bne.n	800422c <_printf_float+0xf0>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e7bd      	b.n	800422a <_printf_float+0xee>
 80042ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042b2:	d9db      	bls.n	800426c <_printf_float+0x130>
 80042b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042b8:	d118      	bne.n	80042ec <_printf_float+0x1b0>
 80042ba:	2900      	cmp	r1, #0
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	dd0b      	ble.n	80042d8 <_printf_float+0x19c>
 80042c0:	6121      	str	r1, [r4, #16]
 80042c2:	b913      	cbnz	r3, 80042ca <_printf_float+0x18e>
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	07d0      	lsls	r0, r2, #31
 80042c8:	d502      	bpl.n	80042d0 <_printf_float+0x194>
 80042ca:	3301      	adds	r3, #1
 80042cc:	440b      	add	r3, r1
 80042ce:	6123      	str	r3, [r4, #16]
 80042d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042d2:	f04f 0900 	mov.w	r9, #0
 80042d6:	e7db      	b.n	8004290 <_printf_float+0x154>
 80042d8:	b913      	cbnz	r3, 80042e0 <_printf_float+0x1a4>
 80042da:	6822      	ldr	r2, [r4, #0]
 80042dc:	07d2      	lsls	r2, r2, #31
 80042de:	d501      	bpl.n	80042e4 <_printf_float+0x1a8>
 80042e0:	3302      	adds	r3, #2
 80042e2:	e7f4      	b.n	80042ce <_printf_float+0x192>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e7f2      	b.n	80042ce <_printf_float+0x192>
 80042e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042ee:	4299      	cmp	r1, r3
 80042f0:	db05      	blt.n	80042fe <_printf_float+0x1c2>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	6121      	str	r1, [r4, #16]
 80042f6:	07d8      	lsls	r0, r3, #31
 80042f8:	d5ea      	bpl.n	80042d0 <_printf_float+0x194>
 80042fa:	1c4b      	adds	r3, r1, #1
 80042fc:	e7e7      	b.n	80042ce <_printf_float+0x192>
 80042fe:	2900      	cmp	r1, #0
 8004300:	bfd4      	ite	le
 8004302:	f1c1 0202 	rsble	r2, r1, #2
 8004306:	2201      	movgt	r2, #1
 8004308:	4413      	add	r3, r2
 800430a:	e7e0      	b.n	80042ce <_printf_float+0x192>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	055a      	lsls	r2, r3, #21
 8004310:	d407      	bmi.n	8004322 <_printf_float+0x1e6>
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	4642      	mov	r2, r8
 8004316:	4631      	mov	r1, r6
 8004318:	4628      	mov	r0, r5
 800431a:	47b8      	blx	r7
 800431c:	3001      	adds	r0, #1
 800431e:	d12b      	bne.n	8004378 <_printf_float+0x23c>
 8004320:	e767      	b.n	80041f2 <_printf_float+0xb6>
 8004322:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004326:	f240 80dd 	bls.w	80044e4 <_printf_float+0x3a8>
 800432a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800432e:	2200      	movs	r2, #0
 8004330:	2300      	movs	r3, #0
 8004332:	f7fc fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004336:	2800      	cmp	r0, #0
 8004338:	d033      	beq.n	80043a2 <_printf_float+0x266>
 800433a:	4a37      	ldr	r2, [pc, #220]	@ (8004418 <_printf_float+0x2dc>)
 800433c:	2301      	movs	r3, #1
 800433e:	4631      	mov	r1, r6
 8004340:	4628      	mov	r0, r5
 8004342:	47b8      	blx	r7
 8004344:	3001      	adds	r0, #1
 8004346:	f43f af54 	beq.w	80041f2 <_printf_float+0xb6>
 800434a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800434e:	4543      	cmp	r3, r8
 8004350:	db02      	blt.n	8004358 <_printf_float+0x21c>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	07d8      	lsls	r0, r3, #31
 8004356:	d50f      	bpl.n	8004378 <_printf_float+0x23c>
 8004358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435c:	4631      	mov	r1, r6
 800435e:	4628      	mov	r0, r5
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	f43f af45 	beq.w	80041f2 <_printf_float+0xb6>
 8004368:	f04f 0900 	mov.w	r9, #0
 800436c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004370:	f104 0a1a 	add.w	sl, r4, #26
 8004374:	45c8      	cmp	r8, r9
 8004376:	dc09      	bgt.n	800438c <_printf_float+0x250>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	079b      	lsls	r3, r3, #30
 800437c:	f100 8103 	bmi.w	8004586 <_printf_float+0x44a>
 8004380:	68e0      	ldr	r0, [r4, #12]
 8004382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004384:	4298      	cmp	r0, r3
 8004386:	bfb8      	it	lt
 8004388:	4618      	movlt	r0, r3
 800438a:	e734      	b.n	80041f6 <_printf_float+0xba>
 800438c:	2301      	movs	r3, #1
 800438e:	4652      	mov	r2, sl
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	f43f af2b 	beq.w	80041f2 <_printf_float+0xb6>
 800439c:	f109 0901 	add.w	r9, r9, #1
 80043a0:	e7e8      	b.n	8004374 <_printf_float+0x238>
 80043a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	dc39      	bgt.n	800441c <_printf_float+0x2e0>
 80043a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004418 <_printf_float+0x2dc>)
 80043aa:	2301      	movs	r3, #1
 80043ac:	4631      	mov	r1, r6
 80043ae:	4628      	mov	r0, r5
 80043b0:	47b8      	blx	r7
 80043b2:	3001      	adds	r0, #1
 80043b4:	f43f af1d 	beq.w	80041f2 <_printf_float+0xb6>
 80043b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80043bc:	ea59 0303 	orrs.w	r3, r9, r3
 80043c0:	d102      	bne.n	80043c8 <_printf_float+0x28c>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	07d9      	lsls	r1, r3, #31
 80043c6:	d5d7      	bpl.n	8004378 <_printf_float+0x23c>
 80043c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f af0d 	beq.w	80041f2 <_printf_float+0xb6>
 80043d8:	f04f 0a00 	mov.w	sl, #0
 80043dc:	f104 0b1a 	add.w	fp, r4, #26
 80043e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043e2:	425b      	negs	r3, r3
 80043e4:	4553      	cmp	r3, sl
 80043e6:	dc01      	bgt.n	80043ec <_printf_float+0x2b0>
 80043e8:	464b      	mov	r3, r9
 80043ea:	e793      	b.n	8004314 <_printf_float+0x1d8>
 80043ec:	2301      	movs	r3, #1
 80043ee:	465a      	mov	r2, fp
 80043f0:	4631      	mov	r1, r6
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b8      	blx	r7
 80043f6:	3001      	adds	r0, #1
 80043f8:	f43f aefb 	beq.w	80041f2 <_printf_float+0xb6>
 80043fc:	f10a 0a01 	add.w	sl, sl, #1
 8004400:	e7ee      	b.n	80043e0 <_printf_float+0x2a4>
 8004402:	bf00      	nop
 8004404:	7fefffff 	.word	0x7fefffff
 8004408:	08006ed3 	.word	0x08006ed3
 800440c:	08006ed7 	.word	0x08006ed7
 8004410:	08006edb 	.word	0x08006edb
 8004414:	08006edf 	.word	0x08006edf
 8004418:	08006ee3 	.word	0x08006ee3
 800441c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800441e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004422:	4553      	cmp	r3, sl
 8004424:	bfa8      	it	ge
 8004426:	4653      	movge	r3, sl
 8004428:	2b00      	cmp	r3, #0
 800442a:	4699      	mov	r9, r3
 800442c:	dc36      	bgt.n	800449c <_printf_float+0x360>
 800442e:	f04f 0b00 	mov.w	fp, #0
 8004432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004436:	f104 021a 	add.w	r2, r4, #26
 800443a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800443c:	9306      	str	r3, [sp, #24]
 800443e:	eba3 0309 	sub.w	r3, r3, r9
 8004442:	455b      	cmp	r3, fp
 8004444:	dc31      	bgt.n	80044aa <_printf_float+0x36e>
 8004446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004448:	459a      	cmp	sl, r3
 800444a:	dc3a      	bgt.n	80044c2 <_printf_float+0x386>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	07da      	lsls	r2, r3, #31
 8004450:	d437      	bmi.n	80044c2 <_printf_float+0x386>
 8004452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004454:	ebaa 0903 	sub.w	r9, sl, r3
 8004458:	9b06      	ldr	r3, [sp, #24]
 800445a:	ebaa 0303 	sub.w	r3, sl, r3
 800445e:	4599      	cmp	r9, r3
 8004460:	bfa8      	it	ge
 8004462:	4699      	movge	r9, r3
 8004464:	f1b9 0f00 	cmp.w	r9, #0
 8004468:	dc33      	bgt.n	80044d2 <_printf_float+0x396>
 800446a:	f04f 0800 	mov.w	r8, #0
 800446e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004472:	f104 0b1a 	add.w	fp, r4, #26
 8004476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004478:	ebaa 0303 	sub.w	r3, sl, r3
 800447c:	eba3 0309 	sub.w	r3, r3, r9
 8004480:	4543      	cmp	r3, r8
 8004482:	f77f af79 	ble.w	8004378 <_printf_float+0x23c>
 8004486:	2301      	movs	r3, #1
 8004488:	465a      	mov	r2, fp
 800448a:	4631      	mov	r1, r6
 800448c:	4628      	mov	r0, r5
 800448e:	47b8      	blx	r7
 8004490:	3001      	adds	r0, #1
 8004492:	f43f aeae 	beq.w	80041f2 <_printf_float+0xb6>
 8004496:	f108 0801 	add.w	r8, r8, #1
 800449a:	e7ec      	b.n	8004476 <_printf_float+0x33a>
 800449c:	4642      	mov	r2, r8
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	d1c2      	bne.n	800442e <_printf_float+0x2f2>
 80044a8:	e6a3      	b.n	80041f2 <_printf_float+0xb6>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4631      	mov	r1, r6
 80044ae:	4628      	mov	r0, r5
 80044b0:	9206      	str	r2, [sp, #24]
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	f43f ae9c 	beq.w	80041f2 <_printf_float+0xb6>
 80044ba:	9a06      	ldr	r2, [sp, #24]
 80044bc:	f10b 0b01 	add.w	fp, fp, #1
 80044c0:	e7bb      	b.n	800443a <_printf_float+0x2fe>
 80044c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b8      	blx	r7
 80044cc:	3001      	adds	r0, #1
 80044ce:	d1c0      	bne.n	8004452 <_printf_float+0x316>
 80044d0:	e68f      	b.n	80041f2 <_printf_float+0xb6>
 80044d2:	9a06      	ldr	r2, [sp, #24]
 80044d4:	464b      	mov	r3, r9
 80044d6:	4442      	add	r2, r8
 80044d8:	4631      	mov	r1, r6
 80044da:	4628      	mov	r0, r5
 80044dc:	47b8      	blx	r7
 80044de:	3001      	adds	r0, #1
 80044e0:	d1c3      	bne.n	800446a <_printf_float+0x32e>
 80044e2:	e686      	b.n	80041f2 <_printf_float+0xb6>
 80044e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80044e8:	f1ba 0f01 	cmp.w	sl, #1
 80044ec:	dc01      	bgt.n	80044f2 <_printf_float+0x3b6>
 80044ee:	07db      	lsls	r3, r3, #31
 80044f0:	d536      	bpl.n	8004560 <_printf_float+0x424>
 80044f2:	2301      	movs	r3, #1
 80044f4:	4642      	mov	r2, r8
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f ae78 	beq.w	80041f2 <_printf_float+0xb6>
 8004502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	f43f ae70 	beq.w	80041f2 <_printf_float+0xb6>
 8004512:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004516:	2200      	movs	r2, #0
 8004518:	2300      	movs	r3, #0
 800451a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800451e:	f7fc fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004522:	b9c0      	cbnz	r0, 8004556 <_printf_float+0x41a>
 8004524:	4653      	mov	r3, sl
 8004526:	f108 0201 	add.w	r2, r8, #1
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	d10c      	bne.n	800454e <_printf_float+0x412>
 8004534:	e65d      	b.n	80041f2 <_printf_float+0xb6>
 8004536:	2301      	movs	r3, #1
 8004538:	465a      	mov	r2, fp
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	f43f ae56 	beq.w	80041f2 <_printf_float+0xb6>
 8004546:	f108 0801 	add.w	r8, r8, #1
 800454a:	45d0      	cmp	r8, sl
 800454c:	dbf3      	blt.n	8004536 <_printf_float+0x3fa>
 800454e:	464b      	mov	r3, r9
 8004550:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004554:	e6df      	b.n	8004316 <_printf_float+0x1da>
 8004556:	f04f 0800 	mov.w	r8, #0
 800455a:	f104 0b1a 	add.w	fp, r4, #26
 800455e:	e7f4      	b.n	800454a <_printf_float+0x40e>
 8004560:	2301      	movs	r3, #1
 8004562:	4642      	mov	r2, r8
 8004564:	e7e1      	b.n	800452a <_printf_float+0x3ee>
 8004566:	2301      	movs	r3, #1
 8004568:	464a      	mov	r2, r9
 800456a:	4631      	mov	r1, r6
 800456c:	4628      	mov	r0, r5
 800456e:	47b8      	blx	r7
 8004570:	3001      	adds	r0, #1
 8004572:	f43f ae3e 	beq.w	80041f2 <_printf_float+0xb6>
 8004576:	f108 0801 	add.w	r8, r8, #1
 800457a:	68e3      	ldr	r3, [r4, #12]
 800457c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800457e:	1a5b      	subs	r3, r3, r1
 8004580:	4543      	cmp	r3, r8
 8004582:	dcf0      	bgt.n	8004566 <_printf_float+0x42a>
 8004584:	e6fc      	b.n	8004380 <_printf_float+0x244>
 8004586:	f04f 0800 	mov.w	r8, #0
 800458a:	f104 0919 	add.w	r9, r4, #25
 800458e:	e7f4      	b.n	800457a <_printf_float+0x43e>

08004590 <_printf_common>:
 8004590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004594:	4616      	mov	r6, r2
 8004596:	4698      	mov	r8, r3
 8004598:	688a      	ldr	r2, [r1, #8]
 800459a:	690b      	ldr	r3, [r1, #16]
 800459c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bfb8      	it	lt
 80045a4:	4613      	movlt	r3, r2
 80045a6:	6033      	str	r3, [r6, #0]
 80045a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045ac:	4607      	mov	r7, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	b10a      	cbz	r2, 80045b6 <_printf_common+0x26>
 80045b2:	3301      	adds	r3, #1
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	0699      	lsls	r1, r3, #26
 80045ba:	bf42      	ittt	mi
 80045bc:	6833      	ldrmi	r3, [r6, #0]
 80045be:	3302      	addmi	r3, #2
 80045c0:	6033      	strmi	r3, [r6, #0]
 80045c2:	6825      	ldr	r5, [r4, #0]
 80045c4:	f015 0506 	ands.w	r5, r5, #6
 80045c8:	d106      	bne.n	80045d8 <_printf_common+0x48>
 80045ca:	f104 0a19 	add.w	sl, r4, #25
 80045ce:	68e3      	ldr	r3, [r4, #12]
 80045d0:	6832      	ldr	r2, [r6, #0]
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	42ab      	cmp	r3, r5
 80045d6:	dc26      	bgt.n	8004626 <_printf_common+0x96>
 80045d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	3b00      	subs	r3, #0
 80045e0:	bf18      	it	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	0692      	lsls	r2, r2, #26
 80045e6:	d42b      	bmi.n	8004640 <_printf_common+0xb0>
 80045e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045ec:	4641      	mov	r1, r8
 80045ee:	4638      	mov	r0, r7
 80045f0:	47c8      	blx	r9
 80045f2:	3001      	adds	r0, #1
 80045f4:	d01e      	beq.n	8004634 <_printf_common+0xa4>
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	6922      	ldr	r2, [r4, #16]
 80045fa:	f003 0306 	and.w	r3, r3, #6
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf02      	ittt	eq
 8004602:	68e5      	ldreq	r5, [r4, #12]
 8004604:	6833      	ldreq	r3, [r6, #0]
 8004606:	1aed      	subeq	r5, r5, r3
 8004608:	68a3      	ldr	r3, [r4, #8]
 800460a:	bf0c      	ite	eq
 800460c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004610:	2500      	movne	r5, #0
 8004612:	4293      	cmp	r3, r2
 8004614:	bfc4      	itt	gt
 8004616:	1a9b      	subgt	r3, r3, r2
 8004618:	18ed      	addgt	r5, r5, r3
 800461a:	2600      	movs	r6, #0
 800461c:	341a      	adds	r4, #26
 800461e:	42b5      	cmp	r5, r6
 8004620:	d11a      	bne.n	8004658 <_printf_common+0xc8>
 8004622:	2000      	movs	r0, #0
 8004624:	e008      	b.n	8004638 <_printf_common+0xa8>
 8004626:	2301      	movs	r3, #1
 8004628:	4652      	mov	r2, sl
 800462a:	4641      	mov	r1, r8
 800462c:	4638      	mov	r0, r7
 800462e:	47c8      	blx	r9
 8004630:	3001      	adds	r0, #1
 8004632:	d103      	bne.n	800463c <_printf_common+0xac>
 8004634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463c:	3501      	adds	r5, #1
 800463e:	e7c6      	b.n	80045ce <_printf_common+0x3e>
 8004640:	18e1      	adds	r1, r4, r3
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	2030      	movs	r0, #48	@ 0x30
 8004646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800464a:	4422      	add	r2, r4
 800464c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004654:	3302      	adds	r3, #2
 8004656:	e7c7      	b.n	80045e8 <_printf_common+0x58>
 8004658:	2301      	movs	r3, #1
 800465a:	4622      	mov	r2, r4
 800465c:	4641      	mov	r1, r8
 800465e:	4638      	mov	r0, r7
 8004660:	47c8      	blx	r9
 8004662:	3001      	adds	r0, #1
 8004664:	d0e6      	beq.n	8004634 <_printf_common+0xa4>
 8004666:	3601      	adds	r6, #1
 8004668:	e7d9      	b.n	800461e <_printf_common+0x8e>
	...

0800466c <_printf_i>:
 800466c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004670:	7e0f      	ldrb	r7, [r1, #24]
 8004672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004674:	2f78      	cmp	r7, #120	@ 0x78
 8004676:	4691      	mov	r9, r2
 8004678:	4680      	mov	r8, r0
 800467a:	460c      	mov	r4, r1
 800467c:	469a      	mov	sl, r3
 800467e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004682:	d807      	bhi.n	8004694 <_printf_i+0x28>
 8004684:	2f62      	cmp	r7, #98	@ 0x62
 8004686:	d80a      	bhi.n	800469e <_printf_i+0x32>
 8004688:	2f00      	cmp	r7, #0
 800468a:	f000 80d2 	beq.w	8004832 <_printf_i+0x1c6>
 800468e:	2f58      	cmp	r7, #88	@ 0x58
 8004690:	f000 80b9 	beq.w	8004806 <_printf_i+0x19a>
 8004694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800469c:	e03a      	b.n	8004714 <_printf_i+0xa8>
 800469e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046a2:	2b15      	cmp	r3, #21
 80046a4:	d8f6      	bhi.n	8004694 <_printf_i+0x28>
 80046a6:	a101      	add	r1, pc, #4	@ (adr r1, 80046ac <_printf_i+0x40>)
 80046a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046ac:	08004705 	.word	0x08004705
 80046b0:	08004719 	.word	0x08004719
 80046b4:	08004695 	.word	0x08004695
 80046b8:	08004695 	.word	0x08004695
 80046bc:	08004695 	.word	0x08004695
 80046c0:	08004695 	.word	0x08004695
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004695 	.word	0x08004695
 80046cc:	08004695 	.word	0x08004695
 80046d0:	08004695 	.word	0x08004695
 80046d4:	08004695 	.word	0x08004695
 80046d8:	08004819 	.word	0x08004819
 80046dc:	08004743 	.word	0x08004743
 80046e0:	080047d3 	.word	0x080047d3
 80046e4:	08004695 	.word	0x08004695
 80046e8:	08004695 	.word	0x08004695
 80046ec:	0800483b 	.word	0x0800483b
 80046f0:	08004695 	.word	0x08004695
 80046f4:	08004743 	.word	0x08004743
 80046f8:	08004695 	.word	0x08004695
 80046fc:	08004695 	.word	0x08004695
 8004700:	080047db 	.word	0x080047db
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	1d1a      	adds	r2, r3, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6032      	str	r2, [r6, #0]
 800470c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004714:	2301      	movs	r3, #1
 8004716:	e09d      	b.n	8004854 <_printf_i+0x1e8>
 8004718:	6833      	ldr	r3, [r6, #0]
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	1d19      	adds	r1, r3, #4
 800471e:	6031      	str	r1, [r6, #0]
 8004720:	0606      	lsls	r6, r0, #24
 8004722:	d501      	bpl.n	8004728 <_printf_i+0xbc>
 8004724:	681d      	ldr	r5, [r3, #0]
 8004726:	e003      	b.n	8004730 <_printf_i+0xc4>
 8004728:	0645      	lsls	r5, r0, #25
 800472a:	d5fb      	bpl.n	8004724 <_printf_i+0xb8>
 800472c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004730:	2d00      	cmp	r5, #0
 8004732:	da03      	bge.n	800473c <_printf_i+0xd0>
 8004734:	232d      	movs	r3, #45	@ 0x2d
 8004736:	426d      	negs	r5, r5
 8004738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800473c:	4859      	ldr	r0, [pc, #356]	@ (80048a4 <_printf_i+0x238>)
 800473e:	230a      	movs	r3, #10
 8004740:	e011      	b.n	8004766 <_printf_i+0xfa>
 8004742:	6821      	ldr	r1, [r4, #0]
 8004744:	6833      	ldr	r3, [r6, #0]
 8004746:	0608      	lsls	r0, r1, #24
 8004748:	f853 5b04 	ldr.w	r5, [r3], #4
 800474c:	d402      	bmi.n	8004754 <_printf_i+0xe8>
 800474e:	0649      	lsls	r1, r1, #25
 8004750:	bf48      	it	mi
 8004752:	b2ad      	uxthmi	r5, r5
 8004754:	2f6f      	cmp	r7, #111	@ 0x6f
 8004756:	4853      	ldr	r0, [pc, #332]	@ (80048a4 <_printf_i+0x238>)
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	bf14      	ite	ne
 800475c:	230a      	movne	r3, #10
 800475e:	2308      	moveq	r3, #8
 8004760:	2100      	movs	r1, #0
 8004762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004766:	6866      	ldr	r6, [r4, #4]
 8004768:	60a6      	str	r6, [r4, #8]
 800476a:	2e00      	cmp	r6, #0
 800476c:	bfa2      	ittt	ge
 800476e:	6821      	ldrge	r1, [r4, #0]
 8004770:	f021 0104 	bicge.w	r1, r1, #4
 8004774:	6021      	strge	r1, [r4, #0]
 8004776:	b90d      	cbnz	r5, 800477c <_printf_i+0x110>
 8004778:	2e00      	cmp	r6, #0
 800477a:	d04b      	beq.n	8004814 <_printf_i+0x1a8>
 800477c:	4616      	mov	r6, r2
 800477e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004782:	fb03 5711 	mls	r7, r3, r1, r5
 8004786:	5dc7      	ldrb	r7, [r0, r7]
 8004788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800478c:	462f      	mov	r7, r5
 800478e:	42bb      	cmp	r3, r7
 8004790:	460d      	mov	r5, r1
 8004792:	d9f4      	bls.n	800477e <_printf_i+0x112>
 8004794:	2b08      	cmp	r3, #8
 8004796:	d10b      	bne.n	80047b0 <_printf_i+0x144>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	07df      	lsls	r7, r3, #31
 800479c:	d508      	bpl.n	80047b0 <_printf_i+0x144>
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	6861      	ldr	r1, [r4, #4]
 80047a2:	4299      	cmp	r1, r3
 80047a4:	bfde      	ittt	le
 80047a6:	2330      	movle	r3, #48	@ 0x30
 80047a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80047b0:	1b92      	subs	r2, r2, r6
 80047b2:	6122      	str	r2, [r4, #16]
 80047b4:	f8cd a000 	str.w	sl, [sp]
 80047b8:	464b      	mov	r3, r9
 80047ba:	aa03      	add	r2, sp, #12
 80047bc:	4621      	mov	r1, r4
 80047be:	4640      	mov	r0, r8
 80047c0:	f7ff fee6 	bl	8004590 <_printf_common>
 80047c4:	3001      	adds	r0, #1
 80047c6:	d14a      	bne.n	800485e <_printf_i+0x1f2>
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047cc:	b004      	add	sp, #16
 80047ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f043 0320 	orr.w	r3, r3, #32
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	4833      	ldr	r0, [pc, #204]	@ (80048a8 <_printf_i+0x23c>)
 80047dc:	2778      	movs	r7, #120	@ 0x78
 80047de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	6831      	ldr	r1, [r6, #0]
 80047e6:	061f      	lsls	r7, r3, #24
 80047e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80047ec:	d402      	bmi.n	80047f4 <_printf_i+0x188>
 80047ee:	065f      	lsls	r7, r3, #25
 80047f0:	bf48      	it	mi
 80047f2:	b2ad      	uxthmi	r5, r5
 80047f4:	6031      	str	r1, [r6, #0]
 80047f6:	07d9      	lsls	r1, r3, #31
 80047f8:	bf44      	itt	mi
 80047fa:	f043 0320 	orrmi.w	r3, r3, #32
 80047fe:	6023      	strmi	r3, [r4, #0]
 8004800:	b11d      	cbz	r5, 800480a <_printf_i+0x19e>
 8004802:	2310      	movs	r3, #16
 8004804:	e7ac      	b.n	8004760 <_printf_i+0xf4>
 8004806:	4827      	ldr	r0, [pc, #156]	@ (80048a4 <_printf_i+0x238>)
 8004808:	e7e9      	b.n	80047de <_printf_i+0x172>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f023 0320 	bic.w	r3, r3, #32
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	e7f6      	b.n	8004802 <_printf_i+0x196>
 8004814:	4616      	mov	r6, r2
 8004816:	e7bd      	b.n	8004794 <_printf_i+0x128>
 8004818:	6833      	ldr	r3, [r6, #0]
 800481a:	6825      	ldr	r5, [r4, #0]
 800481c:	6961      	ldr	r1, [r4, #20]
 800481e:	1d18      	adds	r0, r3, #4
 8004820:	6030      	str	r0, [r6, #0]
 8004822:	062e      	lsls	r6, r5, #24
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	d501      	bpl.n	800482c <_printf_i+0x1c0>
 8004828:	6019      	str	r1, [r3, #0]
 800482a:	e002      	b.n	8004832 <_printf_i+0x1c6>
 800482c:	0668      	lsls	r0, r5, #25
 800482e:	d5fb      	bpl.n	8004828 <_printf_i+0x1bc>
 8004830:	8019      	strh	r1, [r3, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	6123      	str	r3, [r4, #16]
 8004836:	4616      	mov	r6, r2
 8004838:	e7bc      	b.n	80047b4 <_printf_i+0x148>
 800483a:	6833      	ldr	r3, [r6, #0]
 800483c:	1d1a      	adds	r2, r3, #4
 800483e:	6032      	str	r2, [r6, #0]
 8004840:	681e      	ldr	r6, [r3, #0]
 8004842:	6862      	ldr	r2, [r4, #4]
 8004844:	2100      	movs	r1, #0
 8004846:	4630      	mov	r0, r6
 8004848:	f7fb fcc2 	bl	80001d0 <memchr>
 800484c:	b108      	cbz	r0, 8004852 <_printf_i+0x1e6>
 800484e:	1b80      	subs	r0, r0, r6
 8004850:	6060      	str	r0, [r4, #4]
 8004852:	6863      	ldr	r3, [r4, #4]
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	2300      	movs	r3, #0
 8004858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800485c:	e7aa      	b.n	80047b4 <_printf_i+0x148>
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	4632      	mov	r2, r6
 8004862:	4649      	mov	r1, r9
 8004864:	4640      	mov	r0, r8
 8004866:	47d0      	blx	sl
 8004868:	3001      	adds	r0, #1
 800486a:	d0ad      	beq.n	80047c8 <_printf_i+0x15c>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	079b      	lsls	r3, r3, #30
 8004870:	d413      	bmi.n	800489a <_printf_i+0x22e>
 8004872:	68e0      	ldr	r0, [r4, #12]
 8004874:	9b03      	ldr	r3, [sp, #12]
 8004876:	4298      	cmp	r0, r3
 8004878:	bfb8      	it	lt
 800487a:	4618      	movlt	r0, r3
 800487c:	e7a6      	b.n	80047cc <_printf_i+0x160>
 800487e:	2301      	movs	r3, #1
 8004880:	4632      	mov	r2, r6
 8004882:	4649      	mov	r1, r9
 8004884:	4640      	mov	r0, r8
 8004886:	47d0      	blx	sl
 8004888:	3001      	adds	r0, #1
 800488a:	d09d      	beq.n	80047c8 <_printf_i+0x15c>
 800488c:	3501      	adds	r5, #1
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	9903      	ldr	r1, [sp, #12]
 8004892:	1a5b      	subs	r3, r3, r1
 8004894:	42ab      	cmp	r3, r5
 8004896:	dcf2      	bgt.n	800487e <_printf_i+0x212>
 8004898:	e7eb      	b.n	8004872 <_printf_i+0x206>
 800489a:	2500      	movs	r5, #0
 800489c:	f104 0619 	add.w	r6, r4, #25
 80048a0:	e7f5      	b.n	800488e <_printf_i+0x222>
 80048a2:	bf00      	nop
 80048a4:	08006ee5 	.word	0x08006ee5
 80048a8:	08006ef6 	.word	0x08006ef6

080048ac <siprintf>:
 80048ac:	b40e      	push	{r1, r2, r3}
 80048ae:	b500      	push	{lr}
 80048b0:	b09c      	sub	sp, #112	@ 0x70
 80048b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80048b4:	9002      	str	r0, [sp, #8]
 80048b6:	9006      	str	r0, [sp, #24]
 80048b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048bc:	4809      	ldr	r0, [pc, #36]	@ (80048e4 <siprintf+0x38>)
 80048be:	9107      	str	r1, [sp, #28]
 80048c0:	9104      	str	r1, [sp, #16]
 80048c2:	4909      	ldr	r1, [pc, #36]	@ (80048e8 <siprintf+0x3c>)
 80048c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c8:	9105      	str	r1, [sp, #20]
 80048ca:	6800      	ldr	r0, [r0, #0]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	a902      	add	r1, sp, #8
 80048d0:	f000 ffce 	bl	8005870 <_svfiprintf_r>
 80048d4:	9b02      	ldr	r3, [sp, #8]
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	b01c      	add	sp, #112	@ 0x70
 80048dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e0:	b003      	add	sp, #12
 80048e2:	4770      	bx	lr
 80048e4:	20000024 	.word	0x20000024
 80048e8:	ffff0208 	.word	0xffff0208

080048ec <std>:
 80048ec:	2300      	movs	r3, #0
 80048ee:	b510      	push	{r4, lr}
 80048f0:	4604      	mov	r4, r0
 80048f2:	e9c0 3300 	strd	r3, r3, [r0]
 80048f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048fa:	6083      	str	r3, [r0, #8]
 80048fc:	8181      	strh	r1, [r0, #12]
 80048fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004900:	81c2      	strh	r2, [r0, #14]
 8004902:	6183      	str	r3, [r0, #24]
 8004904:	4619      	mov	r1, r3
 8004906:	2208      	movs	r2, #8
 8004908:	305c      	adds	r0, #92	@ 0x5c
 800490a:	f000 f8c0 	bl	8004a8e <memset>
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <std+0x58>)
 8004910:	6263      	str	r3, [r4, #36]	@ 0x24
 8004912:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <std+0x5c>)
 8004914:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <std+0x60>)
 8004918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800491a:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <std+0x64>)
 800491c:	6323      	str	r3, [r4, #48]	@ 0x30
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <std+0x68>)
 8004920:	6224      	str	r4, [r4, #32]
 8004922:	429c      	cmp	r4, r3
 8004924:	d006      	beq.n	8004934 <std+0x48>
 8004926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800492a:	4294      	cmp	r4, r2
 800492c:	d002      	beq.n	8004934 <std+0x48>
 800492e:	33d0      	adds	r3, #208	@ 0xd0
 8004930:	429c      	cmp	r4, r3
 8004932:	d105      	bne.n	8004940 <std+0x54>
 8004934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	f000 b8de 	b.w	8004afc <__retarget_lock_init_recursive>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	bf00      	nop
 8004944:	08006431 	.word	0x08006431
 8004948:	08006453 	.word	0x08006453
 800494c:	0800648b 	.word	0x0800648b
 8004950:	080064af 	.word	0x080064af
 8004954:	200010a0 	.word	0x200010a0

08004958 <stdio_exit_handler>:
 8004958:	4a02      	ldr	r2, [pc, #8]	@ (8004964 <stdio_exit_handler+0xc>)
 800495a:	4903      	ldr	r1, [pc, #12]	@ (8004968 <stdio_exit_handler+0x10>)
 800495c:	4803      	ldr	r0, [pc, #12]	@ (800496c <stdio_exit_handler+0x14>)
 800495e:	f000 b869 	b.w	8004a34 <_fwalk_sglue>
 8004962:	bf00      	nop
 8004964:	20000018 	.word	0x20000018
 8004968:	08005cc5 	.word	0x08005cc5
 800496c:	20000028 	.word	0x20000028

08004970 <cleanup_stdio>:
 8004970:	6841      	ldr	r1, [r0, #4]
 8004972:	4b0c      	ldr	r3, [pc, #48]	@ (80049a4 <cleanup_stdio+0x34>)
 8004974:	4299      	cmp	r1, r3
 8004976:	b510      	push	{r4, lr}
 8004978:	4604      	mov	r4, r0
 800497a:	d001      	beq.n	8004980 <cleanup_stdio+0x10>
 800497c:	f001 f9a2 	bl	8005cc4 <_fflush_r>
 8004980:	68a1      	ldr	r1, [r4, #8]
 8004982:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <cleanup_stdio+0x38>)
 8004984:	4299      	cmp	r1, r3
 8004986:	d002      	beq.n	800498e <cleanup_stdio+0x1e>
 8004988:	4620      	mov	r0, r4
 800498a:	f001 f99b 	bl	8005cc4 <_fflush_r>
 800498e:	68e1      	ldr	r1, [r4, #12]
 8004990:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <cleanup_stdio+0x3c>)
 8004992:	4299      	cmp	r1, r3
 8004994:	d004      	beq.n	80049a0 <cleanup_stdio+0x30>
 8004996:	4620      	mov	r0, r4
 8004998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800499c:	f001 b992 	b.w	8005cc4 <_fflush_r>
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	bf00      	nop
 80049a4:	200010a0 	.word	0x200010a0
 80049a8:	20001108 	.word	0x20001108
 80049ac:	20001170 	.word	0x20001170

080049b0 <global_stdio_init.part.0>:
 80049b0:	b510      	push	{r4, lr}
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <global_stdio_init.part.0+0x30>)
 80049b4:	4c0b      	ldr	r4, [pc, #44]	@ (80049e4 <global_stdio_init.part.0+0x34>)
 80049b6:	4a0c      	ldr	r2, [pc, #48]	@ (80049e8 <global_stdio_init.part.0+0x38>)
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	4620      	mov	r0, r4
 80049bc:	2200      	movs	r2, #0
 80049be:	2104      	movs	r1, #4
 80049c0:	f7ff ff94 	bl	80048ec <std>
 80049c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049c8:	2201      	movs	r2, #1
 80049ca:	2109      	movs	r1, #9
 80049cc:	f7ff ff8e 	bl	80048ec <std>
 80049d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049d4:	2202      	movs	r2, #2
 80049d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049da:	2112      	movs	r1, #18
 80049dc:	f7ff bf86 	b.w	80048ec <std>
 80049e0:	200011d8 	.word	0x200011d8
 80049e4:	200010a0 	.word	0x200010a0
 80049e8:	08004959 	.word	0x08004959

080049ec <__sfp_lock_acquire>:
 80049ec:	4801      	ldr	r0, [pc, #4]	@ (80049f4 <__sfp_lock_acquire+0x8>)
 80049ee:	f000 b886 	b.w	8004afe <__retarget_lock_acquire_recursive>
 80049f2:	bf00      	nop
 80049f4:	200011dd 	.word	0x200011dd

080049f8 <__sfp_lock_release>:
 80049f8:	4801      	ldr	r0, [pc, #4]	@ (8004a00 <__sfp_lock_release+0x8>)
 80049fa:	f000 b881 	b.w	8004b00 <__retarget_lock_release_recursive>
 80049fe:	bf00      	nop
 8004a00:	200011dd 	.word	0x200011dd

08004a04 <__sinit>:
 8004a04:	b510      	push	{r4, lr}
 8004a06:	4604      	mov	r4, r0
 8004a08:	f7ff fff0 	bl	80049ec <__sfp_lock_acquire>
 8004a0c:	6a23      	ldr	r3, [r4, #32]
 8004a0e:	b11b      	cbz	r3, 8004a18 <__sinit+0x14>
 8004a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a14:	f7ff bff0 	b.w	80049f8 <__sfp_lock_release>
 8004a18:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <__sinit+0x28>)
 8004a1a:	6223      	str	r3, [r4, #32]
 8004a1c:	4b04      	ldr	r3, [pc, #16]	@ (8004a30 <__sinit+0x2c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f5      	bne.n	8004a10 <__sinit+0xc>
 8004a24:	f7ff ffc4 	bl	80049b0 <global_stdio_init.part.0>
 8004a28:	e7f2      	b.n	8004a10 <__sinit+0xc>
 8004a2a:	bf00      	nop
 8004a2c:	08004971 	.word	0x08004971
 8004a30:	200011d8 	.word	0x200011d8

08004a34 <_fwalk_sglue>:
 8004a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a38:	4607      	mov	r7, r0
 8004a3a:	4688      	mov	r8, r1
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	2600      	movs	r6, #0
 8004a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a44:	f1b9 0901 	subs.w	r9, r9, #1
 8004a48:	d505      	bpl.n	8004a56 <_fwalk_sglue+0x22>
 8004a4a:	6824      	ldr	r4, [r4, #0]
 8004a4c:	2c00      	cmp	r4, #0
 8004a4e:	d1f7      	bne.n	8004a40 <_fwalk_sglue+0xc>
 8004a50:	4630      	mov	r0, r6
 8004a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a56:	89ab      	ldrh	r3, [r5, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d907      	bls.n	8004a6c <_fwalk_sglue+0x38>
 8004a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a60:	3301      	adds	r3, #1
 8004a62:	d003      	beq.n	8004a6c <_fwalk_sglue+0x38>
 8004a64:	4629      	mov	r1, r5
 8004a66:	4638      	mov	r0, r7
 8004a68:	47c0      	blx	r8
 8004a6a:	4306      	orrs	r6, r0
 8004a6c:	3568      	adds	r5, #104	@ 0x68
 8004a6e:	e7e9      	b.n	8004a44 <_fwalk_sglue+0x10>

08004a70 <strcat>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4602      	mov	r2, r0
 8004a74:	7814      	ldrb	r4, [r2, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	3201      	adds	r2, #1
 8004a7a:	2c00      	cmp	r4, #0
 8004a7c:	d1fa      	bne.n	8004a74 <strcat+0x4>
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	d1f9      	bne.n	8004a80 <strcat+0x10>
 8004a8c:	bd10      	pop	{r4, pc}

08004a8e <memset>:
 8004a8e:	4402      	add	r2, r0
 8004a90:	4603      	mov	r3, r0
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d100      	bne.n	8004a98 <memset+0xa>
 8004a96:	4770      	bx	lr
 8004a98:	f803 1b01 	strb.w	r1, [r3], #1
 8004a9c:	e7f9      	b.n	8004a92 <memset+0x4>
	...

08004aa0 <_localeconv_r>:
 8004aa0:	4800      	ldr	r0, [pc, #0]	@ (8004aa4 <_localeconv_r+0x4>)
 8004aa2:	4770      	bx	lr
 8004aa4:	20000164 	.word	0x20000164

08004aa8 <__errno>:
 8004aa8:	4b01      	ldr	r3, [pc, #4]	@ (8004ab0 <__errno+0x8>)
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20000024 	.word	0x20000024

08004ab4 <__libc_init_array>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8004aec <__libc_init_array+0x38>)
 8004ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8004af0 <__libc_init_array+0x3c>)
 8004aba:	1b64      	subs	r4, r4, r5
 8004abc:	10a4      	asrs	r4, r4, #2
 8004abe:	2600      	movs	r6, #0
 8004ac0:	42a6      	cmp	r6, r4
 8004ac2:	d109      	bne.n	8004ad8 <__libc_init_array+0x24>
 8004ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8004af4 <__libc_init_array+0x40>)
 8004ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8004af8 <__libc_init_array+0x44>)
 8004ac8:	f002 f8ee 	bl	8006ca8 <_init>
 8004acc:	1b64      	subs	r4, r4, r5
 8004ace:	10a4      	asrs	r4, r4, #2
 8004ad0:	2600      	movs	r6, #0
 8004ad2:	42a6      	cmp	r6, r4
 8004ad4:	d105      	bne.n	8004ae2 <__libc_init_array+0x2e>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004adc:	4798      	blx	r3
 8004ade:	3601      	adds	r6, #1
 8004ae0:	e7ee      	b.n	8004ac0 <__libc_init_array+0xc>
 8004ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae6:	4798      	blx	r3
 8004ae8:	3601      	adds	r6, #1
 8004aea:	e7f2      	b.n	8004ad2 <__libc_init_array+0x1e>
 8004aec:	08007250 	.word	0x08007250
 8004af0:	08007250 	.word	0x08007250
 8004af4:	08007250 	.word	0x08007250
 8004af8:	08007254 	.word	0x08007254

08004afc <__retarget_lock_init_recursive>:
 8004afc:	4770      	bx	lr

08004afe <__retarget_lock_acquire_recursive>:
 8004afe:	4770      	bx	lr

08004b00 <__retarget_lock_release_recursive>:
 8004b00:	4770      	bx	lr

08004b02 <memcpy>:
 8004b02:	440a      	add	r2, r1
 8004b04:	4291      	cmp	r1, r2
 8004b06:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004b0a:	d100      	bne.n	8004b0e <memcpy+0xc>
 8004b0c:	4770      	bx	lr
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b18:	4291      	cmp	r1, r2
 8004b1a:	d1f9      	bne.n	8004b10 <memcpy+0xe>
 8004b1c:	bd10      	pop	{r4, pc}

08004b1e <quorem>:
 8004b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b22:	6903      	ldr	r3, [r0, #16]
 8004b24:	690c      	ldr	r4, [r1, #16]
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	4607      	mov	r7, r0
 8004b2a:	db7e      	blt.n	8004c2a <quorem+0x10c>
 8004b2c:	3c01      	subs	r4, #1
 8004b2e:	f101 0814 	add.w	r8, r1, #20
 8004b32:	00a3      	lsls	r3, r4, #2
 8004b34:	f100 0514 	add.w	r5, r0, #20
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b54:	d32e      	bcc.n	8004bb4 <quorem+0x96>
 8004b56:	f04f 0a00 	mov.w	sl, #0
 8004b5a:	46c4      	mov	ip, r8
 8004b5c:	46ae      	mov	lr, r5
 8004b5e:	46d3      	mov	fp, sl
 8004b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b64:	b298      	uxth	r0, r3
 8004b66:	fb06 a000 	mla	r0, r6, r0, sl
 8004b6a:	0c02      	lsrs	r2, r0, #16
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	fb06 2303 	mla	r3, r6, r3, r2
 8004b72:	f8de 2000 	ldr.w	r2, [lr]
 8004b76:	b280      	uxth	r0, r0
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	1a12      	subs	r2, r2, r0
 8004b7c:	445a      	add	r2, fp
 8004b7e:	f8de 0000 	ldr.w	r0, [lr]
 8004b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004b8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004b90:	b292      	uxth	r2, r2
 8004b92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b96:	45e1      	cmp	r9, ip
 8004b98:	f84e 2b04 	str.w	r2, [lr], #4
 8004b9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ba0:	d2de      	bcs.n	8004b60 <quorem+0x42>
 8004ba2:	9b00      	ldr	r3, [sp, #0]
 8004ba4:	58eb      	ldr	r3, [r5, r3]
 8004ba6:	b92b      	cbnz	r3, 8004bb4 <quorem+0x96>
 8004ba8:	9b01      	ldr	r3, [sp, #4]
 8004baa:	3b04      	subs	r3, #4
 8004bac:	429d      	cmp	r5, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	d32f      	bcc.n	8004c12 <quorem+0xf4>
 8004bb2:	613c      	str	r4, [r7, #16]
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f001 fb33 	bl	8006220 <__mcmp>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	db25      	blt.n	8004c0a <quorem+0xec>
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bc6:	f8d1 c000 	ldr.w	ip, [r1]
 8004bca:	fa1f fe82 	uxth.w	lr, r2
 8004bce:	fa1f f38c 	uxth.w	r3, ip
 8004bd2:	eba3 030e 	sub.w	r3, r3, lr
 8004bd6:	4403      	add	r3, r0
 8004bd8:	0c12      	lsrs	r2, r2, #16
 8004bda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004bde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004be8:	45c1      	cmp	r9, r8
 8004bea:	f841 3b04 	str.w	r3, [r1], #4
 8004bee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004bf2:	d2e6      	bcs.n	8004bc2 <quorem+0xa4>
 8004bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bfc:	b922      	cbnz	r2, 8004c08 <quorem+0xea>
 8004bfe:	3b04      	subs	r3, #4
 8004c00:	429d      	cmp	r5, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	d30b      	bcc.n	8004c1e <quorem+0x100>
 8004c06:	613c      	str	r4, [r7, #16]
 8004c08:	3601      	adds	r6, #1
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	b003      	add	sp, #12
 8004c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	3b04      	subs	r3, #4
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	d1cb      	bne.n	8004bb2 <quorem+0x94>
 8004c1a:	3c01      	subs	r4, #1
 8004c1c:	e7c6      	b.n	8004bac <quorem+0x8e>
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	3b04      	subs	r3, #4
 8004c22:	2a00      	cmp	r2, #0
 8004c24:	d1ef      	bne.n	8004c06 <quorem+0xe8>
 8004c26:	3c01      	subs	r4, #1
 8004c28:	e7ea      	b.n	8004c00 <quorem+0xe2>
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	e7ee      	b.n	8004c0c <quorem+0xee>
	...

08004c30 <_dtoa_r>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	69c7      	ldr	r7, [r0, #28]
 8004c36:	b099      	sub	sp, #100	@ 0x64
 8004c38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004c3c:	ec55 4b10 	vmov	r4, r5, d0
 8004c40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004c42:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c44:	4683      	mov	fp, r0
 8004c46:	920e      	str	r2, [sp, #56]	@ 0x38
 8004c48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c4a:	b97f      	cbnz	r7, 8004c6c <_dtoa_r+0x3c>
 8004c4c:	2010      	movs	r0, #16
 8004c4e:	f000 ff0b 	bl	8005a68 <malloc>
 8004c52:	4602      	mov	r2, r0
 8004c54:	f8cb 001c 	str.w	r0, [fp, #28]
 8004c58:	b920      	cbnz	r0, 8004c64 <_dtoa_r+0x34>
 8004c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8004ef8 <_dtoa_r+0x2c8>)
 8004c5c:	21ef      	movs	r1, #239	@ 0xef
 8004c5e:	48a7      	ldr	r0, [pc, #668]	@ (8004efc <_dtoa_r+0x2cc>)
 8004c60:	f001 fcc8 	bl	80065f4 <__assert_func>
 8004c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c68:	6007      	str	r7, [r0, #0]
 8004c6a:	60c7      	str	r7, [r0, #12]
 8004c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c70:	6819      	ldr	r1, [r3, #0]
 8004c72:	b159      	cbz	r1, 8004c8c <_dtoa_r+0x5c>
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	604a      	str	r2, [r1, #4]
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4093      	lsls	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
 8004c7e:	4658      	mov	r0, fp
 8004c80:	f001 f894 	bl	8005dac <_Bfree>
 8004c84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	1e2b      	subs	r3, r5, #0
 8004c8e:	bfb9      	ittee	lt
 8004c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004c94:	9303      	strlt	r3, [sp, #12]
 8004c96:	2300      	movge	r3, #0
 8004c98:	6033      	strge	r3, [r6, #0]
 8004c9a:	9f03      	ldr	r7, [sp, #12]
 8004c9c:	4b98      	ldr	r3, [pc, #608]	@ (8004f00 <_dtoa_r+0x2d0>)
 8004c9e:	bfbc      	itt	lt
 8004ca0:	2201      	movlt	r2, #1
 8004ca2:	6032      	strlt	r2, [r6, #0]
 8004ca4:	43bb      	bics	r3, r7
 8004ca6:	d112      	bne.n	8004cce <_dtoa_r+0x9e>
 8004ca8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004cb4:	4323      	orrs	r3, r4
 8004cb6:	f000 854d 	beq.w	8005754 <_dtoa_r+0xb24>
 8004cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004cbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004f14 <_dtoa_r+0x2e4>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 854f 	beq.w	8005764 <_dtoa_r+0xb34>
 8004cc6:	f10a 0303 	add.w	r3, sl, #3
 8004cca:	f000 bd49 	b.w	8005760 <_dtoa_r+0xb30>
 8004cce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	ec51 0b17 	vmov	r0, r1, d7
 8004cd8:	2300      	movs	r3, #0
 8004cda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004cde:	f7fb fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ce2:	4680      	mov	r8, r0
 8004ce4:	b158      	cbz	r0, 8004cfe <_dtoa_r+0xce>
 8004ce6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004ce8:	2301      	movs	r3, #1
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004cee:	b113      	cbz	r3, 8004cf6 <_dtoa_r+0xc6>
 8004cf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004cf2:	4b84      	ldr	r3, [pc, #528]	@ (8004f04 <_dtoa_r+0x2d4>)
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004f18 <_dtoa_r+0x2e8>
 8004cfa:	f000 bd33 	b.w	8005764 <_dtoa_r+0xb34>
 8004cfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004d02:	aa16      	add	r2, sp, #88	@ 0x58
 8004d04:	a917      	add	r1, sp, #92	@ 0x5c
 8004d06:	4658      	mov	r0, fp
 8004d08:	f001 fb3a 	bl	8006380 <__d2b>
 8004d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004d10:	4681      	mov	r9, r0
 8004d12:	2e00      	cmp	r6, #0
 8004d14:	d077      	beq.n	8004e06 <_dtoa_r+0x1d6>
 8004d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d30:	4619      	mov	r1, r3
 8004d32:	2200      	movs	r2, #0
 8004d34:	4b74      	ldr	r3, [pc, #464]	@ (8004f08 <_dtoa_r+0x2d8>)
 8004d36:	f7fb faa7 	bl	8000288 <__aeabi_dsub>
 8004d3a:	a369      	add	r3, pc, #420	@ (adr r3, 8004ee0 <_dtoa_r+0x2b0>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fc5a 	bl	80005f8 <__aeabi_dmul>
 8004d44:	a368      	add	r3, pc, #416	@ (adr r3, 8004ee8 <_dtoa_r+0x2b8>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f7fb fa9f 	bl	800028c <__adddf3>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4630      	mov	r0, r6
 8004d52:	460d      	mov	r5, r1
 8004d54:	f7fb fbe6 	bl	8000524 <__aeabi_i2d>
 8004d58:	a365      	add	r3, pc, #404	@ (adr r3, 8004ef0 <_dtoa_r+0x2c0>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f7fb fc4b 	bl	80005f8 <__aeabi_dmul>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f7fb fa8f 	bl	800028c <__adddf3>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	460d      	mov	r5, r1
 8004d72:	f7fb fef1 	bl	8000b58 <__aeabi_d2iz>
 8004d76:	2200      	movs	r2, #0
 8004d78:	4607      	mov	r7, r0
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	f7fb feac 	bl	8000adc <__aeabi_dcmplt>
 8004d84:	b140      	cbz	r0, 8004d98 <_dtoa_r+0x168>
 8004d86:	4638      	mov	r0, r7
 8004d88:	f7fb fbcc 	bl	8000524 <__aeabi_i2d>
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	462b      	mov	r3, r5
 8004d90:	f7fb fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d94:	b900      	cbnz	r0, 8004d98 <_dtoa_r+0x168>
 8004d96:	3f01      	subs	r7, #1
 8004d98:	2f16      	cmp	r7, #22
 8004d9a:	d851      	bhi.n	8004e40 <_dtoa_r+0x210>
 8004d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8004f0c <_dtoa_r+0x2dc>)
 8004d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004daa:	f7fb fe97 	bl	8000adc <__aeabi_dcmplt>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d048      	beq.n	8004e44 <_dtoa_r+0x214>
 8004db2:	3f01      	subs	r7, #1
 8004db4:	2300      	movs	r3, #0
 8004db6:	9312      	str	r3, [sp, #72]	@ 0x48
 8004db8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004dba:	1b9b      	subs	r3, r3, r6
 8004dbc:	1e5a      	subs	r2, r3, #1
 8004dbe:	bf44      	itt	mi
 8004dc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8004dc4:	2300      	movmi	r3, #0
 8004dc6:	9208      	str	r2, [sp, #32]
 8004dc8:	bf54      	ite	pl
 8004dca:	f04f 0800 	movpl.w	r8, #0
 8004dce:	9308      	strmi	r3, [sp, #32]
 8004dd0:	2f00      	cmp	r7, #0
 8004dd2:	db39      	blt.n	8004e48 <_dtoa_r+0x218>
 8004dd4:	9b08      	ldr	r3, [sp, #32]
 8004dd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004dd8:	443b      	add	r3, r7
 8004dda:	9308      	str	r3, [sp, #32]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8004de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de2:	2b09      	cmp	r3, #9
 8004de4:	d864      	bhi.n	8004eb0 <_dtoa_r+0x280>
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	bfc4      	itt	gt
 8004dea:	3b04      	subgt	r3, #4
 8004dec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df0:	f1a3 0302 	sub.w	r3, r3, #2
 8004df4:	bfcc      	ite	gt
 8004df6:	2400      	movgt	r4, #0
 8004df8:	2401      	movle	r4, #1
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d863      	bhi.n	8004ec6 <_dtoa_r+0x296>
 8004dfe:	e8df f003 	tbb	[pc, r3]
 8004e02:	372a      	.short	0x372a
 8004e04:	5535      	.short	0x5535
 8004e06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004e0a:	441e      	add	r6, r3
 8004e0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	bfc1      	itttt	gt
 8004e14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004e18:	409f      	lslgt	r7, r3
 8004e1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004e1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e22:	bfd6      	itet	le
 8004e24:	f1c3 0320 	rsble	r3, r3, #32
 8004e28:	ea47 0003 	orrgt.w	r0, r7, r3
 8004e2c:	fa04 f003 	lslle.w	r0, r4, r3
 8004e30:	f7fb fb68 	bl	8000504 <__aeabi_ui2d>
 8004e34:	2201      	movs	r2, #1
 8004e36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e3a:	3e01      	subs	r6, #1
 8004e3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8004e3e:	e777      	b.n	8004d30 <_dtoa_r+0x100>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e7b8      	b.n	8004db6 <_dtoa_r+0x186>
 8004e44:	9012      	str	r0, [sp, #72]	@ 0x48
 8004e46:	e7b7      	b.n	8004db8 <_dtoa_r+0x188>
 8004e48:	427b      	negs	r3, r7
 8004e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	eba8 0807 	sub.w	r8, r8, r7
 8004e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e54:	e7c4      	b.n	8004de0 <_dtoa_r+0x1b0>
 8004e56:	2300      	movs	r3, #0
 8004e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	dc35      	bgt.n	8004ecc <_dtoa_r+0x29c>
 8004e60:	2301      	movs	r3, #1
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	9307      	str	r3, [sp, #28]
 8004e66:	461a      	mov	r2, r3
 8004e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e6a:	e00b      	b.n	8004e84 <_dtoa_r+0x254>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e7f3      	b.n	8004e58 <_dtoa_r+0x228>
 8004e70:	2300      	movs	r3, #0
 8004e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	9307      	str	r3, [sp, #28]
 8004e80:	bfb8      	it	lt
 8004e82:	2301      	movlt	r3, #1
 8004e84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	f102 0514 	add.w	r5, r2, #20
 8004e90:	429d      	cmp	r5, r3
 8004e92:	d91f      	bls.n	8004ed4 <_dtoa_r+0x2a4>
 8004e94:	6041      	str	r1, [r0, #4]
 8004e96:	4658      	mov	r0, fp
 8004e98:	f000 ff48 	bl	8005d2c <_Balloc>
 8004e9c:	4682      	mov	sl, r0
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d13c      	bne.n	8004f1c <_dtoa_r+0x2ec>
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <_dtoa_r+0x2e0>)
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004eaa:	e6d8      	b.n	8004c5e <_dtoa_r+0x2e>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e7e0      	b.n	8004e72 <_dtoa_r+0x242>
 8004eb0:	2401      	movs	r4, #1
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	9307      	str	r3, [sp, #28]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2312      	movs	r3, #18
 8004ec4:	e7d0      	b.n	8004e68 <_dtoa_r+0x238>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eca:	e7f5      	b.n	8004eb8 <_dtoa_r+0x288>
 8004ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	9307      	str	r3, [sp, #28]
 8004ed2:	e7d7      	b.n	8004e84 <_dtoa_r+0x254>
 8004ed4:	3101      	adds	r1, #1
 8004ed6:	0052      	lsls	r2, r2, #1
 8004ed8:	e7d8      	b.n	8004e8c <_dtoa_r+0x25c>
 8004eda:	bf00      	nop
 8004edc:	f3af 8000 	nop.w
 8004ee0:	636f4361 	.word	0x636f4361
 8004ee4:	3fd287a7 	.word	0x3fd287a7
 8004ee8:	8b60c8b3 	.word	0x8b60c8b3
 8004eec:	3fc68a28 	.word	0x3fc68a28
 8004ef0:	509f79fb 	.word	0x509f79fb
 8004ef4:	3fd34413 	.word	0x3fd34413
 8004ef8:	08006f14 	.word	0x08006f14
 8004efc:	08006f2b 	.word	0x08006f2b
 8004f00:	7ff00000 	.word	0x7ff00000
 8004f04:	08006ee4 	.word	0x08006ee4
 8004f08:	3ff80000 	.word	0x3ff80000
 8004f0c:	08007038 	.word	0x08007038
 8004f10:	08006f83 	.word	0x08006f83
 8004f14:	08006f10 	.word	0x08006f10
 8004f18:	08006ee3 	.word	0x08006ee3
 8004f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f20:	6018      	str	r0, [r3, #0]
 8004f22:	9b07      	ldr	r3, [sp, #28]
 8004f24:	2b0e      	cmp	r3, #14
 8004f26:	f200 80a4 	bhi.w	8005072 <_dtoa_r+0x442>
 8004f2a:	2c00      	cmp	r4, #0
 8004f2c:	f000 80a1 	beq.w	8005072 <_dtoa_r+0x442>
 8004f30:	2f00      	cmp	r7, #0
 8004f32:	dd33      	ble.n	8004f9c <_dtoa_r+0x36c>
 8004f34:	4bad      	ldr	r3, [pc, #692]	@ (80051ec <_dtoa_r+0x5bc>)
 8004f36:	f007 020f 	and.w	r2, r7, #15
 8004f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f3e:	ed93 7b00 	vldr	d7, [r3]
 8004f42:	05f8      	lsls	r0, r7, #23
 8004f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004f4c:	d516      	bpl.n	8004f7c <_dtoa_r+0x34c>
 8004f4e:	4ba8      	ldr	r3, [pc, #672]	@ (80051f0 <_dtoa_r+0x5c0>)
 8004f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f58:	f7fb fc78 	bl	800084c <__aeabi_ddiv>
 8004f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f60:	f004 040f 	and.w	r4, r4, #15
 8004f64:	2603      	movs	r6, #3
 8004f66:	4da2      	ldr	r5, [pc, #648]	@ (80051f0 <_dtoa_r+0x5c0>)
 8004f68:	b954      	cbnz	r4, 8004f80 <_dtoa_r+0x350>
 8004f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f72:	f7fb fc6b 	bl	800084c <__aeabi_ddiv>
 8004f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f7a:	e028      	b.n	8004fce <_dtoa_r+0x39e>
 8004f7c:	2602      	movs	r6, #2
 8004f7e:	e7f2      	b.n	8004f66 <_dtoa_r+0x336>
 8004f80:	07e1      	lsls	r1, r4, #31
 8004f82:	d508      	bpl.n	8004f96 <_dtoa_r+0x366>
 8004f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f8c:	f7fb fb34 	bl	80005f8 <__aeabi_dmul>
 8004f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f94:	3601      	adds	r6, #1
 8004f96:	1064      	asrs	r4, r4, #1
 8004f98:	3508      	adds	r5, #8
 8004f9a:	e7e5      	b.n	8004f68 <_dtoa_r+0x338>
 8004f9c:	f000 80d2 	beq.w	8005144 <_dtoa_r+0x514>
 8004fa0:	427c      	negs	r4, r7
 8004fa2:	4b92      	ldr	r3, [pc, #584]	@ (80051ec <_dtoa_r+0x5bc>)
 8004fa4:	4d92      	ldr	r5, [pc, #584]	@ (80051f0 <_dtoa_r+0x5c0>)
 8004fa6:	f004 020f 	and.w	r2, r4, #15
 8004faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fb6:	f7fb fb1f 	bl	80005f8 <__aeabi_dmul>
 8004fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fbe:	1124      	asrs	r4, r4, #4
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2602      	movs	r6, #2
 8004fc4:	2c00      	cmp	r4, #0
 8004fc6:	f040 80b2 	bne.w	800512e <_dtoa_r+0x4fe>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1d3      	bne.n	8004f76 <_dtoa_r+0x346>
 8004fce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004fd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80b7 	beq.w	8005148 <_dtoa_r+0x518>
 8004fda:	4b86      	ldr	r3, [pc, #536]	@ (80051f4 <_dtoa_r+0x5c4>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f7fb fd7b 	bl	8000adc <__aeabi_dcmplt>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f000 80ae 	beq.w	8005148 <_dtoa_r+0x518>
 8004fec:	9b07      	ldr	r3, [sp, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80aa 	beq.w	8005148 <_dtoa_r+0x518>
 8004ff4:	9b00      	ldr	r3, [sp, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	dd37      	ble.n	800506a <_dtoa_r+0x43a>
 8004ffa:	1e7b      	subs	r3, r7, #1
 8004ffc:	9304      	str	r3, [sp, #16]
 8004ffe:	4620      	mov	r0, r4
 8005000:	4b7d      	ldr	r3, [pc, #500]	@ (80051f8 <_dtoa_r+0x5c8>)
 8005002:	2200      	movs	r2, #0
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb faf7 	bl	80005f8 <__aeabi_dmul>
 800500a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800500e:	9c00      	ldr	r4, [sp, #0]
 8005010:	3601      	adds	r6, #1
 8005012:	4630      	mov	r0, r6
 8005014:	f7fb fa86 	bl	8000524 <__aeabi_i2d>
 8005018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800501c:	f7fb faec 	bl	80005f8 <__aeabi_dmul>
 8005020:	4b76      	ldr	r3, [pc, #472]	@ (80051fc <_dtoa_r+0x5cc>)
 8005022:	2200      	movs	r2, #0
 8005024:	f7fb f932 	bl	800028c <__adddf3>
 8005028:	4605      	mov	r5, r0
 800502a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800502e:	2c00      	cmp	r4, #0
 8005030:	f040 808d 	bne.w	800514e <_dtoa_r+0x51e>
 8005034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005038:	4b71      	ldr	r3, [pc, #452]	@ (8005200 <_dtoa_r+0x5d0>)
 800503a:	2200      	movs	r2, #0
 800503c:	f7fb f924 	bl	8000288 <__aeabi_dsub>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005048:	462a      	mov	r2, r5
 800504a:	4633      	mov	r3, r6
 800504c:	f7fb fd64 	bl	8000b18 <__aeabi_dcmpgt>
 8005050:	2800      	cmp	r0, #0
 8005052:	f040 828b 	bne.w	800556c <_dtoa_r+0x93c>
 8005056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800505a:	462a      	mov	r2, r5
 800505c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005060:	f7fb fd3c 	bl	8000adc <__aeabi_dcmplt>
 8005064:	2800      	cmp	r0, #0
 8005066:	f040 8128 	bne.w	80052ba <_dtoa_r+0x68a>
 800506a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800506e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005072:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005074:	2b00      	cmp	r3, #0
 8005076:	f2c0 815a 	blt.w	800532e <_dtoa_r+0x6fe>
 800507a:	2f0e      	cmp	r7, #14
 800507c:	f300 8157 	bgt.w	800532e <_dtoa_r+0x6fe>
 8005080:	4b5a      	ldr	r3, [pc, #360]	@ (80051ec <_dtoa_r+0x5bc>)
 8005082:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005086:	ed93 7b00 	vldr	d7, [r3]
 800508a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	ed8d 7b00 	vstr	d7, [sp]
 8005092:	da03      	bge.n	800509c <_dtoa_r+0x46c>
 8005094:	9b07      	ldr	r3, [sp, #28]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f340 8101 	ble.w	800529e <_dtoa_r+0x66e>
 800509c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80050a0:	4656      	mov	r6, sl
 80050a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050a6:	4620      	mov	r0, r4
 80050a8:	4629      	mov	r1, r5
 80050aa:	f7fb fbcf 	bl	800084c <__aeabi_ddiv>
 80050ae:	f7fb fd53 	bl	8000b58 <__aeabi_d2iz>
 80050b2:	4680      	mov	r8, r0
 80050b4:	f7fb fa36 	bl	8000524 <__aeabi_i2d>
 80050b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050bc:	f7fb fa9c 	bl	80005f8 <__aeabi_dmul>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4620      	mov	r0, r4
 80050c6:	4629      	mov	r1, r5
 80050c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80050cc:	f7fb f8dc 	bl	8000288 <__aeabi_dsub>
 80050d0:	f806 4b01 	strb.w	r4, [r6], #1
 80050d4:	9d07      	ldr	r5, [sp, #28]
 80050d6:	eba6 040a 	sub.w	r4, r6, sl
 80050da:	42a5      	cmp	r5, r4
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	f040 8117 	bne.w	8005312 <_dtoa_r+0x6e2>
 80050e4:	f7fb f8d2 	bl	800028c <__adddf3>
 80050e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050ec:	4604      	mov	r4, r0
 80050ee:	460d      	mov	r5, r1
 80050f0:	f7fb fd12 	bl	8000b18 <__aeabi_dcmpgt>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f040 80f9 	bne.w	80052ec <_dtoa_r+0x6bc>
 80050fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005106:	b118      	cbz	r0, 8005110 <_dtoa_r+0x4e0>
 8005108:	f018 0f01 	tst.w	r8, #1
 800510c:	f040 80ee 	bne.w	80052ec <_dtoa_r+0x6bc>
 8005110:	4649      	mov	r1, r9
 8005112:	4658      	mov	r0, fp
 8005114:	f000 fe4a 	bl	8005dac <_Bfree>
 8005118:	2300      	movs	r3, #0
 800511a:	7033      	strb	r3, [r6, #0]
 800511c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800511e:	3701      	adds	r7, #1
 8005120:	601f      	str	r7, [r3, #0]
 8005122:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 831d 	beq.w	8005764 <_dtoa_r+0xb34>
 800512a:	601e      	str	r6, [r3, #0]
 800512c:	e31a      	b.n	8005764 <_dtoa_r+0xb34>
 800512e:	07e2      	lsls	r2, r4, #31
 8005130:	d505      	bpl.n	800513e <_dtoa_r+0x50e>
 8005132:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005136:	f7fb fa5f 	bl	80005f8 <__aeabi_dmul>
 800513a:	3601      	adds	r6, #1
 800513c:	2301      	movs	r3, #1
 800513e:	1064      	asrs	r4, r4, #1
 8005140:	3508      	adds	r5, #8
 8005142:	e73f      	b.n	8004fc4 <_dtoa_r+0x394>
 8005144:	2602      	movs	r6, #2
 8005146:	e742      	b.n	8004fce <_dtoa_r+0x39e>
 8005148:	9c07      	ldr	r4, [sp, #28]
 800514a:	9704      	str	r7, [sp, #16]
 800514c:	e761      	b.n	8005012 <_dtoa_r+0x3e2>
 800514e:	4b27      	ldr	r3, [pc, #156]	@ (80051ec <_dtoa_r+0x5bc>)
 8005150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005152:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005156:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800515a:	4454      	add	r4, sl
 800515c:	2900      	cmp	r1, #0
 800515e:	d053      	beq.n	8005208 <_dtoa_r+0x5d8>
 8005160:	4928      	ldr	r1, [pc, #160]	@ (8005204 <_dtoa_r+0x5d4>)
 8005162:	2000      	movs	r0, #0
 8005164:	f7fb fb72 	bl	800084c <__aeabi_ddiv>
 8005168:	4633      	mov	r3, r6
 800516a:	462a      	mov	r2, r5
 800516c:	f7fb f88c 	bl	8000288 <__aeabi_dsub>
 8005170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005174:	4656      	mov	r6, sl
 8005176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800517a:	f7fb fced 	bl	8000b58 <__aeabi_d2iz>
 800517e:	4605      	mov	r5, r0
 8005180:	f7fb f9d0 	bl	8000524 <__aeabi_i2d>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800518c:	f7fb f87c 	bl	8000288 <__aeabi_dsub>
 8005190:	3530      	adds	r5, #48	@ 0x30
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800519a:	f806 5b01 	strb.w	r5, [r6], #1
 800519e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051a2:	f7fb fc9b 	bl	8000adc <__aeabi_dcmplt>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d171      	bne.n	800528e <_dtoa_r+0x65e>
 80051aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051ae:	4911      	ldr	r1, [pc, #68]	@ (80051f4 <_dtoa_r+0x5c4>)
 80051b0:	2000      	movs	r0, #0
 80051b2:	f7fb f869 	bl	8000288 <__aeabi_dsub>
 80051b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80051ba:	f7fb fc8f 	bl	8000adc <__aeabi_dcmplt>
 80051be:	2800      	cmp	r0, #0
 80051c0:	f040 8095 	bne.w	80052ee <_dtoa_r+0x6be>
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	f43f af50 	beq.w	800506a <_dtoa_r+0x43a>
 80051ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80051ce:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <_dtoa_r+0x5c8>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	f7fb fa11 	bl	80005f8 <__aeabi_dmul>
 80051d6:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <_dtoa_r+0x5c8>)
 80051d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051dc:	2200      	movs	r2, #0
 80051de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051e2:	f7fb fa09 	bl	80005f8 <__aeabi_dmul>
 80051e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ea:	e7c4      	b.n	8005176 <_dtoa_r+0x546>
 80051ec:	08007038 	.word	0x08007038
 80051f0:	08007010 	.word	0x08007010
 80051f4:	3ff00000 	.word	0x3ff00000
 80051f8:	40240000 	.word	0x40240000
 80051fc:	401c0000 	.word	0x401c0000
 8005200:	40140000 	.word	0x40140000
 8005204:	3fe00000 	.word	0x3fe00000
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	f7fb f9f4 	bl	80005f8 <__aeabi_dmul>
 8005210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005214:	9415      	str	r4, [sp, #84]	@ 0x54
 8005216:	4656      	mov	r6, sl
 8005218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800521c:	f7fb fc9c 	bl	8000b58 <__aeabi_d2iz>
 8005220:	4605      	mov	r5, r0
 8005222:	f7fb f97f 	bl	8000524 <__aeabi_i2d>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800522e:	f7fb f82b 	bl	8000288 <__aeabi_dsub>
 8005232:	3530      	adds	r5, #48	@ 0x30
 8005234:	f806 5b01 	strb.w	r5, [r6], #1
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	42a6      	cmp	r6, r4
 800523e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	d124      	bne.n	8005292 <_dtoa_r+0x662>
 8005248:	4bac      	ldr	r3, [pc, #688]	@ (80054fc <_dtoa_r+0x8cc>)
 800524a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800524e:	f7fb f81d 	bl	800028c <__adddf3>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800525a:	f7fb fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800525e:	2800      	cmp	r0, #0
 8005260:	d145      	bne.n	80052ee <_dtoa_r+0x6be>
 8005262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005266:	49a5      	ldr	r1, [pc, #660]	@ (80054fc <_dtoa_r+0x8cc>)
 8005268:	2000      	movs	r0, #0
 800526a:	f7fb f80d 	bl	8000288 <__aeabi_dsub>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005276:	f7fb fc31 	bl	8000adc <__aeabi_dcmplt>
 800527a:	2800      	cmp	r0, #0
 800527c:	f43f aef5 	beq.w	800506a <_dtoa_r+0x43a>
 8005280:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005282:	1e73      	subs	r3, r6, #1
 8005284:	9315      	str	r3, [sp, #84]	@ 0x54
 8005286:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800528a:	2b30      	cmp	r3, #48	@ 0x30
 800528c:	d0f8      	beq.n	8005280 <_dtoa_r+0x650>
 800528e:	9f04      	ldr	r7, [sp, #16]
 8005290:	e73e      	b.n	8005110 <_dtoa_r+0x4e0>
 8005292:	4b9b      	ldr	r3, [pc, #620]	@ (8005500 <_dtoa_r+0x8d0>)
 8005294:	f7fb f9b0 	bl	80005f8 <__aeabi_dmul>
 8005298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800529c:	e7bc      	b.n	8005218 <_dtoa_r+0x5e8>
 800529e:	d10c      	bne.n	80052ba <_dtoa_r+0x68a>
 80052a0:	4b98      	ldr	r3, [pc, #608]	@ (8005504 <_dtoa_r+0x8d4>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052a8:	f7fb f9a6 	bl	80005f8 <__aeabi_dmul>
 80052ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052b0:	f7fb fc28 	bl	8000b04 <__aeabi_dcmpge>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f000 8157 	beq.w	8005568 <_dtoa_r+0x938>
 80052ba:	2400      	movs	r4, #0
 80052bc:	4625      	mov	r5, r4
 80052be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052c0:	43db      	mvns	r3, r3
 80052c2:	9304      	str	r3, [sp, #16]
 80052c4:	4656      	mov	r6, sl
 80052c6:	2700      	movs	r7, #0
 80052c8:	4621      	mov	r1, r4
 80052ca:	4658      	mov	r0, fp
 80052cc:	f000 fd6e 	bl	8005dac <_Bfree>
 80052d0:	2d00      	cmp	r5, #0
 80052d2:	d0dc      	beq.n	800528e <_dtoa_r+0x65e>
 80052d4:	b12f      	cbz	r7, 80052e2 <_dtoa_r+0x6b2>
 80052d6:	42af      	cmp	r7, r5
 80052d8:	d003      	beq.n	80052e2 <_dtoa_r+0x6b2>
 80052da:	4639      	mov	r1, r7
 80052dc:	4658      	mov	r0, fp
 80052de:	f000 fd65 	bl	8005dac <_Bfree>
 80052e2:	4629      	mov	r1, r5
 80052e4:	4658      	mov	r0, fp
 80052e6:	f000 fd61 	bl	8005dac <_Bfree>
 80052ea:	e7d0      	b.n	800528e <_dtoa_r+0x65e>
 80052ec:	9704      	str	r7, [sp, #16]
 80052ee:	4633      	mov	r3, r6
 80052f0:	461e      	mov	r6, r3
 80052f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052f6:	2a39      	cmp	r2, #57	@ 0x39
 80052f8:	d107      	bne.n	800530a <_dtoa_r+0x6da>
 80052fa:	459a      	cmp	sl, r3
 80052fc:	d1f8      	bne.n	80052f0 <_dtoa_r+0x6c0>
 80052fe:	9a04      	ldr	r2, [sp, #16]
 8005300:	3201      	adds	r2, #1
 8005302:	9204      	str	r2, [sp, #16]
 8005304:	2230      	movs	r2, #48	@ 0x30
 8005306:	f88a 2000 	strb.w	r2, [sl]
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	3201      	adds	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e7bd      	b.n	800528e <_dtoa_r+0x65e>
 8005312:	4b7b      	ldr	r3, [pc, #492]	@ (8005500 <_dtoa_r+0x8d0>)
 8005314:	2200      	movs	r2, #0
 8005316:	f7fb f96f 	bl	80005f8 <__aeabi_dmul>
 800531a:	2200      	movs	r2, #0
 800531c:	2300      	movs	r3, #0
 800531e:	4604      	mov	r4, r0
 8005320:	460d      	mov	r5, r1
 8005322:	f7fb fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005326:	2800      	cmp	r0, #0
 8005328:	f43f aebb 	beq.w	80050a2 <_dtoa_r+0x472>
 800532c:	e6f0      	b.n	8005110 <_dtoa_r+0x4e0>
 800532e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005330:	2a00      	cmp	r2, #0
 8005332:	f000 80db 	beq.w	80054ec <_dtoa_r+0x8bc>
 8005336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005338:	2a01      	cmp	r2, #1
 800533a:	f300 80bf 	bgt.w	80054bc <_dtoa_r+0x88c>
 800533e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005340:	2a00      	cmp	r2, #0
 8005342:	f000 80b7 	beq.w	80054b4 <_dtoa_r+0x884>
 8005346:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800534a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800534c:	4646      	mov	r6, r8
 800534e:	9a08      	ldr	r2, [sp, #32]
 8005350:	2101      	movs	r1, #1
 8005352:	441a      	add	r2, r3
 8005354:	4658      	mov	r0, fp
 8005356:	4498      	add	r8, r3
 8005358:	9208      	str	r2, [sp, #32]
 800535a:	f000 fddb 	bl	8005f14 <__i2b>
 800535e:	4605      	mov	r5, r0
 8005360:	b15e      	cbz	r6, 800537a <_dtoa_r+0x74a>
 8005362:	9b08      	ldr	r3, [sp, #32]
 8005364:	2b00      	cmp	r3, #0
 8005366:	dd08      	ble.n	800537a <_dtoa_r+0x74a>
 8005368:	42b3      	cmp	r3, r6
 800536a:	9a08      	ldr	r2, [sp, #32]
 800536c:	bfa8      	it	ge
 800536e:	4633      	movge	r3, r6
 8005370:	eba8 0803 	sub.w	r8, r8, r3
 8005374:	1af6      	subs	r6, r6, r3
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	9308      	str	r3, [sp, #32]
 800537a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800537c:	b1f3      	cbz	r3, 80053bc <_dtoa_r+0x78c>
 800537e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80b7 	beq.w	80054f4 <_dtoa_r+0x8c4>
 8005386:	b18c      	cbz	r4, 80053ac <_dtoa_r+0x77c>
 8005388:	4629      	mov	r1, r5
 800538a:	4622      	mov	r2, r4
 800538c:	4658      	mov	r0, fp
 800538e:	f000 fe81 	bl	8006094 <__pow5mult>
 8005392:	464a      	mov	r2, r9
 8005394:	4601      	mov	r1, r0
 8005396:	4605      	mov	r5, r0
 8005398:	4658      	mov	r0, fp
 800539a:	f000 fdd1 	bl	8005f40 <__multiply>
 800539e:	4649      	mov	r1, r9
 80053a0:	9004      	str	r0, [sp, #16]
 80053a2:	4658      	mov	r0, fp
 80053a4:	f000 fd02 	bl	8005dac <_Bfree>
 80053a8:	9b04      	ldr	r3, [sp, #16]
 80053aa:	4699      	mov	r9, r3
 80053ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053ae:	1b1a      	subs	r2, r3, r4
 80053b0:	d004      	beq.n	80053bc <_dtoa_r+0x78c>
 80053b2:	4649      	mov	r1, r9
 80053b4:	4658      	mov	r0, fp
 80053b6:	f000 fe6d 	bl	8006094 <__pow5mult>
 80053ba:	4681      	mov	r9, r0
 80053bc:	2101      	movs	r1, #1
 80053be:	4658      	mov	r0, fp
 80053c0:	f000 fda8 	bl	8005f14 <__i2b>
 80053c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053c6:	4604      	mov	r4, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 81cf 	beq.w	800576c <_dtoa_r+0xb3c>
 80053ce:	461a      	mov	r2, r3
 80053d0:	4601      	mov	r1, r0
 80053d2:	4658      	mov	r0, fp
 80053d4:	f000 fe5e 	bl	8006094 <__pow5mult>
 80053d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053da:	2b01      	cmp	r3, #1
 80053dc:	4604      	mov	r4, r0
 80053de:	f300 8095 	bgt.w	800550c <_dtoa_r+0x8dc>
 80053e2:	9b02      	ldr	r3, [sp, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 8087 	bne.w	80054f8 <_dtoa_r+0x8c8>
 80053ea:	9b03      	ldr	r3, [sp, #12]
 80053ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 8089 	bne.w	8005508 <_dtoa_r+0x8d8>
 80053f6:	9b03      	ldr	r3, [sp, #12]
 80053f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053fc:	0d1b      	lsrs	r3, r3, #20
 80053fe:	051b      	lsls	r3, r3, #20
 8005400:	b12b      	cbz	r3, 800540e <_dtoa_r+0x7de>
 8005402:	9b08      	ldr	r3, [sp, #32]
 8005404:	3301      	adds	r3, #1
 8005406:	9308      	str	r3, [sp, #32]
 8005408:	f108 0801 	add.w	r8, r8, #1
 800540c:	2301      	movs	r3, #1
 800540e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 81b0 	beq.w	8005778 <_dtoa_r+0xb48>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800541e:	6918      	ldr	r0, [r3, #16]
 8005420:	f000 fd2c 	bl	8005e7c <__hi0bits>
 8005424:	f1c0 0020 	rsb	r0, r0, #32
 8005428:	9b08      	ldr	r3, [sp, #32]
 800542a:	4418      	add	r0, r3
 800542c:	f010 001f 	ands.w	r0, r0, #31
 8005430:	d077      	beq.n	8005522 <_dtoa_r+0x8f2>
 8005432:	f1c0 0320 	rsb	r3, r0, #32
 8005436:	2b04      	cmp	r3, #4
 8005438:	dd6b      	ble.n	8005512 <_dtoa_r+0x8e2>
 800543a:	9b08      	ldr	r3, [sp, #32]
 800543c:	f1c0 001c 	rsb	r0, r0, #28
 8005440:	4403      	add	r3, r0
 8005442:	4480      	add	r8, r0
 8005444:	4406      	add	r6, r0
 8005446:	9308      	str	r3, [sp, #32]
 8005448:	f1b8 0f00 	cmp.w	r8, #0
 800544c:	dd05      	ble.n	800545a <_dtoa_r+0x82a>
 800544e:	4649      	mov	r1, r9
 8005450:	4642      	mov	r2, r8
 8005452:	4658      	mov	r0, fp
 8005454:	f000 fe78 	bl	8006148 <__lshift>
 8005458:	4681      	mov	r9, r0
 800545a:	9b08      	ldr	r3, [sp, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dd05      	ble.n	800546c <_dtoa_r+0x83c>
 8005460:	4621      	mov	r1, r4
 8005462:	461a      	mov	r2, r3
 8005464:	4658      	mov	r0, fp
 8005466:	f000 fe6f 	bl	8006148 <__lshift>
 800546a:	4604      	mov	r4, r0
 800546c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800546e:	2b00      	cmp	r3, #0
 8005470:	d059      	beq.n	8005526 <_dtoa_r+0x8f6>
 8005472:	4621      	mov	r1, r4
 8005474:	4648      	mov	r0, r9
 8005476:	f000 fed3 	bl	8006220 <__mcmp>
 800547a:	2800      	cmp	r0, #0
 800547c:	da53      	bge.n	8005526 <_dtoa_r+0x8f6>
 800547e:	1e7b      	subs	r3, r7, #1
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	4649      	mov	r1, r9
 8005484:	2300      	movs	r3, #0
 8005486:	220a      	movs	r2, #10
 8005488:	4658      	mov	r0, fp
 800548a:	f000 fcb1 	bl	8005df0 <__multadd>
 800548e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005490:	4681      	mov	r9, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8172 	beq.w	800577c <_dtoa_r+0xb4c>
 8005498:	2300      	movs	r3, #0
 800549a:	4629      	mov	r1, r5
 800549c:	220a      	movs	r2, #10
 800549e:	4658      	mov	r0, fp
 80054a0:	f000 fca6 	bl	8005df0 <__multadd>
 80054a4:	9b00      	ldr	r3, [sp, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	4605      	mov	r5, r0
 80054aa:	dc67      	bgt.n	800557c <_dtoa_r+0x94c>
 80054ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	dc41      	bgt.n	8005536 <_dtoa_r+0x906>
 80054b2:	e063      	b.n	800557c <_dtoa_r+0x94c>
 80054b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80054b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80054ba:	e746      	b.n	800534a <_dtoa_r+0x71a>
 80054bc:	9b07      	ldr	r3, [sp, #28]
 80054be:	1e5c      	subs	r4, r3, #1
 80054c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054c2:	42a3      	cmp	r3, r4
 80054c4:	bfbf      	itttt	lt
 80054c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80054c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80054ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80054cc:	1ae3      	sublt	r3, r4, r3
 80054ce:	bfb4      	ite	lt
 80054d0:	18d2      	addlt	r2, r2, r3
 80054d2:	1b1c      	subge	r4, r3, r4
 80054d4:	9b07      	ldr	r3, [sp, #28]
 80054d6:	bfbc      	itt	lt
 80054d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80054da:	2400      	movlt	r4, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bfb5      	itete	lt
 80054e0:	eba8 0603 	sublt.w	r6, r8, r3
 80054e4:	9b07      	ldrge	r3, [sp, #28]
 80054e6:	2300      	movlt	r3, #0
 80054e8:	4646      	movge	r6, r8
 80054ea:	e730      	b.n	800534e <_dtoa_r+0x71e>
 80054ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80054f0:	4646      	mov	r6, r8
 80054f2:	e735      	b.n	8005360 <_dtoa_r+0x730>
 80054f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054f6:	e75c      	b.n	80053b2 <_dtoa_r+0x782>
 80054f8:	2300      	movs	r3, #0
 80054fa:	e788      	b.n	800540e <_dtoa_r+0x7de>
 80054fc:	3fe00000 	.word	0x3fe00000
 8005500:	40240000 	.word	0x40240000
 8005504:	40140000 	.word	0x40140000
 8005508:	9b02      	ldr	r3, [sp, #8]
 800550a:	e780      	b.n	800540e <_dtoa_r+0x7de>
 800550c:	2300      	movs	r3, #0
 800550e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005510:	e782      	b.n	8005418 <_dtoa_r+0x7e8>
 8005512:	d099      	beq.n	8005448 <_dtoa_r+0x818>
 8005514:	9a08      	ldr	r2, [sp, #32]
 8005516:	331c      	adds	r3, #28
 8005518:	441a      	add	r2, r3
 800551a:	4498      	add	r8, r3
 800551c:	441e      	add	r6, r3
 800551e:	9208      	str	r2, [sp, #32]
 8005520:	e792      	b.n	8005448 <_dtoa_r+0x818>
 8005522:	4603      	mov	r3, r0
 8005524:	e7f6      	b.n	8005514 <_dtoa_r+0x8e4>
 8005526:	9b07      	ldr	r3, [sp, #28]
 8005528:	9704      	str	r7, [sp, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	dc20      	bgt.n	8005570 <_dtoa_r+0x940>
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005532:	2b02      	cmp	r3, #2
 8005534:	dd1e      	ble.n	8005574 <_dtoa_r+0x944>
 8005536:	9b00      	ldr	r3, [sp, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f47f aec0 	bne.w	80052be <_dtoa_r+0x68e>
 800553e:	4621      	mov	r1, r4
 8005540:	2205      	movs	r2, #5
 8005542:	4658      	mov	r0, fp
 8005544:	f000 fc54 	bl	8005df0 <__multadd>
 8005548:	4601      	mov	r1, r0
 800554a:	4604      	mov	r4, r0
 800554c:	4648      	mov	r0, r9
 800554e:	f000 fe67 	bl	8006220 <__mcmp>
 8005552:	2800      	cmp	r0, #0
 8005554:	f77f aeb3 	ble.w	80052be <_dtoa_r+0x68e>
 8005558:	4656      	mov	r6, sl
 800555a:	2331      	movs	r3, #49	@ 0x31
 800555c:	f806 3b01 	strb.w	r3, [r6], #1
 8005560:	9b04      	ldr	r3, [sp, #16]
 8005562:	3301      	adds	r3, #1
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	e6ae      	b.n	80052c6 <_dtoa_r+0x696>
 8005568:	9c07      	ldr	r4, [sp, #28]
 800556a:	9704      	str	r7, [sp, #16]
 800556c:	4625      	mov	r5, r4
 800556e:	e7f3      	b.n	8005558 <_dtoa_r+0x928>
 8005570:	9b07      	ldr	r3, [sp, #28]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 8104 	beq.w	8005784 <_dtoa_r+0xb54>
 800557c:	2e00      	cmp	r6, #0
 800557e:	dd05      	ble.n	800558c <_dtoa_r+0x95c>
 8005580:	4629      	mov	r1, r5
 8005582:	4632      	mov	r2, r6
 8005584:	4658      	mov	r0, fp
 8005586:	f000 fddf 	bl	8006148 <__lshift>
 800558a:	4605      	mov	r5, r0
 800558c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	d05a      	beq.n	8005648 <_dtoa_r+0xa18>
 8005592:	6869      	ldr	r1, [r5, #4]
 8005594:	4658      	mov	r0, fp
 8005596:	f000 fbc9 	bl	8005d2c <_Balloc>
 800559a:	4606      	mov	r6, r0
 800559c:	b928      	cbnz	r0, 80055aa <_dtoa_r+0x97a>
 800559e:	4b84      	ldr	r3, [pc, #528]	@ (80057b0 <_dtoa_r+0xb80>)
 80055a0:	4602      	mov	r2, r0
 80055a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80055a6:	f7ff bb5a 	b.w	8004c5e <_dtoa_r+0x2e>
 80055aa:	692a      	ldr	r2, [r5, #16]
 80055ac:	3202      	adds	r2, #2
 80055ae:	0092      	lsls	r2, r2, #2
 80055b0:	f105 010c 	add.w	r1, r5, #12
 80055b4:	300c      	adds	r0, #12
 80055b6:	f7ff faa4 	bl	8004b02 <memcpy>
 80055ba:	2201      	movs	r2, #1
 80055bc:	4631      	mov	r1, r6
 80055be:	4658      	mov	r0, fp
 80055c0:	f000 fdc2 	bl	8006148 <__lshift>
 80055c4:	f10a 0301 	add.w	r3, sl, #1
 80055c8:	9307      	str	r3, [sp, #28]
 80055ca:	9b00      	ldr	r3, [sp, #0]
 80055cc:	4453      	add	r3, sl
 80055ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055d0:	9b02      	ldr	r3, [sp, #8]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	462f      	mov	r7, r5
 80055d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80055da:	4605      	mov	r5, r0
 80055dc:	9b07      	ldr	r3, [sp, #28]
 80055de:	4621      	mov	r1, r4
 80055e0:	3b01      	subs	r3, #1
 80055e2:	4648      	mov	r0, r9
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	f7ff fa9a 	bl	8004b1e <quorem>
 80055ea:	4639      	mov	r1, r7
 80055ec:	9002      	str	r0, [sp, #8]
 80055ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80055f2:	4648      	mov	r0, r9
 80055f4:	f000 fe14 	bl	8006220 <__mcmp>
 80055f8:	462a      	mov	r2, r5
 80055fa:	9008      	str	r0, [sp, #32]
 80055fc:	4621      	mov	r1, r4
 80055fe:	4658      	mov	r0, fp
 8005600:	f000 fe2a 	bl	8006258 <__mdiff>
 8005604:	68c2      	ldr	r2, [r0, #12]
 8005606:	4606      	mov	r6, r0
 8005608:	bb02      	cbnz	r2, 800564c <_dtoa_r+0xa1c>
 800560a:	4601      	mov	r1, r0
 800560c:	4648      	mov	r0, r9
 800560e:	f000 fe07 	bl	8006220 <__mcmp>
 8005612:	4602      	mov	r2, r0
 8005614:	4631      	mov	r1, r6
 8005616:	4658      	mov	r0, fp
 8005618:	920e      	str	r2, [sp, #56]	@ 0x38
 800561a:	f000 fbc7 	bl	8005dac <_Bfree>
 800561e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005622:	9e07      	ldr	r6, [sp, #28]
 8005624:	ea43 0102 	orr.w	r1, r3, r2
 8005628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800562a:	4319      	orrs	r1, r3
 800562c:	d110      	bne.n	8005650 <_dtoa_r+0xa20>
 800562e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005632:	d029      	beq.n	8005688 <_dtoa_r+0xa58>
 8005634:	9b08      	ldr	r3, [sp, #32]
 8005636:	2b00      	cmp	r3, #0
 8005638:	dd02      	ble.n	8005640 <_dtoa_r+0xa10>
 800563a:	9b02      	ldr	r3, [sp, #8]
 800563c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005640:	9b00      	ldr	r3, [sp, #0]
 8005642:	f883 8000 	strb.w	r8, [r3]
 8005646:	e63f      	b.n	80052c8 <_dtoa_r+0x698>
 8005648:	4628      	mov	r0, r5
 800564a:	e7bb      	b.n	80055c4 <_dtoa_r+0x994>
 800564c:	2201      	movs	r2, #1
 800564e:	e7e1      	b.n	8005614 <_dtoa_r+0x9e4>
 8005650:	9b08      	ldr	r3, [sp, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	db04      	blt.n	8005660 <_dtoa_r+0xa30>
 8005656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005658:	430b      	orrs	r3, r1
 800565a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800565c:	430b      	orrs	r3, r1
 800565e:	d120      	bne.n	80056a2 <_dtoa_r+0xa72>
 8005660:	2a00      	cmp	r2, #0
 8005662:	dded      	ble.n	8005640 <_dtoa_r+0xa10>
 8005664:	4649      	mov	r1, r9
 8005666:	2201      	movs	r2, #1
 8005668:	4658      	mov	r0, fp
 800566a:	f000 fd6d 	bl	8006148 <__lshift>
 800566e:	4621      	mov	r1, r4
 8005670:	4681      	mov	r9, r0
 8005672:	f000 fdd5 	bl	8006220 <__mcmp>
 8005676:	2800      	cmp	r0, #0
 8005678:	dc03      	bgt.n	8005682 <_dtoa_r+0xa52>
 800567a:	d1e1      	bne.n	8005640 <_dtoa_r+0xa10>
 800567c:	f018 0f01 	tst.w	r8, #1
 8005680:	d0de      	beq.n	8005640 <_dtoa_r+0xa10>
 8005682:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005686:	d1d8      	bne.n	800563a <_dtoa_r+0xa0a>
 8005688:	9a00      	ldr	r2, [sp, #0]
 800568a:	2339      	movs	r3, #57	@ 0x39
 800568c:	7013      	strb	r3, [r2, #0]
 800568e:	4633      	mov	r3, r6
 8005690:	461e      	mov	r6, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005698:	2a39      	cmp	r2, #57	@ 0x39
 800569a:	d052      	beq.n	8005742 <_dtoa_r+0xb12>
 800569c:	3201      	adds	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e612      	b.n	80052c8 <_dtoa_r+0x698>
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	dd07      	ble.n	80056b6 <_dtoa_r+0xa86>
 80056a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80056aa:	d0ed      	beq.n	8005688 <_dtoa_r+0xa58>
 80056ac:	9a00      	ldr	r2, [sp, #0]
 80056ae:	f108 0301 	add.w	r3, r8, #1
 80056b2:	7013      	strb	r3, [r2, #0]
 80056b4:	e608      	b.n	80052c8 <_dtoa_r+0x698>
 80056b6:	9b07      	ldr	r3, [sp, #28]
 80056b8:	9a07      	ldr	r2, [sp, #28]
 80056ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80056be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d028      	beq.n	8005716 <_dtoa_r+0xae6>
 80056c4:	4649      	mov	r1, r9
 80056c6:	2300      	movs	r3, #0
 80056c8:	220a      	movs	r2, #10
 80056ca:	4658      	mov	r0, fp
 80056cc:	f000 fb90 	bl	8005df0 <__multadd>
 80056d0:	42af      	cmp	r7, r5
 80056d2:	4681      	mov	r9, r0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	f04f 020a 	mov.w	r2, #10
 80056dc:	4639      	mov	r1, r7
 80056de:	4658      	mov	r0, fp
 80056e0:	d107      	bne.n	80056f2 <_dtoa_r+0xac2>
 80056e2:	f000 fb85 	bl	8005df0 <__multadd>
 80056e6:	4607      	mov	r7, r0
 80056e8:	4605      	mov	r5, r0
 80056ea:	9b07      	ldr	r3, [sp, #28]
 80056ec:	3301      	adds	r3, #1
 80056ee:	9307      	str	r3, [sp, #28]
 80056f0:	e774      	b.n	80055dc <_dtoa_r+0x9ac>
 80056f2:	f000 fb7d 	bl	8005df0 <__multadd>
 80056f6:	4629      	mov	r1, r5
 80056f8:	4607      	mov	r7, r0
 80056fa:	2300      	movs	r3, #0
 80056fc:	220a      	movs	r2, #10
 80056fe:	4658      	mov	r0, fp
 8005700:	f000 fb76 	bl	8005df0 <__multadd>
 8005704:	4605      	mov	r5, r0
 8005706:	e7f0      	b.n	80056ea <_dtoa_r+0xaba>
 8005708:	9b00      	ldr	r3, [sp, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	bfcc      	ite	gt
 800570e:	461e      	movgt	r6, r3
 8005710:	2601      	movle	r6, #1
 8005712:	4456      	add	r6, sl
 8005714:	2700      	movs	r7, #0
 8005716:	4649      	mov	r1, r9
 8005718:	2201      	movs	r2, #1
 800571a:	4658      	mov	r0, fp
 800571c:	f000 fd14 	bl	8006148 <__lshift>
 8005720:	4621      	mov	r1, r4
 8005722:	4681      	mov	r9, r0
 8005724:	f000 fd7c 	bl	8006220 <__mcmp>
 8005728:	2800      	cmp	r0, #0
 800572a:	dcb0      	bgt.n	800568e <_dtoa_r+0xa5e>
 800572c:	d102      	bne.n	8005734 <_dtoa_r+0xb04>
 800572e:	f018 0f01 	tst.w	r8, #1
 8005732:	d1ac      	bne.n	800568e <_dtoa_r+0xa5e>
 8005734:	4633      	mov	r3, r6
 8005736:	461e      	mov	r6, r3
 8005738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800573c:	2a30      	cmp	r2, #48	@ 0x30
 800573e:	d0fa      	beq.n	8005736 <_dtoa_r+0xb06>
 8005740:	e5c2      	b.n	80052c8 <_dtoa_r+0x698>
 8005742:	459a      	cmp	sl, r3
 8005744:	d1a4      	bne.n	8005690 <_dtoa_r+0xa60>
 8005746:	9b04      	ldr	r3, [sp, #16]
 8005748:	3301      	adds	r3, #1
 800574a:	9304      	str	r3, [sp, #16]
 800574c:	2331      	movs	r3, #49	@ 0x31
 800574e:	f88a 3000 	strb.w	r3, [sl]
 8005752:	e5b9      	b.n	80052c8 <_dtoa_r+0x698>
 8005754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005756:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80057b4 <_dtoa_r+0xb84>
 800575a:	b11b      	cbz	r3, 8005764 <_dtoa_r+0xb34>
 800575c:	f10a 0308 	add.w	r3, sl, #8
 8005760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4650      	mov	r0, sl
 8005766:	b019      	add	sp, #100	@ 0x64
 8005768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800576e:	2b01      	cmp	r3, #1
 8005770:	f77f ae37 	ble.w	80053e2 <_dtoa_r+0x7b2>
 8005774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005776:	930a      	str	r3, [sp, #40]	@ 0x28
 8005778:	2001      	movs	r0, #1
 800577a:	e655      	b.n	8005428 <_dtoa_r+0x7f8>
 800577c:	9b00      	ldr	r3, [sp, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f77f aed6 	ble.w	8005530 <_dtoa_r+0x900>
 8005784:	4656      	mov	r6, sl
 8005786:	4621      	mov	r1, r4
 8005788:	4648      	mov	r0, r9
 800578a:	f7ff f9c8 	bl	8004b1e <quorem>
 800578e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005792:	f806 8b01 	strb.w	r8, [r6], #1
 8005796:	9b00      	ldr	r3, [sp, #0]
 8005798:	eba6 020a 	sub.w	r2, r6, sl
 800579c:	4293      	cmp	r3, r2
 800579e:	ddb3      	ble.n	8005708 <_dtoa_r+0xad8>
 80057a0:	4649      	mov	r1, r9
 80057a2:	2300      	movs	r3, #0
 80057a4:	220a      	movs	r2, #10
 80057a6:	4658      	mov	r0, fp
 80057a8:	f000 fb22 	bl	8005df0 <__multadd>
 80057ac:	4681      	mov	r9, r0
 80057ae:	e7ea      	b.n	8005786 <_dtoa_r+0xb56>
 80057b0:	08006f83 	.word	0x08006f83
 80057b4:	08006f07 	.word	0x08006f07

080057b8 <__ssputs_r>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	688e      	ldr	r6, [r1, #8]
 80057be:	461f      	mov	r7, r3
 80057c0:	42be      	cmp	r6, r7
 80057c2:	680b      	ldr	r3, [r1, #0]
 80057c4:	4682      	mov	sl, r0
 80057c6:	460c      	mov	r4, r1
 80057c8:	4690      	mov	r8, r2
 80057ca:	d82d      	bhi.n	8005828 <__ssputs_r+0x70>
 80057cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057d4:	d026      	beq.n	8005824 <__ssputs_r+0x6c>
 80057d6:	6965      	ldr	r5, [r4, #20]
 80057d8:	6909      	ldr	r1, [r1, #16]
 80057da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057de:	eba3 0901 	sub.w	r9, r3, r1
 80057e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057e6:	1c7b      	adds	r3, r7, #1
 80057e8:	444b      	add	r3, r9
 80057ea:	106d      	asrs	r5, r5, #1
 80057ec:	429d      	cmp	r5, r3
 80057ee:	bf38      	it	cc
 80057f0:	461d      	movcc	r5, r3
 80057f2:	0553      	lsls	r3, r2, #21
 80057f4:	d527      	bpl.n	8005846 <__ssputs_r+0x8e>
 80057f6:	4629      	mov	r1, r5
 80057f8:	f000 f960 	bl	8005abc <_malloc_r>
 80057fc:	4606      	mov	r6, r0
 80057fe:	b360      	cbz	r0, 800585a <__ssputs_r+0xa2>
 8005800:	6921      	ldr	r1, [r4, #16]
 8005802:	464a      	mov	r2, r9
 8005804:	f7ff f97d 	bl	8004b02 <memcpy>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800580e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	6126      	str	r6, [r4, #16]
 8005816:	6165      	str	r5, [r4, #20]
 8005818:	444e      	add	r6, r9
 800581a:	eba5 0509 	sub.w	r5, r5, r9
 800581e:	6026      	str	r6, [r4, #0]
 8005820:	60a5      	str	r5, [r4, #8]
 8005822:	463e      	mov	r6, r7
 8005824:	42be      	cmp	r6, r7
 8005826:	d900      	bls.n	800582a <__ssputs_r+0x72>
 8005828:	463e      	mov	r6, r7
 800582a:	6820      	ldr	r0, [r4, #0]
 800582c:	4632      	mov	r2, r6
 800582e:	4641      	mov	r1, r8
 8005830:	f000 fe6f 	bl	8006512 <memmove>
 8005834:	68a3      	ldr	r3, [r4, #8]
 8005836:	1b9b      	subs	r3, r3, r6
 8005838:	60a3      	str	r3, [r4, #8]
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	4433      	add	r3, r6
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	2000      	movs	r0, #0
 8005842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005846:	462a      	mov	r2, r5
 8005848:	f000 fe35 	bl	80064b6 <_realloc_r>
 800584c:	4606      	mov	r6, r0
 800584e:	2800      	cmp	r0, #0
 8005850:	d1e0      	bne.n	8005814 <__ssputs_r+0x5c>
 8005852:	6921      	ldr	r1, [r4, #16]
 8005854:	4650      	mov	r0, sl
 8005856:	f000 feff 	bl	8006658 <_free_r>
 800585a:	230c      	movs	r3, #12
 800585c:	f8ca 3000 	str.w	r3, [sl]
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800586c:	e7e9      	b.n	8005842 <__ssputs_r+0x8a>
	...

08005870 <_svfiprintf_r>:
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	4698      	mov	r8, r3
 8005876:	898b      	ldrh	r3, [r1, #12]
 8005878:	061b      	lsls	r3, r3, #24
 800587a:	b09d      	sub	sp, #116	@ 0x74
 800587c:	4607      	mov	r7, r0
 800587e:	460d      	mov	r5, r1
 8005880:	4614      	mov	r4, r2
 8005882:	d510      	bpl.n	80058a6 <_svfiprintf_r+0x36>
 8005884:	690b      	ldr	r3, [r1, #16]
 8005886:	b973      	cbnz	r3, 80058a6 <_svfiprintf_r+0x36>
 8005888:	2140      	movs	r1, #64	@ 0x40
 800588a:	f000 f917 	bl	8005abc <_malloc_r>
 800588e:	6028      	str	r0, [r5, #0]
 8005890:	6128      	str	r0, [r5, #16]
 8005892:	b930      	cbnz	r0, 80058a2 <_svfiprintf_r+0x32>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800589c:	b01d      	add	sp, #116	@ 0x74
 800589e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a2:	2340      	movs	r3, #64	@ 0x40
 80058a4:	616b      	str	r3, [r5, #20]
 80058a6:	2300      	movs	r3, #0
 80058a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80058aa:	2320      	movs	r3, #32
 80058ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058b4:	2330      	movs	r3, #48	@ 0x30
 80058b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a54 <_svfiprintf_r+0x1e4>
 80058ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058be:	f04f 0901 	mov.w	r9, #1
 80058c2:	4623      	mov	r3, r4
 80058c4:	469a      	mov	sl, r3
 80058c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ca:	b10a      	cbz	r2, 80058d0 <_svfiprintf_r+0x60>
 80058cc:	2a25      	cmp	r2, #37	@ 0x25
 80058ce:	d1f9      	bne.n	80058c4 <_svfiprintf_r+0x54>
 80058d0:	ebba 0b04 	subs.w	fp, sl, r4
 80058d4:	d00b      	beq.n	80058ee <_svfiprintf_r+0x7e>
 80058d6:	465b      	mov	r3, fp
 80058d8:	4622      	mov	r2, r4
 80058da:	4629      	mov	r1, r5
 80058dc:	4638      	mov	r0, r7
 80058de:	f7ff ff6b 	bl	80057b8 <__ssputs_r>
 80058e2:	3001      	adds	r0, #1
 80058e4:	f000 80a7 	beq.w	8005a36 <_svfiprintf_r+0x1c6>
 80058e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058ea:	445a      	add	r2, fp
 80058ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80058ee:	f89a 3000 	ldrb.w	r3, [sl]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 809f 	beq.w	8005a36 <_svfiprintf_r+0x1c6>
 80058f8:	2300      	movs	r3, #0
 80058fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005902:	f10a 0a01 	add.w	sl, sl, #1
 8005906:	9304      	str	r3, [sp, #16]
 8005908:	9307      	str	r3, [sp, #28]
 800590a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800590e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005910:	4654      	mov	r4, sl
 8005912:	2205      	movs	r2, #5
 8005914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005918:	484e      	ldr	r0, [pc, #312]	@ (8005a54 <_svfiprintf_r+0x1e4>)
 800591a:	f7fa fc59 	bl	80001d0 <memchr>
 800591e:	9a04      	ldr	r2, [sp, #16]
 8005920:	b9d8      	cbnz	r0, 800595a <_svfiprintf_r+0xea>
 8005922:	06d0      	lsls	r0, r2, #27
 8005924:	bf44      	itt	mi
 8005926:	2320      	movmi	r3, #32
 8005928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800592c:	0711      	lsls	r1, r2, #28
 800592e:	bf44      	itt	mi
 8005930:	232b      	movmi	r3, #43	@ 0x2b
 8005932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005936:	f89a 3000 	ldrb.w	r3, [sl]
 800593a:	2b2a      	cmp	r3, #42	@ 0x2a
 800593c:	d015      	beq.n	800596a <_svfiprintf_r+0xfa>
 800593e:	9a07      	ldr	r2, [sp, #28]
 8005940:	4654      	mov	r4, sl
 8005942:	2000      	movs	r0, #0
 8005944:	f04f 0c0a 	mov.w	ip, #10
 8005948:	4621      	mov	r1, r4
 800594a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800594e:	3b30      	subs	r3, #48	@ 0x30
 8005950:	2b09      	cmp	r3, #9
 8005952:	d94b      	bls.n	80059ec <_svfiprintf_r+0x17c>
 8005954:	b1b0      	cbz	r0, 8005984 <_svfiprintf_r+0x114>
 8005956:	9207      	str	r2, [sp, #28]
 8005958:	e014      	b.n	8005984 <_svfiprintf_r+0x114>
 800595a:	eba0 0308 	sub.w	r3, r0, r8
 800595e:	fa09 f303 	lsl.w	r3, r9, r3
 8005962:	4313      	orrs	r3, r2
 8005964:	9304      	str	r3, [sp, #16]
 8005966:	46a2      	mov	sl, r4
 8005968:	e7d2      	b.n	8005910 <_svfiprintf_r+0xa0>
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	1d19      	adds	r1, r3, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	9103      	str	r1, [sp, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	bfbb      	ittet	lt
 8005976:	425b      	neglt	r3, r3
 8005978:	f042 0202 	orrlt.w	r2, r2, #2
 800597c:	9307      	strge	r3, [sp, #28]
 800597e:	9307      	strlt	r3, [sp, #28]
 8005980:	bfb8      	it	lt
 8005982:	9204      	strlt	r2, [sp, #16]
 8005984:	7823      	ldrb	r3, [r4, #0]
 8005986:	2b2e      	cmp	r3, #46	@ 0x2e
 8005988:	d10a      	bne.n	80059a0 <_svfiprintf_r+0x130>
 800598a:	7863      	ldrb	r3, [r4, #1]
 800598c:	2b2a      	cmp	r3, #42	@ 0x2a
 800598e:	d132      	bne.n	80059f6 <_svfiprintf_r+0x186>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	1d1a      	adds	r2, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	9203      	str	r2, [sp, #12]
 8005998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800599c:	3402      	adds	r4, #2
 800599e:	9305      	str	r3, [sp, #20]
 80059a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a64 <_svfiprintf_r+0x1f4>
 80059a4:	7821      	ldrb	r1, [r4, #0]
 80059a6:	2203      	movs	r2, #3
 80059a8:	4650      	mov	r0, sl
 80059aa:	f7fa fc11 	bl	80001d0 <memchr>
 80059ae:	b138      	cbz	r0, 80059c0 <_svfiprintf_r+0x150>
 80059b0:	9b04      	ldr	r3, [sp, #16]
 80059b2:	eba0 000a 	sub.w	r0, r0, sl
 80059b6:	2240      	movs	r2, #64	@ 0x40
 80059b8:	4082      	lsls	r2, r0
 80059ba:	4313      	orrs	r3, r2
 80059bc:	3401      	adds	r4, #1
 80059be:	9304      	str	r3, [sp, #16]
 80059c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c4:	4824      	ldr	r0, [pc, #144]	@ (8005a58 <_svfiprintf_r+0x1e8>)
 80059c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059ca:	2206      	movs	r2, #6
 80059cc:	f7fa fc00 	bl	80001d0 <memchr>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d036      	beq.n	8005a42 <_svfiprintf_r+0x1d2>
 80059d4:	4b21      	ldr	r3, [pc, #132]	@ (8005a5c <_svfiprintf_r+0x1ec>)
 80059d6:	bb1b      	cbnz	r3, 8005a20 <_svfiprintf_r+0x1b0>
 80059d8:	9b03      	ldr	r3, [sp, #12]
 80059da:	3307      	adds	r3, #7
 80059dc:	f023 0307 	bic.w	r3, r3, #7
 80059e0:	3308      	adds	r3, #8
 80059e2:	9303      	str	r3, [sp, #12]
 80059e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059e6:	4433      	add	r3, r6
 80059e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ea:	e76a      	b.n	80058c2 <_svfiprintf_r+0x52>
 80059ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80059f0:	460c      	mov	r4, r1
 80059f2:	2001      	movs	r0, #1
 80059f4:	e7a8      	b.n	8005948 <_svfiprintf_r+0xd8>
 80059f6:	2300      	movs	r3, #0
 80059f8:	3401      	adds	r4, #1
 80059fa:	9305      	str	r3, [sp, #20]
 80059fc:	4619      	mov	r1, r3
 80059fe:	f04f 0c0a 	mov.w	ip, #10
 8005a02:	4620      	mov	r0, r4
 8005a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a08:	3a30      	subs	r2, #48	@ 0x30
 8005a0a:	2a09      	cmp	r2, #9
 8005a0c:	d903      	bls.n	8005a16 <_svfiprintf_r+0x1a6>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0c6      	beq.n	80059a0 <_svfiprintf_r+0x130>
 8005a12:	9105      	str	r1, [sp, #20]
 8005a14:	e7c4      	b.n	80059a0 <_svfiprintf_r+0x130>
 8005a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e7f0      	b.n	8005a02 <_svfiprintf_r+0x192>
 8005a20:	ab03      	add	r3, sp, #12
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	462a      	mov	r2, r5
 8005a26:	4b0e      	ldr	r3, [pc, #56]	@ (8005a60 <_svfiprintf_r+0x1f0>)
 8005a28:	a904      	add	r1, sp, #16
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	f7fe fb86 	bl	800413c <_printf_float>
 8005a30:	1c42      	adds	r2, r0, #1
 8005a32:	4606      	mov	r6, r0
 8005a34:	d1d6      	bne.n	80059e4 <_svfiprintf_r+0x174>
 8005a36:	89ab      	ldrh	r3, [r5, #12]
 8005a38:	065b      	lsls	r3, r3, #25
 8005a3a:	f53f af2d 	bmi.w	8005898 <_svfiprintf_r+0x28>
 8005a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a40:	e72c      	b.n	800589c <_svfiprintf_r+0x2c>
 8005a42:	ab03      	add	r3, sp, #12
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	462a      	mov	r2, r5
 8005a48:	4b05      	ldr	r3, [pc, #20]	@ (8005a60 <_svfiprintf_r+0x1f0>)
 8005a4a:	a904      	add	r1, sp, #16
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7fe fe0d 	bl	800466c <_printf_i>
 8005a52:	e7ed      	b.n	8005a30 <_svfiprintf_r+0x1c0>
 8005a54:	08006f94 	.word	0x08006f94
 8005a58:	08006f9e 	.word	0x08006f9e
 8005a5c:	0800413d 	.word	0x0800413d
 8005a60:	080057b9 	.word	0x080057b9
 8005a64:	08006f9a 	.word	0x08006f9a

08005a68 <malloc>:
 8005a68:	4b02      	ldr	r3, [pc, #8]	@ (8005a74 <malloc+0xc>)
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	f000 b825 	b.w	8005abc <_malloc_r>
 8005a72:	bf00      	nop
 8005a74:	20000024 	.word	0x20000024

08005a78 <sbrk_aligned>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ab8 <sbrk_aligned+0x40>)
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	6831      	ldr	r1, [r6, #0]
 8005a80:	4605      	mov	r5, r0
 8005a82:	b911      	cbnz	r1, 8005a8a <sbrk_aligned+0x12>
 8005a84:	f000 fd94 	bl	80065b0 <_sbrk_r>
 8005a88:	6030      	str	r0, [r6, #0]
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 fd8f 	bl	80065b0 <_sbrk_r>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d103      	bne.n	8005a9e <sbrk_aligned+0x26>
 8005a96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	1cc4      	adds	r4, r0, #3
 8005aa0:	f024 0403 	bic.w	r4, r4, #3
 8005aa4:	42a0      	cmp	r0, r4
 8005aa6:	d0f8      	beq.n	8005a9a <sbrk_aligned+0x22>
 8005aa8:	1a21      	subs	r1, r4, r0
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 fd80 	bl	80065b0 <_sbrk_r>
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d1f2      	bne.n	8005a9a <sbrk_aligned+0x22>
 8005ab4:	e7ef      	b.n	8005a96 <sbrk_aligned+0x1e>
 8005ab6:	bf00      	nop
 8005ab8:	200011e0 	.word	0x200011e0

08005abc <_malloc_r>:
 8005abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac0:	1ccd      	adds	r5, r1, #3
 8005ac2:	f025 0503 	bic.w	r5, r5, #3
 8005ac6:	3508      	adds	r5, #8
 8005ac8:	2d0c      	cmp	r5, #12
 8005aca:	bf38      	it	cc
 8005acc:	250c      	movcc	r5, #12
 8005ace:	2d00      	cmp	r5, #0
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	db01      	blt.n	8005ad8 <_malloc_r+0x1c>
 8005ad4:	42a9      	cmp	r1, r5
 8005ad6:	d904      	bls.n	8005ae2 <_malloc_r+0x26>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	6033      	str	r3, [r6, #0]
 8005adc:	2000      	movs	r0, #0
 8005ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bb8 <_malloc_r+0xfc>
 8005ae6:	f000 f915 	bl	8005d14 <__malloc_lock>
 8005aea:	f8d8 3000 	ldr.w	r3, [r8]
 8005aee:	461c      	mov	r4, r3
 8005af0:	bb44      	cbnz	r4, 8005b44 <_malloc_r+0x88>
 8005af2:	4629      	mov	r1, r5
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff ffbf 	bl	8005a78 <sbrk_aligned>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	4604      	mov	r4, r0
 8005afe:	d158      	bne.n	8005bb2 <_malloc_r+0xf6>
 8005b00:	f8d8 4000 	ldr.w	r4, [r8]
 8005b04:	4627      	mov	r7, r4
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	d143      	bne.n	8005b92 <_malloc_r+0xd6>
 8005b0a:	2c00      	cmp	r4, #0
 8005b0c:	d04b      	beq.n	8005ba6 <_malloc_r+0xea>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	4639      	mov	r1, r7
 8005b12:	4630      	mov	r0, r6
 8005b14:	eb04 0903 	add.w	r9, r4, r3
 8005b18:	f000 fd4a 	bl	80065b0 <_sbrk_r>
 8005b1c:	4581      	cmp	r9, r0
 8005b1e:	d142      	bne.n	8005ba6 <_malloc_r+0xea>
 8005b20:	6821      	ldr	r1, [r4, #0]
 8005b22:	1a6d      	subs	r5, r5, r1
 8005b24:	4629      	mov	r1, r5
 8005b26:	4630      	mov	r0, r6
 8005b28:	f7ff ffa6 	bl	8005a78 <sbrk_aligned>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d03a      	beq.n	8005ba6 <_malloc_r+0xea>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	442b      	add	r3, r5
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	bb62      	cbnz	r2, 8005b98 <_malloc_r+0xdc>
 8005b3e:	f8c8 7000 	str.w	r7, [r8]
 8005b42:	e00f      	b.n	8005b64 <_malloc_r+0xa8>
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	1b52      	subs	r2, r2, r5
 8005b48:	d420      	bmi.n	8005b8c <_malloc_r+0xd0>
 8005b4a:	2a0b      	cmp	r2, #11
 8005b4c:	d917      	bls.n	8005b7e <_malloc_r+0xc2>
 8005b4e:	1961      	adds	r1, r4, r5
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	6025      	str	r5, [r4, #0]
 8005b54:	bf18      	it	ne
 8005b56:	6059      	strne	r1, [r3, #4]
 8005b58:	6863      	ldr	r3, [r4, #4]
 8005b5a:	bf08      	it	eq
 8005b5c:	f8c8 1000 	streq.w	r1, [r8]
 8005b60:	5162      	str	r2, [r4, r5]
 8005b62:	604b      	str	r3, [r1, #4]
 8005b64:	4630      	mov	r0, r6
 8005b66:	f000 f8db 	bl	8005d20 <__malloc_unlock>
 8005b6a:	f104 000b 	add.w	r0, r4, #11
 8005b6e:	1d23      	adds	r3, r4, #4
 8005b70:	f020 0007 	bic.w	r0, r0, #7
 8005b74:	1ac2      	subs	r2, r0, r3
 8005b76:	bf1c      	itt	ne
 8005b78:	1a1b      	subne	r3, r3, r0
 8005b7a:	50a3      	strne	r3, [r4, r2]
 8005b7c:	e7af      	b.n	8005ade <_malloc_r+0x22>
 8005b7e:	6862      	ldr	r2, [r4, #4]
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	bf0c      	ite	eq
 8005b84:	f8c8 2000 	streq.w	r2, [r8]
 8005b88:	605a      	strne	r2, [r3, #4]
 8005b8a:	e7eb      	b.n	8005b64 <_malloc_r+0xa8>
 8005b8c:	4623      	mov	r3, r4
 8005b8e:	6864      	ldr	r4, [r4, #4]
 8005b90:	e7ae      	b.n	8005af0 <_malloc_r+0x34>
 8005b92:	463c      	mov	r4, r7
 8005b94:	687f      	ldr	r7, [r7, #4]
 8005b96:	e7b6      	b.n	8005b06 <_malloc_r+0x4a>
 8005b98:	461a      	mov	r2, r3
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d1fb      	bne.n	8005b98 <_malloc_r+0xdc>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6053      	str	r3, [r2, #4]
 8005ba4:	e7de      	b.n	8005b64 <_malloc_r+0xa8>
 8005ba6:	230c      	movs	r3, #12
 8005ba8:	6033      	str	r3, [r6, #0]
 8005baa:	4630      	mov	r0, r6
 8005bac:	f000 f8b8 	bl	8005d20 <__malloc_unlock>
 8005bb0:	e794      	b.n	8005adc <_malloc_r+0x20>
 8005bb2:	6005      	str	r5, [r0, #0]
 8005bb4:	e7d6      	b.n	8005b64 <_malloc_r+0xa8>
 8005bb6:	bf00      	nop
 8005bb8:	200011e4 	.word	0x200011e4

08005bbc <__sflush_r>:
 8005bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc4:	0716      	lsls	r6, r2, #28
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	d454      	bmi.n	8005c76 <__sflush_r+0xba>
 8005bcc:	684b      	ldr	r3, [r1, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dc02      	bgt.n	8005bd8 <__sflush_r+0x1c>
 8005bd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dd48      	ble.n	8005c6a <__sflush_r+0xae>
 8005bd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bda:	2e00      	cmp	r6, #0
 8005bdc:	d045      	beq.n	8005c6a <__sflush_r+0xae>
 8005bde:	2300      	movs	r3, #0
 8005be0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005be4:	682f      	ldr	r7, [r5, #0]
 8005be6:	6a21      	ldr	r1, [r4, #32]
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	d030      	beq.n	8005c4e <__sflush_r+0x92>
 8005bec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	0759      	lsls	r1, r3, #29
 8005bf2:	d505      	bpl.n	8005c00 <__sflush_r+0x44>
 8005bf4:	6863      	ldr	r3, [r4, #4]
 8005bf6:	1ad2      	subs	r2, r2, r3
 8005bf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bfa:	b10b      	cbz	r3, 8005c00 <__sflush_r+0x44>
 8005bfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	2300      	movs	r3, #0
 8005c02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b0      	blx	r6
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	d106      	bne.n	8005c1e <__sflush_r+0x62>
 8005c10:	6829      	ldr	r1, [r5, #0]
 8005c12:	291d      	cmp	r1, #29
 8005c14:	d82b      	bhi.n	8005c6e <__sflush_r+0xb2>
 8005c16:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc0 <__sflush_r+0x104>)
 8005c18:	410a      	asrs	r2, r1
 8005c1a:	07d6      	lsls	r6, r2, #31
 8005c1c:	d427      	bmi.n	8005c6e <__sflush_r+0xb2>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	6062      	str	r2, [r4, #4]
 8005c22:	04d9      	lsls	r1, r3, #19
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	d504      	bpl.n	8005c34 <__sflush_r+0x78>
 8005c2a:	1c42      	adds	r2, r0, #1
 8005c2c:	d101      	bne.n	8005c32 <__sflush_r+0x76>
 8005c2e:	682b      	ldr	r3, [r5, #0]
 8005c30:	b903      	cbnz	r3, 8005c34 <__sflush_r+0x78>
 8005c32:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c36:	602f      	str	r7, [r5, #0]
 8005c38:	b1b9      	cbz	r1, 8005c6a <__sflush_r+0xae>
 8005c3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d002      	beq.n	8005c48 <__sflush_r+0x8c>
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 fd08 	bl	8006658 <_free_r>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c4c:	e00d      	b.n	8005c6a <__sflush_r+0xae>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	4602      	mov	r2, r0
 8005c56:	1c50      	adds	r0, r2, #1
 8005c58:	d1c9      	bne.n	8005bee <__sflush_r+0x32>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0c6      	beq.n	8005bee <__sflush_r+0x32>
 8005c60:	2b1d      	cmp	r3, #29
 8005c62:	d001      	beq.n	8005c68 <__sflush_r+0xac>
 8005c64:	2b16      	cmp	r3, #22
 8005c66:	d11e      	bne.n	8005ca6 <__sflush_r+0xea>
 8005c68:	602f      	str	r7, [r5, #0]
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e022      	b.n	8005cb4 <__sflush_r+0xf8>
 8005c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c72:	b21b      	sxth	r3, r3
 8005c74:	e01b      	b.n	8005cae <__sflush_r+0xf2>
 8005c76:	690f      	ldr	r7, [r1, #16]
 8005c78:	2f00      	cmp	r7, #0
 8005c7a:	d0f6      	beq.n	8005c6a <__sflush_r+0xae>
 8005c7c:	0793      	lsls	r3, r2, #30
 8005c7e:	680e      	ldr	r6, [r1, #0]
 8005c80:	bf08      	it	eq
 8005c82:	694b      	ldreq	r3, [r1, #20]
 8005c84:	600f      	str	r7, [r1, #0]
 8005c86:	bf18      	it	ne
 8005c88:	2300      	movne	r3, #0
 8005c8a:	eba6 0807 	sub.w	r8, r6, r7
 8005c8e:	608b      	str	r3, [r1, #8]
 8005c90:	f1b8 0f00 	cmp.w	r8, #0
 8005c94:	dde9      	ble.n	8005c6a <__sflush_r+0xae>
 8005c96:	6a21      	ldr	r1, [r4, #32]
 8005c98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c9a:	4643      	mov	r3, r8
 8005c9c:	463a      	mov	r2, r7
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b0      	blx	r6
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	dc08      	bgt.n	8005cb8 <__sflush_r+0xfc>
 8005ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	4407      	add	r7, r0
 8005cba:	eba8 0800 	sub.w	r8, r8, r0
 8005cbe:	e7e7      	b.n	8005c90 <__sflush_r+0xd4>
 8005cc0:	dfbffffe 	.word	0xdfbffffe

08005cc4 <_fflush_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	690b      	ldr	r3, [r1, #16]
 8005cc8:	4605      	mov	r5, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	b913      	cbnz	r3, 8005cd4 <_fflush_r+0x10>
 8005cce:	2500      	movs	r5, #0
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	b118      	cbz	r0, 8005cde <_fflush_r+0x1a>
 8005cd6:	6a03      	ldr	r3, [r0, #32]
 8005cd8:	b90b      	cbnz	r3, 8005cde <_fflush_r+0x1a>
 8005cda:	f7fe fe93 	bl	8004a04 <__sinit>
 8005cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f3      	beq.n	8005cce <_fflush_r+0xa>
 8005ce6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ce8:	07d0      	lsls	r0, r2, #31
 8005cea:	d404      	bmi.n	8005cf6 <_fflush_r+0x32>
 8005cec:	0599      	lsls	r1, r3, #22
 8005cee:	d402      	bmi.n	8005cf6 <_fflush_r+0x32>
 8005cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cf2:	f7fe ff04 	bl	8004afe <__retarget_lock_acquire_recursive>
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	f7ff ff5f 	bl	8005bbc <__sflush_r>
 8005cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d00:	07da      	lsls	r2, r3, #31
 8005d02:	4605      	mov	r5, r0
 8005d04:	d4e4      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	059b      	lsls	r3, r3, #22
 8005d0a:	d4e1      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d0e:	f7fe fef7 	bl	8004b00 <__retarget_lock_release_recursive>
 8005d12:	e7dd      	b.n	8005cd0 <_fflush_r+0xc>

08005d14 <__malloc_lock>:
 8005d14:	4801      	ldr	r0, [pc, #4]	@ (8005d1c <__malloc_lock+0x8>)
 8005d16:	f7fe bef2 	b.w	8004afe <__retarget_lock_acquire_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	200011dc 	.word	0x200011dc

08005d20 <__malloc_unlock>:
 8005d20:	4801      	ldr	r0, [pc, #4]	@ (8005d28 <__malloc_unlock+0x8>)
 8005d22:	f7fe beed 	b.w	8004b00 <__retarget_lock_release_recursive>
 8005d26:	bf00      	nop
 8005d28:	200011dc 	.word	0x200011dc

08005d2c <_Balloc>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	69c6      	ldr	r6, [r0, #28]
 8005d30:	4604      	mov	r4, r0
 8005d32:	460d      	mov	r5, r1
 8005d34:	b976      	cbnz	r6, 8005d54 <_Balloc+0x28>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f7ff fe96 	bl	8005a68 <malloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	61e0      	str	r0, [r4, #28]
 8005d40:	b920      	cbnz	r0, 8005d4c <_Balloc+0x20>
 8005d42:	4b18      	ldr	r3, [pc, #96]	@ (8005da4 <_Balloc+0x78>)
 8005d44:	4818      	ldr	r0, [pc, #96]	@ (8005da8 <_Balloc+0x7c>)
 8005d46:	216b      	movs	r1, #107	@ 0x6b
 8005d48:	f000 fc54 	bl	80065f4 <__assert_func>
 8005d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d50:	6006      	str	r6, [r0, #0]
 8005d52:	60c6      	str	r6, [r0, #12]
 8005d54:	69e6      	ldr	r6, [r4, #28]
 8005d56:	68f3      	ldr	r3, [r6, #12]
 8005d58:	b183      	cbz	r3, 8005d7c <_Balloc+0x50>
 8005d5a:	69e3      	ldr	r3, [r4, #28]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d62:	b9b8      	cbnz	r0, 8005d94 <_Balloc+0x68>
 8005d64:	2101      	movs	r1, #1
 8005d66:	fa01 f605 	lsl.w	r6, r1, r5
 8005d6a:	1d72      	adds	r2, r6, #5
 8005d6c:	0092      	lsls	r2, r2, #2
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fc5e 	bl	8006630 <_calloc_r>
 8005d74:	b160      	cbz	r0, 8005d90 <_Balloc+0x64>
 8005d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d7a:	e00e      	b.n	8005d9a <_Balloc+0x6e>
 8005d7c:	2221      	movs	r2, #33	@ 0x21
 8005d7e:	2104      	movs	r1, #4
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fc55 	bl	8006630 <_calloc_r>
 8005d86:	69e3      	ldr	r3, [r4, #28]
 8005d88:	60f0      	str	r0, [r6, #12]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e4      	bne.n	8005d5a <_Balloc+0x2e>
 8005d90:	2000      	movs	r0, #0
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	6802      	ldr	r2, [r0, #0]
 8005d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005da0:	e7f7      	b.n	8005d92 <_Balloc+0x66>
 8005da2:	bf00      	nop
 8005da4:	08006f14 	.word	0x08006f14
 8005da8:	08006fa5 	.word	0x08006fa5

08005dac <_Bfree>:
 8005dac:	b570      	push	{r4, r5, r6, lr}
 8005dae:	69c6      	ldr	r6, [r0, #28]
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	b976      	cbnz	r6, 8005dd4 <_Bfree+0x28>
 8005db6:	2010      	movs	r0, #16
 8005db8:	f7ff fe56 	bl	8005a68 <malloc>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	61e8      	str	r0, [r5, #28]
 8005dc0:	b920      	cbnz	r0, 8005dcc <_Bfree+0x20>
 8005dc2:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <_Bfree+0x3c>)
 8005dc4:	4809      	ldr	r0, [pc, #36]	@ (8005dec <_Bfree+0x40>)
 8005dc6:	218f      	movs	r1, #143	@ 0x8f
 8005dc8:	f000 fc14 	bl	80065f4 <__assert_func>
 8005dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dd0:	6006      	str	r6, [r0, #0]
 8005dd2:	60c6      	str	r6, [r0, #12]
 8005dd4:	b13c      	cbz	r4, 8005de6 <_Bfree+0x3a>
 8005dd6:	69eb      	ldr	r3, [r5, #28]
 8005dd8:	6862      	ldr	r2, [r4, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005de0:	6021      	str	r1, [r4, #0]
 8005de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	08006f14 	.word	0x08006f14
 8005dec:	08006fa5 	.word	0x08006fa5

08005df0 <__multadd>:
 8005df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df4:	690d      	ldr	r5, [r1, #16]
 8005df6:	4607      	mov	r7, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	461e      	mov	r6, r3
 8005dfc:	f101 0c14 	add.w	ip, r1, #20
 8005e00:	2000      	movs	r0, #0
 8005e02:	f8dc 3000 	ldr.w	r3, [ip]
 8005e06:	b299      	uxth	r1, r3
 8005e08:	fb02 6101 	mla	r1, r2, r1, r6
 8005e0c:	0c1e      	lsrs	r6, r3, #16
 8005e0e:	0c0b      	lsrs	r3, r1, #16
 8005e10:	fb02 3306 	mla	r3, r2, r6, r3
 8005e14:	b289      	uxth	r1, r1
 8005e16:	3001      	adds	r0, #1
 8005e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e1c:	4285      	cmp	r5, r0
 8005e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8005e22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e26:	dcec      	bgt.n	8005e02 <__multadd+0x12>
 8005e28:	b30e      	cbz	r6, 8005e6e <__multadd+0x7e>
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	42ab      	cmp	r3, r5
 8005e2e:	dc19      	bgt.n	8005e64 <__multadd+0x74>
 8005e30:	6861      	ldr	r1, [r4, #4]
 8005e32:	4638      	mov	r0, r7
 8005e34:	3101      	adds	r1, #1
 8005e36:	f7ff ff79 	bl	8005d2c <_Balloc>
 8005e3a:	4680      	mov	r8, r0
 8005e3c:	b928      	cbnz	r0, 8005e4a <__multadd+0x5a>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	4b0c      	ldr	r3, [pc, #48]	@ (8005e74 <__multadd+0x84>)
 8005e42:	480d      	ldr	r0, [pc, #52]	@ (8005e78 <__multadd+0x88>)
 8005e44:	21ba      	movs	r1, #186	@ 0xba
 8005e46:	f000 fbd5 	bl	80065f4 <__assert_func>
 8005e4a:	6922      	ldr	r2, [r4, #16]
 8005e4c:	3202      	adds	r2, #2
 8005e4e:	f104 010c 	add.w	r1, r4, #12
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	300c      	adds	r0, #12
 8005e56:	f7fe fe54 	bl	8004b02 <memcpy>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f7ff ffa5 	bl	8005dac <_Bfree>
 8005e62:	4644      	mov	r4, r8
 8005e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e68:	3501      	adds	r5, #1
 8005e6a:	615e      	str	r6, [r3, #20]
 8005e6c:	6125      	str	r5, [r4, #16]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e74:	08006f83 	.word	0x08006f83
 8005e78:	08006fa5 	.word	0x08006fa5

08005e7c <__hi0bits>:
 8005e7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e80:	4603      	mov	r3, r0
 8005e82:	bf36      	itet	cc
 8005e84:	0403      	lslcc	r3, r0, #16
 8005e86:	2000      	movcs	r0, #0
 8005e88:	2010      	movcc	r0, #16
 8005e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e8e:	bf3c      	itt	cc
 8005e90:	021b      	lslcc	r3, r3, #8
 8005e92:	3008      	addcc	r0, #8
 8005e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e98:	bf3c      	itt	cc
 8005e9a:	011b      	lslcc	r3, r3, #4
 8005e9c:	3004      	addcc	r0, #4
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	bf3c      	itt	cc
 8005ea4:	009b      	lslcc	r3, r3, #2
 8005ea6:	3002      	addcc	r0, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	db05      	blt.n	8005eb8 <__hi0bits+0x3c>
 8005eac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005eb0:	f100 0001 	add.w	r0, r0, #1
 8005eb4:	bf08      	it	eq
 8005eb6:	2020      	moveq	r0, #32
 8005eb8:	4770      	bx	lr

08005eba <__lo0bits>:
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f013 0007 	ands.w	r0, r3, #7
 8005ec2:	d00b      	beq.n	8005edc <__lo0bits+0x22>
 8005ec4:	07d9      	lsls	r1, r3, #31
 8005ec6:	d421      	bmi.n	8005f0c <__lo0bits+0x52>
 8005ec8:	0798      	lsls	r0, r3, #30
 8005eca:	bf49      	itett	mi
 8005ecc:	085b      	lsrmi	r3, r3, #1
 8005ece:	089b      	lsrpl	r3, r3, #2
 8005ed0:	2001      	movmi	r0, #1
 8005ed2:	6013      	strmi	r3, [r2, #0]
 8005ed4:	bf5c      	itt	pl
 8005ed6:	6013      	strpl	r3, [r2, #0]
 8005ed8:	2002      	movpl	r0, #2
 8005eda:	4770      	bx	lr
 8005edc:	b299      	uxth	r1, r3
 8005ede:	b909      	cbnz	r1, 8005ee4 <__lo0bits+0x2a>
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	2010      	movs	r0, #16
 8005ee4:	b2d9      	uxtb	r1, r3
 8005ee6:	b909      	cbnz	r1, 8005eec <__lo0bits+0x32>
 8005ee8:	3008      	adds	r0, #8
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	0719      	lsls	r1, r3, #28
 8005eee:	bf04      	itt	eq
 8005ef0:	091b      	lsreq	r3, r3, #4
 8005ef2:	3004      	addeq	r0, #4
 8005ef4:	0799      	lsls	r1, r3, #30
 8005ef6:	bf04      	itt	eq
 8005ef8:	089b      	lsreq	r3, r3, #2
 8005efa:	3002      	addeq	r0, #2
 8005efc:	07d9      	lsls	r1, r3, #31
 8005efe:	d403      	bmi.n	8005f08 <__lo0bits+0x4e>
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	f100 0001 	add.w	r0, r0, #1
 8005f06:	d003      	beq.n	8005f10 <__lo0bits+0x56>
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	4770      	bx	lr
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4770      	bx	lr
 8005f10:	2020      	movs	r0, #32
 8005f12:	4770      	bx	lr

08005f14 <__i2b>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	2101      	movs	r1, #1
 8005f1a:	f7ff ff07 	bl	8005d2c <_Balloc>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	b928      	cbnz	r0, 8005f2e <__i2b+0x1a>
 8005f22:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <__i2b+0x24>)
 8005f24:	4805      	ldr	r0, [pc, #20]	@ (8005f3c <__i2b+0x28>)
 8005f26:	f240 1145 	movw	r1, #325	@ 0x145
 8005f2a:	f000 fb63 	bl	80065f4 <__assert_func>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	6144      	str	r4, [r0, #20]
 8005f32:	6103      	str	r3, [r0, #16]
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	bf00      	nop
 8005f38:	08006f83 	.word	0x08006f83
 8005f3c:	08006fa5 	.word	0x08006fa5

08005f40 <__multiply>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	4614      	mov	r4, r2
 8005f46:	690a      	ldr	r2, [r1, #16]
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	bfa8      	it	ge
 8005f4e:	4623      	movge	r3, r4
 8005f50:	460f      	mov	r7, r1
 8005f52:	bfa4      	itt	ge
 8005f54:	460c      	movge	r4, r1
 8005f56:	461f      	movge	r7, r3
 8005f58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005f5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005f60:	68a3      	ldr	r3, [r4, #8]
 8005f62:	6861      	ldr	r1, [r4, #4]
 8005f64:	eb0a 0609 	add.w	r6, sl, r9
 8005f68:	42b3      	cmp	r3, r6
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	bfb8      	it	lt
 8005f6e:	3101      	addlt	r1, #1
 8005f70:	f7ff fedc 	bl	8005d2c <_Balloc>
 8005f74:	b930      	cbnz	r0, 8005f84 <__multiply+0x44>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b44      	ldr	r3, [pc, #272]	@ (800608c <__multiply+0x14c>)
 8005f7a:	4845      	ldr	r0, [pc, #276]	@ (8006090 <__multiply+0x150>)
 8005f7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005f80:	f000 fb38 	bl	80065f4 <__assert_func>
 8005f84:	f100 0514 	add.w	r5, r0, #20
 8005f88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f8c:	462b      	mov	r3, r5
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4543      	cmp	r3, r8
 8005f92:	d321      	bcc.n	8005fd8 <__multiply+0x98>
 8005f94:	f107 0114 	add.w	r1, r7, #20
 8005f98:	f104 0214 	add.w	r2, r4, #20
 8005f9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005fa0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005fa4:	9302      	str	r3, [sp, #8]
 8005fa6:	1b13      	subs	r3, r2, r4
 8005fa8:	3b15      	subs	r3, #21
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	3304      	adds	r3, #4
 8005fb0:	f104 0715 	add.w	r7, r4, #21
 8005fb4:	42ba      	cmp	r2, r7
 8005fb6:	bf38      	it	cc
 8005fb8:	2304      	movcc	r3, #4
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	9b02      	ldr	r3, [sp, #8]
 8005fbe:	9103      	str	r1, [sp, #12]
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	d80c      	bhi.n	8005fde <__multiply+0x9e>
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	dd03      	ble.n	8005fd0 <__multiply+0x90>
 8005fc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05b      	beq.n	8006088 <__multiply+0x148>
 8005fd0:	6106      	str	r6, [r0, #16]
 8005fd2:	b005      	add	sp, #20
 8005fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd8:	f843 2b04 	str.w	r2, [r3], #4
 8005fdc:	e7d8      	b.n	8005f90 <__multiply+0x50>
 8005fde:	f8b1 a000 	ldrh.w	sl, [r1]
 8005fe2:	f1ba 0f00 	cmp.w	sl, #0
 8005fe6:	d024      	beq.n	8006032 <__multiply+0xf2>
 8005fe8:	f104 0e14 	add.w	lr, r4, #20
 8005fec:	46a9      	mov	r9, r5
 8005fee:	f04f 0c00 	mov.w	ip, #0
 8005ff2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8005ffa:	fa1f fb87 	uxth.w	fp, r7
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	fb0a 330b 	mla	r3, sl, fp, r3
 8006004:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006008:	f8d9 7000 	ldr.w	r7, [r9]
 800600c:	4463      	add	r3, ip
 800600e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006012:	fb0a c70b 	mla	r7, sl, fp, ip
 8006016:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800601a:	b29b      	uxth	r3, r3
 800601c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006020:	4572      	cmp	r2, lr
 8006022:	f849 3b04 	str.w	r3, [r9], #4
 8006026:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800602a:	d8e2      	bhi.n	8005ff2 <__multiply+0xb2>
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	f845 c003 	str.w	ip, [r5, r3]
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006038:	3104      	adds	r1, #4
 800603a:	f1b9 0f00 	cmp.w	r9, #0
 800603e:	d021      	beq.n	8006084 <__multiply+0x144>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	f104 0c14 	add.w	ip, r4, #20
 8006046:	46ae      	mov	lr, r5
 8006048:	f04f 0a00 	mov.w	sl, #0
 800604c:	f8bc b000 	ldrh.w	fp, [ip]
 8006050:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006054:	fb09 770b 	mla	r7, r9, fp, r7
 8006058:	4457      	add	r7, sl
 800605a:	b29b      	uxth	r3, r3
 800605c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006060:	f84e 3b04 	str.w	r3, [lr], #4
 8006064:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800606c:	f8be 3000 	ldrh.w	r3, [lr]
 8006070:	fb09 330a 	mla	r3, r9, sl, r3
 8006074:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006078:	4562      	cmp	r2, ip
 800607a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800607e:	d8e5      	bhi.n	800604c <__multiply+0x10c>
 8006080:	9f01      	ldr	r7, [sp, #4]
 8006082:	51eb      	str	r3, [r5, r7]
 8006084:	3504      	adds	r5, #4
 8006086:	e799      	b.n	8005fbc <__multiply+0x7c>
 8006088:	3e01      	subs	r6, #1
 800608a:	e79b      	b.n	8005fc4 <__multiply+0x84>
 800608c:	08006f83 	.word	0x08006f83
 8006090:	08006fa5 	.word	0x08006fa5

08006094 <__pow5mult>:
 8006094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006098:	4615      	mov	r5, r2
 800609a:	f012 0203 	ands.w	r2, r2, #3
 800609e:	4607      	mov	r7, r0
 80060a0:	460e      	mov	r6, r1
 80060a2:	d007      	beq.n	80060b4 <__pow5mult+0x20>
 80060a4:	4c25      	ldr	r4, [pc, #148]	@ (800613c <__pow5mult+0xa8>)
 80060a6:	3a01      	subs	r2, #1
 80060a8:	2300      	movs	r3, #0
 80060aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ae:	f7ff fe9f 	bl	8005df0 <__multadd>
 80060b2:	4606      	mov	r6, r0
 80060b4:	10ad      	asrs	r5, r5, #2
 80060b6:	d03d      	beq.n	8006134 <__pow5mult+0xa0>
 80060b8:	69fc      	ldr	r4, [r7, #28]
 80060ba:	b97c      	cbnz	r4, 80060dc <__pow5mult+0x48>
 80060bc:	2010      	movs	r0, #16
 80060be:	f7ff fcd3 	bl	8005a68 <malloc>
 80060c2:	4602      	mov	r2, r0
 80060c4:	61f8      	str	r0, [r7, #28]
 80060c6:	b928      	cbnz	r0, 80060d4 <__pow5mult+0x40>
 80060c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006140 <__pow5mult+0xac>)
 80060ca:	481e      	ldr	r0, [pc, #120]	@ (8006144 <__pow5mult+0xb0>)
 80060cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80060d0:	f000 fa90 	bl	80065f4 <__assert_func>
 80060d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060d8:	6004      	str	r4, [r0, #0]
 80060da:	60c4      	str	r4, [r0, #12]
 80060dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80060e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060e4:	b94c      	cbnz	r4, 80060fa <__pow5mult+0x66>
 80060e6:	f240 2171 	movw	r1, #625	@ 0x271
 80060ea:	4638      	mov	r0, r7
 80060ec:	f7ff ff12 	bl	8005f14 <__i2b>
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80060f6:	4604      	mov	r4, r0
 80060f8:	6003      	str	r3, [r0, #0]
 80060fa:	f04f 0900 	mov.w	r9, #0
 80060fe:	07eb      	lsls	r3, r5, #31
 8006100:	d50a      	bpl.n	8006118 <__pow5mult+0x84>
 8006102:	4631      	mov	r1, r6
 8006104:	4622      	mov	r2, r4
 8006106:	4638      	mov	r0, r7
 8006108:	f7ff ff1a 	bl	8005f40 <__multiply>
 800610c:	4631      	mov	r1, r6
 800610e:	4680      	mov	r8, r0
 8006110:	4638      	mov	r0, r7
 8006112:	f7ff fe4b 	bl	8005dac <_Bfree>
 8006116:	4646      	mov	r6, r8
 8006118:	106d      	asrs	r5, r5, #1
 800611a:	d00b      	beq.n	8006134 <__pow5mult+0xa0>
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	b938      	cbnz	r0, 8006130 <__pow5mult+0x9c>
 8006120:	4622      	mov	r2, r4
 8006122:	4621      	mov	r1, r4
 8006124:	4638      	mov	r0, r7
 8006126:	f7ff ff0b 	bl	8005f40 <__multiply>
 800612a:	6020      	str	r0, [r4, #0]
 800612c:	f8c0 9000 	str.w	r9, [r0]
 8006130:	4604      	mov	r4, r0
 8006132:	e7e4      	b.n	80060fe <__pow5mult+0x6a>
 8006134:	4630      	mov	r0, r6
 8006136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800613a:	bf00      	nop
 800613c:	08007000 	.word	0x08007000
 8006140:	08006f14 	.word	0x08006f14
 8006144:	08006fa5 	.word	0x08006fa5

08006148 <__lshift>:
 8006148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	6849      	ldr	r1, [r1, #4]
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006156:	68a3      	ldr	r3, [r4, #8]
 8006158:	4607      	mov	r7, r0
 800615a:	4691      	mov	r9, r2
 800615c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006160:	f108 0601 	add.w	r6, r8, #1
 8006164:	42b3      	cmp	r3, r6
 8006166:	db0b      	blt.n	8006180 <__lshift+0x38>
 8006168:	4638      	mov	r0, r7
 800616a:	f7ff fddf 	bl	8005d2c <_Balloc>
 800616e:	4605      	mov	r5, r0
 8006170:	b948      	cbnz	r0, 8006186 <__lshift+0x3e>
 8006172:	4602      	mov	r2, r0
 8006174:	4b28      	ldr	r3, [pc, #160]	@ (8006218 <__lshift+0xd0>)
 8006176:	4829      	ldr	r0, [pc, #164]	@ (800621c <__lshift+0xd4>)
 8006178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800617c:	f000 fa3a 	bl	80065f4 <__assert_func>
 8006180:	3101      	adds	r1, #1
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	e7ee      	b.n	8006164 <__lshift+0x1c>
 8006186:	2300      	movs	r3, #0
 8006188:	f100 0114 	add.w	r1, r0, #20
 800618c:	f100 0210 	add.w	r2, r0, #16
 8006190:	4618      	mov	r0, r3
 8006192:	4553      	cmp	r3, sl
 8006194:	db33      	blt.n	80061fe <__lshift+0xb6>
 8006196:	6920      	ldr	r0, [r4, #16]
 8006198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800619c:	f104 0314 	add.w	r3, r4, #20
 80061a0:	f019 091f 	ands.w	r9, r9, #31
 80061a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061ac:	d02b      	beq.n	8006206 <__lshift+0xbe>
 80061ae:	f1c9 0e20 	rsb	lr, r9, #32
 80061b2:	468a      	mov	sl, r1
 80061b4:	2200      	movs	r2, #0
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	fa00 f009 	lsl.w	r0, r0, r9
 80061bc:	4310      	orrs	r0, r2
 80061be:	f84a 0b04 	str.w	r0, [sl], #4
 80061c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c6:	459c      	cmp	ip, r3
 80061c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80061cc:	d8f3      	bhi.n	80061b6 <__lshift+0x6e>
 80061ce:	ebac 0304 	sub.w	r3, ip, r4
 80061d2:	3b15      	subs	r3, #21
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	3304      	adds	r3, #4
 80061da:	f104 0015 	add.w	r0, r4, #21
 80061de:	4584      	cmp	ip, r0
 80061e0:	bf38      	it	cc
 80061e2:	2304      	movcc	r3, #4
 80061e4:	50ca      	str	r2, [r1, r3]
 80061e6:	b10a      	cbz	r2, 80061ec <__lshift+0xa4>
 80061e8:	f108 0602 	add.w	r6, r8, #2
 80061ec:	3e01      	subs	r6, #1
 80061ee:	4638      	mov	r0, r7
 80061f0:	612e      	str	r6, [r5, #16]
 80061f2:	4621      	mov	r1, r4
 80061f4:	f7ff fdda 	bl	8005dac <_Bfree>
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006202:	3301      	adds	r3, #1
 8006204:	e7c5      	b.n	8006192 <__lshift+0x4a>
 8006206:	3904      	subs	r1, #4
 8006208:	f853 2b04 	ldr.w	r2, [r3], #4
 800620c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006210:	459c      	cmp	ip, r3
 8006212:	d8f9      	bhi.n	8006208 <__lshift+0xc0>
 8006214:	e7ea      	b.n	80061ec <__lshift+0xa4>
 8006216:	bf00      	nop
 8006218:	08006f83 	.word	0x08006f83
 800621c:	08006fa5 	.word	0x08006fa5

08006220 <__mcmp>:
 8006220:	690a      	ldr	r2, [r1, #16]
 8006222:	4603      	mov	r3, r0
 8006224:	6900      	ldr	r0, [r0, #16]
 8006226:	1a80      	subs	r0, r0, r2
 8006228:	b530      	push	{r4, r5, lr}
 800622a:	d10e      	bne.n	800624a <__mcmp+0x2a>
 800622c:	3314      	adds	r3, #20
 800622e:	3114      	adds	r1, #20
 8006230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800623c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006240:	4295      	cmp	r5, r2
 8006242:	d003      	beq.n	800624c <__mcmp+0x2c>
 8006244:	d205      	bcs.n	8006252 <__mcmp+0x32>
 8006246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800624a:	bd30      	pop	{r4, r5, pc}
 800624c:	42a3      	cmp	r3, r4
 800624e:	d3f3      	bcc.n	8006238 <__mcmp+0x18>
 8006250:	e7fb      	b.n	800624a <__mcmp+0x2a>
 8006252:	2001      	movs	r0, #1
 8006254:	e7f9      	b.n	800624a <__mcmp+0x2a>
	...

08006258 <__mdiff>:
 8006258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	4689      	mov	r9, r1
 800625e:	4606      	mov	r6, r0
 8006260:	4611      	mov	r1, r2
 8006262:	4648      	mov	r0, r9
 8006264:	4614      	mov	r4, r2
 8006266:	f7ff ffdb 	bl	8006220 <__mcmp>
 800626a:	1e05      	subs	r5, r0, #0
 800626c:	d112      	bne.n	8006294 <__mdiff+0x3c>
 800626e:	4629      	mov	r1, r5
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff fd5b 	bl	8005d2c <_Balloc>
 8006276:	4602      	mov	r2, r0
 8006278:	b928      	cbnz	r0, 8006286 <__mdiff+0x2e>
 800627a:	4b3f      	ldr	r3, [pc, #252]	@ (8006378 <__mdiff+0x120>)
 800627c:	f240 2137 	movw	r1, #567	@ 0x237
 8006280:	483e      	ldr	r0, [pc, #248]	@ (800637c <__mdiff+0x124>)
 8006282:	f000 f9b7 	bl	80065f4 <__assert_func>
 8006286:	2301      	movs	r3, #1
 8006288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800628c:	4610      	mov	r0, r2
 800628e:	b003      	add	sp, #12
 8006290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006294:	bfbc      	itt	lt
 8006296:	464b      	movlt	r3, r9
 8006298:	46a1      	movlt	r9, r4
 800629a:	4630      	mov	r0, r6
 800629c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062a0:	bfba      	itte	lt
 80062a2:	461c      	movlt	r4, r3
 80062a4:	2501      	movlt	r5, #1
 80062a6:	2500      	movge	r5, #0
 80062a8:	f7ff fd40 	bl	8005d2c <_Balloc>
 80062ac:	4602      	mov	r2, r0
 80062ae:	b918      	cbnz	r0, 80062b8 <__mdiff+0x60>
 80062b0:	4b31      	ldr	r3, [pc, #196]	@ (8006378 <__mdiff+0x120>)
 80062b2:	f240 2145 	movw	r1, #581	@ 0x245
 80062b6:	e7e3      	b.n	8006280 <__mdiff+0x28>
 80062b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062bc:	6926      	ldr	r6, [r4, #16]
 80062be:	60c5      	str	r5, [r0, #12]
 80062c0:	f109 0310 	add.w	r3, r9, #16
 80062c4:	f109 0514 	add.w	r5, r9, #20
 80062c8:	f104 0e14 	add.w	lr, r4, #20
 80062cc:	f100 0b14 	add.w	fp, r0, #20
 80062d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80062d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	46d9      	mov	r9, fp
 80062dc:	f04f 0c00 	mov.w	ip, #0
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80062e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	fa1f f38a 	uxth.w	r3, sl
 80062f0:	4619      	mov	r1, r3
 80062f2:	b283      	uxth	r3, r0
 80062f4:	1acb      	subs	r3, r1, r3
 80062f6:	0c00      	lsrs	r0, r0, #16
 80062f8:	4463      	add	r3, ip
 80062fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80062fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006302:	b29b      	uxth	r3, r3
 8006304:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006308:	4576      	cmp	r6, lr
 800630a:	f849 3b04 	str.w	r3, [r9], #4
 800630e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006312:	d8e5      	bhi.n	80062e0 <__mdiff+0x88>
 8006314:	1b33      	subs	r3, r6, r4
 8006316:	3b15      	subs	r3, #21
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	3415      	adds	r4, #21
 800631e:	3304      	adds	r3, #4
 8006320:	42a6      	cmp	r6, r4
 8006322:	bf38      	it	cc
 8006324:	2304      	movcc	r3, #4
 8006326:	441d      	add	r5, r3
 8006328:	445b      	add	r3, fp
 800632a:	461e      	mov	r6, r3
 800632c:	462c      	mov	r4, r5
 800632e:	4544      	cmp	r4, r8
 8006330:	d30e      	bcc.n	8006350 <__mdiff+0xf8>
 8006332:	f108 0103 	add.w	r1, r8, #3
 8006336:	1b49      	subs	r1, r1, r5
 8006338:	f021 0103 	bic.w	r1, r1, #3
 800633c:	3d03      	subs	r5, #3
 800633e:	45a8      	cmp	r8, r5
 8006340:	bf38      	it	cc
 8006342:	2100      	movcc	r1, #0
 8006344:	440b      	add	r3, r1
 8006346:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800634a:	b191      	cbz	r1, 8006372 <__mdiff+0x11a>
 800634c:	6117      	str	r7, [r2, #16]
 800634e:	e79d      	b.n	800628c <__mdiff+0x34>
 8006350:	f854 1b04 	ldr.w	r1, [r4], #4
 8006354:	46e6      	mov	lr, ip
 8006356:	0c08      	lsrs	r0, r1, #16
 8006358:	fa1c fc81 	uxtah	ip, ip, r1
 800635c:	4471      	add	r1, lr
 800635e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006362:	b289      	uxth	r1, r1
 8006364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006368:	f846 1b04 	str.w	r1, [r6], #4
 800636c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006370:	e7dd      	b.n	800632e <__mdiff+0xd6>
 8006372:	3f01      	subs	r7, #1
 8006374:	e7e7      	b.n	8006346 <__mdiff+0xee>
 8006376:	bf00      	nop
 8006378:	08006f83 	.word	0x08006f83
 800637c:	08006fa5 	.word	0x08006fa5

08006380 <__d2b>:
 8006380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006384:	460f      	mov	r7, r1
 8006386:	2101      	movs	r1, #1
 8006388:	ec59 8b10 	vmov	r8, r9, d0
 800638c:	4616      	mov	r6, r2
 800638e:	f7ff fccd 	bl	8005d2c <_Balloc>
 8006392:	4604      	mov	r4, r0
 8006394:	b930      	cbnz	r0, 80063a4 <__d2b+0x24>
 8006396:	4602      	mov	r2, r0
 8006398:	4b23      	ldr	r3, [pc, #140]	@ (8006428 <__d2b+0xa8>)
 800639a:	4824      	ldr	r0, [pc, #144]	@ (800642c <__d2b+0xac>)
 800639c:	f240 310f 	movw	r1, #783	@ 0x30f
 80063a0:	f000 f928 	bl	80065f4 <__assert_func>
 80063a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063ac:	b10d      	cbz	r5, 80063b2 <__d2b+0x32>
 80063ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	f1b8 0300 	subs.w	r3, r8, #0
 80063b8:	d023      	beq.n	8006402 <__d2b+0x82>
 80063ba:	4668      	mov	r0, sp
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	f7ff fd7c 	bl	8005eba <__lo0bits>
 80063c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063c6:	b1d0      	cbz	r0, 80063fe <__d2b+0x7e>
 80063c8:	f1c0 0320 	rsb	r3, r0, #32
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	430b      	orrs	r3, r1
 80063d2:	40c2      	lsrs	r2, r0
 80063d4:	6163      	str	r3, [r4, #20]
 80063d6:	9201      	str	r2, [sp, #4]
 80063d8:	9b01      	ldr	r3, [sp, #4]
 80063da:	61a3      	str	r3, [r4, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf0c      	ite	eq
 80063e0:	2201      	moveq	r2, #1
 80063e2:	2202      	movne	r2, #2
 80063e4:	6122      	str	r2, [r4, #16]
 80063e6:	b1a5      	cbz	r5, 8006412 <__d2b+0x92>
 80063e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80063ec:	4405      	add	r5, r0
 80063ee:	603d      	str	r5, [r7, #0]
 80063f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80063f4:	6030      	str	r0, [r6, #0]
 80063f6:	4620      	mov	r0, r4
 80063f8:	b003      	add	sp, #12
 80063fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063fe:	6161      	str	r1, [r4, #20]
 8006400:	e7ea      	b.n	80063d8 <__d2b+0x58>
 8006402:	a801      	add	r0, sp, #4
 8006404:	f7ff fd59 	bl	8005eba <__lo0bits>
 8006408:	9b01      	ldr	r3, [sp, #4]
 800640a:	6163      	str	r3, [r4, #20]
 800640c:	3020      	adds	r0, #32
 800640e:	2201      	movs	r2, #1
 8006410:	e7e8      	b.n	80063e4 <__d2b+0x64>
 8006412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800641a:	6038      	str	r0, [r7, #0]
 800641c:	6918      	ldr	r0, [r3, #16]
 800641e:	f7ff fd2d 	bl	8005e7c <__hi0bits>
 8006422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006426:	e7e5      	b.n	80063f4 <__d2b+0x74>
 8006428:	08006f83 	.word	0x08006f83
 800642c:	08006fa5 	.word	0x08006fa5

08006430 <__sread>:
 8006430:	b510      	push	{r4, lr}
 8006432:	460c      	mov	r4, r1
 8006434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006438:	f000 f8a8 	bl	800658c <_read_r>
 800643c:	2800      	cmp	r0, #0
 800643e:	bfab      	itete	ge
 8006440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006442:	89a3      	ldrhlt	r3, [r4, #12]
 8006444:	181b      	addge	r3, r3, r0
 8006446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800644a:	bfac      	ite	ge
 800644c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800644e:	81a3      	strhlt	r3, [r4, #12]
 8006450:	bd10      	pop	{r4, pc}

08006452 <__swrite>:
 8006452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006456:	461f      	mov	r7, r3
 8006458:	898b      	ldrh	r3, [r1, #12]
 800645a:	05db      	lsls	r3, r3, #23
 800645c:	4605      	mov	r5, r0
 800645e:	460c      	mov	r4, r1
 8006460:	4616      	mov	r6, r2
 8006462:	d505      	bpl.n	8006470 <__swrite+0x1e>
 8006464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006468:	2302      	movs	r3, #2
 800646a:	2200      	movs	r2, #0
 800646c:	f000 f87c 	bl	8006568 <_lseek_r>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	4632      	mov	r2, r6
 800647e:	463b      	mov	r3, r7
 8006480:	4628      	mov	r0, r5
 8006482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006486:	f000 b8a3 	b.w	80065d0 <_write_r>

0800648a <__sseek>:
 800648a:	b510      	push	{r4, lr}
 800648c:	460c      	mov	r4, r1
 800648e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006492:	f000 f869 	bl	8006568 <_lseek_r>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	bf15      	itete	ne
 800649c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800649e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064a6:	81a3      	strheq	r3, [r4, #12]
 80064a8:	bf18      	it	ne
 80064aa:	81a3      	strhne	r3, [r4, #12]
 80064ac:	bd10      	pop	{r4, pc}

080064ae <__sclose>:
 80064ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b2:	f000 b849 	b.w	8006548 <_close_r>

080064b6 <_realloc_r>:
 80064b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ba:	4680      	mov	r8, r0
 80064bc:	4615      	mov	r5, r2
 80064be:	460c      	mov	r4, r1
 80064c0:	b921      	cbnz	r1, 80064cc <_realloc_r+0x16>
 80064c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	4611      	mov	r1, r2
 80064c8:	f7ff baf8 	b.w	8005abc <_malloc_r>
 80064cc:	b92a      	cbnz	r2, 80064da <_realloc_r+0x24>
 80064ce:	f000 f8c3 	bl	8006658 <_free_r>
 80064d2:	2400      	movs	r4, #0
 80064d4:	4620      	mov	r0, r4
 80064d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064da:	f000 f919 	bl	8006710 <_malloc_usable_size_r>
 80064de:	4285      	cmp	r5, r0
 80064e0:	4606      	mov	r6, r0
 80064e2:	d802      	bhi.n	80064ea <_realloc_r+0x34>
 80064e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80064e8:	d8f4      	bhi.n	80064d4 <_realloc_r+0x1e>
 80064ea:	4629      	mov	r1, r5
 80064ec:	4640      	mov	r0, r8
 80064ee:	f7ff fae5 	bl	8005abc <_malloc_r>
 80064f2:	4607      	mov	r7, r0
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d0ec      	beq.n	80064d2 <_realloc_r+0x1c>
 80064f8:	42b5      	cmp	r5, r6
 80064fa:	462a      	mov	r2, r5
 80064fc:	4621      	mov	r1, r4
 80064fe:	bf28      	it	cs
 8006500:	4632      	movcs	r2, r6
 8006502:	f7fe fafe 	bl	8004b02 <memcpy>
 8006506:	4621      	mov	r1, r4
 8006508:	4640      	mov	r0, r8
 800650a:	f000 f8a5 	bl	8006658 <_free_r>
 800650e:	463c      	mov	r4, r7
 8006510:	e7e0      	b.n	80064d4 <_realloc_r+0x1e>

08006512 <memmove>:
 8006512:	4288      	cmp	r0, r1
 8006514:	b510      	push	{r4, lr}
 8006516:	eb01 0402 	add.w	r4, r1, r2
 800651a:	d902      	bls.n	8006522 <memmove+0x10>
 800651c:	4284      	cmp	r4, r0
 800651e:	4623      	mov	r3, r4
 8006520:	d807      	bhi.n	8006532 <memmove+0x20>
 8006522:	1e43      	subs	r3, r0, #1
 8006524:	42a1      	cmp	r1, r4
 8006526:	d008      	beq.n	800653a <memmove+0x28>
 8006528:	f811 2b01 	ldrb.w	r2, [r1], #1
 800652c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006530:	e7f8      	b.n	8006524 <memmove+0x12>
 8006532:	4402      	add	r2, r0
 8006534:	4601      	mov	r1, r0
 8006536:	428a      	cmp	r2, r1
 8006538:	d100      	bne.n	800653c <memmove+0x2a>
 800653a:	bd10      	pop	{r4, pc}
 800653c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006540:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006544:	e7f7      	b.n	8006536 <memmove+0x24>
	...

08006548 <_close_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d06      	ldr	r5, [pc, #24]	@ (8006564 <_close_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	f7fb f968 	bl	8001828 <_close>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_close_r+0x1a>
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	b103      	cbz	r3, 8006562 <_close_r+0x1a>
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	200011e8 	.word	0x200011e8

08006568 <_lseek_r>:
 8006568:	b538      	push	{r3, r4, r5, lr}
 800656a:	4d07      	ldr	r5, [pc, #28]	@ (8006588 <_lseek_r+0x20>)
 800656c:	4604      	mov	r4, r0
 800656e:	4608      	mov	r0, r1
 8006570:	4611      	mov	r1, r2
 8006572:	2200      	movs	r2, #0
 8006574:	602a      	str	r2, [r5, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	f7fb f960 	bl	800183c <_lseek>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_lseek_r+0x1e>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_lseek_r+0x1e>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	200011e8 	.word	0x200011e8

0800658c <_read_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4d07      	ldr	r5, [pc, #28]	@ (80065ac <_read_r+0x20>)
 8006590:	4604      	mov	r4, r0
 8006592:	4608      	mov	r0, r1
 8006594:	4611      	mov	r1, r2
 8006596:	2200      	movs	r2, #0
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fb f908 	bl	80017b0 <_read>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_read_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_read_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	200011e8 	.word	0x200011e8

080065b0 <_sbrk_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d06      	ldr	r5, [pc, #24]	@ (80065cc <_sbrk_r+0x1c>)
 80065b4:	2300      	movs	r3, #0
 80065b6:	4604      	mov	r4, r0
 80065b8:	4608      	mov	r0, r1
 80065ba:	602b      	str	r3, [r5, #0]
 80065bc:	f7fb f916 	bl	80017ec <_sbrk>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d102      	bne.n	80065ca <_sbrk_r+0x1a>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	b103      	cbz	r3, 80065ca <_sbrk_r+0x1a>
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	200011e8 	.word	0x200011e8

080065d0 <_write_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4d07      	ldr	r5, [pc, #28]	@ (80065f0 <_write_r+0x20>)
 80065d4:	4604      	mov	r4, r0
 80065d6:	4608      	mov	r0, r1
 80065d8:	4611      	mov	r1, r2
 80065da:	2200      	movs	r2, #0
 80065dc:	602a      	str	r2, [r5, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	f7fb f8f6 	bl	80017d0 <_write>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_write_r+0x1e>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_write_r+0x1e>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	200011e8 	.word	0x200011e8

080065f4 <__assert_func>:
 80065f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065f6:	4614      	mov	r4, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4b09      	ldr	r3, [pc, #36]	@ (8006620 <__assert_func+0x2c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4605      	mov	r5, r0
 8006600:	68d8      	ldr	r0, [r3, #12]
 8006602:	b954      	cbnz	r4, 800661a <__assert_func+0x26>
 8006604:	4b07      	ldr	r3, [pc, #28]	@ (8006624 <__assert_func+0x30>)
 8006606:	461c      	mov	r4, r3
 8006608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800660c:	9100      	str	r1, [sp, #0]
 800660e:	462b      	mov	r3, r5
 8006610:	4905      	ldr	r1, [pc, #20]	@ (8006628 <__assert_func+0x34>)
 8006612:	f000 f885 	bl	8006720 <fiprintf>
 8006616:	f000 f8a2 	bl	800675e <abort>
 800661a:	4b04      	ldr	r3, [pc, #16]	@ (800662c <__assert_func+0x38>)
 800661c:	e7f4      	b.n	8006608 <__assert_func+0x14>
 800661e:	bf00      	nop
 8006620:	20000024 	.word	0x20000024
 8006624:	08007246 	.word	0x08007246
 8006628:	08007218 	.word	0x08007218
 800662c:	0800720b 	.word	0x0800720b

08006630 <_calloc_r>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	fba1 5402 	umull	r5, r4, r1, r2
 8006636:	b93c      	cbnz	r4, 8006648 <_calloc_r+0x18>
 8006638:	4629      	mov	r1, r5
 800663a:	f7ff fa3f 	bl	8005abc <_malloc_r>
 800663e:	4606      	mov	r6, r0
 8006640:	b928      	cbnz	r0, 800664e <_calloc_r+0x1e>
 8006642:	2600      	movs	r6, #0
 8006644:	4630      	mov	r0, r6
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	220c      	movs	r2, #12
 800664a:	6002      	str	r2, [r0, #0]
 800664c:	e7f9      	b.n	8006642 <_calloc_r+0x12>
 800664e:	462a      	mov	r2, r5
 8006650:	4621      	mov	r1, r4
 8006652:	f7fe fa1c 	bl	8004a8e <memset>
 8006656:	e7f5      	b.n	8006644 <_calloc_r+0x14>

08006658 <_free_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4605      	mov	r5, r0
 800665c:	2900      	cmp	r1, #0
 800665e:	d041      	beq.n	80066e4 <_free_r+0x8c>
 8006660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006664:	1f0c      	subs	r4, r1, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfb8      	it	lt
 800666a:	18e4      	addlt	r4, r4, r3
 800666c:	f7ff fb52 	bl	8005d14 <__malloc_lock>
 8006670:	4a1d      	ldr	r2, [pc, #116]	@ (80066e8 <_free_r+0x90>)
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	b933      	cbnz	r3, 8006684 <_free_r+0x2c>
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	6014      	str	r4, [r2, #0]
 800667a:	4628      	mov	r0, r5
 800667c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006680:	f7ff bb4e 	b.w	8005d20 <__malloc_unlock>
 8006684:	42a3      	cmp	r3, r4
 8006686:	d908      	bls.n	800669a <_free_r+0x42>
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	1821      	adds	r1, r4, r0
 800668c:	428b      	cmp	r3, r1
 800668e:	bf01      	itttt	eq
 8006690:	6819      	ldreq	r1, [r3, #0]
 8006692:	685b      	ldreq	r3, [r3, #4]
 8006694:	1809      	addeq	r1, r1, r0
 8006696:	6021      	streq	r1, [r4, #0]
 8006698:	e7ed      	b.n	8006676 <_free_r+0x1e>
 800669a:	461a      	mov	r2, r3
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	b10b      	cbz	r3, 80066a4 <_free_r+0x4c>
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	d9fa      	bls.n	800669a <_free_r+0x42>
 80066a4:	6811      	ldr	r1, [r2, #0]
 80066a6:	1850      	adds	r0, r2, r1
 80066a8:	42a0      	cmp	r0, r4
 80066aa:	d10b      	bne.n	80066c4 <_free_r+0x6c>
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	4401      	add	r1, r0
 80066b0:	1850      	adds	r0, r2, r1
 80066b2:	4283      	cmp	r3, r0
 80066b4:	6011      	str	r1, [r2, #0]
 80066b6:	d1e0      	bne.n	800667a <_free_r+0x22>
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	6053      	str	r3, [r2, #4]
 80066be:	4408      	add	r0, r1
 80066c0:	6010      	str	r0, [r2, #0]
 80066c2:	e7da      	b.n	800667a <_free_r+0x22>
 80066c4:	d902      	bls.n	80066cc <_free_r+0x74>
 80066c6:	230c      	movs	r3, #12
 80066c8:	602b      	str	r3, [r5, #0]
 80066ca:	e7d6      	b.n	800667a <_free_r+0x22>
 80066cc:	6820      	ldr	r0, [r4, #0]
 80066ce:	1821      	adds	r1, r4, r0
 80066d0:	428b      	cmp	r3, r1
 80066d2:	bf04      	itt	eq
 80066d4:	6819      	ldreq	r1, [r3, #0]
 80066d6:	685b      	ldreq	r3, [r3, #4]
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	bf04      	itt	eq
 80066dc:	1809      	addeq	r1, r1, r0
 80066de:	6021      	streq	r1, [r4, #0]
 80066e0:	6054      	str	r4, [r2, #4]
 80066e2:	e7ca      	b.n	800667a <_free_r+0x22>
 80066e4:	bd38      	pop	{r3, r4, r5, pc}
 80066e6:	bf00      	nop
 80066e8:	200011e4 	.word	0x200011e4

080066ec <__ascii_mbtowc>:
 80066ec:	b082      	sub	sp, #8
 80066ee:	b901      	cbnz	r1, 80066f2 <__ascii_mbtowc+0x6>
 80066f0:	a901      	add	r1, sp, #4
 80066f2:	b142      	cbz	r2, 8006706 <__ascii_mbtowc+0x1a>
 80066f4:	b14b      	cbz	r3, 800670a <__ascii_mbtowc+0x1e>
 80066f6:	7813      	ldrb	r3, [r2, #0]
 80066f8:	600b      	str	r3, [r1, #0]
 80066fa:	7812      	ldrb	r2, [r2, #0]
 80066fc:	1e10      	subs	r0, r2, #0
 80066fe:	bf18      	it	ne
 8006700:	2001      	movne	r0, #1
 8006702:	b002      	add	sp, #8
 8006704:	4770      	bx	lr
 8006706:	4610      	mov	r0, r2
 8006708:	e7fb      	b.n	8006702 <__ascii_mbtowc+0x16>
 800670a:	f06f 0001 	mvn.w	r0, #1
 800670e:	e7f8      	b.n	8006702 <__ascii_mbtowc+0x16>

08006710 <_malloc_usable_size_r>:
 8006710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006714:	1f18      	subs	r0, r3, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	bfbc      	itt	lt
 800671a:	580b      	ldrlt	r3, [r1, r0]
 800671c:	18c0      	addlt	r0, r0, r3
 800671e:	4770      	bx	lr

08006720 <fiprintf>:
 8006720:	b40e      	push	{r1, r2, r3}
 8006722:	b503      	push	{r0, r1, lr}
 8006724:	4601      	mov	r1, r0
 8006726:	ab03      	add	r3, sp, #12
 8006728:	4805      	ldr	r0, [pc, #20]	@ (8006740 <fiprintf+0x20>)
 800672a:	f853 2b04 	ldr.w	r2, [r3], #4
 800672e:	6800      	ldr	r0, [r0, #0]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	f000 f845 	bl	80067c0 <_vfiprintf_r>
 8006736:	b002      	add	sp, #8
 8006738:	f85d eb04 	ldr.w	lr, [sp], #4
 800673c:	b003      	add	sp, #12
 800673e:	4770      	bx	lr
 8006740:	20000024 	.word	0x20000024

08006744 <__ascii_wctomb>:
 8006744:	4603      	mov	r3, r0
 8006746:	4608      	mov	r0, r1
 8006748:	b141      	cbz	r1, 800675c <__ascii_wctomb+0x18>
 800674a:	2aff      	cmp	r2, #255	@ 0xff
 800674c:	d904      	bls.n	8006758 <__ascii_wctomb+0x14>
 800674e:	228a      	movs	r2, #138	@ 0x8a
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006756:	4770      	bx	lr
 8006758:	700a      	strb	r2, [r1, #0]
 800675a:	2001      	movs	r0, #1
 800675c:	4770      	bx	lr

0800675e <abort>:
 800675e:	b508      	push	{r3, lr}
 8006760:	2006      	movs	r0, #6
 8006762:	f000 fa85 	bl	8006c70 <raise>
 8006766:	2001      	movs	r0, #1
 8006768:	f7fb f81c 	bl	80017a4 <_exit>

0800676c <__sfputc_r>:
 800676c:	6893      	ldr	r3, [r2, #8]
 800676e:	3b01      	subs	r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	b410      	push	{r4}
 8006774:	6093      	str	r3, [r2, #8]
 8006776:	da08      	bge.n	800678a <__sfputc_r+0x1e>
 8006778:	6994      	ldr	r4, [r2, #24]
 800677a:	42a3      	cmp	r3, r4
 800677c:	db01      	blt.n	8006782 <__sfputc_r+0x16>
 800677e:	290a      	cmp	r1, #10
 8006780:	d103      	bne.n	800678a <__sfputc_r+0x1e>
 8006782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006786:	f000 b933 	b.w	80069f0 <__swbuf_r>
 800678a:	6813      	ldr	r3, [r2, #0]
 800678c:	1c58      	adds	r0, r3, #1
 800678e:	6010      	str	r0, [r2, #0]
 8006790:	7019      	strb	r1, [r3, #0]
 8006792:	4608      	mov	r0, r1
 8006794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006798:	4770      	bx	lr

0800679a <__sfputs_r>:
 800679a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679c:	4606      	mov	r6, r0
 800679e:	460f      	mov	r7, r1
 80067a0:	4614      	mov	r4, r2
 80067a2:	18d5      	adds	r5, r2, r3
 80067a4:	42ac      	cmp	r4, r5
 80067a6:	d101      	bne.n	80067ac <__sfputs_r+0x12>
 80067a8:	2000      	movs	r0, #0
 80067aa:	e007      	b.n	80067bc <__sfputs_r+0x22>
 80067ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b0:	463a      	mov	r2, r7
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7ff ffda 	bl	800676c <__sfputc_r>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d1f3      	bne.n	80067a4 <__sfputs_r+0xa>
 80067bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067c0 <_vfiprintf_r>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	460d      	mov	r5, r1
 80067c6:	b09d      	sub	sp, #116	@ 0x74
 80067c8:	4614      	mov	r4, r2
 80067ca:	4698      	mov	r8, r3
 80067cc:	4606      	mov	r6, r0
 80067ce:	b118      	cbz	r0, 80067d8 <_vfiprintf_r+0x18>
 80067d0:	6a03      	ldr	r3, [r0, #32]
 80067d2:	b90b      	cbnz	r3, 80067d8 <_vfiprintf_r+0x18>
 80067d4:	f7fe f916 	bl	8004a04 <__sinit>
 80067d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067da:	07d9      	lsls	r1, r3, #31
 80067dc:	d405      	bmi.n	80067ea <_vfiprintf_r+0x2a>
 80067de:	89ab      	ldrh	r3, [r5, #12]
 80067e0:	059a      	lsls	r2, r3, #22
 80067e2:	d402      	bmi.n	80067ea <_vfiprintf_r+0x2a>
 80067e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067e6:	f7fe f98a 	bl	8004afe <__retarget_lock_acquire_recursive>
 80067ea:	89ab      	ldrh	r3, [r5, #12]
 80067ec:	071b      	lsls	r3, r3, #28
 80067ee:	d501      	bpl.n	80067f4 <_vfiprintf_r+0x34>
 80067f0:	692b      	ldr	r3, [r5, #16]
 80067f2:	b99b      	cbnz	r3, 800681c <_vfiprintf_r+0x5c>
 80067f4:	4629      	mov	r1, r5
 80067f6:	4630      	mov	r0, r6
 80067f8:	f000 f938 	bl	8006a6c <__swsetup_r>
 80067fc:	b170      	cbz	r0, 800681c <_vfiprintf_r+0x5c>
 80067fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006800:	07dc      	lsls	r4, r3, #31
 8006802:	d504      	bpl.n	800680e <_vfiprintf_r+0x4e>
 8006804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006808:	b01d      	add	sp, #116	@ 0x74
 800680a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	0598      	lsls	r0, r3, #22
 8006812:	d4f7      	bmi.n	8006804 <_vfiprintf_r+0x44>
 8006814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006816:	f7fe f973 	bl	8004b00 <__retarget_lock_release_recursive>
 800681a:	e7f3      	b.n	8006804 <_vfiprintf_r+0x44>
 800681c:	2300      	movs	r3, #0
 800681e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006820:	2320      	movs	r3, #32
 8006822:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006826:	f8cd 800c 	str.w	r8, [sp, #12]
 800682a:	2330      	movs	r3, #48	@ 0x30
 800682c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80069dc <_vfiprintf_r+0x21c>
 8006830:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006834:	f04f 0901 	mov.w	r9, #1
 8006838:	4623      	mov	r3, r4
 800683a:	469a      	mov	sl, r3
 800683c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006840:	b10a      	cbz	r2, 8006846 <_vfiprintf_r+0x86>
 8006842:	2a25      	cmp	r2, #37	@ 0x25
 8006844:	d1f9      	bne.n	800683a <_vfiprintf_r+0x7a>
 8006846:	ebba 0b04 	subs.w	fp, sl, r4
 800684a:	d00b      	beq.n	8006864 <_vfiprintf_r+0xa4>
 800684c:	465b      	mov	r3, fp
 800684e:	4622      	mov	r2, r4
 8006850:	4629      	mov	r1, r5
 8006852:	4630      	mov	r0, r6
 8006854:	f7ff ffa1 	bl	800679a <__sfputs_r>
 8006858:	3001      	adds	r0, #1
 800685a:	f000 80a7 	beq.w	80069ac <_vfiprintf_r+0x1ec>
 800685e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006860:	445a      	add	r2, fp
 8006862:	9209      	str	r2, [sp, #36]	@ 0x24
 8006864:	f89a 3000 	ldrb.w	r3, [sl]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 809f 	beq.w	80069ac <_vfiprintf_r+0x1ec>
 800686e:	2300      	movs	r3, #0
 8006870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006878:	f10a 0a01 	add.w	sl, sl, #1
 800687c:	9304      	str	r3, [sp, #16]
 800687e:	9307      	str	r3, [sp, #28]
 8006880:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006884:	931a      	str	r3, [sp, #104]	@ 0x68
 8006886:	4654      	mov	r4, sl
 8006888:	2205      	movs	r2, #5
 800688a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688e:	4853      	ldr	r0, [pc, #332]	@ (80069dc <_vfiprintf_r+0x21c>)
 8006890:	f7f9 fc9e 	bl	80001d0 <memchr>
 8006894:	9a04      	ldr	r2, [sp, #16]
 8006896:	b9d8      	cbnz	r0, 80068d0 <_vfiprintf_r+0x110>
 8006898:	06d1      	lsls	r1, r2, #27
 800689a:	bf44      	itt	mi
 800689c:	2320      	movmi	r3, #32
 800689e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068a2:	0713      	lsls	r3, r2, #28
 80068a4:	bf44      	itt	mi
 80068a6:	232b      	movmi	r3, #43	@ 0x2b
 80068a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068ac:	f89a 3000 	ldrb.w	r3, [sl]
 80068b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b2:	d015      	beq.n	80068e0 <_vfiprintf_r+0x120>
 80068b4:	9a07      	ldr	r2, [sp, #28]
 80068b6:	4654      	mov	r4, sl
 80068b8:	2000      	movs	r0, #0
 80068ba:	f04f 0c0a 	mov.w	ip, #10
 80068be:	4621      	mov	r1, r4
 80068c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068c4:	3b30      	subs	r3, #48	@ 0x30
 80068c6:	2b09      	cmp	r3, #9
 80068c8:	d94b      	bls.n	8006962 <_vfiprintf_r+0x1a2>
 80068ca:	b1b0      	cbz	r0, 80068fa <_vfiprintf_r+0x13a>
 80068cc:	9207      	str	r2, [sp, #28]
 80068ce:	e014      	b.n	80068fa <_vfiprintf_r+0x13a>
 80068d0:	eba0 0308 	sub.w	r3, r0, r8
 80068d4:	fa09 f303 	lsl.w	r3, r9, r3
 80068d8:	4313      	orrs	r3, r2
 80068da:	9304      	str	r3, [sp, #16]
 80068dc:	46a2      	mov	sl, r4
 80068de:	e7d2      	b.n	8006886 <_vfiprintf_r+0xc6>
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	1d19      	adds	r1, r3, #4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	9103      	str	r1, [sp, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bfbb      	ittet	lt
 80068ec:	425b      	neglt	r3, r3
 80068ee:	f042 0202 	orrlt.w	r2, r2, #2
 80068f2:	9307      	strge	r3, [sp, #28]
 80068f4:	9307      	strlt	r3, [sp, #28]
 80068f6:	bfb8      	it	lt
 80068f8:	9204      	strlt	r2, [sp, #16]
 80068fa:	7823      	ldrb	r3, [r4, #0]
 80068fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80068fe:	d10a      	bne.n	8006916 <_vfiprintf_r+0x156>
 8006900:	7863      	ldrb	r3, [r4, #1]
 8006902:	2b2a      	cmp	r3, #42	@ 0x2a
 8006904:	d132      	bne.n	800696c <_vfiprintf_r+0x1ac>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	1d1a      	adds	r2, r3, #4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	9203      	str	r2, [sp, #12]
 800690e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006912:	3402      	adds	r4, #2
 8006914:	9305      	str	r3, [sp, #20]
 8006916:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069ec <_vfiprintf_r+0x22c>
 800691a:	7821      	ldrb	r1, [r4, #0]
 800691c:	2203      	movs	r2, #3
 800691e:	4650      	mov	r0, sl
 8006920:	f7f9 fc56 	bl	80001d0 <memchr>
 8006924:	b138      	cbz	r0, 8006936 <_vfiprintf_r+0x176>
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	eba0 000a 	sub.w	r0, r0, sl
 800692c:	2240      	movs	r2, #64	@ 0x40
 800692e:	4082      	lsls	r2, r0
 8006930:	4313      	orrs	r3, r2
 8006932:	3401      	adds	r4, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693a:	4829      	ldr	r0, [pc, #164]	@ (80069e0 <_vfiprintf_r+0x220>)
 800693c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006940:	2206      	movs	r2, #6
 8006942:	f7f9 fc45 	bl	80001d0 <memchr>
 8006946:	2800      	cmp	r0, #0
 8006948:	d03f      	beq.n	80069ca <_vfiprintf_r+0x20a>
 800694a:	4b26      	ldr	r3, [pc, #152]	@ (80069e4 <_vfiprintf_r+0x224>)
 800694c:	bb1b      	cbnz	r3, 8006996 <_vfiprintf_r+0x1d6>
 800694e:	9b03      	ldr	r3, [sp, #12]
 8006950:	3307      	adds	r3, #7
 8006952:	f023 0307 	bic.w	r3, r3, #7
 8006956:	3308      	adds	r3, #8
 8006958:	9303      	str	r3, [sp, #12]
 800695a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800695c:	443b      	add	r3, r7
 800695e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006960:	e76a      	b.n	8006838 <_vfiprintf_r+0x78>
 8006962:	fb0c 3202 	mla	r2, ip, r2, r3
 8006966:	460c      	mov	r4, r1
 8006968:	2001      	movs	r0, #1
 800696a:	e7a8      	b.n	80068be <_vfiprintf_r+0xfe>
 800696c:	2300      	movs	r3, #0
 800696e:	3401      	adds	r4, #1
 8006970:	9305      	str	r3, [sp, #20]
 8006972:	4619      	mov	r1, r3
 8006974:	f04f 0c0a 	mov.w	ip, #10
 8006978:	4620      	mov	r0, r4
 800697a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800697e:	3a30      	subs	r2, #48	@ 0x30
 8006980:	2a09      	cmp	r2, #9
 8006982:	d903      	bls.n	800698c <_vfiprintf_r+0x1cc>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0c6      	beq.n	8006916 <_vfiprintf_r+0x156>
 8006988:	9105      	str	r1, [sp, #20]
 800698a:	e7c4      	b.n	8006916 <_vfiprintf_r+0x156>
 800698c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006990:	4604      	mov	r4, r0
 8006992:	2301      	movs	r3, #1
 8006994:	e7f0      	b.n	8006978 <_vfiprintf_r+0x1b8>
 8006996:	ab03      	add	r3, sp, #12
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	462a      	mov	r2, r5
 800699c:	4b12      	ldr	r3, [pc, #72]	@ (80069e8 <_vfiprintf_r+0x228>)
 800699e:	a904      	add	r1, sp, #16
 80069a0:	4630      	mov	r0, r6
 80069a2:	f7fd fbcb 	bl	800413c <_printf_float>
 80069a6:	4607      	mov	r7, r0
 80069a8:	1c78      	adds	r0, r7, #1
 80069aa:	d1d6      	bne.n	800695a <_vfiprintf_r+0x19a>
 80069ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069ae:	07d9      	lsls	r1, r3, #31
 80069b0:	d405      	bmi.n	80069be <_vfiprintf_r+0x1fe>
 80069b2:	89ab      	ldrh	r3, [r5, #12]
 80069b4:	059a      	lsls	r2, r3, #22
 80069b6:	d402      	bmi.n	80069be <_vfiprintf_r+0x1fe>
 80069b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ba:	f7fe f8a1 	bl	8004b00 <__retarget_lock_release_recursive>
 80069be:	89ab      	ldrh	r3, [r5, #12]
 80069c0:	065b      	lsls	r3, r3, #25
 80069c2:	f53f af1f 	bmi.w	8006804 <_vfiprintf_r+0x44>
 80069c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069c8:	e71e      	b.n	8006808 <_vfiprintf_r+0x48>
 80069ca:	ab03      	add	r3, sp, #12
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	462a      	mov	r2, r5
 80069d0:	4b05      	ldr	r3, [pc, #20]	@ (80069e8 <_vfiprintf_r+0x228>)
 80069d2:	a904      	add	r1, sp, #16
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7fd fe49 	bl	800466c <_printf_i>
 80069da:	e7e4      	b.n	80069a6 <_vfiprintf_r+0x1e6>
 80069dc:	08006f94 	.word	0x08006f94
 80069e0:	08006f9e 	.word	0x08006f9e
 80069e4:	0800413d 	.word	0x0800413d
 80069e8:	0800679b 	.word	0x0800679b
 80069ec:	08006f9a 	.word	0x08006f9a

080069f0 <__swbuf_r>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	460e      	mov	r6, r1
 80069f4:	4614      	mov	r4, r2
 80069f6:	4605      	mov	r5, r0
 80069f8:	b118      	cbz	r0, 8006a02 <__swbuf_r+0x12>
 80069fa:	6a03      	ldr	r3, [r0, #32]
 80069fc:	b90b      	cbnz	r3, 8006a02 <__swbuf_r+0x12>
 80069fe:	f7fe f801 	bl	8004a04 <__sinit>
 8006a02:	69a3      	ldr	r3, [r4, #24]
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	071a      	lsls	r2, r3, #28
 8006a0a:	d501      	bpl.n	8006a10 <__swbuf_r+0x20>
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	b943      	cbnz	r3, 8006a22 <__swbuf_r+0x32>
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f82a 	bl	8006a6c <__swsetup_r>
 8006a18:	b118      	cbz	r0, 8006a22 <__swbuf_r+0x32>
 8006a1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006a1e:	4638      	mov	r0, r7
 8006a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	1a98      	subs	r0, r3, r2
 8006a28:	6963      	ldr	r3, [r4, #20]
 8006a2a:	b2f6      	uxtb	r6, r6
 8006a2c:	4283      	cmp	r3, r0
 8006a2e:	4637      	mov	r7, r6
 8006a30:	dc05      	bgt.n	8006a3e <__swbuf_r+0x4e>
 8006a32:	4621      	mov	r1, r4
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff f945 	bl	8005cc4 <_fflush_r>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d1ed      	bne.n	8006a1a <__swbuf_r+0x2a>
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	60a3      	str	r3, [r4, #8]
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	6022      	str	r2, [r4, #0]
 8006a4a:	701e      	strb	r6, [r3, #0]
 8006a4c:	6962      	ldr	r2, [r4, #20]
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d004      	beq.n	8006a5e <__swbuf_r+0x6e>
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	07db      	lsls	r3, r3, #31
 8006a58:	d5e1      	bpl.n	8006a1e <__swbuf_r+0x2e>
 8006a5a:	2e0a      	cmp	r6, #10
 8006a5c:	d1df      	bne.n	8006a1e <__swbuf_r+0x2e>
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	f7ff f92f 	bl	8005cc4 <_fflush_r>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d0d9      	beq.n	8006a1e <__swbuf_r+0x2e>
 8006a6a:	e7d6      	b.n	8006a1a <__swbuf_r+0x2a>

08006a6c <__swsetup_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4b29      	ldr	r3, [pc, #164]	@ (8006b14 <__swsetup_r+0xa8>)
 8006a70:	4605      	mov	r5, r0
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	460c      	mov	r4, r1
 8006a76:	b118      	cbz	r0, 8006a80 <__swsetup_r+0x14>
 8006a78:	6a03      	ldr	r3, [r0, #32]
 8006a7a:	b90b      	cbnz	r3, 8006a80 <__swsetup_r+0x14>
 8006a7c:	f7fd ffc2 	bl	8004a04 <__sinit>
 8006a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a84:	0719      	lsls	r1, r3, #28
 8006a86:	d422      	bmi.n	8006ace <__swsetup_r+0x62>
 8006a88:	06da      	lsls	r2, r3, #27
 8006a8a:	d407      	bmi.n	8006a9c <__swsetup_r+0x30>
 8006a8c:	2209      	movs	r2, #9
 8006a8e:	602a      	str	r2, [r5, #0]
 8006a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a9a:	e033      	b.n	8006b04 <__swsetup_r+0x98>
 8006a9c:	0758      	lsls	r0, r3, #29
 8006a9e:	d512      	bpl.n	8006ac6 <__swsetup_r+0x5a>
 8006aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006aa2:	b141      	cbz	r1, 8006ab6 <__swsetup_r+0x4a>
 8006aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006aa8:	4299      	cmp	r1, r3
 8006aaa:	d002      	beq.n	8006ab2 <__swsetup_r+0x46>
 8006aac:	4628      	mov	r0, r5
 8006aae:	f7ff fdd3 	bl	8006658 <_free_r>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006abc:	81a3      	strh	r3, [r4, #12]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6063      	str	r3, [r4, #4]
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	f043 0308 	orr.w	r3, r3, #8
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	b94b      	cbnz	r3, 8006ae6 <__swsetup_r+0x7a>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006adc:	d003      	beq.n	8006ae6 <__swsetup_r+0x7a>
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f000 f83f 	bl	8006b64 <__smakebuf_r>
 8006ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aea:	f013 0201 	ands.w	r2, r3, #1
 8006aee:	d00a      	beq.n	8006b06 <__swsetup_r+0x9a>
 8006af0:	2200      	movs	r2, #0
 8006af2:	60a2      	str	r2, [r4, #8]
 8006af4:	6962      	ldr	r2, [r4, #20]
 8006af6:	4252      	negs	r2, r2
 8006af8:	61a2      	str	r2, [r4, #24]
 8006afa:	6922      	ldr	r2, [r4, #16]
 8006afc:	b942      	cbnz	r2, 8006b10 <__swsetup_r+0xa4>
 8006afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b02:	d1c5      	bne.n	8006a90 <__swsetup_r+0x24>
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
 8006b06:	0799      	lsls	r1, r3, #30
 8006b08:	bf58      	it	pl
 8006b0a:	6962      	ldrpl	r2, [r4, #20]
 8006b0c:	60a2      	str	r2, [r4, #8]
 8006b0e:	e7f4      	b.n	8006afa <__swsetup_r+0x8e>
 8006b10:	2000      	movs	r0, #0
 8006b12:	e7f7      	b.n	8006b04 <__swsetup_r+0x98>
 8006b14:	20000024 	.word	0x20000024

08006b18 <__swhatbuf_r>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b20:	2900      	cmp	r1, #0
 8006b22:	b096      	sub	sp, #88	@ 0x58
 8006b24:	4615      	mov	r5, r2
 8006b26:	461e      	mov	r6, r3
 8006b28:	da0d      	bge.n	8006b46 <__swhatbuf_r+0x2e>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	bf14      	ite	ne
 8006b36:	2340      	movne	r3, #64	@ 0x40
 8006b38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	6031      	str	r1, [r6, #0]
 8006b40:	602b      	str	r3, [r5, #0]
 8006b42:	b016      	add	sp, #88	@ 0x58
 8006b44:	bd70      	pop	{r4, r5, r6, pc}
 8006b46:	466a      	mov	r2, sp
 8006b48:	f000 f848 	bl	8006bdc <_fstat_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	dbec      	blt.n	8006b2a <__swhatbuf_r+0x12>
 8006b50:	9901      	ldr	r1, [sp, #4]
 8006b52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b5a:	4259      	negs	r1, r3
 8006b5c:	4159      	adcs	r1, r3
 8006b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b62:	e7eb      	b.n	8006b3c <__swhatbuf_r+0x24>

08006b64 <__smakebuf_r>:
 8006b64:	898b      	ldrh	r3, [r1, #12]
 8006b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b68:	079d      	lsls	r5, r3, #30
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	d507      	bpl.n	8006b80 <__smakebuf_r+0x1c>
 8006b70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	2301      	movs	r3, #1
 8006b7a:	6163      	str	r3, [r4, #20]
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b80:	ab01      	add	r3, sp, #4
 8006b82:	466a      	mov	r2, sp
 8006b84:	f7ff ffc8 	bl	8006b18 <__swhatbuf_r>
 8006b88:	9f00      	ldr	r7, [sp, #0]
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f7fe ff94 	bl	8005abc <_malloc_r>
 8006b94:	b948      	cbnz	r0, 8006baa <__smakebuf_r+0x46>
 8006b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9a:	059a      	lsls	r2, r3, #22
 8006b9c:	d4ee      	bmi.n	8006b7c <__smakebuf_r+0x18>
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	f043 0302 	orr.w	r3, r3, #2
 8006ba6:	81a3      	strh	r3, [r4, #12]
 8006ba8:	e7e2      	b.n	8006b70 <__smakebuf_r+0xc>
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	6020      	str	r0, [r4, #0]
 8006bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bba:	b15b      	cbz	r3, 8006bd4 <__smakebuf_r+0x70>
 8006bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f81d 	bl	8006c00 <_isatty_r>
 8006bc6:	b128      	cbz	r0, 8006bd4 <__smakebuf_r+0x70>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f023 0303 	bic.w	r3, r3, #3
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	431d      	orrs	r5, r3
 8006bd8:	81a5      	strh	r5, [r4, #12]
 8006bda:	e7cf      	b.n	8006b7c <__smakebuf_r+0x18>

08006bdc <_fstat_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d07      	ldr	r5, [pc, #28]	@ (8006bfc <_fstat_r+0x20>)
 8006be0:	2300      	movs	r3, #0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	4611      	mov	r1, r2
 8006be8:	602b      	str	r3, [r5, #0]
 8006bea:	f7fa fe20 	bl	800182e <_fstat>
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	d102      	bne.n	8006bf8 <_fstat_r+0x1c>
 8006bf2:	682b      	ldr	r3, [r5, #0]
 8006bf4:	b103      	cbz	r3, 8006bf8 <_fstat_r+0x1c>
 8006bf6:	6023      	str	r3, [r4, #0]
 8006bf8:	bd38      	pop	{r3, r4, r5, pc}
 8006bfa:	bf00      	nop
 8006bfc:	200011e8 	.word	0x200011e8

08006c00 <_isatty_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d06      	ldr	r5, [pc, #24]	@ (8006c1c <_isatty_r+0x1c>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fa fe14 	bl	8001838 <_isatty>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_isatty_r+0x1a>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_isatty_r+0x1a>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	200011e8 	.word	0x200011e8

08006c20 <_raise_r>:
 8006c20:	291f      	cmp	r1, #31
 8006c22:	b538      	push	{r3, r4, r5, lr}
 8006c24:	4605      	mov	r5, r0
 8006c26:	460c      	mov	r4, r1
 8006c28:	d904      	bls.n	8006c34 <_raise_r+0x14>
 8006c2a:	2316      	movs	r3, #22
 8006c2c:	6003      	str	r3, [r0, #0]
 8006c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c36:	b112      	cbz	r2, 8006c3e <_raise_r+0x1e>
 8006c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c3c:	b94b      	cbnz	r3, 8006c52 <_raise_r+0x32>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f830 	bl	8006ca4 <_getpid_r>
 8006c44:	4622      	mov	r2, r4
 8006c46:	4601      	mov	r1, r0
 8006c48:	4628      	mov	r0, r5
 8006c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c4e:	f000 b817 	b.w	8006c80 <_kill_r>
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d00a      	beq.n	8006c6c <_raise_r+0x4c>
 8006c56:	1c59      	adds	r1, r3, #1
 8006c58:	d103      	bne.n	8006c62 <_raise_r+0x42>
 8006c5a:	2316      	movs	r3, #22
 8006c5c:	6003      	str	r3, [r0, #0]
 8006c5e:	2001      	movs	r0, #1
 8006c60:	e7e7      	b.n	8006c32 <_raise_r+0x12>
 8006c62:	2100      	movs	r1, #0
 8006c64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4798      	blx	r3
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	e7e0      	b.n	8006c32 <_raise_r+0x12>

08006c70 <raise>:
 8006c70:	4b02      	ldr	r3, [pc, #8]	@ (8006c7c <raise+0xc>)
 8006c72:	4601      	mov	r1, r0
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	f7ff bfd3 	b.w	8006c20 <_raise_r>
 8006c7a:	bf00      	nop
 8006c7c:	20000024 	.word	0x20000024

08006c80 <_kill_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	@ (8006ca0 <_kill_r+0x20>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	f7fa fd81 	bl	8001794 <_kill>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d102      	bne.n	8006c9c <_kill_r+0x1c>
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	b103      	cbz	r3, 8006c9c <_kill_r+0x1c>
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	bd38      	pop	{r3, r4, r5, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200011e8 	.word	0x200011e8

08006ca4 <_getpid_r>:
 8006ca4:	f7fa bd74 	b.w	8001790 <_getpid>

08006ca8 <_init>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	bf00      	nop
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr

08006cb4 <_fini>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	bf00      	nop
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr
