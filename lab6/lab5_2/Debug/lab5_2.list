
lab5_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b520  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800b6b0  0800b6b0  0000c6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7e8  0800b7e8  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7e8  0800b7e8  0000c7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f0  0800b7f0  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f0  0800b7f0  0000c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7f4  0800b7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b7f8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d0  2000006c  0800b864  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000253c  0800b864  0000d53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a8a5  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005324  00000000  00000000  00037941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002840  00000000  00000000  0003cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f69  00000000  00000000  0003f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006d3b  00000000  00000000  00041411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c959  00000000  00000000  0004814c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dcc5  00000000  00000000  00074aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019276a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b750  00000000  00000000  001927b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0019df00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b698 	.word	0x0800b698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800b698 	.word	0x0800b698

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <__NVIC_SetVector+0x34>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	3310      	adds	r3, #16
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	461a      	mov	r2, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005a6:	2201      	movs	r2, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <__io_putchar+0x20>)
 80005aa:	f005 fdef 	bl	800618c <HAL_UART_Transmit>
  return ch;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200001bc 	.word	0x200001bc

080005bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <HAL_ADC_MspInit+0x38>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d10b      	bne.n	80005e6 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	50040000 	.word	0x50040000
 80005f8:	40021000 	.word	0x40021000

080005fc <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800061e:	4b35      	ldr	r3, [pc, #212]	@ (80006f4 <ADC1_Init+0xf8>)
 8000620:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <ADC1_Init+0xfc>)
 8000622:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000624:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <ADC1_Init+0xf8>)
 8000626:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <ADC1_Init+0xf8>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <ADC1_Init+0xf8>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <ADC1_Init+0xf8>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <ADC1_Init+0xf8>)
 8000640:	2204      	movs	r2, #4
 8000642:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <ADC1_Init+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <ADC1_Init+0xf8>)
 800064c:	2200      	movs	r2, #0
 800064e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <ADC1_Init+0xf8>)
 8000652:	2201      	movs	r2, #1
 8000654:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <ADC1_Init+0xf8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <ADC1_Init+0xf8>)
 8000660:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <ADC1_Init+0xf8>)
 8000668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <ADC1_Init+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <ADC1_Init+0xf8>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <ADC1_Init+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <ADC1_Init+0xf8>)
 8000686:	f001 fbe7 	bl	8001e58 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <ADC1_Init+0x98>
    {
        Error_Handler();
 8000690:	f000 fd66 	bl	8001160 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000694:	217f      	movs	r1, #127	@ 0x7f
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <ADC1_Init+0xf8>)
 8000698:	f002 fbb2 	bl	8002e00 <HAL_ADCEx_Calibration_Start>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <ADC1_Init+0xaa>
    {
        Error_Handler();
 80006a2:	f000 fd5d 	bl	8001160 <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <ADC1_Init+0xf8>)
 80006b2:	f002 fc05 	bl	8002ec0 <HAL_ADCEx_MultiModeConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <ADC1_Init+0xc4>
    {
        Error_Handler();
 80006bc:	f000 fd50 	bl	8001160 <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ADC1_Init+0x100>)
 80006c2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2306      	movs	r3, #6
 80006c6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006cc:	237f      	movs	r3, #127	@ 0x7f
 80006ce:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <ADC1_Init+0xf8>)
 80006de:	f001 fdd1 	bl	8002284 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <ADC1_Init+0xf0>
    {
        Error_Handler();
 80006e8:	f000 fd3a 	bl	8001160 <Error_Handler>
    }

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000080c 	.word	0x2000080c
 80006f8:	50040000 	.word	0x50040000
 80006fc:	c7520000 	.word	0xc7520000

08000700 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
//  for (i = 0; i < SAMPLE_BUFFER_SIZE; i++)
//  {
//    printf("%d ", sample_buffer[i]);
//  }
//  printf("\n");
	osSemaphoreRelease(myBinarySem02Handle);
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <HAL_ADC_ConvCpltCallback+0x1c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f006 ff4d 	bl	80075ac <osSemaphoreRelease>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200007bc 	.word	0x200007bc

08000720 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
//  for (i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++)
//  {
//	  printf("%d ", sample_buffer[i]);
//  }
//  printf("\n");
	osSemaphoreRelease(myBinarySem01Handle);
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f006 ff3d 	bl	80075ac <osSemaphoreRelease>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200007b8 	.word	0x200007b8

08000740 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <DMA1_Channel1_IRQHandler+0x20>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68da      	ldr	r2, [r3, #12]
 800074a:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <DMA1_Channel1_IRQHandler+0x20>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0202 	orr.w	r2, r2, #2
 8000752:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <DMA1_Channel1_IRQHandler+0x24>)
 8000756:	f002 ff99 	bl	800368c <HAL_DMA_IRQHandler>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000080c 	.word	0x2000080c
 8000764:	20000870 	.word	0x20000870

08000768 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <ADC1_DMA1CH1_init+0x98>)
 8000770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000772:	4a23      	ldr	r2, [pc, #140]	@ (8000800 <ADC1_DMA1CH1_init+0x98>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6493      	str	r3, [r2, #72]	@ 0x48
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <ADC1_DMA1CH1_init+0x98>)
 800077c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 8000788:	4a1f      	ldr	r2, [pc, #124]	@ (8000808 <ADC1_DMA1CH1_init+0xa0>)
 800078a:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 800079a:	2280      	movs	r2, #128	@ 0x80
 800079c:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 80007a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a4:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 80007a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007ac:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 80007b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007ba:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 80007bc:	4811      	ldr	r0, [pc, #68]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 80007be:	f002 fe4d 	bl	800345c <HAL_DMA_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 80007c8:	f000 fcca 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <ADC1_DMA1CH1_init+0xa4>)
 80007ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 80007d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <ADC1_DMA1CH1_init+0x9c>)
 80007d4:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <ADC1_DMA1CH1_init+0xa4>)
 80007d6:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 80007d8:	f7ff ff10 	bl	80005fc <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <ADC1_DMA1CH1_init+0xa8>)
 80007de:	4619      	mov	r1, r3
 80007e0:	200b      	movs	r0, #11
 80007e2:	f7ff febd 	bl	8000560 <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 80007e6:	2202      	movs	r2, #2
 80007e8:	2102      	movs	r1, #2
 80007ea:	200b      	movs	r0, #11
 80007ec:	f002 fcf3 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007f0:	200b      	movs	r0, #11
 80007f2:	f002 fd0c 	bl	800320e <HAL_NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	20000870 	.word	0x20000870
 8000808:	40020008 	.word	0x40020008
 800080c:	2000080c 	.word	0x2000080c
 8000810:	08000741 	.word	0x08000741

08000814 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <HAL_TIM_Base_MspInit+0x38>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d10b      	bne.n	800083e <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_TIM_Base_MspInit+0x3c>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082a:	4a09      	ldr	r2, [pc, #36]	@ (8000850 <HAL_TIM_Base_MspInit+0x3c>)
 800082c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000830:	6613      	str	r3, [r2, #96]	@ 0x60
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <HAL_TIM_Base_MspInit+0x3c>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    }
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40012c00 	.word	0x40012c00
 8000850:	40021000 	.word	0x40021000

08000854 <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <TIM1_Init+0x98>)
 8000874:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <TIM1_Init+0x9c>)
 8000876:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 4000 - 1;
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <TIM1_Init+0x98>)
 800087a:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800087e:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <TIM1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <TIM1_Init+0x98>)
 8000888:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800088c:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <TIM1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <TIM1_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089a:	4814      	ldr	r0, [pc, #80]	@ (80008ec <TIM1_Init+0x98>)
 800089c:	f005 f8cf 	bl	8005a3e <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <TIM1_Init+0x56>
    {
        Error_Handler();
 80008a6:	f000 fc5b 	bl	8001160 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ae:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	480d      	ldr	r0, [pc, #52]	@ (80008ec <TIM1_Init+0x98>)
 80008b8:	f005 f988 	bl	8005bcc <HAL_TIM_ConfigClockSource>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <TIM1_Init+0x72>
    {
        Error_Handler();
 80008c2:	f000 fc4d 	bl	8001160 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008c6:	2320      	movs	r3, #32
 80008c8:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4806      	ldr	r0, [pc, #24]	@ (80008ec <TIM1_Init+0x98>)
 80008d4:	f005 fb84 	bl	8005fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <TIM1_Init+0x8e>
    {
        Error_Handler();
 80008de:	f000 fc3f 	bl	8001160 <Error_Handler>
    }
}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200007c0 	.word	0x200007c0
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f001 f819 	bl	800192e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f85e 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f000 fa28 	bl	8000d54 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000904:	f000 f8bc 	bl	8000a80 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000908:	f000 f8f2 	bl	8000af0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800090c:	f000 f930 	bl	8000b70 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000910:	f000 f954 	bl	8000bbc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000914:	f000 f990 	bl	8000c38 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000918:	f000 f9be 	bl	8000c98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800091c:	f000 f9ec 	bl	8000cf8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  TIM1_Init();
 8000920:	f7ff ff98 	bl	8000854 <TIM1_Init>
  ADC1_DMA1CH1_init();
 8000924:	f7ff ff20 	bl	8000768 <ADC1_DMA1CH1_init>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&sample_buffer[0], SAMPLE_BUFFER_SIZE);
 8000928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800092c:	4916      	ldr	r1, [pc, #88]	@ (8000988 <main+0x94>)
 800092e:	4817      	ldr	r0, [pc, #92]	@ (800098c <main+0x98>)
 8000930:	f001 fbe2 	bl	80020f8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8000934:	4816      	ldr	r0, [pc, #88]	@ (8000990 <main+0x9c>)
 8000936:	f005 f8d9 	bl	8005aec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800093a:	f006 fc65 	bl	8007208 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <main+0xa0>)
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f006 fd57 	bl	80073f6 <osSemaphoreNew>
 8000948:	4603      	mov	r3, r0
 800094a:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <main+0xa4>)
 800094c:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 0, &myBinarySem02_attributes);
 800094e:	4a13      	ldr	r2, [pc, #76]	@ (800099c <main+0xa8>)
 8000950:	2100      	movs	r1, #0
 8000952:	2001      	movs	r0, #1
 8000954:	f006 fd4f 	bl	80073f6 <osSemaphoreNew>
 8000958:	4603      	mov	r3, r0
 800095a:	4a11      	ldr	r2, [pc, #68]	@ (80009a0 <main+0xac>)
 800095c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800095e:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <main+0xb0>)
 8000960:	2100      	movs	r1, #0
 8000962:	4811      	ldr	r0, [pc, #68]	@ (80009a8 <main+0xb4>)
 8000964:	f006 fc9a 	bl	800729c <osThreadNew>
 8000968:	4603      	mov	r3, r0
 800096a:	4a10      	ldr	r2, [pc, #64]	@ (80009ac <main+0xb8>)
 800096c:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <main+0xbc>)
 8000970:	2100      	movs	r1, #0
 8000972:	4810      	ldr	r0, [pc, #64]	@ (80009b4 <main+0xc0>)
 8000974:	f006 fc92 	bl	800729c <osThreadNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a0f      	ldr	r2, [pc, #60]	@ (80009b8 <main+0xc4>)
 800097c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800097e:	f006 fc67 	bl	8007250 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000982:	bf00      	nop
 8000984:	e7fd      	b.n	8000982 <main+0x8e>
 8000986:	bf00      	nop
 8000988:	200008b8 	.word	0x200008b8
 800098c:	2000080c 	.word	0x2000080c
 8000990:	200007c0 	.word	0x200007c0
 8000994:	0800b74c 	.word	0x0800b74c
 8000998:	200007b8 	.word	0x200007b8
 800099c:	0800b75c 	.word	0x0800b75c
 80009a0:	200007bc 	.word	0x200007bc
 80009a4:	0800b704 	.word	0x0800b704
 80009a8:	080010b9 	.word	0x080010b9
 80009ac:	200007b0 	.word	0x200007b0
 80009b0:	0800b728 	.word	0x0800b728
 80009b4:	0800110d 	.word	0x0800110d
 80009b8:	200007b4 	.word	0x200007b4

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b096      	sub	sp, #88	@ 0x58
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2244      	movs	r2, #68	@ 0x44
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f009 ffc8 	bl	800a960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009e2:	f003 fb9b 	bl	800411c <HAL_PWREx_ControlVoltageScaling>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009ec:	f000 fbb8 	bl	8001160 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009f0:	f003 fb76 	bl	80040e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <SystemClock_Config+0xc0>)
 80009f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009fa:	4a20      	ldr	r2, [pc, #128]	@ (8000a7c <SystemClock_Config+0xc0>)
 80009fc:	f023 0318 	bic.w	r3, r3, #24
 8000a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a04:	2314      	movs	r3, #20
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a14:	2360      	movs	r3, #96	@ 0x60
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a24:	2328      	movs	r3, #40	@ 0x28
 8000a26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 fc91 	bl	8004360 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a44:	f000 fb8c 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 f859 	bl	8004b18 <HAL_RCC_ClockConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a6c:	f000 fb78 	bl	8001160 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a70:	f004 fd60 	bl	8005534 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a74:	bf00      	nop
 8000a76:	3758      	adds	r7, #88	@ 0x58
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000

08000a80 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000a86:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <MX_DFSDM1_Init+0x6c>)
 8000a88:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a90:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000aaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <MX_DFSDM1_Init+0x68>)
 8000ad6:	f002 fbb5 	bl	8003244 <HAL_DFSDM_ChannelInit>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000ae0:	f000 fb3e 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000088 	.word	0x20000088
 8000aec:	40016020 	.word	0x40016020

08000af0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b68 <MX_I2C2_Init+0x78>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000afc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b6c <MX_I2C2_Init+0x7c>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b00:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2a:	480e      	ldr	r0, [pc, #56]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b2c:	f003 f873 	bl	8003c16 <HAL_I2C_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b36:	f000 fb13 	bl	8001160 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b3e:	f003 f905 	bl	8003d4c <HAL_I2CEx_ConfigAnalogFilter>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b48:	f000 fb0a 	bl	8001160 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_I2C2_Init+0x74>)
 8000b50:	f003 f947 	bl	8003de2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b5a:	f000 fb01 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000c0 	.word	0x200000c0
 8000b68:	40005800 	.word	0x40005800
 8000b6c:	10d19ce4 	.word	0x10d19ce4

08000b70 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_QUADSPI_Init+0x44>)
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <MX_QUADSPI_Init+0x48>)
 8000b78:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_QUADSPI_Init+0x44>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_QUADSPI_Init+0x44>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_QUADSPI_Init+0x44>)
 8000b88:	2210      	movs	r2, #16
 8000b8a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_QUADSPI_Init+0x44>)
 8000b8e:	2217      	movs	r2, #23
 8000b90:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_QUADSPI_Init+0x44>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_QUADSPI_Init+0x44>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_QUADSPI_Init+0x44>)
 8000ba0:	f003 fb22 	bl	80041e8 <HAL_QSPI_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000baa:	f000 fad9 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000114 	.word	0x20000114
 8000bb8:	a0001000 	.word	0xa0001000

08000bbc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c34 <MX_SPI3_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bcc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bd6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bda:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000c0a:	2207      	movs	r2, #7
 8000c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_SPI3_Init+0x74>)
 8000c1c:	f004 fe6c 	bl	80058f8 <HAL_SPI_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c26:	f000 fa9b 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000158 	.word	0x20000158
 8000c34:	40003c00 	.word	0x40003c00

08000c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c3e:	4a15      	ldr	r2, [pc, #84]	@ (8000c94 <MX_USART1_UART_Init+0x5c>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_USART1_UART_Init+0x58>)
 8000c7c:	f005 fa38 	bl	80060f0 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c86:	f000 fa6b 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200001bc 	.word	0x200001bc
 8000c94:	40013800 	.word	0x40013800

08000c98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000c9e:	4a15      	ldr	r2, [pc, #84]	@ (8000cf4 <MX_USART3_UART_Init+0x5c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_USART3_UART_Init+0x58>)
 8000cdc:	f005 fa08 	bl	80060f0 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ce6:	f000 fa3b 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000244 	.word	0x20000244
 8000cf4:	40004800 	.word	0x40004800

08000cf8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d06:	2206      	movs	r2, #6
 8000d08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d12:	2202      	movs	r2, #2
 8000d14:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d28:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3c:	f003 f89d 	bl	8003e7a <HAL_PCD_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d46:	f000 fa0b 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200002cc 	.word	0x200002cc

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	4bbd      	ldr	r3, [pc, #756]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4abc      	ldr	r2, [pc, #752]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4bba      	ldr	r3, [pc, #744]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4bb7      	ldr	r3, [pc, #732]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4ab6      	ldr	r2, [pc, #728]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4bb4      	ldr	r3, [pc, #720]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4bb1      	ldr	r3, [pc, #708]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4ab0      	ldr	r2, [pc, #704]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4bae      	ldr	r3, [pc, #696]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4bab      	ldr	r3, [pc, #684]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4aaa      	ldr	r2, [pc, #680]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4ba8      	ldr	r3, [pc, #672]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	4ba5      	ldr	r3, [pc, #660]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4aa4      	ldr	r2, [pc, #656]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4ba2      	ldr	r3, [pc, #648]	@ (8001060 <MX_GPIO_Init+0x30c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000de8:	489e      	ldr	r0, [pc, #632]	@ (8001064 <MX_GPIO_Init+0x310>)
 8000dea:	f002 fed9 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f002 fed2 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000e02:	4899      	ldr	r0, [pc, #612]	@ (8001068 <MX_GPIO_Init+0x314>)
 8000e04:	f002 fecc 	bl	8003ba0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000e0e:	4897      	ldr	r0, [pc, #604]	@ (800106c <MX_GPIO_Init+0x318>)
 8000e10:	f002 fec6 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e1a:	4894      	ldr	r0, [pc, #592]	@ (800106c <MX_GPIO_Init+0x318>)
 8000e1c:	f002 fec0 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e26:	4892      	ldr	r0, [pc, #584]	@ (8001070 <MX_GPIO_Init+0x31c>)
 8000e28:	f002 feba 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2120      	movs	r1, #32
 8000e30:	488d      	ldr	r0, [pc, #564]	@ (8001068 <MX_GPIO_Init+0x314>)
 8000e32:	f002 feb5 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2101      	movs	r1, #1
 8000e3a:	488a      	ldr	r0, [pc, #552]	@ (8001064 <MX_GPIO_Init+0x310>)
 8000e3c:	f002 feb0 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e40:	f240 1315 	movw	r3, #277	@ 0x115
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4882      	ldr	r0, [pc, #520]	@ (8001064 <MX_GPIO_Init+0x310>)
 8000e5a:	f002 fcf7 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e5e:	236a      	movs	r3, #106	@ 0x6a
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	487c      	ldr	r0, [pc, #496]	@ (8001064 <MX_GPIO_Init+0x310>)
 8000e74:	f002 fcea 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4878      	ldr	r0, [pc, #480]	@ (8001070 <MX_GPIO_Init+0x31c>)
 8000e90:	f002 fcdc 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000e94:	233f      	movs	r3, #63	@ 0x3f
 8000e96:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e98:	230b      	movs	r3, #11
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4872      	ldr	r0, [pc, #456]	@ (8001070 <MX_GPIO_Init+0x31c>)
 8000ea8:	f002 fcd0 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000eac:	2303      	movs	r3, #3
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eca:	f002 fcbf 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ece:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eea:	f002 fcaf 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000efe:	2301      	movs	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f002 fc9e 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f10:	2310      	movs	r3, #16
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f14:	230b      	movs	r3, #11
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f26:	f002 fc91 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f2a:	23e0      	movs	r3, #224	@ 0xe0
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f002 fc80 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4841      	ldr	r0, [pc, #260]	@ (8001068 <MX_GPIO_Init+0x314>)
 8000f62:	f002 fc73 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f66:	2302      	movs	r3, #2
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	483b      	ldr	r0, [pc, #236]	@ (8001068 <MX_GPIO_Init+0x314>)
 8000f7a:	f002 fc67 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f7e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f82:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4834      	ldr	r0, [pc, #208]	@ (8001068 <MX_GPIO_Init+0x314>)
 8000f98:	f002 fc58 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f9c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000fa0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	482e      	ldr	r0, [pc, #184]	@ (800106c <MX_GPIO_Init+0x318>)
 8000fb4:	f002 fc4a 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000fb8:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4826      	ldr	r0, [pc, #152]	@ (800106c <MX_GPIO_Init+0x318>)
 8000fd2:	f002 fc3b 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fd6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4820      	ldr	r0, [pc, #128]	@ (8001070 <MX_GPIO_Init+0x31c>)
 8000ff0:	f002 fc2c 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ff4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4819      	ldr	r0, [pc, #100]	@ (8001070 <MX_GPIO_Init+0x31c>)
 800100c:	f002 fc1e 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001010:	2302      	movs	r3, #2
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001020:	2305      	movs	r3, #5
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4810      	ldr	r0, [pc, #64]	@ (800106c <MX_GPIO_Init+0x318>)
 800102c:	f002 fc0e 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001030:	2378      	movs	r3, #120	@ 0x78
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001040:	2307      	movs	r3, #7
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4808      	ldr	r0, [pc, #32]	@ (800106c <MX_GPIO_Init+0x318>)
 800104c:	f002 fbfe 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001050:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001056:	2312      	movs	r3, #18
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	e00a      	b.n	8001074 <MX_GPIO_Init+0x320>
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	48001000 	.word	0x48001000
 8001068:	48000400 	.word	0x48000400
 800106c:	48000c00 	.word	0x48000c00
 8001070:	48000800 	.word	0x48000800
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800107a:	2304      	movs	r3, #4
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <MX_GPIO_Init+0x360>)
 8001086:	f002 fbe1 	bl	800384c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2101      	movs	r1, #1
 800108e:	2017      	movs	r0, #23
 8001090:	f002 f8a1 	bl	80031d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001094:	2017      	movs	r0, #23
 8001096:	f002 f8ba 	bl	800320e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2101      	movs	r1, #1
 800109e:	2028      	movs	r0, #40	@ 0x28
 80010a0:	f002 f899 	bl	80031d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a4:	2028      	movs	r0, #40	@ 0x28
 80010a6:	f002 f8b2 	bl	800320e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	48000400 	.word	0x48000400

080010b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <StartDefaultTask+0x48>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 fa1d 	bl	8007508 <osSemaphoreAcquire>
	int i;
	for (i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e00a      	b.n	80010ea <StartDefaultTask+0x32>
	{
	  printf("%d ", sample_buffer[i]);
 80010d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <StartDefaultTask+0x4c>)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010dc:	4619      	mov	r1, r3
 80010de:	480a      	ldr	r0, [pc, #40]	@ (8001108 <StartDefaultTask+0x50>)
 80010e0:	f009 fc24 	bl	800a92c <iprintf>
	for (i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ee:	ddf1      	ble.n	80010d4 <StartDefaultTask+0x1c>
	}
	printf("\n");
 80010f0:	200a      	movs	r0, #10
 80010f2:	f009 fc2d 	bl	800a950 <putchar>
    osDelay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f006 f962 	bl	80073c0 <osDelay>
  {
 80010fc:	e7e0      	b.n	80010c0 <StartDefaultTask+0x8>
 80010fe:	bf00      	nop
 8001100:	200007b8 	.word	0x200007b8
 8001104:	200008b8 	.word	0x200008b8
 8001108:	0800b6e8 	.word	0x0800b6e8

0800110c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(myBinarySem02Handle, osWaitForever);
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <StartTask02+0x48>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800111c:	4618      	mov	r0, r3
 800111e:	f006 f9f3 	bl	8007508 <osSemaphoreAcquire>
    int i;
	for (i = 0; i < SAMPLE_BUFFER_SIZE; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e00a      	b.n	800113e <StartTask02+0x32>
	{
	  printf("%d ", sample_buffer[i]);
 8001128:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <StartTask02+0x4c>)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001130:	4619      	mov	r1, r3
 8001132:	480a      	ldr	r0, [pc, #40]	@ (800115c <StartTask02+0x50>)
 8001134:	f009 fbfa 	bl	800a92c <iprintf>
	for (i = 0; i < SAMPLE_BUFFER_SIZE; i++)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2bff      	cmp	r3, #255	@ 0xff
 8001142:	ddf1      	ble.n	8001128 <StartTask02+0x1c>
    }
	printf("\n");
 8001144:	200a      	movs	r0, #10
 8001146:	f009 fc03 	bl	800a950 <putchar>
    osDelay(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f006 f938 	bl	80073c0 <osDelay>
  {
 8001150:	e7e0      	b.n	8001114 <StartTask02+0x8>
 8001152:	bf00      	nop
 8001154:	200007bc 	.word	0x200007bc
 8001158:	200008b8 	.word	0x200008b8
 800115c:	0800b6e8 	.word	0x0800b6e8

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <Error_Handler+0x8>

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <HAL_MspInit+0x4c>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	4a10      	ldr	r2, [pc, #64]	@ (80011b8 <HAL_MspInit+0x4c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6613      	str	r3, [r2, #96]	@ 0x60
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <HAL_MspInit+0x4c>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <HAL_MspInit+0x4c>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <HAL_MspInit+0x4c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001194:	6593      	str	r3, [r2, #88]	@ 0x58
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <HAL_MspInit+0x4c>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	210f      	movs	r1, #15
 80011a6:	f06f 0001 	mvn.w	r0, #1
 80011aa:	f002 f814 	bl	80031d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ac      	sub	sp, #176	@ 0xb0
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2288      	movs	r2, #136	@ 0x88
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f009 fbbf 	bl	800a960 <memset>
  if(DFSDM1_Init == 0)
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d142      	bne.n	8001270 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80011ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 feb0 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001206:	f7ff ffab 	bl	8001160 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120e:	4a1b      	ldr	r2, [pc, #108]	@ (800127c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001210:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001214:	6613      	str	r3, [r2, #96]	@ 0x60
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a15      	ldr	r2, [pc, #84]	@ (800127c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800123a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800123e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001254:	2306      	movs	r3, #6
 8001256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125e:	4619      	mov	r1, r3
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001262:	f002 faf3 	bl	800384c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a02      	ldr	r2, [pc, #8]	@ (8001278 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800126e:	6013      	str	r3, [r2, #0]
  }

}
 8001270:	bf00      	nop
 8001272:	37b0      	adds	r7, #176	@ 0xb0
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000ab8 	.word	0x20000ab8
 800127c:	40021000 	.word	0x40021000
 8001280:	48001000 	.word	0x48001000

08001284 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ac      	sub	sp, #176	@ 0xb0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2288      	movs	r2, #136	@ 0x88
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f009 fb5b 	bl	800a960 <memset>
  if(hi2c->Instance==I2C2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <HAL_I2C_MspInit+0xb0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13b      	bne.n	800132c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fe4d 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff ff48 	bl	8001160 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f0:	2312      	movs	r3, #18
 80012f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001302:	2304      	movs	r3, #4
 8001304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <HAL_I2C_MspInit+0xb8>)
 8001310:	f002 fa9c 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	4a07      	ldr	r2, [pc, #28]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 800131a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800131e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800132c:	bf00      	nop
 800132e:	37b0      	adds	r7, #176	@ 0xb0
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40005800 	.word	0x40005800
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400

08001340 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <HAL_QSPI_MspInit+0x7c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d128      	bne.n	80013b4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <HAL_QSPI_MspInit+0x80>)
 8001364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001366:	4a16      	ldr	r2, [pc, #88]	@ (80013c0 <HAL_QSPI_MspInit+0x80>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136c:	6513      	str	r3, [r2, #80]	@ 0x50
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <HAL_QSPI_MspInit+0x80>)
 8001370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_QSPI_MspInit+0x80>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <HAL_QSPI_MspInit+0x80>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_QSPI_MspInit+0x80>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001392:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001396:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013a4:	230a      	movs	r3, #10
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <HAL_QSPI_MspInit+0x84>)
 80013b0:	f002 fa4c 	bl	800384c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	@ 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	a0001000 	.word	0xa0001000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48001000 	.word	0x48001000

080013c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <HAL_SPI_MspInit+0x7c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d128      	bne.n	800143c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013ea:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 80013f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f6:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800141a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800142c:	2306      	movs	r3, #6
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <HAL_SPI_MspInit+0x84>)
 8001438:	f002 fa08 	bl	800384c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	@ 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40003c00 	.word	0x40003c00
 8001448:	40021000 	.word	0x40021000
 800144c:	48000800 	.word	0x48000800

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0ae      	sub	sp, #184	@ 0xb8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	2288      	movs	r2, #136	@ 0x88
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f009 fa75 	bl	800a960 <memset>
  if(huart->Instance==USART1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a42      	ldr	r2, [pc, #264]	@ (8001584 <HAL_UART_MspInit+0x134>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d13b      	bne.n	80014f8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001480:	2301      	movs	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001484:	2300      	movs	r3, #0
 8001486:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fd67 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001498:	f7ff fe62 	bl	8001160 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800149c:	4b3a      	ldr	r3, [pc, #232]	@ (8001588 <HAL_UART_MspInit+0x138>)
 800149e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a0:	4a39      	ldr	r2, [pc, #228]	@ (8001588 <HAL_UART_MspInit+0x138>)
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014a8:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <HAL_UART_MspInit+0x138>)
 80014aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <HAL_UART_MspInit+0x138>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b8:	4a33      	ldr	r2, [pc, #204]	@ (8001588 <HAL_UART_MspInit+0x138>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c0:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <HAL_UART_MspInit+0x138>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80014cc:	23c0      	movs	r3, #192	@ 0xc0
 80014ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e4:	2307      	movs	r3, #7
 80014e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4826      	ldr	r0, [pc, #152]	@ (800158c <HAL_UART_MspInit+0x13c>)
 80014f2:	f002 f9ab 	bl	800384c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f6:	e040      	b.n	800157a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_UART_MspInit+0x140>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d13b      	bne.n	800157a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001502:	2304      	movs	r3, #4
 8001504:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001506:	2300      	movs	r3, #0
 8001508:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fd26 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800151a:	f7ff fe21 	bl	8001160 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <HAL_UART_MspInit+0x138>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_UART_MspInit+0x138>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001528:	6593      	str	r3, [r2, #88]	@ 0x58
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <HAL_UART_MspInit+0x138>)
 800152c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <HAL_UART_MspInit+0x138>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	4a13      	ldr	r2, [pc, #76]	@ (8001588 <HAL_UART_MspInit+0x138>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_UART_MspInit+0x138>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800154e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001568:	2307      	movs	r3, #7
 800156a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	@ (8001594 <HAL_UART_MspInit+0x144>)
 8001576:	f002 f969 	bl	800384c <HAL_GPIO_Init>
}
 800157a:	bf00      	nop
 800157c:	37b8      	adds	r7, #184	@ 0xb8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40013800 	.word	0x40013800
 8001588:	40021000 	.word	0x40021000
 800158c:	48000400 	.word	0x48000400
 8001590:	40004800 	.word	0x40004800
 8001594:	48000c00 	.word	0x48000c00

08001598 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ac      	sub	sp, #176	@ 0xb0
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2288      	movs	r2, #136	@ 0x88
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f009 f9d1 	bl	800a960 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015c6:	d17c      	bne.n	80016c2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80015ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80015de:	2318      	movs	r3, #24
 80015e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015e2:	2307      	movs	r3, #7
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80015ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fcb1 	bl	8004f60 <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001604:	f7ff fdac 	bl	8001160 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	4a2f      	ldr	r2, [pc, #188]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001614:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001624:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163e:	f002 f905 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001642:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800165c:	230a      	movs	r3, #10
 800165e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001666:	4619      	mov	r1, r3
 8001668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166c:	f002 f8ee 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001670:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001674:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 8001676:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800167a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001688:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d114      	bne.n	80016be <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001698:	4a0c      	ldr	r2, [pc, #48]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169e:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80016ac:	f002 fd8c 	bl	80041c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b4:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <HAL_PCD_MspInit+0x134>)
 80016b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80016bc:	e001      	b.n	80016c2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80016be:	f002 fd83 	bl	80041c8 <HAL_PWREx_EnableVddUSB>
}
 80016c2:	bf00      	nop
 80016c4:	37b0      	adds	r7, #176	@ 0xb0
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170a:	f000 f965 	bl	80019d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800170e:	f007 fecf 	bl	80094b0 <xTaskGetSchedulerState>
 8001712:	4603      	mov	r3, r0
 8001714:	2b01      	cmp	r3, #1
 8001716:	d001      	beq.n	800171c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001718:	f008 fdc6 	bl	800a2a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001724:	2020      	movs	r0, #32
 8001726:	f002 fa53 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800172a:	2040      	movs	r0, #64	@ 0x40
 800172c:	f002 fa50 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001730:	2080      	movs	r0, #128	@ 0x80
 8001732:	f002 fa4d 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001736:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800173a:	f002 fa49 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001746:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800174a:	f002 fa41 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800174e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001752:	f002 fa3d 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001756:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800175a:	f002 fa39 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800175e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001762:	f002 fa35 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001766:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800176a:	f002 fa31 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}

08001772 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e00a      	b.n	800179a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001784:	f3af 8000 	nop.w
 8001788:	4601      	mov	r1, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	60ba      	str	r2, [r7, #8]
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbf0      	blt.n	8001784 <_read+0x12>
  }

  return len;
 80017a2:	687b      	ldr	r3, [r7, #4]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e009      	b.n	80017d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fee6 	bl	8000598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dbf1      	blt.n	80017be <_write+0x12>
  }
  return len;
 80017da:	687b      	ldr	r3, [r7, #4]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_close>:

int _close(int file)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800180c:	605a      	str	r2, [r3, #4]
  return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_isatty>:

int _isatty(int file)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001824:	2301      	movs	r3, #1
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f009 f878 	bl	800a970 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20018000 	.word	0x20018000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	20000abc 	.word	0x20000abc
 80018b4:	20002540 	.word	0x20002540

080018b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018e0:	f7ff ffea 	bl	80018b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	@ (8001918 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	@ (800191c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <LoopForever+0xe>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001928 <LoopForever+0x16>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800190a:	f009 f837 	bl	800a97c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800190e:	f7fe fff1 	bl	80008f4 <main>

08001912 <LoopForever>:

LoopForever:
    b LoopForever
 8001912:	e7fe      	b.n	8001912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001914:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001920:	0800b7f8 	.word	0x0800b7f8
  ldr r2, =_sbss
 8001924:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001928:	2000253c 	.word	0x2000253c

0800192c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC1_2_IRQHandler>

0800192e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f001 fc41 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193e:	200f      	movs	r0, #15
 8001940:	f000 f80e 	bl	8001960 <HAL_InitTick>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	e001      	b.n	8001954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001950:	f7ff fc0c 	bl	800116c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001954:	79fb      	ldrb	r3, [r7, #7]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_InitTick+0x6c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d023      	beq.n	80019bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_InitTick+0x70>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <HAL_InitTick+0x6c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f001 fc4d 	bl	800322a <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d809      	bhi.n	80019b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019a4:	f001 fc17 	bl	80031d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_InitTick+0x74>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e007      	b.n	80019c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e004      	b.n	80019c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	e001      	b.n	80019c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000004 	.word	0x20000004

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000ac0 	.word	0x20000ac0

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000ac0 	.word	0x20000ac0

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008

08001a60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3360      	adds	r3, #96	@ 0x60
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <LL_ADC_SetOffset+0x44>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	03fff000 	.word	0x03fff000

08001b10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3360      	adds	r3, #96	@ 0x60
 8001b1e:	461a      	mov	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3360      	adds	r3, #96	@ 0x60
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3330      	adds	r3, #48	@ 0x30
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	4413      	add	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	211f      	movs	r1, #31
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0e9b      	lsrs	r3, r3, #26
 8001bd0:	f003 011f 	and.w	r1, r3, #31
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	431a      	orrs	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3314      	adds	r3, #20
 8001c00:	461a      	mov	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	0e5b      	lsrs	r3, r3, #25
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	0d1b      	lsrs	r3, r3, #20
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2107      	movs	r1, #7
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	0d1b      	lsrs	r3, r3, #20
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0318 	and.w	r3, r3, #24
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c6c:	40d9      	lsrs	r1, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	400b      	ands	r3, r1
 8001c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c76:	431a      	orrs	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	0007ffff 	.word	0x0007ffff

08001c90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6093      	str	r3, [r2, #8]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ce4:	d101      	bne.n	8001cea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d84:	f043 0202 	orr.w	r2, r3, #2
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <LL_ADC_IsEnabled+0x18>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <LL_ADC_IsEnabled+0x1a>
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d101      	bne.n	8001dd6 <LL_ADC_IsDisableOngoing+0x18>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <LL_ADC_IsDisableOngoing+0x1a>
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001df4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001df8:	f043 0204 	orr.w	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d101      	bne.n	8001e24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e130      	b.n	80020d4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7fe fb9b 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff19 	bl	8001cd0 <LL_ADC_IsDeepPowerDownEnabled>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff feff 	bl	8001cac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff34 	bl	8001d20 <LL_ADC_IsInternalRegulatorEnabled>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff18 	bl	8001cf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ec8:	4b84      	ldr	r3, [pc, #528]	@ (80020dc <HAL_ADC_Init+0x284>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	4a84      	ldr	r2, [pc, #528]	@ (80020e0 <HAL_ADC_Init+0x288>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f9      	bne.n	8001ede <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff16 	bl	8001d20 <LL_ADC_IsInternalRegulatorEnabled>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10d      	bne.n	8001f16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efe:	f043 0210 	orr.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff76 	bl	8001e0c <LL_ADC_REG_IsConversionOngoing>
 8001f20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 80c9 	bne.w	80020c2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80c5 	bne.w	80020c2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f40:	f043 0202 	orr.w	r2, r3, #2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff23 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d115      	bne.n	8001f84 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f58:	4862      	ldr	r0, [pc, #392]	@ (80020e4 <HAL_ADC_Init+0x28c>)
 8001f5a:	f7ff ff1d 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4861      	ldr	r0, [pc, #388]	@ (80020e8 <HAL_ADC_Init+0x290>)
 8001f62:	f7ff ff19 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f66:	4603      	mov	r3, r0
 8001f68:	431c      	orrs	r4, r3
 8001f6a:	4860      	ldr	r0, [pc, #384]	@ (80020ec <HAL_ADC_Init+0x294>)
 8001f6c:	f7ff ff14 	bl	8001d98 <LL_ADC_IsEnabled>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4323      	orrs	r3, r4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	485c      	ldr	r0, [pc, #368]	@ (80020f0 <HAL_ADC_Init+0x298>)
 8001f80:	f7ff fd6e 	bl	8001a60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7e5b      	ldrb	r3, [r3, #25]
 8001f88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d106      	bne.n	8001fc0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	045b      	lsls	r3, r3, #17
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	4b44      	ldr	r3, [pc, #272]	@ (80020f4 <HAL_ADC_Init+0x29c>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff1c 	bl	8001e32 <LL_ADC_INJ_IsConversionOngoing>
 8001ffa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d13d      	bne.n	800207e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d13a      	bne.n	800207e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800200c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002014:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002024:	f023 0302 	bic.w	r3, r3, #2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	430b      	orrs	r3, r1
 8002030:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002038:	2b01      	cmp	r3, #1
 800203a:	d118      	bne.n	800206e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002046:	f023 0304 	bic.w	r3, r3, #4
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002058:	4311      	orrs	r1, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800205e:	430a      	orrs	r2, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	611a      	str	r2, [r3, #16]
 800206c:	e007      	b.n	800207e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10c      	bne.n	80020a0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	f023 010f 	bic.w	r1, r3, #15
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	631a      	str	r2, [r3, #48]	@ 0x30
 800209e:	e007      	b.n	80020b0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 020f 	bic.w	r2, r2, #15
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b4:	f023 0303 	bic.w	r3, r3, #3
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	@ 0x54
 80020c0:	e007      	b.n	80020d2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3724      	adds	r7, #36	@ 0x24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	20000000 	.word	0x20000000
 80020e0:	053e2d63 	.word	0x053e2d63
 80020e4:	50040000 	.word	0x50040000
 80020e8:	50040100 	.word	0x50040100
 80020ec:	50040200 	.word	0x50040200
 80020f0:	50040300 	.word	0x50040300
 80020f4:	fff0c007 	.word	0xfff0c007

080020f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002104:	4853      	ldr	r0, [pc, #332]	@ (8002254 <HAL_ADC_Start_DMA+0x15c>)
 8002106:	f7ff fdc3 	bl	8001c90 <LL_ADC_GetMultimode>
 800210a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fe7b 	bl	8001e0c <LL_ADC_REG_IsConversionOngoing>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 8093 	bne.w	8002244 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ADC_Start_DMA+0x34>
 8002128:	2302      	movs	r3, #2
 800212a:	e08e      	b.n	800224a <HAL_ADC_Start_DMA+0x152>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a47      	ldr	r2, [pc, #284]	@ (8002258 <HAL_ADC_Start_DMA+0x160>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d008      	beq.n	8002150 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d002      	beq.n	8002150 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b09      	cmp	r3, #9
 800214e:	d172      	bne.n	8002236 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fc89 	bl	8002a68 <ADC_Enable>
 8002156:	4603      	mov	r3, r0
 8002158:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800215a:	7dfb      	ldrb	r3, [r7, #23]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d165      	bne.n	800222c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a38      	ldr	r2, [pc, #224]	@ (800225c <HAL_ADC_Start_DMA+0x164>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d002      	beq.n	8002184 <HAL_ADC_Start_DMA+0x8c>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	e000      	b.n	8002186 <HAL_ADC_Start_DMA+0x8e>
 8002184:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <HAL_ADC_Start_DMA+0x168>)
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4293      	cmp	r3, r2
 800218c:	d002      	beq.n	8002194 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	f023 0206 	bic.w	r2, r3, #6
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80021b8:	e002      	b.n	80021c0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c4:	4a27      	ldr	r2, [pc, #156]	@ (8002264 <HAL_ADC_Start_DMA+0x16c>)
 80021c6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021cc:	4a26      	ldr	r2, [pc, #152]	@ (8002268 <HAL_ADC_Start_DMA+0x170>)
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d4:	4a25      	ldr	r2, [pc, #148]	@ (800226c <HAL_ADC_Start_DMA+0x174>)
 80021d6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	221c      	movs	r2, #28
 80021de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0210 	orr.w	r2, r2, #16
 80021f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3340      	adds	r3, #64	@ 0x40
 8002212:	4619      	mov	r1, r3
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f001 f9d8 	bl	80035cc <HAL_DMA_Start_IT>
 800221c:	4603      	mov	r3, r0
 800221e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fddd 	bl	8001de4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800222a:	e00d      	b.n	8002248 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002234:	e008      	b.n	8002248 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002242:	e001      	b.n	8002248 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002244:	2302      	movs	r3, #2
 8002246:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002248:	7dfb      	ldrb	r3, [r7, #23]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	50040300 	.word	0x50040300
 8002258:	50040200 	.word	0x50040200
 800225c:	50040100 	.word	0x50040100
 8002260:	50040000 	.word	0x50040000
 8002264:	08002c33 	.word	0x08002c33
 8002268:	08002d0b 	.word	0x08002d0b
 800226c:	08002d27 	.word	0x08002d27

08002270 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0b6      	sub	sp, #216	@ 0xd8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x22>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e3c9      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x7b6>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fdaa 	bl	8001e0c <LL_ADC_REG_IsConversionOngoing>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 83aa 	bne.w	8002a14 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d824      	bhi.n	800231a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	3b02      	subs	r3, #2
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d81b      	bhi.n	8002312 <HAL_ADC_ConfigChannel+0x8e>
 80022da:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <HAL_ADC_ConfigChannel+0x5c>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	080022f1 	.word	0x080022f1
 80022e4:	080022f9 	.word	0x080022f9
 80022e8:	08002301 	.word	0x08002301
 80022ec:	08002309 	.word	0x08002309
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022f0:	230c      	movs	r3, #12
 80022f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022f6:	e010      	b.n	800231a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022f8:	2312      	movs	r3, #18
 80022fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022fe:	e00c      	b.n	800231a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002300:	2318      	movs	r3, #24
 8002302:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002306:	e008      	b.n	800231a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800230c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002310:	e003      	b.n	800231a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002312:	2306      	movs	r3, #6
 8002314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002318:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002328:	f7ff fc36 	bl	8001b98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fd6b 	bl	8001e0c <LL_ADC_REG_IsConversionOngoing>
 8002336:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fd77 	bl	8001e32 <LL_ADC_INJ_IsConversionOngoing>
 8002344:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 81a4 	bne.w	800269a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 819f 	bne.w	800269a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	461a      	mov	r2, r3
 800236a:	f7ff fc41 	bl	8001bf0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d00a      	beq.n	80023a6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6919      	ldr	r1, [r3, #16]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023a0:	f7ff fb92 	bl	8001ac8 <LL_ADC_SetOffset>
 80023a4:	e179      	b.n	800269a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fbaf 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x14e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fba4 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	e01e      	b.n	8002410 <HAL_ADC_ConfigChannel+0x18c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fb99 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e004      	b.n	800240e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002404:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1a4>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	e018      	b.n	800245a <HAL_ADC_ConfigChannel+0x1d6>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800243c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002444:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e004      	b.n	800245a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002450:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800245a:	429a      	cmp	r2, r3
 800245c:	d106      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fb68 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fb4c 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x214>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fb41 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	e01e      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x252>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fb36 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80024b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80024be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024c6:	2320      	movs	r3, #32
 80024c8:	e004      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x26a>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	e018      	b.n	8002520 <HAL_ADC_ConfigChannel+0x29c>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002502:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002506:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800250a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fb05 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2102      	movs	r1, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fae9 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_ADC_ConfigChannel+0x2da>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2102      	movs	r1, #2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fade 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	e01e      	b.n	800259c <HAL_ADC_ConfigChannel+0x318>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2102      	movs	r1, #2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fad3 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800257c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e004      	b.n	800259a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x330>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	e014      	b.n	80025de <HAL_ADC_ConfigChannel+0x35a>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80025c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80025c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e004      	b.n	80025de <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80025d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025de:	429a      	cmp	r2, r3
 80025e0:	d106      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff faa6 	bl	8001b3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2103      	movs	r1, #3
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa8a 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10a      	bne.n	800261c <HAL_ADC_ConfigChannel+0x398>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2103      	movs	r1, #3
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fa7f 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002612:	4603      	mov	r3, r0
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	f003 021f 	and.w	r2, r3, #31
 800261a:	e017      	b.n	800264c <HAL_ADC_ConfigChannel+0x3c8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2103      	movs	r1, #3
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fa74 	bl	8001b10 <LL_ADC_GetOffsetChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002636:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002638:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e003      	b.n	800264a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x3e0>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0e9b      	lsrs	r3, r3, #26
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	e011      	b.n	8002688 <HAL_ADC_ConfigChannel+0x404>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002674:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002676:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e003      	b.n	8002688 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002688:	429a      	cmp	r2, r3
 800268a:	d106      	bne.n	800269a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	2103      	movs	r1, #3
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fa51 	bl	8001b3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fb7a 	bl	8001d98 <LL_ADC_IsEnabled>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 8140 	bne.w	800292c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	461a      	mov	r2, r3
 80026ba:	f7ff fac5 	bl	8001c48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a8f      	ldr	r2, [pc, #572]	@ (8002900 <HAL_ADC_ConfigChannel+0x67c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	f040 8131 	bne.w	800292c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x46e>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	3301      	adds	r3, #1
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	2b09      	cmp	r3, #9
 80026e8:	bf94      	ite	ls
 80026ea:	2301      	movls	r3, #1
 80026ec:	2300      	movhi	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e019      	b.n	8002726 <HAL_ADC_ConfigChannel+0x4a2>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002702:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800270a:	2320      	movs	r3, #32
 800270c:	e003      	b.n	8002716 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800270e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	2b09      	cmp	r3, #9
 800271e:	bf94      	ite	ls
 8002720:	2301      	movls	r3, #1
 8002722:	2300      	movhi	r3, #0
 8002724:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002726:	2b00      	cmp	r3, #0
 8002728:	d079      	beq.n	800281e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x4c2>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0e9b      	lsrs	r3, r3, #26
 800273c:	3301      	adds	r3, #1
 800273e:	069b      	lsls	r3, r3, #26
 8002740:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002744:	e015      	b.n	8002772 <HAL_ADC_ConfigChannel+0x4ee>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002756:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e003      	b.n	800276a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3301      	adds	r3, #1
 800276c:	069b      	lsls	r3, r3, #26
 800276e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x50e>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	3301      	adds	r3, #1
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	e017      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x53e>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	ea42 0103 	orr.w	r1, r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x564>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	3301      	adds	r3, #1
 80027da:	f003 021f 	and.w	r2, r3, #31
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	051b      	lsls	r3, r3, #20
 80027e6:	e018      	b.n	800281a <HAL_ADC_ConfigChannel+0x596>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e003      	b.n	800280c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800281a:	430b      	orrs	r3, r1
 800281c:	e081      	b.n	8002922 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_ADC_ConfigChannel+0x5b6>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	3301      	adds	r3, #1
 8002832:	069b      	lsls	r3, r3, #26
 8002834:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002838:	e015      	b.n	8002866 <HAL_ADC_ConfigChannel+0x5e2>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002852:	2320      	movs	r3, #32
 8002854:	e003      	b.n	800285e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	3301      	adds	r3, #1
 8002860:	069b      	lsls	r3, r3, #26
 8002862:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x602>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	3301      	adds	r3, #1
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	e017      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x632>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	61bb      	str	r3, [r7, #24]
  return result;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e003      	b.n	80028aa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	ea42 0103 	orr.w	r1, r2, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x65e>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	3301      	adds	r3, #1
 80028ce:	f003 021f 	and.w	r2, r3, #31
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	3b1e      	subs	r3, #30
 80028da:	051b      	lsls	r3, r3, #20
 80028dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028e0:	e01e      	b.n	8002920 <HAL_ADC_ConfigChannel+0x69c>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	60fb      	str	r3, [r7, #12]
  return result;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d104      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e006      	b.n	800290c <HAL_ADC_ConfigChannel+0x688>
 80028fe:	bf00      	nop
 8002900:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f003 021f 	and.w	r2, r3, #31
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	3b1e      	subs	r3, #30
 800291a:	051b      	lsls	r3, r3, #20
 800291c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002920:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002926:	4619      	mov	r1, r3
 8002928:	f7ff f962 	bl	8001bf0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b44      	ldr	r3, [pc, #272]	@ (8002a44 <HAL_ADC_ConfigChannel+0x7c0>)
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d07a      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002938:	4843      	ldr	r0, [pc, #268]	@ (8002a48 <HAL_ADC_ConfigChannel+0x7c4>)
 800293a:	f7ff f8b7 	bl	8001aac <LL_ADC_GetCommonPathInternalCh>
 800293e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a41      	ldr	r2, [pc, #260]	@ (8002a4c <HAL_ADC_ConfigChannel+0x7c8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d12c      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800294c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d126      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a50 <HAL_ADC_ConfigChannel+0x7cc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_ADC_ConfigChannel+0x6e8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3b      	ldr	r2, [pc, #236]	@ (8002a54 <HAL_ADC_ConfigChannel+0x7d0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d15d      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800296c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002970:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002974:	4619      	mov	r1, r3
 8002976:	4834      	ldr	r0, [pc, #208]	@ (8002a48 <HAL_ADC_ConfigChannel+0x7c4>)
 8002978:	f7ff f885 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800297c:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <HAL_ADC_ConfigChannel+0x7d4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	099b      	lsrs	r3, r3, #6
 8002982:	4a36      	ldr	r2, [pc, #216]	@ (8002a5c <HAL_ADC_ConfigChannel+0x7d8>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002996:	e002      	b.n	800299e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3b01      	subs	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a4:	e040      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002a60 <HAL_ADC_ConfigChannel+0x7dc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d118      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d112      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <HAL_ADC_ConfigChannel+0x7cc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x74c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a22      	ldr	r2, [pc, #136]	@ (8002a54 <HAL_ADC_ConfigChannel+0x7d0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d12d      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d8:	4619      	mov	r1, r3
 80029da:	481b      	ldr	r0, [pc, #108]	@ (8002a48 <HAL_ADC_ConfigChannel+0x7c4>)
 80029dc:	f7ff f853 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e0:	e024      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a64 <HAL_ADC_ConfigChannel+0x7e0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d120      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11a      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a14      	ldr	r2, [pc, #80]	@ (8002a50 <HAL_ADC_ConfigChannel+0x7cc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d115      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	480e      	ldr	r0, [pc, #56]	@ (8002a48 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a0e:	f7ff f83a 	bl	8001a86 <LL_ADC_SetCommonPathInternalCh>
 8002a12:	e00c      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a26:	e002      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a28:	bf00      	nop
 8002a2a:	e000      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a36:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	37d8      	adds	r7, #216	@ 0xd8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	80080000 	.word	0x80080000
 8002a48:	50040300 	.word	0x50040300
 8002a4c:	c7520000 	.word	0xc7520000
 8002a50:	50040000 	.word	0x50040000
 8002a54:	50040200 	.word	0x50040200
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	053e2d63 	.word	0x053e2d63
 8002a60:	cb840000 	.word	0xcb840000
 8002a64:	80000001 	.word	0x80000001

08002a68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f98d 	bl	8001d98 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d169      	bne.n	8002b58 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	4b36      	ldr	r3, [pc, #216]	@ (8002b64 <ADC_Enable+0xfc>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f043 0210 	orr.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e055      	b.n	8002b5a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f948 	bl	8001d48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ab8:	482b      	ldr	r0, [pc, #172]	@ (8002b68 <ADC_Enable+0x100>)
 8002aba:	f7fe fff7 	bl	8001aac <LL_ADC_GetCommonPathInternalCh>
 8002abe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ac0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ac8:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <ADC_Enable+0x104>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	4a28      	ldr	r2, [pc, #160]	@ (8002b70 <ADC_Enable+0x108>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ae2:	e002      	b.n	8002aea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002af0:	f7fe ff86 	bl	8001a00 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002af6:	e028      	b.n	8002b4a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff f94b 	bl	8001d98 <LL_ADC_IsEnabled>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d104      	bne.n	8002b12 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff f91b 	bl	8001d48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b12:	f7fe ff75 	bl	8001a00 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d914      	bls.n	8002b4a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00d      	beq.n	8002b4a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e007      	b.n	8002b5a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d1cf      	bne.n	8002af8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	8000003f 	.word	0x8000003f
 8002b68:	50040300 	.word	0x50040300
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	053e2d63 	.word	0x053e2d63

08002b74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f91c 	bl	8001dbe <LL_ADC_IsDisableOngoing>
 8002b86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f903 	bl	8001d98 <LL_ADC_IsEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d047      	beq.n	8002c28 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d144      	bne.n	8002c28 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030d 	and.w	r3, r3, #13
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10c      	bne.n	8002bc6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f8dd 	bl	8001d70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bbe:	f7fe ff1f 	bl	8001a00 <HAL_GetTick>
 8002bc2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bc4:	e029      	b.n	8002c1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	f043 0210 	orr.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e023      	b.n	8002c2a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002be2:	f7fe ff0d 	bl	8001a00 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d914      	bls.n	8002c1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c02:	f043 0210 	orr.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e007      	b.n	8002c2a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1dc      	bne.n	8002be2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d14b      	bne.n	8002ce4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d021      	beq.n	8002caa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe ff81 	bl	8001b72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d032      	beq.n	8002cdc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d12b      	bne.n	8002cdc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11f      	bne.n	8002cdc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ca8:	e018      	b.n	8002cdc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7fd fd0f 	bl	8000700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ce2:	e00e      	b.n	8002d02 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff fabd 	bl	8002270 <HAL_ADC_ErrorCallback>
}
 8002cf6:	e004      	b.n	8002d02 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7fd fd01 	bl	8000720 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff fa8f 	bl	8002270 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <LL_ADC_IsEnabled>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <LL_ADC_IsEnabled+0x18>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <LL_ADC_IsEnabled+0x1a>
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_StartCalibration>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002d92:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dc6:	d101      	bne.n	8002dcc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_ADC_REG_IsConversionOngoing>:
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d101      	bne.n	8002df2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_ADCEx_Calibration_Start+0x1c>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e04d      	b.n	8002eb8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff fea5 	bl	8002b74 <ADC_Disable>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d136      	bne.n	8002ea2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e3c:	f023 0302 	bic.w	r3, r3, #2
 8002e40:	f043 0202 	orr.w	r2, r3, #2
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff96 	bl	8002d80 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e54:	e014      	b.n	8002e80 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002e62:	d30d      	bcc.n	8002e80 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f023 0312 	bic.w	r3, r3, #18
 8002e6c:	f043 0210 	orr.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e01b      	b.n	8002eb8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff94 	bl	8002db2 <LL_ADC_IsCalibrationOnGoing>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e2      	bne.n	8002e56 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	f023 0303 	bic.w	r3, r3, #3
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ea0:	e005      	b.n	8002eae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea6:	f043 0210 	orr.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b09f      	sub	sp, #124	@ 0x7c
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e093      	b.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002eea:	2300      	movs	r3, #0
 8002eec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a47      	ldr	r2, [pc, #284]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d102      	bne.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ef8:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	e001      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e072      	b.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff59 	bl	8002dda <LL_ADC_REG_IsConversionOngoing>
 8002f28:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff53 	bl	8002dda <LL_ADC_REG_IsConversionOngoing>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d154      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d151      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f40:	4b35      	ldr	r3, [pc, #212]	@ (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f42:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d02c      	beq.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f5e:	035b      	lsls	r3, r3, #13
 8002f60:	430b      	orrs	r3, r1
 8002f62:	431a      	orrs	r2, r3
 8002f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f68:	4829      	ldr	r0, [pc, #164]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f6a:	f7ff fef6 	bl	8002d5a <LL_ADC_IsEnabled>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4828      	ldr	r0, [pc, #160]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f72:	f7ff fef2 	bl	8002d5a <LL_ADC_IsEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	431c      	orrs	r4, r3
 8002f7a:	4828      	ldr	r0, [pc, #160]	@ (800301c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f7c:	f7ff feed 	bl	8002d5a <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4323      	orrs	r3, r4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d137      	bne.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f90:	f023 030f 	bic.w	r3, r3, #15
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	6811      	ldr	r1, [r2, #0]
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	6892      	ldr	r2, [r2, #8]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa4:	e028      	b.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb2:	4817      	ldr	r0, [pc, #92]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fb4:	f7ff fed1 	bl	8002d5a <LL_ADC_IsEnabled>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	4816      	ldr	r0, [pc, #88]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fbc:	f7ff fecd 	bl	8002d5a <LL_ADC_IsEnabled>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	431c      	orrs	r4, r3
 8002fc4:	4815      	ldr	r0, [pc, #84]	@ (800301c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fc6:	f7ff fec8 	bl	8002d5a <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4323      	orrs	r3, r4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d112      	bne.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fda:	f023 030f 	bic.w	r3, r3, #15
 8002fde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fe0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe2:	e009      	b.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ff6:	e000      	b.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003002:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003006:	4618      	mov	r0, r3
 8003008:	377c      	adds	r7, #124	@ 0x7c
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	bf00      	nop
 8003010:	50040000 	.word	0x50040000
 8003014:	50040100 	.word	0x50040100
 8003018:	50040300 	.word	0x50040300
 800301c:	50040200 	.word	0x50040200

08003020 <__NVIC_SetPriorityGrouping>:
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0c      	ldr	r3, [pc, #48]	@ (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	@ (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_GetPriorityGrouping>:
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4907      	ldr	r1, [pc, #28]	@ (80030bc <__NVIC_EnableIRQ+0x38>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	@ (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	@ (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	@ 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	@ 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800318c:	d301      	bcc.n	8003192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318e:	2301      	movs	r3, #1
 8003190:	e00f      	b.n	80031b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003192:	4a0a      	ldr	r2, [pc, #40]	@ (80031bc <SysTick_Config+0x40>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319a:	210f      	movs	r1, #15
 800319c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031a0:	f7ff ff8e 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <SysTick_Config+0x40>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031aa:	4b04      	ldr	r3, [pc, #16]	@ (80031bc <SysTick_Config+0x40>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000e010 	.word	0xe000e010

080031c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff29 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031e8:	f7ff ff3e 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff8e 	bl	8003114 <NVIC_EncodePriority>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff5d 	bl	80030c0 <__NVIC_SetPriority>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff31 	bl	8003084 <__NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffa2 	bl	800317c <SysTick_Config>
 8003238:	4603      	mov	r3, r0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0ac      	b.n	80033b0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f8b2 	bl	80033c4 <DFSDM_GetChannelFromInstance>
 8003260:	4603      	mov	r3, r0
 8003262:	4a55      	ldr	r2, [pc, #340]	@ (80033b8 <HAL_DFSDM_ChannelInit+0x174>)
 8003264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e09f      	b.n	80033b0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fd ffa3 	bl	80011bc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003276:	4b51      	ldr	r3, [pc, #324]	@ (80033bc <HAL_DFSDM_ChannelInit+0x178>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	4a4f      	ldr	r2, [pc, #316]	@ (80033bc <HAL_DFSDM_ChannelInit+0x178>)
 800327e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003280:	4b4e      	ldr	r3, [pc, #312]	@ (80033bc <HAL_DFSDM_ChannelInit+0x178>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d125      	bne.n	80032d4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003288:	4b4d      	ldr	r3, [pc, #308]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4c      	ldr	r2, [pc, #304]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800328e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003292:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003294:	4b4a      	ldr	r3, [pc, #296]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4948      	ldr	r1, [pc, #288]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80032a2:	4b47      	ldr	r3, [pc, #284]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a46      	ldr	r2, [pc, #280]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80032a8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80032ac:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	791b      	ldrb	r3, [r3, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d108      	bne.n	80032c8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80032b6:	4b42      	ldr	r3, [pc, #264]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	493f      	ldr	r1, [pc, #252]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80032c8:	4b3d      	ldr	r3, [pc, #244]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3c      	ldr	r2, [pc, #240]	@ (80033c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80032ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032d2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80032e2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032f2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80032f8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 020f 	bic.w	r2, r2, #15
 8003310:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003338:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f002 0207 	and.w	r2, r2, #7
 8003364:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003370:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003390:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f810 	bl	80033c4 <DFSDM_GetChannelFromInstance>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4904      	ldr	r1, [pc, #16]	@ (80033b8 <HAL_DFSDM_ChannelInit+0x174>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000ac8 	.word	0x20000ac8
 80033bc:	20000ac4 	.word	0x20000ac4
 80033c0:	40016000 	.word	0x40016000

080033c4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003440 <DFSDM_GetChannelFromInstance+0x7c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d102      	bne.n	80033da <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e02b      	b.n	8003432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a19      	ldr	r2, [pc, #100]	@ (8003444 <DFSDM_GetChannelFromInstance+0x80>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d102      	bne.n	80033e8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e024      	b.n	8003432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <DFSDM_GetChannelFromInstance+0x84>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d102      	bne.n	80033f6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80033f0:	2302      	movs	r3, #2
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e01d      	b.n	8003432 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a14      	ldr	r2, [pc, #80]	@ (800344c <DFSDM_GetChannelFromInstance+0x88>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d102      	bne.n	8003404 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80033fe:	2304      	movs	r3, #4
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e016      	b.n	8003432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a12      	ldr	r2, [pc, #72]	@ (8003450 <DFSDM_GetChannelFromInstance+0x8c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d102      	bne.n	8003412 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800340c:	2305      	movs	r3, #5
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e00f      	b.n	8003432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a0f      	ldr	r2, [pc, #60]	@ (8003454 <DFSDM_GetChannelFromInstance+0x90>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d102      	bne.n	8003420 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800341a:	2306      	movs	r3, #6
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	e008      	b.n	8003432 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0d      	ldr	r2, [pc, #52]	@ (8003458 <DFSDM_GetChannelFromInstance+0x94>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d102      	bne.n	800342e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003428:	2307      	movs	r3, #7
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e001      	b.n	8003432 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800342e:	2303      	movs	r3, #3
 8003430:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	40016000 	.word	0x40016000
 8003444:	40016020 	.word	0x40016020
 8003448:	40016040 	.word	0x40016040
 800344c:	40016080 	.word	0x40016080
 8003450:	400160a0 	.word	0x400160a0
 8003454:	400160c0 	.word	0x400160c0
 8003458:	400160e0 	.word	0x400160e0

0800345c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e098      	b.n	80035a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	4b4d      	ldr	r3, [pc, #308]	@ (80035ac <HAL_DMA_Init+0x150>)
 8003476:	429a      	cmp	r2, r3
 8003478:	d80f      	bhi.n	800349a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	4b4b      	ldr	r3, [pc, #300]	@ (80035b0 <HAL_DMA_Init+0x154>)
 8003482:	4413      	add	r3, r2
 8003484:	4a4b      	ldr	r2, [pc, #300]	@ (80035b4 <HAL_DMA_Init+0x158>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	009a      	lsls	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a48      	ldr	r2, [pc, #288]	@ (80035b8 <HAL_DMA_Init+0x15c>)
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40
 8003498:	e00e      	b.n	80034b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	4b46      	ldr	r3, [pc, #280]	@ (80035bc <HAL_DMA_Init+0x160>)
 80034a2:	4413      	add	r3, r2
 80034a4:	4a43      	ldr	r2, [pc, #268]	@ (80035b4 <HAL_DMA_Init+0x158>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	009a      	lsls	r2, r3, #2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a42      	ldr	r2, [pc, #264]	@ (80035c0 <HAL_DMA_Init+0x164>)
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80034ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003512:	d039      	beq.n	8003588 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <HAL_DMA_Init+0x15c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d11a      	bne.n	8003554 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800351e:	4b29      	ldr	r3, [pc, #164]	@ (80035c4 <HAL_DMA_Init+0x168>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f003 031c 	and.w	r3, r3, #28
 800352a:	210f      	movs	r1, #15
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	4924      	ldr	r1, [pc, #144]	@ (80035c4 <HAL_DMA_Init+0x168>)
 8003534:	4013      	ands	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003538:	4b22      	ldr	r3, [pc, #136]	@ (80035c4 <HAL_DMA_Init+0x168>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	f003 031c 	and.w	r3, r3, #28
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	491d      	ldr	r1, [pc, #116]	@ (80035c4 <HAL_DMA_Init+0x168>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
 8003552:	e019      	b.n	8003588 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003554:	4b1c      	ldr	r3, [pc, #112]	@ (80035c8 <HAL_DMA_Init+0x16c>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355c:	f003 031c 	and.w	r3, r3, #28
 8003560:	210f      	movs	r1, #15
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	4917      	ldr	r1, [pc, #92]	@ (80035c8 <HAL_DMA_Init+0x16c>)
 800356a:	4013      	ands	r3, r2
 800356c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800356e:	4b16      	ldr	r3, [pc, #88]	@ (80035c8 <HAL_DMA_Init+0x16c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f003 031c 	and.w	r3, r3, #28
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	4911      	ldr	r1, [pc, #68]	@ (80035c8 <HAL_DMA_Init+0x16c>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40020407 	.word	0x40020407
 80035b0:	bffdfff8 	.word	0xbffdfff8
 80035b4:	cccccccd 	.word	0xcccccccd
 80035b8:	40020000 	.word	0x40020000
 80035bc:	bffdfbf8 	.word	0xbffdfbf8
 80035c0:	40020400 	.word	0x40020400
 80035c4:	400200a8 	.word	0x400200a8
 80035c8:	400204a8 	.word	0x400204a8

080035cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_DMA_Start_IT+0x20>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e04b      	b.n	8003684 <HAL_DMA_Start_IT+0xb8>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d13a      	bne.n	8003676 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f8e0 	bl	80037ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 020e 	orr.w	r2, r2, #14
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e00f      	b.n	8003664 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 020a 	orr.w	r2, r2, #10
 8003662:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e005      	b.n	8003682 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	f003 031c 	and.w	r3, r3, #28
 80036ac:	2204      	movs	r2, #4
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d026      	beq.n	8003706 <HAL_DMA_IRQHandler+0x7a>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d021      	beq.n	8003706 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d107      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0204 	bic.w	r2, r2, #4
 80036de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e4:	f003 021c 	and.w	r2, r3, #28
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	2104      	movs	r1, #4
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d071      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003704:	e06c      	b.n	80037e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f003 031c 	and.w	r3, r3, #28
 800370e:	2202      	movs	r2, #2
 8003710:	409a      	lsls	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d02e      	beq.n	8003778 <HAL_DMA_IRQHandler+0xec>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d029      	beq.n	8003778 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 020a 	bic.w	r2, r2, #10
 8003740:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	f003 021c 	and.w	r2, r3, #28
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	2102      	movs	r1, #2
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d038      	beq.n	80037e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003776:	e033      	b.n	80037e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377c:	f003 031c 	and.w	r3, r3, #28
 8003780:	2208      	movs	r2, #8
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02a      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x156>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d025      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 020e 	bic.w	r2, r2, #14
 80037a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f003 021c 	and.w	r2, r3, #28
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
}
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fc:	f003 021c 	and.w	r2, r3, #28
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f202 	lsl.w	r2, r1, r2
 800380a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b10      	cmp	r3, #16
 800381a:	d108      	bne.n	800382e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800382c:	e007      	b.n	800383e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	60da      	str	r2, [r3, #12]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800385a:	e17f      	b.n	8003b5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8171 	beq.w	8003b56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d005      	beq.n	800388c <HAL_GPIO_Init+0x40>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d130      	bne.n	80038ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4013      	ands	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038c2:	2201      	movs	r2, #1
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 0201 	and.w	r2, r3, #1
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d118      	bne.n	800392c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003900:	2201      	movs	r2, #1
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	08db      	lsrs	r3, r3, #3
 8003916:	f003 0201 	and.w	r2, r3, #1
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d017      	beq.n	8003968 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d123      	bne.n	80039bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	220f      	movs	r2, #15
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	6939      	ldr	r1, [r7, #16]
 80039b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0203 	and.w	r2, r3, #3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80ac 	beq.w	8003b56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fe:	4b5f      	ldr	r3, [pc, #380]	@ (8003b7c <HAL_GPIO_Init+0x330>)
 8003a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a02:	4a5e      	ldr	r2, [pc, #376]	@ (8003b7c <HAL_GPIO_Init+0x330>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b7c <HAL_GPIO_Init+0x330>)
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a16:	4a5a      	ldr	r2, [pc, #360]	@ (8003b80 <HAL_GPIO_Init+0x334>)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a40:	d025      	beq.n	8003a8e <HAL_GPIO_Init+0x242>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4f      	ldr	r2, [pc, #316]	@ (8003b84 <HAL_GPIO_Init+0x338>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01f      	beq.n	8003a8a <HAL_GPIO_Init+0x23e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003b88 <HAL_GPIO_Init+0x33c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d019      	beq.n	8003a86 <HAL_GPIO_Init+0x23a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4d      	ldr	r2, [pc, #308]	@ (8003b8c <HAL_GPIO_Init+0x340>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_Init+0x236>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8003b90 <HAL_GPIO_Init+0x344>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00d      	beq.n	8003a7e <HAL_GPIO_Init+0x232>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4b      	ldr	r2, [pc, #300]	@ (8003b94 <HAL_GPIO_Init+0x348>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_Init+0x22e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8003b98 <HAL_GPIO_Init+0x34c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_GPIO_Init+0x22a>
 8003a72:	2306      	movs	r3, #6
 8003a74:	e00c      	b.n	8003a90 <HAL_GPIO_Init+0x244>
 8003a76:	2307      	movs	r3, #7
 8003a78:	e00a      	b.n	8003a90 <HAL_GPIO_Init+0x244>
 8003a7a:	2305      	movs	r3, #5
 8003a7c:	e008      	b.n	8003a90 <HAL_GPIO_Init+0x244>
 8003a7e:	2304      	movs	r3, #4
 8003a80:	e006      	b.n	8003a90 <HAL_GPIO_Init+0x244>
 8003a82:	2303      	movs	r3, #3
 8003a84:	e004      	b.n	8003a90 <HAL_GPIO_Init+0x244>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e002      	b.n	8003a90 <HAL_GPIO_Init+0x244>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_GPIO_Init+0x244>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	f002 0203 	and.w	r2, r2, #3
 8003a96:	0092      	lsls	r2, r2, #2
 8003a98:	4093      	lsls	r3, r2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aa0:	4937      	ldr	r1, [pc, #220]	@ (8003b80 <HAL_GPIO_Init+0x334>)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aae:	4b3b      	ldr	r3, [pc, #236]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ad2:	4a32      	ldr	r2, [pc, #200]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ad8:	4b30      	ldr	r3, [pc, #192]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003afc:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b02:	4b26      	ldr	r3, [pc, #152]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b26:	4a1d      	ldr	r2, [pc, #116]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b50:	4a12      	ldr	r2, [pc, #72]	@ (8003b9c <HAL_GPIO_Init+0x350>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fa22 f303 	lsr.w	r3, r2, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f47f ae78 	bne.w	800385c <HAL_GPIO_Init+0x10>
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40010000 	.word	0x40010000
 8003b84:	48000400 	.word	0x48000400
 8003b88:	48000800 	.word	0x48000800
 8003b8c:	48000c00 	.word	0x48000c00
 8003b90:	48001000 	.word	0x48001000
 8003b94:	48001400 	.word	0x48001400
 8003b98:	48001800 	.word	0x48001800
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
 8003bac:	4613      	mov	r3, r2
 8003bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb0:	787b      	ldrb	r3, [r7, #1]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bbc:	e002      	b.n	8003bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bda:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d006      	beq.n	8003bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003be6:	4a05      	ldr	r2, [pc, #20]	@ (8003bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f806 	bl	8003c00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40010400 	.word	0x40010400

08003c00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e08d      	b.n	8003d44 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fd fb21 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2224      	movs	r2, #36	@ 0x24
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c8c:	609a      	str	r2, [r3, #8]
 8003c8e:	e006      	b.n	8003c9e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d108      	bne.n	8003cb8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e007      	b.n	8003cc8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cda:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69d9      	ldr	r1, [r3, #28]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d138      	bne.n	8003dd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e032      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	@ 0x24
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d139      	bne.n	8003e6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e033      	b.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2224      	movs	r2, #36	@ 0x24
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b086      	sub	sp, #24
 8003e7e:	af02      	add	r7, sp, #8
 8003e80:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e101      	b.n	8004090 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fd fb79 	bl	8001598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f002 fef1 	bl	8006ca0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7c1a      	ldrb	r2, [r3, #16]
 8003ec6:	f88d 2000 	strb.w	r2, [sp]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ece:	f002 feba 	bl	8006c46 <USB_CoreInit>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0d5      	b.n	8004090 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 fee9 	bl	8006cc2 <USB_SetCurrentMode>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e0c6      	b.n	8004090 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	e04a      	b.n	8003f9e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	3315      	adds	r3, #21
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	b298      	uxth	r0, r3
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	332e      	adds	r3, #46	@ 0x2e
 8003f44:	4602      	mov	r2, r0
 8003f46:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3318      	adds	r3, #24
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	331c      	adds	r3, #28
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3320      	adds	r3, #32
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3324      	adds	r3, #36	@ 0x24
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	791b      	ldrb	r3, [r3, #4]
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d3af      	bcc.n	8003f08 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e044      	b.n	8004038 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	3301      	adds	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	791b      	ldrb	r3, [r3, #4]
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	429a      	cmp	r2, r3
 8004040:	d3b5      	bcc.n	8003fae <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7c1a      	ldrb	r2, [r3, #16]
 800404a:	f88d 2000 	strb.w	r2, [sp]
 800404e:	3304      	adds	r3, #4
 8004050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004052:	f002 fe83 	bl	8006d5c <USB_DevInit>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e013      	b.n	8004090 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	7b1b      	ldrb	r3, [r3, #12]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d102      	bne.n	8004084 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f80a 	bl	8004098 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f003 f828 	bl	80070de <USB_DevDisconnect>

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	f043 0303 	orr.w	r3, r3, #3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e4:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a04      	ldr	r2, [pc, #16]	@ (80040fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ee:	6013      	str	r3, [r2, #0]
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40007000 	.word	0x40007000

08004100 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004104:	4b04      	ldr	r3, [pc, #16]	@ (8004118 <HAL_PWREx_GetVoltageRange+0x18>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40007000 	.word	0x40007000

0800411c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412a:	d130      	bne.n	800418e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800412c:	4b23      	ldr	r3, [pc, #140]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004138:	d038      	beq.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800413a:	4b20      	ldr	r3, [pc, #128]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004142:	4a1e      	ldr	r2, [pc, #120]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004144:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004148:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2232      	movs	r2, #50	@ 0x32
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	4a1b      	ldr	r2, [pc, #108]	@ (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	0c9b      	lsrs	r3, r3, #18
 800415c:	3301      	adds	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004160:	e002      	b.n	8004168 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3b01      	subs	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004168:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004174:	d102      	bne.n	800417c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f2      	bne.n	8004162 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800417c:	4b0f      	ldr	r3, [pc, #60]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004188:	d110      	bne.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e00f      	b.n	80041ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800418e:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419a:	d007      	beq.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800419c:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041a4:	4a05      	ldr	r2, [pc, #20]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40007000 	.word	0x40007000
 80041c0:	20000000 	.word	0x20000000
 80041c4:	431bde83 	.word	0x431bde83

080041c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80041d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041d6:	6053      	str	r3, [r2, #4]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40007000 	.word	0x40007000

080041e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7fd fc06 	bl	8001a00 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e063      	b.n	80042c8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fd f893 	bl	8001340 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800421a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f858 	bl	80042d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	3b01      	subs	r3, #1
 8004234:	021a      	lsls	r2, r3, #8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	2120      	movs	r1, #32
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f850 	bl	80042f0 <QSPI_WaitFlagStateUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004254:	7afb      	ldrb	r3, [r7, #11]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d131      	bne.n	80042be <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004264:	f023 0310 	bic.w	r3, r3, #16
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6852      	ldr	r2, [r2, #4]
 800426c:	0611      	lsls	r1, r2, #24
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68d2      	ldr	r2, [r2, #12]
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	4b13      	ldr	r3, [pc, #76]	@ (80042d0 <HAL_QSPI_Init+0xe8>)
 8004284:	4013      	ands	r3, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6912      	ldr	r2, [r2, #16]
 800428a:	0411      	lsls	r1, r2, #16
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6952      	ldr	r2, [r2, #20]
 8004290:	4311      	orrs	r1, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6992      	ldr	r2, [r2, #24]
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	430b      	orrs	r3, r1
 800429e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80042c6:	7afb      	ldrb	r3, [r7, #11]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	ffe0f8fe 	.word	0xffe0f8fe

080042d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004300:	e01a      	b.n	8004338 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004308:	d016      	beq.n	8004338 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fd fb79 	bl	8001a00 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10b      	bne.n	8004338 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2204      	movs	r2, #4
 8004324:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e00e      	b.n	8004356 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d1d6      	bne.n	8004302 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e3ca      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004372:	4b97      	ldr	r3, [pc, #604]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800437c:	4b94      	ldr	r3, [pc, #592]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80e4 	beq.w	800455c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_RCC_OscConfig+0x4a>
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	f040 808b 	bne.w	80044b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f040 8087 	bne.w	80044b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043aa:	4b89      	ldr	r3, [pc, #548]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x62>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e3a2      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	4b82      	ldr	r3, [pc, #520]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_RCC_OscConfig+0x7c>
 80043d2:	4b7f      	ldr	r3, [pc, #508]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043da:	e005      	b.n	80043e8 <HAL_RCC_OscConfig+0x88>
 80043dc:	4b7c      	ldr	r3, [pc, #496]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80043de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d223      	bcs.n	8004434 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fd55 	bl	8004ea0 <RCC_SetFlashLatencyFromMSIRange>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e383      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004400:	4b73      	ldr	r3, [pc, #460]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a72      	ldr	r2, [pc, #456]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004406:	f043 0308 	orr.w	r3, r3, #8
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b70      	ldr	r3, [pc, #448]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	496d      	ldr	r1, [pc, #436]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800441e:	4b6c      	ldr	r3, [pc, #432]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	4968      	ldr	r1, [pc, #416]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]
 8004432:	e025      	b.n	8004480 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004434:	4b66      	ldr	r3, [pc, #408]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a65      	ldr	r2, [pc, #404]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800443a:	f043 0308 	orr.w	r3, r3, #8
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b63      	ldr	r3, [pc, #396]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4960      	ldr	r1, [pc, #384]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004452:	4b5f      	ldr	r3, [pc, #380]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	495b      	ldr	r1, [pc, #364]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fd15 	bl	8004ea0 <RCC_SetFlashLatencyFromMSIRange>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e343      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004480:	f000 fc4a 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b52      	ldr	r3, [pc, #328]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	4950      	ldr	r1, [pc, #320]	@ (80045d4 <HAL_RCC_OscConfig+0x274>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
 800449c:	4a4e      	ldr	r2, [pc, #312]	@ (80045d8 <HAL_RCC_OscConfig+0x278>)
 800449e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044a0:	4b4e      	ldr	r3, [pc, #312]	@ (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd fa5b 	bl	8001960 <HAL_InitTick>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d052      	beq.n	800455a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	e327      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d032      	beq.n	8004526 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044c0:	4b43      	ldr	r3, [pc, #268]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a42      	ldr	r2, [pc, #264]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044cc:	f7fd fa98 	bl	8001a00 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d4:	f7fd fa94 	bl	8001a00 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e310      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e6:	4b3a      	ldr	r3, [pc, #232]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044f2:	4b37      	ldr	r3, [pc, #220]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a36      	ldr	r2, [pc, #216]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80044f8:	f043 0308 	orr.w	r3, r3, #8
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b34      	ldr	r3, [pc, #208]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4931      	ldr	r1, [pc, #196]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004510:	4b2f      	ldr	r3, [pc, #188]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	492c      	ldr	r1, [pc, #176]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
 8004524:	e01a      	b.n	800455c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004526:	4b2a      	ldr	r3, [pc, #168]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a29      	ldr	r2, [pc, #164]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004532:	f7fd fa65 	bl	8001a00 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800453a:	f7fd fa61 	bl	8001a00 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e2dd      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800454c:	4b20      	ldr	r3, [pc, #128]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCC_OscConfig+0x1da>
 8004558:	e000      	b.n	800455c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800455a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d074      	beq.n	8004652 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b08      	cmp	r3, #8
 800456c:	d005      	beq.n	800457a <HAL_RCC_OscConfig+0x21a>
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d10e      	bne.n	8004592 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d10b      	bne.n	8004592 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457a:	4b15      	ldr	r3, [pc, #84]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d064      	beq.n	8004650 <HAL_RCC_OscConfig+0x2f0>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d160      	bne.n	8004650 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e2ba      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x24a>
 800459c:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0b      	ldr	r2, [pc, #44]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80045a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	e026      	b.n	80045f8 <HAL_RCC_OscConfig+0x298>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045b2:	d115      	bne.n	80045e0 <HAL_RCC_OscConfig+0x280>
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a05      	ldr	r2, [pc, #20]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80045ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a02      	ldr	r2, [pc, #8]	@ (80045d0 <HAL_RCC_OscConfig+0x270>)
 80045c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x298>
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	0800b76c 	.word	0x0800b76c
 80045d8:	20000000 	.word	0x20000000
 80045dc:	20000004 	.word	0x20000004
 80045e0:	4ba0      	ldr	r3, [pc, #640]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a9f      	ldr	r2, [pc, #636]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b9d      	ldr	r3, [pc, #628]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a9c      	ldr	r2, [pc, #624]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd f9fe 	bl	8001a00 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004608:	f7fd f9fa 	bl	8001a00 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	@ 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e276      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461a:	4b92      	ldr	r3, [pc, #584]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x2a8>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd f9ea 	bl	8001a00 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd f9e6 	bl	8001a00 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	@ 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e262      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004642:	4b88      	ldr	r3, [pc, #544]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x2d0>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d060      	beq.n	8004720 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b04      	cmp	r3, #4
 8004662:	d005      	beq.n	8004670 <HAL_RCC_OscConfig+0x310>
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d119      	bne.n	800469e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d116      	bne.n	800469e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004670:	4b7c      	ldr	r3, [pc, #496]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_OscConfig+0x328>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e23f      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b76      	ldr	r3, [pc, #472]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	4973      	ldr	r1, [pc, #460]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800469c:	e040      	b.n	8004720 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d023      	beq.n	80046ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fd f9a5 	bl	8001a00 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ba:	f7fd f9a1 	bl	8001a00 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e21d      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046cc:	4b65      	ldr	r3, [pc, #404]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d8:	4b62      	ldr	r3, [pc, #392]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	495f      	ldr	r1, [pc, #380]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
 80046ec:	e018      	b.n	8004720 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80046f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fd f981 	bl	8001a00 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004702:	f7fd f97d 	bl	8001a00 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e1f9      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004714:	4b53      	ldr	r3, [pc, #332]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d03c      	beq.n	80047a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01c      	beq.n	800476e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004734:	4b4b      	ldr	r3, [pc, #300]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800473a:	4a4a      	ldr	r2, [pc, #296]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fd f95c 	bl	8001a00 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474c:	f7fd f958 	bl	8001a00 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1d4      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800475e:	4b41      	ldr	r3, [pc, #260]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ef      	beq.n	800474c <HAL_RCC_OscConfig+0x3ec>
 800476c:	e01b      	b.n	80047a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476e:	4b3d      	ldr	r3, [pc, #244]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004774:	4a3b      	ldr	r2, [pc, #236]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7fd f93f 	bl	8001a00 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004786:	f7fd f93b 	bl	8001a00 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e1b7      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004798:	4b32      	ldr	r3, [pc, #200]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 800479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1ef      	bne.n	8004786 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80a6 	beq.w	8004900 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b4:	2300      	movs	r3, #0
 80047b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10d      	bne.n	80047e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c4:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c8:	4a26      	ldr	r2, [pc, #152]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d0:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047dc:	2301      	movs	r3, #1
 80047de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e0:	4b21      	ldr	r3, [pc, #132]	@ (8004868 <HAL_RCC_OscConfig+0x508>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d118      	bne.n	800481e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004868 <HAL_RCC_OscConfig+0x508>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004868 <HAL_RCC_OscConfig+0x508>)
 80047f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f8:	f7fd f902 	bl	8001a00 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004800:	f7fd f8fe 	bl	8001a00 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e17a      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004812:	4b15      	ldr	r3, [pc, #84]	@ (8004868 <HAL_RCC_OscConfig+0x508>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d108      	bne.n	8004838 <HAL_RCC_OscConfig+0x4d8>
 8004826:	4b0f      	ldr	r3, [pc, #60]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482c:	4a0d      	ldr	r2, [pc, #52]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004836:	e029      	b.n	800488c <HAL_RCC_OscConfig+0x52c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b05      	cmp	r3, #5
 800483e:	d115      	bne.n	800486c <HAL_RCC_OscConfig+0x50c>
 8004840:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	4a07      	ldr	r2, [pc, #28]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004848:	f043 0304 	orr.w	r3, r3, #4
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004850:	4b04      	ldr	r3, [pc, #16]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004856:	4a03      	ldr	r2, [pc, #12]	@ (8004864 <HAL_RCC_OscConfig+0x504>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004860:	e014      	b.n	800488c <HAL_RCC_OscConfig+0x52c>
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	40007000 	.word	0x40007000
 800486c:	4b9c      	ldr	r3, [pc, #624]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	4a9b      	ldr	r2, [pc, #620]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800487c:	4b98      	ldr	r3, [pc, #608]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	4a97      	ldr	r2, [pc, #604]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fd f8b4 	bl	8001a00 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489c:	f7fd f8b0 	bl	8001a00 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e12a      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ed      	beq.n	800489c <HAL_RCC_OscConfig+0x53c>
 80048c0:	e015      	b.n	80048ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c2:	f7fd f89d 	bl	8001a00 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c8:	e00a      	b.n	80048e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ca:	f7fd f899 	bl	8001a00 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e113      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e0:	4b7f      	ldr	r3, [pc, #508]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ed      	bne.n	80048ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ee:	7ffb      	ldrb	r3, [r7, #31]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f4:	4b7a      	ldr	r3, [pc, #488]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	4a79      	ldr	r2, [pc, #484]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 80048fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80fe 	beq.w	8004b06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490e:	2b02      	cmp	r3, #2
 8004910:	f040 80d0 	bne.w	8004ab4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004914:	4b72      	ldr	r3, [pc, #456]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 0203 	and.w	r2, r3, #3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	429a      	cmp	r2, r3
 8004926:	d130      	bne.n	800498a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	3b01      	subs	r3, #1
 8004934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d127      	bne.n	800498a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004944:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d11f      	bne.n	800498a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004954:	2a07      	cmp	r2, #7
 8004956:	bf14      	ite	ne
 8004958:	2201      	movne	r2, #1
 800495a:	2200      	moveq	r2, #0
 800495c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495e:	4293      	cmp	r3, r2
 8004960:	d113      	bne.n	800498a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	3b01      	subs	r3, #1
 8004970:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d109      	bne.n	800498a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	3b01      	subs	r3, #1
 8004984:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d06e      	beq.n	8004a68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d069      	beq.n	8004a64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004990:	4b53      	ldr	r3, [pc, #332]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d105      	bne.n	80049a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800499c:	4b50      	ldr	r3, [pc, #320]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0ad      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049ac:	4b4c      	ldr	r3, [pc, #304]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 80049b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049b8:	f7fd f822 	bl	8001a00 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fd f81e 	bl	8001a00 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e09a      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d2:	4b43      	ldr	r3, [pc, #268]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049de:	4b40      	ldr	r3, [pc, #256]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	4b40      	ldr	r3, [pc, #256]	@ (8004ae4 <HAL_RCC_OscConfig+0x784>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049ee:	3a01      	subs	r2, #1
 80049f0:	0112      	lsls	r2, r2, #4
 80049f2:	4311      	orrs	r1, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049f8:	0212      	lsls	r2, r2, #8
 80049fa:	4311      	orrs	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a00:	0852      	lsrs	r2, r2, #1
 8004a02:	3a01      	subs	r2, #1
 8004a04:	0552      	lsls	r2, r2, #21
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a0c:	0852      	lsrs	r2, r2, #1
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	0652      	lsls	r2, r2, #25
 8004a12:	4311      	orrs	r1, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a18:	0912      	lsrs	r2, r2, #4
 8004a1a:	0452      	lsls	r2, r2, #17
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	4930      	ldr	r1, [pc, #192]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a24:	4b2e      	ldr	r3, [pc, #184]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a3c:	f7fc ffe0 	bl	8001a00 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fc ffdc 	bl	8001a00 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e058      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	4b22      	ldr	r3, [pc, #136]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a62:	e050      	b.n	8004b06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e04f      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d148      	bne.n	8004b06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a19      	ldr	r2, [pc, #100]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a80:	4b17      	ldr	r3, [pc, #92]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a8c:	f7fc ffb8 	bl	8001a00 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fc ffb4 	bl	8001a00 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e030      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x734>
 8004ab2:	e028      	b.n	8004b06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d023      	beq.n	8004b02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aba:	4b09      	ldr	r3, [pc, #36]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a08      	ldr	r2, [pc, #32]	@ (8004ae0 <HAL_RCC_OscConfig+0x780>)
 8004ac0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fc ff9b 	bl	8001a00 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004acc:	e00c      	b.n	8004ae8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fc ff97 	bl	8001a00 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d905      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e013      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae8:	4b09      	ldr	r3, [pc, #36]	@ (8004b10 <HAL_RCC_OscConfig+0x7b0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ec      	bne.n	8004ace <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004af4:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <HAL_RCC_OscConfig+0x7b0>)
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	4905      	ldr	r1, [pc, #20]	@ (8004b10 <HAL_RCC_OscConfig+0x7b0>)
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <HAL_RCC_OscConfig+0x7b4>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60cb      	str	r3, [r1, #12]
 8004b00:	e001      	b.n	8004b06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	feeefffc 	.word	0xfeeefffc

08004b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0e7      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	4b75      	ldr	r3, [pc, #468]	@ (8004d04 <HAL_RCC_ClockConfig+0x1ec>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d910      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3a:	4b72      	ldr	r3, [pc, #456]	@ (8004d04 <HAL_RCC_ClockConfig+0x1ec>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 0207 	bic.w	r2, r3, #7
 8004b42:	4970      	ldr	r1, [pc, #448]	@ (8004d04 <HAL_RCC_ClockConfig+0x1ec>)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8004d04 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0cf      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	4b66      	ldr	r3, [pc, #408]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d908      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b63      	ldr	r3, [pc, #396]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	4960      	ldr	r1, [pc, #384]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d04c      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d121      	bne.n	8004bee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0a6      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb6:	4b54      	ldr	r3, [pc, #336]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d115      	bne.n	8004bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e09a      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bce:	4b4e      	ldr	r3, [pc, #312]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e08e      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bde:	4b4a      	ldr	r3, [pc, #296]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e086      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bee:	4b46      	ldr	r3, [pc, #280]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4943      	ldr	r1, [pc, #268]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c00:	f7fc fefe 	bl	8001a00 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fc fefa 	bl	8001a00 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e06e      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 020c 	and.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1eb      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	4b31      	ldr	r3, [pc, #196]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d208      	bcs.n	8004c5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	492b      	ldr	r1, [pc, #172]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5e:	4b29      	ldr	r3, [pc, #164]	@ (8004d04 <HAL_RCC_ClockConfig+0x1ec>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d210      	bcs.n	8004c8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6c:	4b25      	ldr	r3, [pc, #148]	@ (8004d04 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 0207 	bic.w	r2, r3, #7
 8004c74:	4923      	ldr	r1, [pc, #140]	@ (8004d04 <HAL_RCC_ClockConfig+0x1ec>)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7c:	4b21      	ldr	r3, [pc, #132]	@ (8004d04 <HAL_RCC_ClockConfig+0x1ec>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d001      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e036      	b.n	8004cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d008      	beq.n	8004cac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	4918      	ldr	r1, [pc, #96]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cb8:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4910      	ldr	r1, [pc, #64]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ccc:	f000 f824 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	490b      	ldr	r1, [pc, #44]	@ (8004d0c <HAL_RCC_ClockConfig+0x1f4>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce8:	4a09      	ldr	r2, [pc, #36]	@ (8004d10 <HAL_RCC_ClockConfig+0x1f8>)
 8004cea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cec:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <HAL_RCC_ClockConfig+0x1fc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fc fe35 	bl	8001960 <HAL_InitTick>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40022000 	.word	0x40022000
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	0800b76c 	.word	0x0800b76c
 8004d10:	20000000 	.word	0x20000000
 8004d14:	20000004 	.word	0x20000004

08004d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b089      	sub	sp, #36	@ 0x24
 8004d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d26:	4b3e      	ldr	r3, [pc, #248]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d30:	4b3b      	ldr	r3, [pc, #236]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x34>
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d121      	bne.n	8004d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d11e      	bne.n	8004d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d4c:	4b34      	ldr	r3, [pc, #208]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d58:	4b31      	ldr	r3, [pc, #196]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	e005      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d68:	4b2d      	ldr	r3, [pc, #180]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d74:	4a2b      	ldr	r2, [pc, #172]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d102      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d90:	4b25      	ldr	r3, [pc, #148]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	e004      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d9c:	4b23      	ldr	r3, [pc, #140]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d134      	bne.n	8004e10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004da6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0xa6>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d003      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0xac>
 8004dbc:	e005      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dc0:	617b      	str	r3, [r7, #20]
      break;
 8004dc2:	e005      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8004dc6:	617b      	str	r3, [r7, #20]
      break;
 8004dc8:	e002      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	617b      	str	r3, [r7, #20]
      break;
 8004dce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dd0:	4b13      	ldr	r3, [pc, #76]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	3301      	adds	r3, #1
 8004ddc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dde:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	fb03 f202 	mul.w	r2, r3, r2
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004df6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	0e5b      	lsrs	r3, r3, #25
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	3301      	adds	r3, #1
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e10:	69bb      	ldr	r3, [r7, #24]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3724      	adds	r7, #36	@ 0x24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
 8004e24:	0800b784 	.word	0x0800b784
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	007a1200 	.word	0x007a1200

08004e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e34:	4b03      	ldr	r3, [pc, #12]	@ (8004e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e36:	681b      	ldr	r3, [r3, #0]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000000 	.word	0x20000000

08004e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e4c:	f7ff fff0 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4904      	ldr	r1, [pc, #16]	@ (8004e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	0800b77c 	.word	0x0800b77c

08004e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e78:	f7ff ffda 	bl	8004e30 <HAL_RCC_GetHCLKFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	0adb      	lsrs	r3, r3, #11
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4904      	ldr	r1, [pc, #16]	@ (8004e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	0800b77c 	.word	0x0800b77c

08004ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eac:	4b2a      	ldr	r3, [pc, #168]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eb8:	f7ff f922 	bl	8004100 <HAL_PWREx_GetVoltageRange>
 8004ebc:	6178      	str	r0, [r7, #20]
 8004ebe:	e014      	b.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec0:	4b25      	ldr	r3, [pc, #148]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec4:	4a24      	ldr	r2, [pc, #144]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ecc:	4b22      	ldr	r3, [pc, #136]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ed8:	f7ff f912 	bl	8004100 <HAL_PWREx_GetVoltageRange>
 8004edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ede:	4b1e      	ldr	r3, [pc, #120]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef0:	d10b      	bne.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b80      	cmp	r3, #128	@ 0x80
 8004ef6:	d919      	bls.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2ba0      	cmp	r3, #160	@ 0xa0
 8004efc:	d902      	bls.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004efe:	2302      	movs	r3, #2
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e013      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	e010      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b80      	cmp	r3, #128	@ 0x80
 8004f0e:	d902      	bls.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f10:	2303      	movs	r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e00a      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	@ 0x80
 8004f1a:	d102      	bne.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e004      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b70      	cmp	r3, #112	@ 0x70
 8004f26:	d101      	bne.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f28:	2301      	movs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 0207 	bic.w	r2, r3, #7
 8004f34:	4909      	ldr	r1, [pc, #36]	@ (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f3c:	4b07      	ldr	r3, [pc, #28]	@ (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d001      	beq.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40022000 	.word	0x40022000

08004f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d041      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f84:	d02a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f8a:	d824      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f96:	d81e      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa0:	d010      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fa2:	e018      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fa4:	4b86      	ldr	r3, [pc, #536]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a85      	ldr	r2, [pc, #532]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb0:	e015      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 facb 	bl	8005554 <RCCEx_PLLSAI1_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fc2:	e00c      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3320      	adds	r3, #32
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fbb6 	bl	800573c <RCCEx_PLLSAI2_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fd4:	e003      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe4:	4b76      	ldr	r3, [pc, #472]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ff2:	4973      	ldr	r1, [pc, #460]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ffa:	e001      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	7cfb      	ldrb	r3, [r7, #19]
 8004ffe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d041      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005010:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005014:	d02a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005016:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800501a:	d824      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800501c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005020:	d008      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005022:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005026:	d81e      	bhi.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800502c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005030:	d010      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005032:	e018      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005034:	4b62      	ldr	r3, [pc, #392]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4a61      	ldr	r2, [pc, #388]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800503e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005040:	e015      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fa83 	bl	8005554 <RCCEx_PLLSAI1_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005052:	e00c      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3320      	adds	r3, #32
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fb6e 	bl	800573c <RCCEx_PLLSAI2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005064:	e003      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	74fb      	strb	r3, [r7, #19]
      break;
 800506a:	e000      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800506c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800506e:	7cfb      	ldrb	r3, [r7, #19]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10b      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005074:	4b52      	ldr	r3, [pc, #328]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005082:	494f      	ldr	r1, [pc, #316]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800508a:	e001      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80a0 	beq.w	80051de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509e:	2300      	movs	r3, #0
 80050a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050a2:	4b47      	ldr	r3, [pc, #284]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b41      	ldr	r3, [pc, #260]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050bc:	4a40      	ldr	r2, [pc, #256]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80050c4:	4b3e      	ldr	r3, [pc, #248]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d0:	2301      	movs	r3, #1
 80050d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050d4:	4b3b      	ldr	r3, [pc, #236]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a3a      	ldr	r2, [pc, #232]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050e0:	f7fc fc8e 	bl	8001a00 <HAL_GetTick>
 80050e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050e6:	e009      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e8:	f7fc fc8a 	bl	8001a00 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d902      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	74fb      	strb	r3, [r7, #19]
        break;
 80050fa:	e005      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050fc:	4b31      	ldr	r3, [pc, #196]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ef      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d15c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800510e:	4b2c      	ldr	r3, [pc, #176]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005118:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01f      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	429a      	cmp	r2, r3
 800512a:	d019      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800512c:	4b24      	ldr	r3, [pc, #144]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005138:	4b21      	ldr	r3, [pc, #132]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513e:	4a20      	ldr	r2, [pc, #128]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005148:	4b1d      	ldr	r3, [pc, #116]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514e:	4a1c      	ldr	r2, [pc, #112]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005158:	4a19      	ldr	r2, [pc, #100]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516a:	f7fc fc49 	bl	8001a00 <HAL_GetTick>
 800516e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005170:	e00b      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fc fc45 	bl	8001a00 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005180:	4293      	cmp	r3, r2
 8005182:	d902      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	74fb      	strb	r3, [r7, #19]
            break;
 8005188:	e006      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518a:	4b0d      	ldr	r3, [pc, #52]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0ec      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800519e:	4b08      	ldr	r3, [pc, #32]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ae:	4904      	ldr	r1, [pc, #16]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051b6:	e009      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	74bb      	strb	r3, [r7, #18]
 80051bc:	e006      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	7cfb      	ldrb	r3, [r7, #19]
 80051ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051cc:	7c7b      	ldrb	r3, [r7, #17]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d2:	4b9e      	ldr	r3, [pc, #632]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	4a9d      	ldr	r2, [pc, #628]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ea:	4b98      	ldr	r3, [pc, #608]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f0:	f023 0203 	bic.w	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	4994      	ldr	r1, [pc, #592]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800520c:	4b8f      	ldr	r3, [pc, #572]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005212:	f023 020c 	bic.w	r2, r3, #12
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521a:	498c      	ldr	r1, [pc, #560]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800522e:	4b87      	ldr	r3, [pc, #540]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005234:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	4983      	ldr	r1, [pc, #524]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005250:	4b7e      	ldr	r3, [pc, #504]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525e:	497b      	ldr	r1, [pc, #492]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005272:	4b76      	ldr	r3, [pc, #472]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005280:	4972      	ldr	r1, [pc, #456]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005294:	4b6d      	ldr	r3, [pc, #436]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052a2:	496a      	ldr	r1, [pc, #424]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052b6:	4b65      	ldr	r3, [pc, #404]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c4:	4961      	ldr	r1, [pc, #388]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052d8:	4b5c      	ldr	r3, [pc, #368]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e6:	4959      	ldr	r1, [pc, #356]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052fa:	4b54      	ldr	r3, [pc, #336]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005300:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005308:	4950      	ldr	r1, [pc, #320]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800531c:	4b4b      	ldr	r3, [pc, #300]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005322:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532a:	4948      	ldr	r1, [pc, #288]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800533e:	4b43      	ldr	r3, [pc, #268]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005344:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534c:	493f      	ldr	r1, [pc, #252]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d028      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005360:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005366:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800536e:	4937      	ldr	r1, [pc, #220]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800537a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800537e:	d106      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005380:	4b32      	ldr	r3, [pc, #200]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a31      	ldr	r2, [pc, #196]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800538a:	60d3      	str	r3, [r2, #12]
 800538c:	e011      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005392:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005396:	d10c      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	2101      	movs	r1, #1
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f8d8 	bl	8005554 <RCCEx_PLLSAI1_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d028      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053be:	4b23      	ldr	r3, [pc, #140]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053cc:	491f      	ldr	r1, [pc, #124]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053dc:	d106      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053de:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a1a      	ldr	r2, [pc, #104]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053e8:	60d3      	str	r3, [r2, #12]
 80053ea:	e011      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053f4:	d10c      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3304      	adds	r3, #4
 80053fa:	2101      	movs	r1, #1
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f8a9 	bl	8005554 <RCCEx_PLLSAI1_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800540c:	7cfb      	ldrb	r3, [r7, #19]
 800540e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02b      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542a:	4908      	ldr	r1, [pc, #32]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800543a:	d109      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800543c:	4b03      	ldr	r3, [pc, #12]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4a02      	ldr	r2, [pc, #8]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005446:	60d3      	str	r3, [r2, #12]
 8005448:	e014      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800544a:	bf00      	nop
 800544c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005454:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005458:	d10c      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3304      	adds	r3, #4
 800545e:	2101      	movs	r1, #1
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f877 	bl	8005554 <RCCEx_PLLSAI1_Config>
 8005466:	4603      	mov	r3, r0
 8005468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800546a:	7cfb      	ldrb	r3, [r7, #19]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005470:	7cfb      	ldrb	r3, [r7, #19]
 8005472:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02f      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005480:	4b2b      	ldr	r3, [pc, #172]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005486:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800548e:	4928      	ldr	r1, [pc, #160]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800549a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800549e:	d10d      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	2102      	movs	r1, #2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f854 	bl	8005554 <RCCEx_PLLSAI1_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d014      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054b6:	7cfb      	ldrb	r3, [r7, #19]
 80054b8:	74bb      	strb	r3, [r7, #18]
 80054ba:	e011      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054c4:	d10c      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3320      	adds	r3, #32
 80054ca:	2102      	movs	r1, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f935 	bl	800573c <RCCEx_PLLSAI2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054ec:	4b10      	ldr	r3, [pc, #64]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054fa:	490d      	ldr	r1, [pc, #52]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800550e:	4b08      	ldr	r3, [pc, #32]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005514:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800551e:	4904      	ldr	r1, [pc, #16]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005526:	7cbb      	ldrb	r3, [r7, #18]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40021000 	.word	0x40021000

08005534 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005538:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a04      	ldr	r2, [pc, #16]	@ (8005550 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800553e:	f043 0304 	orr.w	r3, r3, #4
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000

08005554 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005562:	4b75      	ldr	r3, [pc, #468]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d018      	beq.n	80055a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800556e:	4b72      	ldr	r3, [pc, #456]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0203 	and.w	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d10d      	bne.n	800559a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
       ||
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005586:	4b6c      	ldr	r3, [pc, #432]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
       ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d047      	beq.n	800562a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
 800559e:	e044      	b.n	800562a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d018      	beq.n	80055da <RCCEx_PLLSAI1_Config+0x86>
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d825      	bhi.n	80055f8 <RCCEx_PLLSAI1_Config+0xa4>
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d002      	beq.n	80055b6 <RCCEx_PLLSAI1_Config+0x62>
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d009      	beq.n	80055c8 <RCCEx_PLLSAI1_Config+0x74>
 80055b4:	e020      	b.n	80055f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055b6:	4b60      	ldr	r3, [pc, #384]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d11d      	bne.n	80055fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c6:	e01a      	b.n	80055fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d116      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d8:	e013      	b.n	8005602 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055da:	4b57      	ldr	r3, [pc, #348]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10f      	bne.n	8005606 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055e6:	4b54      	ldr	r3, [pc, #336]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055f6:	e006      	b.n	8005606 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e004      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055fe:	bf00      	nop
 8005600:	e002      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005602:	bf00      	nop
 8005604:	e000      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005606:	bf00      	nop
    }

    if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10d      	bne.n	800562a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800560e:	4b4a      	ldr	r3, [pc, #296]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	3b01      	subs	r3, #1
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	430b      	orrs	r3, r1
 8005624:	4944      	ldr	r1, [pc, #272]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	4313      	orrs	r3, r2
 8005628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d17d      	bne.n	800572c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005630:	4b41      	ldr	r3, [pc, #260]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a40      	ldr	r2, [pc, #256]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005636:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800563a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563c:	f7fc f9e0 	bl	8001a00 <HAL_GetTick>
 8005640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005642:	e009      	b.n	8005658 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005644:	f7fc f9dc 	bl	8001a00 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d902      	bls.n	8005658 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	73fb      	strb	r3, [r7, #15]
        break;
 8005656:	e005      	b.n	8005664 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005658:	4b37      	ldr	r3, [pc, #220]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ef      	bne.n	8005644 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d160      	bne.n	800572c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d111      	bne.n	8005694 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005670:	4b31      	ldr	r3, [pc, #196]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6892      	ldr	r2, [r2, #8]
 8005680:	0211      	lsls	r1, r2, #8
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68d2      	ldr	r2, [r2, #12]
 8005686:	0912      	lsrs	r2, r2, #4
 8005688:	0452      	lsls	r2, r2, #17
 800568a:	430a      	orrs	r2, r1
 800568c:	492a      	ldr	r1, [pc, #168]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568e:	4313      	orrs	r3, r2
 8005690:	610b      	str	r3, [r1, #16]
 8005692:	e027      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d112      	bne.n	80056c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800569a:	4b27      	ldr	r3, [pc, #156]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80056a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6892      	ldr	r2, [r2, #8]
 80056aa:	0211      	lsls	r1, r2, #8
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6912      	ldr	r2, [r2, #16]
 80056b0:	0852      	lsrs	r2, r2, #1
 80056b2:	3a01      	subs	r2, #1
 80056b4:	0552      	lsls	r2, r2, #21
 80056b6:	430a      	orrs	r2, r1
 80056b8:	491f      	ldr	r1, [pc, #124]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	610b      	str	r3, [r1, #16]
 80056be:	e011      	b.n	80056e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80056c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6892      	ldr	r2, [r2, #8]
 80056d0:	0211      	lsls	r1, r2, #8
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6952      	ldr	r2, [r2, #20]
 80056d6:	0852      	lsrs	r2, r2, #1
 80056d8:	3a01      	subs	r2, #1
 80056da:	0652      	lsls	r2, r2, #25
 80056dc:	430a      	orrs	r2, r1
 80056de:	4916      	ldr	r1, [pc, #88]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056e4:	4b14      	ldr	r3, [pc, #80]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a13      	ldr	r2, [pc, #76]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fc f986 	bl	8001a00 <HAL_GetTick>
 80056f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056f6:	e009      	b.n	800570c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056f8:	f7fc f982 	bl	8001a00 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d902      	bls.n	800570c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	73fb      	strb	r3, [r7, #15]
          break;
 800570a:	e005      	b.n	8005718 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800570c:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ef      	beq.n	80056f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	4904      	ldr	r1, [pc, #16]	@ (8005738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005728:	4313      	orrs	r3, r2
 800572a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40021000 	.word	0x40021000

0800573c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800574a:	4b6a      	ldr	r3, [pc, #424]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005756:	4b67      	ldr	r3, [pc, #412]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0203 	and.w	r2, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d10d      	bne.n	8005782 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
       ||
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800576e:	4b61      	ldr	r3, [pc, #388]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	091b      	lsrs	r3, r3, #4
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
       ||
 800577e:	429a      	cmp	r2, r3
 8005780:	d047      	beq.n	8005812 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
 8005786:	e044      	b.n	8005812 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d018      	beq.n	80057c2 <RCCEx_PLLSAI2_Config+0x86>
 8005790:	2b03      	cmp	r3, #3
 8005792:	d825      	bhi.n	80057e0 <RCCEx_PLLSAI2_Config+0xa4>
 8005794:	2b01      	cmp	r3, #1
 8005796:	d002      	beq.n	800579e <RCCEx_PLLSAI2_Config+0x62>
 8005798:	2b02      	cmp	r3, #2
 800579a:	d009      	beq.n	80057b0 <RCCEx_PLLSAI2_Config+0x74>
 800579c:	e020      	b.n	80057e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800579e:	4b55      	ldr	r3, [pc, #340]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d11d      	bne.n	80057e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ae:	e01a      	b.n	80057e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057b0:	4b50      	ldr	r3, [pc, #320]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d116      	bne.n	80057ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c0:	e013      	b.n	80057ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057c2:	4b4c      	ldr	r3, [pc, #304]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10f      	bne.n	80057ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ce:	4b49      	ldr	r3, [pc, #292]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057de:	e006      	b.n	80057ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
      break;
 80057e4:	e004      	b.n	80057f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10d      	bne.n	8005812 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057f6:	4b3f      	ldr	r3, [pc, #252]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	3b01      	subs	r3, #1
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	430b      	orrs	r3, r1
 800580c:	4939      	ldr	r1, [pc, #228]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580e:	4313      	orrs	r3, r2
 8005810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d167      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005818:	4b36      	ldr	r3, [pc, #216]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a35      	ldr	r2, [pc, #212]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005824:	f7fc f8ec 	bl	8001a00 <HAL_GetTick>
 8005828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800582a:	e009      	b.n	8005840 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800582c:	f7fc f8e8 	bl	8001a00 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d902      	bls.n	8005840 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	73fb      	strb	r3, [r7, #15]
        break;
 800583e:	e005      	b.n	800584c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005840:	4b2c      	ldr	r3, [pc, #176]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ef      	bne.n	800582c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d14a      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d111      	bne.n	800587c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005858:	4b26      	ldr	r3, [pc, #152]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6892      	ldr	r2, [r2, #8]
 8005868:	0211      	lsls	r1, r2, #8
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68d2      	ldr	r2, [r2, #12]
 800586e:	0912      	lsrs	r2, r2, #4
 8005870:	0452      	lsls	r2, r2, #17
 8005872:	430a      	orrs	r2, r1
 8005874:	491f      	ldr	r1, [pc, #124]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005876:	4313      	orrs	r3, r2
 8005878:	614b      	str	r3, [r1, #20]
 800587a:	e011      	b.n	80058a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800587c:	4b1d      	ldr	r3, [pc, #116]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005884:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	6892      	ldr	r2, [r2, #8]
 800588c:	0211      	lsls	r1, r2, #8
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6912      	ldr	r2, [r2, #16]
 8005892:	0852      	lsrs	r2, r2, #1
 8005894:	3a01      	subs	r2, #1
 8005896:	0652      	lsls	r2, r2, #25
 8005898:	430a      	orrs	r2, r1
 800589a:	4916      	ldr	r1, [pc, #88]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589c:	4313      	orrs	r3, r2
 800589e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058a0:	4b14      	ldr	r3, [pc, #80]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a13      	ldr	r2, [pc, #76]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ac:	f7fc f8a8 	bl	8001a00 <HAL_GetTick>
 80058b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058b2:	e009      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058b4:	f7fc f8a4 	bl	8001a00 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d902      	bls.n	80058c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	73fb      	strb	r3, [r7, #15]
          break;
 80058c6:	e005      	b.n	80058d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058c8:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0ef      	beq.n	80058b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058da:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	4904      	ldr	r1, [pc, #16]	@ (80058f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40021000 	.word	0x40021000

080058f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e095      	b.n	8005a36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d108      	bne.n	8005924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800591a:	d009      	beq.n	8005930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	61da      	str	r2, [r3, #28]
 8005922:	e005      	b.n	8005930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fb fd3c 	bl	80013c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005966:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005970:	d902      	bls.n	8005978 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	e002      	b.n	800597e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800597c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005986:	d007      	beq.n	8005998 <HAL_SPI_Init+0xa0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005990:	d002      	beq.n	8005998 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059da:	ea42 0103 	orr.w	r1, r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	f003 0204 	and.w	r2, r3, #4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a14:	ea42 0103 	orr.w	r1, r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e049      	b.n	8005ae4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fa fed5 	bl	8000814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f000 f96f 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d001      	beq.n	8005b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e04f      	b.n	8005ba4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a23      	ldr	r2, [pc, #140]	@ (8005bb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01d      	beq.n	8005b62 <HAL_TIM_Base_Start_IT+0x76>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2e:	d018      	beq.n	8005b62 <HAL_TIM_Base_Start_IT+0x76>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <HAL_TIM_Base_Start_IT+0x76>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_TIM_Base_Start_IT+0x76>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_TIM_Base_Start_IT+0x76>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_TIM_Base_Start_IT+0x76>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	@ (8005bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d115      	bne.n	8005b8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	4b17      	ldr	r3, [pc, #92]	@ (8005bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d015      	beq.n	8005ba0 <HAL_TIM_Base_Start_IT+0xb4>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b7a:	d011      	beq.n	8005ba0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	e008      	b.n	8005ba0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e000      	b.n	8005ba2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40012c00 	.word	0x40012c00
 8005bb4:	40000400 	.word	0x40000400
 8005bb8:	40000800 	.word	0x40000800
 8005bbc:	40000c00 	.word	0x40000c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	00010007 	.word	0x00010007

08005bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0b6      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x18a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c24:	d03e      	beq.n	8005ca4 <HAL_TIM_ConfigClockSource+0xd8>
 8005c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c2a:	f200 8087 	bhi.w	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c32:	f000 8086 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x176>
 8005c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3a:	d87f      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c3c:	2b70      	cmp	r3, #112	@ 0x70
 8005c3e:	d01a      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0xaa>
 8005c40:	2b70      	cmp	r3, #112	@ 0x70
 8005c42:	d87b      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c44:	2b60      	cmp	r3, #96	@ 0x60
 8005c46:	d050      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x11e>
 8005c48:	2b60      	cmp	r3, #96	@ 0x60
 8005c4a:	d877      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c4c:	2b50      	cmp	r3, #80	@ 0x50
 8005c4e:	d03c      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0xfe>
 8005c50:	2b50      	cmp	r3, #80	@ 0x50
 8005c52:	d873      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c54:	2b40      	cmp	r3, #64	@ 0x40
 8005c56:	d058      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x13e>
 8005c58:	2b40      	cmp	r3, #64	@ 0x40
 8005c5a:	d86f      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c5c:	2b30      	cmp	r3, #48	@ 0x30
 8005c5e:	d064      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15e>
 8005c60:	2b30      	cmp	r3, #48	@ 0x30
 8005c62:	d86b      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d060      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15e>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d867      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05c      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15e>
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d05a      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15e>
 8005c74:	e062      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c86:	f000 f98b 	bl	8005fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	609a      	str	r2, [r3, #8]
      break;
 8005ca2:	e04f      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb4:	f000 f974 	bl	8005fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cc6:	609a      	str	r2, [r3, #8]
      break;
 8005cc8:	e03c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f000 f8e8 	bl	8005eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2150      	movs	r1, #80	@ 0x50
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f941 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005ce8:	e02c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f000 f907 	bl	8005f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2160      	movs	r1, #96	@ 0x60
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 f931 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005d08:	e01c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 f8c8 	bl	8005eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2140      	movs	r1, #64	@ 0x40
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f921 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005d28:	e00c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f000 f918 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005d3a:	e003      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d40:	e000      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a46      	ldr	r2, [pc, #280]	@ (8005e8c <TIM_Base_SetConfig+0x12c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7e:	d00f      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a43      	ldr	r2, [pc, #268]	@ (8005e90 <TIM_Base_SetConfig+0x130>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a42      	ldr	r2, [pc, #264]	@ (8005e94 <TIM_Base_SetConfig+0x134>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a41      	ldr	r2, [pc, #260]	@ (8005e98 <TIM_Base_SetConfig+0x138>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a40      	ldr	r2, [pc, #256]	@ (8005e9c <TIM_Base_SetConfig+0x13c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d108      	bne.n	8005db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a35      	ldr	r2, [pc, #212]	@ (8005e8c <TIM_Base_SetConfig+0x12c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01f      	beq.n	8005dfa <TIM_Base_SetConfig+0x9a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc0:	d01b      	beq.n	8005dfa <TIM_Base_SetConfig+0x9a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a32      	ldr	r2, [pc, #200]	@ (8005e90 <TIM_Base_SetConfig+0x130>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d017      	beq.n	8005dfa <TIM_Base_SetConfig+0x9a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a31      	ldr	r2, [pc, #196]	@ (8005e94 <TIM_Base_SetConfig+0x134>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <TIM_Base_SetConfig+0x9a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a30      	ldr	r2, [pc, #192]	@ (8005e98 <TIM_Base_SetConfig+0x138>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00f      	beq.n	8005dfa <TIM_Base_SetConfig+0x9a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8005e9c <TIM_Base_SetConfig+0x13c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <TIM_Base_SetConfig+0x9a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea0 <TIM_Base_SetConfig+0x140>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_Base_SetConfig+0x9a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea4 <TIM_Base_SetConfig+0x144>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_Base_SetConfig+0x9a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea8 <TIM_Base_SetConfig+0x148>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d108      	bne.n	8005e0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a16      	ldr	r2, [pc, #88]	@ (8005e8c <TIM_Base_SetConfig+0x12c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00f      	beq.n	8005e58 <TIM_Base_SetConfig+0xf8>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <TIM_Base_SetConfig+0x13c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00b      	beq.n	8005e58 <TIM_Base_SetConfig+0xf8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a17      	ldr	r2, [pc, #92]	@ (8005ea0 <TIM_Base_SetConfig+0x140>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_Base_SetConfig+0xf8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a16      	ldr	r2, [pc, #88]	@ (8005ea4 <TIM_Base_SetConfig+0x144>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_Base_SetConfig+0xf8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a15      	ldr	r2, [pc, #84]	@ (8005ea8 <TIM_Base_SetConfig+0x148>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d103      	bne.n	8005e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d105      	bne.n	8005e7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f023 0201 	bic.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	611a      	str	r2, [r3, #16]
  }
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40013400 	.word	0x40013400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800

08005eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f023 0201 	bic.w	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f023 030a 	bic.w	r3, r3, #10
 8005ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b087      	sub	sp, #28
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f023 0210 	bic.w	r2, r3, #16
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	031b      	lsls	r3, r3, #12
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f043 0307 	orr.w	r3, r3, #7
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	609a      	str	r2, [r3, #8]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	021a      	lsls	r2, r3, #8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	609a      	str	r2, [r3, #8]
}
 8005fd4:	bf00      	nop
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e068      	b.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2e      	ldr	r2, [pc, #184]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2d      	ldr	r2, [pc, #180]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006032:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006044:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1e      	ldr	r2, [pc, #120]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01d      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606a:	d018      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1b      	ldr	r2, [pc, #108]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1a      	ldr	r2, [pc, #104]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a18      	ldr	r2, [pc, #96]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a13      	ldr	r2, [pc, #76]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a14      	ldr	r2, [pc, #80]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10c      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40013400 	.word	0x40013400
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40014000 	.word	0x40014000

080060f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e040      	b.n	8006184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fb f99c 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2224      	movs	r2, #36	@ 0x24
 800611c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0201 	bic.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fb6a 	bl	8006810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f8af 	bl	80062a0 <UART_SetConfig>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e01b      	b.n	8006184 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800615a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800616a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fbe9 	bl	8006954 <UART_CheckIdleState>
 8006182:	4603      	mov	r3, r0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	@ 0x28
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d177      	bne.n	8006294 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_UART_Transmit+0x24>
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e070      	b.n	8006296 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2221      	movs	r2, #33	@ 0x21
 80061c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061c2:	f7fb fc1d 	bl	8001a00 <HAL_GetTick>
 80061c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e0:	d108      	bne.n	80061f4 <HAL_UART_Transmit+0x68>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	e003      	b.n	80061fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061fc:	e02f      	b.n	800625e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2200      	movs	r2, #0
 8006206:	2180      	movs	r1, #128	@ 0x80
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 fc4b 	bl	8006aa4 <UART_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e03b      	b.n	8006296 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	881a      	ldrh	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006230:	b292      	uxth	r2, r2
 8006232:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	3302      	adds	r3, #2
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e007      	b.n	800624c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	781a      	ldrb	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3301      	adds	r3, #1
 800624a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1c9      	bne.n	80061fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	2140      	movs	r1, #64	@ 0x40
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fc15 	bl	8006aa4 <UART_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e005      	b.n	8006296 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e000      	b.n	8006296 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006294:	2302      	movs	r3, #2
  }
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a4:	b08a      	sub	sp, #40	@ 0x28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	431a      	orrs	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4ba4      	ldr	r3, [pc, #656]	@ (8006560 <UART_SetConfig+0x2c0>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062d8:	430b      	orrs	r3, r1
 80062da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a99      	ldr	r2, [pc, #612]	@ (8006564 <UART_SetConfig+0x2c4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006308:	4313      	orrs	r3, r2
 800630a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631c:	430a      	orrs	r2, r1
 800631e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a90      	ldr	r2, [pc, #576]	@ (8006568 <UART_SetConfig+0x2c8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d126      	bne.n	8006378 <UART_SetConfig+0xd8>
 800632a:	4b90      	ldr	r3, [pc, #576]	@ (800656c <UART_SetConfig+0x2cc>)
 800632c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	2b03      	cmp	r3, #3
 8006336:	d81b      	bhi.n	8006370 <UART_SetConfig+0xd0>
 8006338:	a201      	add	r2, pc, #4	@ (adr r2, 8006340 <UART_SetConfig+0xa0>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006351 	.word	0x08006351
 8006344:	08006361 	.word	0x08006361
 8006348:	08006359 	.word	0x08006359
 800634c:	08006369 	.word	0x08006369
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006356:	e116      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006358:	2302      	movs	r3, #2
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635e:	e112      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006360:	2304      	movs	r3, #4
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006366:	e10e      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006368:	2308      	movs	r3, #8
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800636e:	e10a      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006370:	2310      	movs	r3, #16
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006376:	e106      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7c      	ldr	r2, [pc, #496]	@ (8006570 <UART_SetConfig+0x2d0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d138      	bne.n	80063f4 <UART_SetConfig+0x154>
 8006382:	4b7a      	ldr	r3, [pc, #488]	@ (800656c <UART_SetConfig+0x2cc>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006388:	f003 030c 	and.w	r3, r3, #12
 800638c:	2b0c      	cmp	r3, #12
 800638e:	d82d      	bhi.n	80063ec <UART_SetConfig+0x14c>
 8006390:	a201      	add	r2, pc, #4	@ (adr r2, 8006398 <UART_SetConfig+0xf8>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063cd 	.word	0x080063cd
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	080063ed 	.word	0x080063ed
 80063a4:	080063ed 	.word	0x080063ed
 80063a8:	080063dd 	.word	0x080063dd
 80063ac:	080063ed 	.word	0x080063ed
 80063b0:	080063ed 	.word	0x080063ed
 80063b4:	080063ed 	.word	0x080063ed
 80063b8:	080063d5 	.word	0x080063d5
 80063bc:	080063ed 	.word	0x080063ed
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	080063ed 	.word	0x080063ed
 80063c8:	080063e5 	.word	0x080063e5
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d2:	e0d8      	b.n	8006586 <UART_SetConfig+0x2e6>
 80063d4:	2302      	movs	r3, #2
 80063d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063da:	e0d4      	b.n	8006586 <UART_SetConfig+0x2e6>
 80063dc:	2304      	movs	r3, #4
 80063de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e2:	e0d0      	b.n	8006586 <UART_SetConfig+0x2e6>
 80063e4:	2308      	movs	r3, #8
 80063e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ea:	e0cc      	b.n	8006586 <UART_SetConfig+0x2e6>
 80063ec:	2310      	movs	r3, #16
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f2:	e0c8      	b.n	8006586 <UART_SetConfig+0x2e6>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a5e      	ldr	r2, [pc, #376]	@ (8006574 <UART_SetConfig+0x2d4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d125      	bne.n	800644a <UART_SetConfig+0x1aa>
 80063fe:	4b5b      	ldr	r3, [pc, #364]	@ (800656c <UART_SetConfig+0x2cc>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006404:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006408:	2b30      	cmp	r3, #48	@ 0x30
 800640a:	d016      	beq.n	800643a <UART_SetConfig+0x19a>
 800640c:	2b30      	cmp	r3, #48	@ 0x30
 800640e:	d818      	bhi.n	8006442 <UART_SetConfig+0x1a2>
 8006410:	2b20      	cmp	r3, #32
 8006412:	d00a      	beq.n	800642a <UART_SetConfig+0x18a>
 8006414:	2b20      	cmp	r3, #32
 8006416:	d814      	bhi.n	8006442 <UART_SetConfig+0x1a2>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <UART_SetConfig+0x182>
 800641c:	2b10      	cmp	r3, #16
 800641e:	d008      	beq.n	8006432 <UART_SetConfig+0x192>
 8006420:	e00f      	b.n	8006442 <UART_SetConfig+0x1a2>
 8006422:	2300      	movs	r3, #0
 8006424:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006428:	e0ad      	b.n	8006586 <UART_SetConfig+0x2e6>
 800642a:	2302      	movs	r3, #2
 800642c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006430:	e0a9      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006432:	2304      	movs	r3, #4
 8006434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006438:	e0a5      	b.n	8006586 <UART_SetConfig+0x2e6>
 800643a:	2308      	movs	r3, #8
 800643c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006440:	e0a1      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006442:	2310      	movs	r3, #16
 8006444:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006448:	e09d      	b.n	8006586 <UART_SetConfig+0x2e6>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a4a      	ldr	r2, [pc, #296]	@ (8006578 <UART_SetConfig+0x2d8>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d125      	bne.n	80064a0 <UART_SetConfig+0x200>
 8006454:	4b45      	ldr	r3, [pc, #276]	@ (800656c <UART_SetConfig+0x2cc>)
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800645e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006460:	d016      	beq.n	8006490 <UART_SetConfig+0x1f0>
 8006462:	2bc0      	cmp	r3, #192	@ 0xc0
 8006464:	d818      	bhi.n	8006498 <UART_SetConfig+0x1f8>
 8006466:	2b80      	cmp	r3, #128	@ 0x80
 8006468:	d00a      	beq.n	8006480 <UART_SetConfig+0x1e0>
 800646a:	2b80      	cmp	r3, #128	@ 0x80
 800646c:	d814      	bhi.n	8006498 <UART_SetConfig+0x1f8>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <UART_SetConfig+0x1d8>
 8006472:	2b40      	cmp	r3, #64	@ 0x40
 8006474:	d008      	beq.n	8006488 <UART_SetConfig+0x1e8>
 8006476:	e00f      	b.n	8006498 <UART_SetConfig+0x1f8>
 8006478:	2300      	movs	r3, #0
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647e:	e082      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006480:	2302      	movs	r3, #2
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006486:	e07e      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648e:	e07a      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006496:	e076      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649e:	e072      	b.n	8006586 <UART_SetConfig+0x2e6>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a35      	ldr	r2, [pc, #212]	@ (800657c <UART_SetConfig+0x2dc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d12a      	bne.n	8006500 <UART_SetConfig+0x260>
 80064aa:	4b30      	ldr	r3, [pc, #192]	@ (800656c <UART_SetConfig+0x2cc>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064b8:	d01a      	beq.n	80064f0 <UART_SetConfig+0x250>
 80064ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064be:	d81b      	bhi.n	80064f8 <UART_SetConfig+0x258>
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c4:	d00c      	beq.n	80064e0 <UART_SetConfig+0x240>
 80064c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ca:	d815      	bhi.n	80064f8 <UART_SetConfig+0x258>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <UART_SetConfig+0x238>
 80064d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d4:	d008      	beq.n	80064e8 <UART_SetConfig+0x248>
 80064d6:	e00f      	b.n	80064f8 <UART_SetConfig+0x258>
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064de:	e052      	b.n	8006586 <UART_SetConfig+0x2e6>
 80064e0:	2302      	movs	r3, #2
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e6:	e04e      	b.n	8006586 <UART_SetConfig+0x2e6>
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ee:	e04a      	b.n	8006586 <UART_SetConfig+0x2e6>
 80064f0:	2308      	movs	r3, #8
 80064f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f6:	e046      	b.n	8006586 <UART_SetConfig+0x2e6>
 80064f8:	2310      	movs	r3, #16
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fe:	e042      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a17      	ldr	r2, [pc, #92]	@ (8006564 <UART_SetConfig+0x2c4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d13a      	bne.n	8006580 <UART_SetConfig+0x2e0>
 800650a:	4b18      	ldr	r3, [pc, #96]	@ (800656c <UART_SetConfig+0x2cc>)
 800650c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006510:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006514:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006518:	d01a      	beq.n	8006550 <UART_SetConfig+0x2b0>
 800651a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800651e:	d81b      	bhi.n	8006558 <UART_SetConfig+0x2b8>
 8006520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006524:	d00c      	beq.n	8006540 <UART_SetConfig+0x2a0>
 8006526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800652a:	d815      	bhi.n	8006558 <UART_SetConfig+0x2b8>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <UART_SetConfig+0x298>
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006534:	d008      	beq.n	8006548 <UART_SetConfig+0x2a8>
 8006536:	e00f      	b.n	8006558 <UART_SetConfig+0x2b8>
 8006538:	2300      	movs	r3, #0
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653e:	e022      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006540:	2302      	movs	r3, #2
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006546:	e01e      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006548:	2304      	movs	r3, #4
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654e:	e01a      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006550:	2308      	movs	r3, #8
 8006552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006556:	e016      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006558:	2310      	movs	r3, #16
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655e:	e012      	b.n	8006586 <UART_SetConfig+0x2e6>
 8006560:	efff69f3 	.word	0xefff69f3
 8006564:	40008000 	.word	0x40008000
 8006568:	40013800 	.word	0x40013800
 800656c:	40021000 	.word	0x40021000
 8006570:	40004400 	.word	0x40004400
 8006574:	40004800 	.word	0x40004800
 8006578:	40004c00 	.word	0x40004c00
 800657c:	40005000 	.word	0x40005000
 8006580:	2310      	movs	r3, #16
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a9f      	ldr	r2, [pc, #636]	@ (8006808 <UART_SetConfig+0x568>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d17a      	bne.n	8006686 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006590:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006594:	2b08      	cmp	r3, #8
 8006596:	d824      	bhi.n	80065e2 <UART_SetConfig+0x342>
 8006598:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <UART_SetConfig+0x300>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065e3 	.word	0x080065e3
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065e3 	.word	0x080065e3
 80065b0:	080065d3 	.word	0x080065d3
 80065b4:	080065e3 	.word	0x080065e3
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	080065e3 	.word	0x080065e3
 80065c0:	080065db 	.word	0x080065db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c4:	f7fe fc40 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80065c8:	61f8      	str	r0, [r7, #28]
        break;
 80065ca:	e010      	b.n	80065ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065cc:	4b8f      	ldr	r3, [pc, #572]	@ (800680c <UART_SetConfig+0x56c>)
 80065ce:	61fb      	str	r3, [r7, #28]
        break;
 80065d0:	e00d      	b.n	80065ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d2:	f7fe fba1 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 80065d6:	61f8      	str	r0, [r7, #28]
        break;
 80065d8:	e009      	b.n	80065ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065de:	61fb      	str	r3, [r7, #28]
        break;
 80065e0:	e005      	b.n	80065ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 80fb 	beq.w	80067ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	4413      	add	r3, r2
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	429a      	cmp	r2, r3
 8006604:	d305      	bcc.n	8006612 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	429a      	cmp	r2, r3
 8006610:	d903      	bls.n	800661a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006618:	e0e8      	b.n	80067ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	2200      	movs	r2, #0
 800661e:	461c      	mov	r4, r3
 8006620:	4615      	mov	r5, r2
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	022b      	lsls	r3, r5, #8
 800662c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006630:	0222      	lsls	r2, r4, #8
 8006632:	68f9      	ldr	r1, [r7, #12]
 8006634:	6849      	ldr	r1, [r1, #4]
 8006636:	0849      	lsrs	r1, r1, #1
 8006638:	2000      	movs	r0, #0
 800663a:	4688      	mov	r8, r1
 800663c:	4681      	mov	r9, r0
 800663e:	eb12 0a08 	adds.w	sl, r2, r8
 8006642:	eb43 0b09 	adc.w	fp, r3, r9
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	603b      	str	r3, [r7, #0]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006654:	4650      	mov	r0, sl
 8006656:	4659      	mov	r1, fp
 8006658:	f7f9 fe0a 	bl	8000270 <__aeabi_uldivmod>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4613      	mov	r3, r2
 8006662:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800666a:	d308      	bcc.n	800667e <UART_SetConfig+0x3de>
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006672:	d204      	bcs.n	800667e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	60da      	str	r2, [r3, #12]
 800667c:	e0b6      	b.n	80067ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006684:	e0b2      	b.n	80067ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800668e:	d15e      	bne.n	800674e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006690:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006694:	2b08      	cmp	r3, #8
 8006696:	d828      	bhi.n	80066ea <UART_SetConfig+0x44a>
 8006698:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <UART_SetConfig+0x400>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066c5 	.word	0x080066c5
 80066a4:	080066cd 	.word	0x080066cd
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	080066eb 	.word	0x080066eb
 80066b0:	080066db 	.word	0x080066db
 80066b4:	080066eb 	.word	0x080066eb
 80066b8:	080066eb 	.word	0x080066eb
 80066bc:	080066eb 	.word	0x080066eb
 80066c0:	080066e3 	.word	0x080066e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c4:	f7fe fbc0 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80066c8:	61f8      	str	r0, [r7, #28]
        break;
 80066ca:	e014      	b.n	80066f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066cc:	f7fe fbd2 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 80066d0:	61f8      	str	r0, [r7, #28]
        break;
 80066d2:	e010      	b.n	80066f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d4:	4b4d      	ldr	r3, [pc, #308]	@ (800680c <UART_SetConfig+0x56c>)
 80066d6:	61fb      	str	r3, [r7, #28]
        break;
 80066d8:	e00d      	b.n	80066f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066da:	f7fe fb1d 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 80066de:	61f8      	str	r0, [r7, #28]
        break;
 80066e0:	e009      	b.n	80066f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066e6:	61fb      	str	r3, [r7, #28]
        break;
 80066e8:	e005      	b.n	80066f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d077      	beq.n	80067ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	005a      	lsls	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	441a      	add	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006710:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b0f      	cmp	r3, #15
 8006716:	d916      	bls.n	8006746 <UART_SetConfig+0x4a6>
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800671e:	d212      	bcs.n	8006746 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f023 030f 	bic.w	r3, r3, #15
 8006728:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	085b      	lsrs	r3, r3, #1
 800672e:	b29b      	uxth	r3, r3
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	b29a      	uxth	r2, r3
 8006736:	8afb      	ldrh	r3, [r7, #22]
 8006738:	4313      	orrs	r3, r2
 800673a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	8afa      	ldrh	r2, [r7, #22]
 8006742:	60da      	str	r2, [r3, #12]
 8006744:	e052      	b.n	80067ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800674c:	e04e      	b.n	80067ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800674e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006752:	2b08      	cmp	r3, #8
 8006754:	d827      	bhi.n	80067a6 <UART_SetConfig+0x506>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x4bc>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006781 	.word	0x08006781
 8006760:	08006789 	.word	0x08006789
 8006764:	08006791 	.word	0x08006791
 8006768:	080067a7 	.word	0x080067a7
 800676c:	08006797 	.word	0x08006797
 8006770:	080067a7 	.word	0x080067a7
 8006774:	080067a7 	.word	0x080067a7
 8006778:	080067a7 	.word	0x080067a7
 800677c:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7fe fb62 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8006784:	61f8      	str	r0, [r7, #28]
        break;
 8006786:	e014      	b.n	80067b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fe fb74 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 800678c:	61f8      	str	r0, [r7, #28]
        break;
 800678e:	e010      	b.n	80067b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b1e      	ldr	r3, [pc, #120]	@ (800680c <UART_SetConfig+0x56c>)
 8006792:	61fb      	str	r3, [r7, #28]
        break;
 8006794:	e00d      	b.n	80067b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fe fabf 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 800679a:	61f8      	str	r0, [r7, #28]
        break;
 800679c:	e009      	b.n	80067b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a2:	61fb      	str	r3, [r7, #28]
        break;
 80067a4:	e005      	b.n	80067b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067b0:	bf00      	nop
    }

    if (pclk != 0U)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d019      	beq.n	80067ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	085a      	lsrs	r2, r3, #1
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	441a      	add	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b0f      	cmp	r3, #15
 80067d0:	d909      	bls.n	80067e6 <UART_SetConfig+0x546>
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067d8:	d205      	bcs.n	80067e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60da      	str	r2, [r3, #12]
 80067e4:	e002      	b.n	80067ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80067f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3728      	adds	r7, #40	@ 0x28
 8006800:	46bd      	mov	sp, r7
 8006802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006806:	bf00      	nop
 8006808:	40008000 	.word	0x40008000
 800680c:	00f42400 	.word	0x00f42400

08006810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00a      	beq.n	800687e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00a      	beq.n	80068c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01a      	beq.n	8006926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690e:	d10a      	bne.n	8006926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	605a      	str	r2, [r3, #4]
  }
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b098      	sub	sp, #96	@ 0x60
 8006958:	af02      	add	r7, sp, #8
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006964:	f7fb f84c 	bl	8001a00 <HAL_GetTick>
 8006968:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b08      	cmp	r3, #8
 8006976:	d12e      	bne.n	80069d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006978:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006980:	2200      	movs	r2, #0
 8006982:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f88c 	bl	8006aa4 <UART_WaitOnFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d021      	beq.n	80069d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e6      	bne.n	8006992 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e062      	b.n	8006a9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d149      	bne.n	8006a78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f856 	bl	8006aa4 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d03c      	beq.n	8006a78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e6      	bne.n	80069fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3308      	adds	r3, #8
 8006a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a50:	61fa      	str	r2, [r7, #28]
 8006a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	69b9      	ldr	r1, [r7, #24]
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e5      	bne.n	8006a30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e011      	b.n	8006a9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3758      	adds	r7, #88	@ 0x58
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab4:	e04f      	b.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006abc:	d04b      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fa ff9f 	bl	8001a00 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e04e      	b.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d037      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b80      	cmp	r3, #128	@ 0x80
 8006aea:	d034      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b40      	cmp	r3, #64	@ 0x40
 8006af0:	d031      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d110      	bne.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2208      	movs	r2, #8
 8006b06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f838 	bl	8006b7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2208      	movs	r2, #8
 8006b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e029      	b.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b30:	d111      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f81e 	bl	8006b7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e00f      	b.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	bf0c      	ite	eq
 8006b66:	2301      	moveq	r3, #1
 8006b68:	2300      	movne	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d0a0      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b095      	sub	sp, #84	@ 0x54
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006baa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f023 0301 	bic.w	r3, r3, #1
 8006bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e5      	bne.n	8006bb8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d118      	bne.n	8006c26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0310 	bic.w	r3, r3, #16
 8006c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6979      	ldr	r1, [r7, #20]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e6      	bne.n	8006bf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c3a:	bf00      	nop
 8006c3c:	3754      	adds	r7, #84	@ 0x54
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c46:	b084      	sub	sp, #16
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	f107 001c 	add.w	r0, r7, #28
 8006c54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fa69 	bl	800713c <USB_CoreReset>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006c6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c82:	e005      	b.n	8006c90 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c9c:	b004      	add	sp, #16
 8006c9e:	4770      	bx	lr

08006ca0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f023 0201 	bic.w	r2, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d115      	bne.n	8006d10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cf0:	200a      	movs	r0, #10
 8006cf2:	f7fa fe91 	bl	8001a18 <HAL_Delay>
      ms += 10U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	330a      	adds	r3, #10
 8006cfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa0f 	bl	8007120 <USB_GetMode>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d01e      	beq.n	8006d46 <USB_SetCurrentMode+0x84>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d0c:	d9f0      	bls.n	8006cf0 <USB_SetCurrentMode+0x2e>
 8006d0e:	e01a      	b.n	8006d46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d115      	bne.n	8006d42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d22:	200a      	movs	r0, #10
 8006d24:	f7fa fe78 	bl	8001a18 <HAL_Delay>
      ms += 10U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	330a      	adds	r3, #10
 8006d2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f9f6 	bl	8007120 <USB_GetMode>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <USB_SetCurrentMode+0x84>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d3e:	d9f0      	bls.n	8006d22 <USB_SetCurrentMode+0x60>
 8006d40:	e001      	b.n	8006d46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e005      	b.n	8006d52 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d4a:	d101      	bne.n	8006d50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	e009      	b.n	8006d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3340      	adds	r3, #64	@ 0x40
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b0e      	cmp	r3, #14
 8006d94:	d9f2      	bls.n	8006d7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d11c      	bne.n	8006dd8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dac:	f043 0302 	orr.w	r3, r3, #2
 8006db0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e005      	b.n	8006de4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ddc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006dea:	461a      	mov	r2, r3
 8006dec:	2300      	movs	r3, #0
 8006dee:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006df0:	2103      	movs	r1, #3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f95a 	bl	80070ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006df8:	2110      	movs	r1, #16
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f8f6 	bl	8006fec <USB_FlushTxFifo>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f920 	bl	8007050 <USB_FlushRxFifo>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e20:	461a      	mov	r2, r3
 8006e22:	2300      	movs	r3, #0
 8006e24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2300      	movs	r3, #0
 8006e30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e38:	461a      	mov	r2, r3
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	e043      	b.n	8006ecc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e5a:	d118      	bne.n	8006e8e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e013      	b.n	8006ea0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e84:	461a      	mov	r2, r3
 8006e86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	e008      	b.n	8006ea0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eac:	461a      	mov	r2, r3
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ec4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d3b5      	bcc.n	8006e44 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ed8:	2300      	movs	r3, #0
 8006eda:	613b      	str	r3, [r7, #16]
 8006edc:	e043      	b.n	8006f66 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ef4:	d118      	bne.n	8006f28 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	e013      	b.n	8006f3a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e008      	b.n	8006f3a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f34:	461a      	mov	r2, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f46:	461a      	mov	r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	3301      	adds	r3, #1
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d3b5      	bcc.n	8006ede <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006f92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	f043 0210 	orr.w	r2, r3, #16
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699a      	ldr	r2, [r3, #24]
 8006fa4:	4b10      	ldr	r3, [pc, #64]	@ (8006fe8 <USB_DevInit+0x28c>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f043 0208 	orr.w	r2, r3, #8
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d107      	bne.n	8006fd8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fd0:	f043 0304 	orr.w	r3, r3, #4
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fe4:	b004      	add	sp, #16
 8006fe6:	4770      	bx	lr
 8006fe8:	803c3800 	.word	0x803c3800

08006fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007006:	d901      	bls.n	800700c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e01b      	b.n	8007044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	daf2      	bge.n	8006ffa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	019b      	lsls	r3, r3, #6
 800701c:	f043 0220 	orr.w	r2, r3, #32
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007030:	d901      	bls.n	8007036 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e006      	b.n	8007044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b20      	cmp	r3, #32
 8007040:	d0f0      	beq.n	8007024 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3301      	adds	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007068:	d901      	bls.n	800706e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e018      	b.n	80070a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	daf2      	bge.n	800705c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2210      	movs	r2, #16
 800707e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3301      	adds	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800708c:	d901      	bls.n	8007092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e006      	b.n	80070a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b10      	cmp	r3, #16
 800709c:	d0f0      	beq.n	8007080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	68f9      	ldr	r1, [r7, #12]
 80070c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070cc:	4313      	orrs	r3, r2
 80070ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070de:	b480      	push	{r7}
 80070e0:	b085      	sub	sp, #20
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070f8:	f023 0303 	bic.w	r3, r3, #3
 80070fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800710c:	f043 0302 	orr.w	r3, r3, #2
 8007110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	f003 0301 	and.w	r3, r3, #1
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	3301      	adds	r3, #1
 800714c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007154:	d901      	bls.n	800715a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e01b      	b.n	8007192 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	daf2      	bge.n	8007148 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f043 0201 	orr.w	r2, r3, #1
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3301      	adds	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800717e:	d901      	bls.n	8007184 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e006      	b.n	8007192 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b01      	cmp	r3, #1
 800718e:	d0f0      	beq.n	8007172 <USB_CoreReset+0x36>

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <__NVIC_SetPriority>:
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	db0a      	blt.n	80071ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	490c      	ldr	r1, [pc, #48]	@ (80071ec <__NVIC_SetPriority+0x4c>)
 80071ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071be:	0112      	lsls	r2, r2, #4
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	440b      	add	r3, r1
 80071c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80071c8:	e00a      	b.n	80071e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	4908      	ldr	r1, [pc, #32]	@ (80071f0 <__NVIC_SetPriority+0x50>)
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	3b04      	subs	r3, #4
 80071d8:	0112      	lsls	r2, r2, #4
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	440b      	add	r3, r1
 80071de:	761a      	strb	r2, [r3, #24]
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	e000e100 	.word	0xe000e100
 80071f0:	e000ed00 	.word	0xe000ed00

080071f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071f8:	2100      	movs	r1, #0
 80071fa:	f06f 0004 	mvn.w	r0, #4
 80071fe:	f7ff ffcf 	bl	80071a0 <__NVIC_SetPriority>
#endif
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800720e:	f3ef 8305 	mrs	r3, IPSR
 8007212:	603b      	str	r3, [r7, #0]
  return(result);
 8007214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800721a:	f06f 0305 	mvn.w	r3, #5
 800721e:	607b      	str	r3, [r7, #4]
 8007220:	e00c      	b.n	800723c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007222:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <osKernelInitialize+0x44>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800722a:	4b08      	ldr	r3, [pc, #32]	@ (800724c <osKernelInitialize+0x44>)
 800722c:	2201      	movs	r2, #1
 800722e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007230:	2300      	movs	r3, #0
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	e002      	b.n	800723c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800723a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800723c:	687b      	ldr	r3, [r7, #4]
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000ae8 	.word	0x20000ae8

08007250 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007256:	f3ef 8305 	mrs	r3, IPSR
 800725a:	603b      	str	r3, [r7, #0]
  return(result);
 800725c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007262:	f06f 0305 	mvn.w	r3, #5
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	e010      	b.n	800728c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800726a:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <osKernelStart+0x48>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d109      	bne.n	8007286 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007272:	f7ff ffbf 	bl	80071f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007276:	4b08      	ldr	r3, [pc, #32]	@ (8007298 <osKernelStart+0x48>)
 8007278:	2202      	movs	r2, #2
 800727a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800727c:	f001 fcca 	bl	8008c14 <vTaskStartScheduler>
      stat = osOK;
 8007280:	2300      	movs	r3, #0
 8007282:	607b      	str	r3, [r7, #4]
 8007284:	e002      	b.n	800728c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800728a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800728c:	687b      	ldr	r3, [r7, #4]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000ae8 	.word	0x20000ae8

0800729c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800729c:	b580      	push	{r7, lr}
 800729e:	b08e      	sub	sp, #56	@ 0x38
 80072a0:	af04      	add	r7, sp, #16
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ac:	f3ef 8305 	mrs	r3, IPSR
 80072b0:	617b      	str	r3, [r7, #20]
  return(result);
 80072b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d17e      	bne.n	80073b6 <osThreadNew+0x11a>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d07b      	beq.n	80073b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072c2:	2318      	movs	r3, #24
 80072c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d045      	beq.n	8007362 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <osThreadNew+0x48>
        name = attr->name;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <osThreadNew+0x6e>
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b38      	cmp	r3, #56	@ 0x38
 80072fc:	d805      	bhi.n	800730a <osThreadNew+0x6e>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <osThreadNew+0x72>
        return (NULL);
 800730a:	2300      	movs	r3, #0
 800730c:	e054      	b.n	80073b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00e      	beq.n	8007344 <osThreadNew+0xa8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	2b5b      	cmp	r3, #91	@ 0x5b
 800732c:	d90a      	bls.n	8007344 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007332:	2b00      	cmp	r3, #0
 8007334:	d006      	beq.n	8007344 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <osThreadNew+0xa8>
        mem = 1;
 800733e:	2301      	movs	r3, #1
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	e010      	b.n	8007366 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10c      	bne.n	8007366 <osThreadNew+0xca>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d108      	bne.n	8007366 <osThreadNew+0xca>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <osThreadNew+0xca>
          mem = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	61bb      	str	r3, [r7, #24]
 8007360:	e001      	b.n	8007366 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d110      	bne.n	800738e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007374:	9202      	str	r2, [sp, #8]
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6a3a      	ldr	r2, [r7, #32]
 8007380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f001 fa6a 	bl	800885c <xTaskCreateStatic>
 8007388:	4603      	mov	r3, r0
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	e013      	b.n	80073b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d110      	bne.n	80073b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	b29a      	uxth	r2, r3
 8007398:	f107 0310 	add.w	r3, r7, #16
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f001 fab8 	bl	800891c <xTaskCreate>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d001      	beq.n	80073b6 <osThreadNew+0x11a>
            hTask = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073b6:	693b      	ldr	r3, [r7, #16]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3728      	adds	r7, #40	@ 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c8:	f3ef 8305 	mrs	r3, IPSR
 80073cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <osDelay+0x1c>
    stat = osErrorISR;
 80073d4:	f06f 0305 	mvn.w	r3, #5
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e007      	b.n	80073ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fbde 	bl	8008ba8 <vTaskDelay>
    }
  }

  return (stat);
 80073ec:	68fb      	ldr	r3, [r7, #12]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b08a      	sub	sp, #40	@ 0x28
 80073fa:	af02      	add	r7, sp, #8
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007406:	f3ef 8305 	mrs	r3, IPSR
 800740a:	613b      	str	r3, [r7, #16]
  return(result);
 800740c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800740e:	2b00      	cmp	r3, #0
 8007410:	d175      	bne.n	80074fe <osSemaphoreNew+0x108>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d072      	beq.n	80074fe <osSemaphoreNew+0x108>
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	429a      	cmp	r2, r3
 800741e:	d86e      	bhi.n	80074fe <osSemaphoreNew+0x108>
    mem = -1;
 8007420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007424:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d015      	beq.n	8007458 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d006      	beq.n	8007442 <osSemaphoreNew+0x4c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	2b4f      	cmp	r3, #79	@ 0x4f
 800743a:	d902      	bls.n	8007442 <osSemaphoreNew+0x4c>
        mem = 1;
 800743c:	2301      	movs	r3, #1
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	e00c      	b.n	800745c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d108      	bne.n	800745c <osSemaphoreNew+0x66>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <osSemaphoreNew+0x66>
          mem = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e001      	b.n	800745c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007462:	d04c      	beq.n	80074fe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d128      	bne.n	80074bc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d10a      	bne.n	8007486 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2203      	movs	r2, #3
 8007476:	9200      	str	r2, [sp, #0]
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	2001      	movs	r0, #1
 800747e:	f000 fa2b 	bl	80078d8 <xQueueGenericCreateStatic>
 8007482:	61f8      	str	r0, [r7, #28]
 8007484:	e005      	b.n	8007492 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007486:	2203      	movs	r2, #3
 8007488:	2100      	movs	r1, #0
 800748a:	2001      	movs	r0, #1
 800748c:	f000 faa1 	bl	80079d2 <xQueueGenericCreate>
 8007490:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d022      	beq.n	80074de <osSemaphoreNew+0xe8>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01f      	beq.n	80074de <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800749e:	2300      	movs	r3, #0
 80074a0:	2200      	movs	r2, #0
 80074a2:	2100      	movs	r1, #0
 80074a4:	69f8      	ldr	r0, [r7, #28]
 80074a6:	f000 fb61 	bl	8007b6c <xQueueGenericSend>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d016      	beq.n	80074de <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80074b0:	69f8      	ldr	r0, [r7, #28]
 80074b2:	f000 ffff 	bl	80084b4 <vQueueDelete>
            hSemaphore = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	e010      	b.n	80074de <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d108      	bne.n	80074d4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	461a      	mov	r2, r3
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fadf 	bl	8007a8e <xQueueCreateCountingSemaphoreStatic>
 80074d0:	61f8      	str	r0, [r7, #28]
 80074d2:	e004      	b.n	80074de <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80074d4:	68b9      	ldr	r1, [r7, #8]
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fb12 	bl	8007b00 <xQueueCreateCountingSemaphore>
 80074dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00c      	beq.n	80074fe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	e001      	b.n	80074f6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80074f6:	6979      	ldr	r1, [r7, #20]
 80074f8:	69f8      	ldr	r0, [r7, #28]
 80074fa:	f001 f927 	bl	800874c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80074fe:	69fb      	ldr	r3, [r7, #28]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007520:	f06f 0303 	mvn.w	r3, #3
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	e039      	b.n	800759c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007528:	f3ef 8305 	mrs	r3, IPSR
 800752c:	60fb      	str	r3, [r7, #12]
  return(result);
 800752e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007530:	2b00      	cmp	r3, #0
 8007532:	d022      	beq.n	800757a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800753a:	f06f 0303 	mvn.w	r3, #3
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e02c      	b.n	800759c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007542:	2300      	movs	r3, #0
 8007544:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007546:	f107 0308 	add.w	r3, r7, #8
 800754a:	461a      	mov	r2, r3
 800754c:	2100      	movs	r1, #0
 800754e:	6938      	ldr	r0, [r7, #16]
 8007550:	f000 ff2e 	bl	80083b0 <xQueueReceiveFromISR>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d003      	beq.n	8007562 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800755a:	f06f 0302 	mvn.w	r3, #2
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e01c      	b.n	800759c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d019      	beq.n	800759c <osSemaphoreAcquire+0x94>
 8007568:	4b0f      	ldr	r3, [pc, #60]	@ (80075a8 <osSemaphoreAcquire+0xa0>)
 800756a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	e010      	b.n	800759c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6938      	ldr	r0, [r7, #16]
 800757e:	f000 fe07 	bl	8008190 <xQueueSemaphoreTake>
 8007582:	4603      	mov	r3, r0
 8007584:	2b01      	cmp	r3, #1
 8007586:	d009      	beq.n	800759c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800758e:	f06f 0301 	mvn.w	r3, #1
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	e002      	b.n	800759c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007596:	f06f 0302 	mvn.w	r3, #2
 800759a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800759c:	697b      	ldr	r3, [r7, #20]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d103      	bne.n	80075ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80075c2:	f06f 0303 	mvn.w	r3, #3
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	e02c      	b.n	8007624 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ca:	f3ef 8305 	mrs	r3, IPSR
 80075ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01a      	beq.n	800760c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80075da:	f107 0308 	add.w	r3, r7, #8
 80075de:	4619      	mov	r1, r3
 80075e0:	6938      	ldr	r0, [r7, #16]
 80075e2:	f000 fc63 	bl	8007eac <xQueueGiveFromISR>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d003      	beq.n	80075f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80075ec:	f06f 0302 	mvn.w	r3, #2
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e017      	b.n	8007624 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d014      	beq.n	8007624 <osSemaphoreRelease+0x78>
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <osSemaphoreRelease+0x84>)
 80075fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	e00b      	b.n	8007624 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800760c:	2300      	movs	r3, #0
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	6938      	ldr	r0, [r7, #16]
 8007614:	f000 faaa 	bl	8007b6c <xQueueGenericSend>
 8007618:	4603      	mov	r3, r0
 800761a:	2b01      	cmp	r3, #1
 800761c:	d002      	beq.n	8007624 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800761e:	f06f 0302 	mvn.w	r3, #2
 8007622:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007624:	697b      	ldr	r3, [r7, #20]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a07      	ldr	r2, [pc, #28]	@ (8007660 <vApplicationGetIdleTaskMemory+0x2c>)
 8007644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	4a06      	ldr	r2, [pc, #24]	@ (8007664 <vApplicationGetIdleTaskMemory+0x30>)
 800764a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2280      	movs	r2, #128	@ 0x80
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	20000aec 	.word	0x20000aec
 8007664:	20000b48 	.word	0x20000b48

08007668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4a07      	ldr	r2, [pc, #28]	@ (8007694 <vApplicationGetTimerTaskMemory+0x2c>)
 8007678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4a06      	ldr	r2, [pc, #24]	@ (8007698 <vApplicationGetTimerTaskMemory+0x30>)
 800767e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007686:	601a      	str	r2, [r3, #0]
}
 8007688:	bf00      	nop
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20000d48 	.word	0x20000d48
 8007698:	20000da4 	.word	0x20000da4

0800769c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f103 0208 	add.w	r2, r3, #8
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f103 0208 	add.w	r2, r3, #8
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f103 0208 	add.w	r2, r3, #8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007754:	d103      	bne.n	800775e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e00c      	b.n	8007778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3308      	adds	r3, #8
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	e002      	b.n	800776c <vListInsert+0x2e>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	429a      	cmp	r2, r3
 8007776:	d2f6      	bcs.n	8007766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6892      	ldr	r2, [r2, #8]
 80077c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6852      	ldr	r2, [r2, #4]
 80077d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d103      	bne.n	80077e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	1e5a      	subs	r2, r3, #1
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007818:	f04f 0310 	mov.w	r3, #16
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	e7fd      	b.n	800782c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007830:	f002 fcaa 	bl	800a188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783c:	68f9      	ldr	r1, [r7, #12]
 800783e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	441a      	add	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007860:	3b01      	subs	r3, #1
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007866:	fb01 f303 	mul.w	r3, r1, r3
 800786a:	441a      	add	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	22ff      	movs	r2, #255	@ 0xff
 8007874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	22ff      	movs	r2, #255	@ 0xff
 800787c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d114      	bne.n	80078b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d01a      	beq.n	80078c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3310      	adds	r3, #16
 8007892:	4618      	mov	r0, r3
 8007894:	f001 fc4c 	bl	8009130 <xTaskRemoveFromEventList>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d012      	beq.n	80078c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <xQueueGenericReset+0xd0>)
 80078a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	e009      	b.n	80078c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3310      	adds	r3, #16
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fef1 	bl	800769c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3324      	adds	r3, #36	@ 0x24
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff feec 	bl	800769c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078c4:	f002 fc92 	bl	800a1ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078c8:	2301      	movs	r3, #1
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08e      	sub	sp, #56	@ 0x38
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10b      	bne.n	8007904 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80078ec:	f04f 0310 	mov.w	r3, #16
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10b      	bne.n	8007922 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800790a:	f04f 0310 	mov.w	r3, #16
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <xQueueGenericCreateStatic+0x56>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <xQueueGenericCreateStatic+0x5a>
 800792e:	2301      	movs	r3, #1
 8007930:	e000      	b.n	8007934 <xQueueGenericCreateStatic+0x5c>
 8007932:	2300      	movs	r3, #0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10b      	bne.n	8007950 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007938:	f04f 0310 	mov.w	r3, #16
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	623b      	str	r3, [r7, #32]
}
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	e7fd      	b.n	800794c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d102      	bne.n	800795c <xQueueGenericCreateStatic+0x84>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <xQueueGenericCreateStatic+0x88>
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <xQueueGenericCreateStatic+0x8a>
 8007960:	2300      	movs	r3, #0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10b      	bne.n	800797e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007966:	f04f 0310 	mov.w	r3, #16
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	61fb      	str	r3, [r7, #28]
}
 8007978:	bf00      	nop
 800797a:	bf00      	nop
 800797c:	e7fd      	b.n	800797a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800797e:	2350      	movs	r3, #80	@ 0x50
 8007980:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b50      	cmp	r3, #80	@ 0x50
 8007986:	d00b      	beq.n	80079a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007988:	f04f 0310 	mov.w	r3, #16
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	61bb      	str	r3, [r7, #24]
}
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80079a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00d      	beq.n	80079c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f840 	bl	8007a48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3730      	adds	r7, #48	@ 0x30
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b08a      	sub	sp, #40	@ 0x28
 80079d6:	af02      	add	r7, sp, #8
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	4613      	mov	r3, r2
 80079de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10b      	bne.n	80079fe <xQueueGenericCreate+0x2c>
	__asm volatile
 80079e6:	f04f 0310 	mov.w	r3, #16
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	613b      	str	r3, [r7, #16]
}
 80079f8:	bf00      	nop
 80079fa:	bf00      	nop
 80079fc:	e7fd      	b.n	80079fa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3350      	adds	r3, #80	@ 0x50
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f002 fcdd 	bl	800a3cc <pvPortMalloc>
 8007a12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d011      	beq.n	8007a3e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	3350      	adds	r3, #80	@ 0x50
 8007a22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a2c:	79fa      	ldrb	r2, [r7, #7]
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4613      	mov	r3, r2
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f805 	bl	8007a48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3720      	adds	r7, #32
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d103      	bne.n	8007a64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a76:	2101      	movs	r1, #1
 8007a78:	69b8      	ldr	r0, [r7, #24]
 8007a7a:	f7ff fec3 	bl	8007804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	78fa      	ldrb	r2, [r7, #3]
 8007a82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b08a      	sub	sp, #40	@ 0x28
 8007a92:	af02      	add	r7, sp, #8
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	60b9      	str	r1, [r7, #8]
 8007a98:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10b      	bne.n	8007ab8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007aa0:	f04f 0310 	mov.w	r3, #16
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	61bb      	str	r3, [r7, #24]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d90b      	bls.n	8007ad8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007ac0:	f04f 0310 	mov.w	r3, #16
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	617b      	str	r3, [r7, #20]
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ad8:	2302      	movs	r3, #2
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fef8 	bl	80078d8 <xQueueGenericCreateStatic>
 8007ae8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007af6:	69fb      	ldr	r3, [r7, #28]
	}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007b10:	f04f 0310 	mov.w	r3, #16
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	613b      	str	r3, [r7, #16]
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d90b      	bls.n	8007b48 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007b30:	f04f 0310 	mov.w	r3, #16
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b48:	2202      	movs	r2, #2
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff ff40 	bl	80079d2 <xQueueGenericCreate>
 8007b52:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007b60:	697b      	ldr	r3, [r7, #20]
	}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08e      	sub	sp, #56	@ 0x38
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10b      	bne.n	8007ba0 <xQueueGenericSend+0x34>
	__asm volatile
 8007b88:	f04f 0310 	mov.w	r3, #16
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d103      	bne.n	8007bae <xQueueGenericSend+0x42>
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <xQueueGenericSend+0x46>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <xQueueGenericSend+0x48>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10b      	bne.n	8007bd0 <xQueueGenericSend+0x64>
	__asm volatile
 8007bb8:	f04f 0310 	mov.w	r3, #16
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	e7fd      	b.n	8007bcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d103      	bne.n	8007bde <xQueueGenericSend+0x72>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <xQueueGenericSend+0x76>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <xQueueGenericSend+0x78>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10b      	bne.n	8007c00 <xQueueGenericSend+0x94>
	__asm volatile
 8007be8:	f04f 0310 	mov.w	r3, #16
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	623b      	str	r3, [r7, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	bf00      	nop
 8007bfe:	e7fd      	b.n	8007bfc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c00:	f001 fc56 	bl	80094b0 <xTaskGetSchedulerState>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <xQueueGenericSend+0xa4>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <xQueueGenericSend+0xa8>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <xQueueGenericSend+0xaa>
 8007c14:	2300      	movs	r3, #0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10b      	bne.n	8007c32 <xQueueGenericSend+0xc6>
	__asm volatile
 8007c1a:	f04f 0310 	mov.w	r3, #16
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	61fb      	str	r3, [r7, #28]
}
 8007c2c:	bf00      	nop
 8007c2e:	bf00      	nop
 8007c30:	e7fd      	b.n	8007c2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c32:	f002 faa9 	bl	800a188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d302      	bcc.n	8007c48 <xQueueGenericSend+0xdc>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d129      	bne.n	8007c9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c4e:	f000 fc6d 	bl	800852c <prvCopyDataToQueue>
 8007c52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d010      	beq.n	8007c7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	3324      	adds	r3, #36	@ 0x24
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 fa65 	bl	8009130 <xTaskRemoveFromEventList>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d013      	beq.n	8007c94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8007d6c <xQueueGenericSend+0x200>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	e00a      	b.n	8007c94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d007      	beq.n	8007c94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c84:	4b39      	ldr	r3, [pc, #228]	@ (8007d6c <xQueueGenericSend+0x200>)
 8007c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c94:	f002 faaa 	bl	800a1ec <vPortExitCritical>
				return pdPASS;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e063      	b.n	8007d64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ca2:	f002 faa3 	bl	800a1ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e05c      	b.n	8007d64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d106      	bne.n	8007cbe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 fa9f 	bl	80091f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cbe:	f002 fa95 	bl	800a1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cc2:	f001 f80f 	bl	8008ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cc6:	f002 fa5f 	bl	800a188 <vPortEnterCritical>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cd0:	b25b      	sxtb	r3, r3
 8007cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd6:	d103      	bne.n	8007ce0 <xQueueGenericSend+0x174>
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ce6:	b25b      	sxtb	r3, r3
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cec:	d103      	bne.n	8007cf6 <xQueueGenericSend+0x18a>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cf6:	f002 fa79 	bl	800a1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cfa:	1d3a      	adds	r2, r7, #4
 8007cfc:	f107 0314 	add.w	r3, r7, #20
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 fa8e 	bl	8009224 <xTaskCheckForTimeOut>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d124      	bne.n	8007d58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d10:	f000 fd04 	bl	800871c <prvIsQueueFull>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d018      	beq.n	8007d4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	3310      	adds	r3, #16
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 f9b2 	bl	800908c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d2a:	f000 fc8f 	bl	800864c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d2e:	f000 ffe7 	bl	8008d00 <xTaskResumeAll>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f47f af7c 	bne.w	8007c32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d6c <xQueueGenericSend+0x200>)
 8007d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	e772      	b.n	8007c32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d4e:	f000 fc7d 	bl	800864c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d52:	f000 ffd5 	bl	8008d00 <xTaskResumeAll>
 8007d56:	e76c      	b.n	8007c32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d5a:	f000 fc77 	bl	800864c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d5e:	f000 ffcf 	bl	8008d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3738      	adds	r7, #56	@ 0x38
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	e000ed04 	.word	0xe000ed04

08007d70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b090      	sub	sp, #64	@ 0x40
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10b      	bne.n	8007da0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007d88:	f04f 0310 	mov.w	r3, #16
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d9a:	bf00      	nop
 8007d9c:	bf00      	nop
 8007d9e:	e7fd      	b.n	8007d9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d103      	bne.n	8007dae <xQueueGenericSendFromISR+0x3e>
 8007da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <xQueueGenericSendFromISR+0x42>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e000      	b.n	8007db4 <xQueueGenericSendFromISR+0x44>
 8007db2:	2300      	movs	r3, #0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10b      	bne.n	8007dd0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007db8:	f04f 0310 	mov.w	r3, #16
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007dca:	bf00      	nop
 8007dcc:	bf00      	nop
 8007dce:	e7fd      	b.n	8007dcc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d103      	bne.n	8007dde <xQueueGenericSendFromISR+0x6e>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <xQueueGenericSendFromISR+0x72>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <xQueueGenericSendFromISR+0x74>
 8007de2:	2300      	movs	r3, #0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10b      	bne.n	8007e00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007de8:	f04f 0310 	mov.w	r3, #16
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	623b      	str	r3, [r7, #32]
}
 8007dfa:	bf00      	nop
 8007dfc:	bf00      	nop
 8007dfe:	e7fd      	b.n	8007dfc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e00:	f002 faa2 	bl	800a348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e04:	f3ef 8211 	mrs	r2, BASEPRI
 8007e08:	f04f 0310 	mov.w	r3, #16
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	61fa      	str	r2, [r7, #28]
 8007e1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d302      	bcc.n	8007e32 <xQueueGenericSendFromISR+0xc2>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d12f      	bne.n	8007e92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007e48:	f000 fb70 	bl	800852c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e54:	d112      	bne.n	8007e7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d016      	beq.n	8007e8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	3324      	adds	r3, #36	@ 0x24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 f964 	bl	8009130 <xTaskRemoveFromEventList>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00e      	beq.n	8007e8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e007      	b.n	8007e8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007e80:	3301      	adds	r3, #1
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	b25a      	sxtb	r2, r3
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007e90:	e001      	b.n	8007e96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ea0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3740      	adds	r7, #64	@ 0x40
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08e      	sub	sp, #56	@ 0x38
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10b      	bne.n	8007ed8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007ec0:	f04f 0310 	mov.w	r3, #16
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	623b      	str	r3, [r7, #32]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007ee0:	f04f 0310 	mov.w	r3, #16
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	61fb      	str	r3, [r7, #28]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <xQueueGiveFromISR+0x5c>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <xQueueGiveFromISR+0x60>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <xQueueGiveFromISR+0x62>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10b      	bne.n	8007f2a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007f12:	f04f 0310 	mov.w	r3, #16
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	61bb      	str	r3, [r7, #24]
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	e7fd      	b.n	8007f26 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f2a:	f002 fa0d 	bl	800a348 <vPortValidateInterruptPriority>
	__asm volatile
 8007f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8007f32:	f04f 0310 	mov.w	r3, #16
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	617a      	str	r2, [r7, #20]
 8007f44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007f46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d22b      	bcs.n	8007fb2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f74:	d112      	bne.n	8007f9c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d016      	beq.n	8007fac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f80:	3324      	adds	r3, #36	@ 0x24
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 f8d4 	bl	8009130 <xTaskRemoveFromEventList>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00e      	beq.n	8007fac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2201      	movs	r2, #1
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	e007      	b.n	8007fac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	b25a      	sxtb	r2, r3
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007fac:	2301      	movs	r3, #1
 8007fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb0:	e001      	b.n	8007fb6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f383 8811 	msr	BASEPRI, r3
}
 8007fc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3738      	adds	r7, #56	@ 0x38
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08c      	sub	sp, #48	@ 0x30
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <xQueueReceive+0x32>
	__asm volatile
 8007fe6:	f04f 0310 	mov.w	r3, #16
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	623b      	str	r3, [r7, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <xQueueReceive+0x40>
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <xQueueReceive+0x44>
 800800c:	2301      	movs	r3, #1
 800800e:	e000      	b.n	8008012 <xQueueReceive+0x46>
 8008010:	2300      	movs	r3, #0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10b      	bne.n	800802e <xQueueReceive+0x62>
	__asm volatile
 8008016:	f04f 0310 	mov.w	r3, #16
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	61fb      	str	r3, [r7, #28]
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	e7fd      	b.n	800802a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800802e:	f001 fa3f 	bl	80094b0 <xTaskGetSchedulerState>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <xQueueReceive+0x72>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <xQueueReceive+0x76>
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <xQueueReceive+0x78>
 8008042:	2300      	movs	r3, #0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10b      	bne.n	8008060 <xQueueReceive+0x94>
	__asm volatile
 8008048:	f04f 0310 	mov.w	r3, #16
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	61bb      	str	r3, [r7, #24]
}
 800805a:	bf00      	nop
 800805c:	bf00      	nop
 800805e:	e7fd      	b.n	800805c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008060:	f002 f892 	bl	800a188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	2b00      	cmp	r3, #0
 800806e:	d01f      	beq.n	80080b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008074:	f000 fac4 	bl	8008600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	1e5a      	subs	r2, r3, #1
 800807c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00f      	beq.n	80080a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	3310      	adds	r3, #16
 800808c:	4618      	mov	r0, r3
 800808e:	f001 f84f 	bl	8009130 <xTaskRemoveFromEventList>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008098:	4b3c      	ldr	r3, [pc, #240]	@ (800818c <xQueueReceive+0x1c0>)
 800809a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080a8:	f002 f8a0 	bl	800a1ec <vPortExitCritical>
				return pdPASS;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e069      	b.n	8008184 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080b6:	f002 f899 	bl	800a1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e062      	b.n	8008184 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d106      	bne.n	80080d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	4618      	mov	r0, r3
 80080ca:	f001 f895 	bl	80091f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ce:	2301      	movs	r3, #1
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080d2:	f002 f88b 	bl	800a1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080d6:	f000 fe05 	bl	8008ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080da:	f002 f855 	bl	800a188 <vPortEnterCritical>
 80080de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080e4:	b25b      	sxtb	r3, r3
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080ea:	d103      	bne.n	80080f4 <xQueueReceive+0x128>
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080fa:	b25b      	sxtb	r3, r3
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008100:	d103      	bne.n	800810a <xQueueReceive+0x13e>
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800810a:	f002 f86f 	bl	800a1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800810e:	1d3a      	adds	r2, r7, #4
 8008110:	f107 0310 	add.w	r3, r7, #16
 8008114:	4611      	mov	r1, r2
 8008116:	4618      	mov	r0, r3
 8008118:	f001 f884 	bl	8009224 <xTaskCheckForTimeOut>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d123      	bne.n	800816a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008124:	f000 fae4 	bl	80086f0 <prvIsQueueEmpty>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d017      	beq.n	800815e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800812e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008130:	3324      	adds	r3, #36	@ 0x24
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f000 ffa8 	bl	800908c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800813c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800813e:	f000 fa85 	bl	800864c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008142:	f000 fddd 	bl	8008d00 <xTaskResumeAll>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d189      	bne.n	8008060 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800814c:	4b0f      	ldr	r3, [pc, #60]	@ (800818c <xQueueReceive+0x1c0>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	e780      	b.n	8008060 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800815e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008160:	f000 fa74 	bl	800864c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008164:	f000 fdcc 	bl	8008d00 <xTaskResumeAll>
 8008168:	e77a      	b.n	8008060 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800816a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800816c:	f000 fa6e 	bl	800864c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008170:	f000 fdc6 	bl	8008d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008176:	f000 fabb 	bl	80086f0 <prvIsQueueEmpty>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	f43f af6f 	beq.w	8008060 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008182:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008184:	4618      	mov	r0, r3
 8008186:	3730      	adds	r7, #48	@ 0x30
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08e      	sub	sp, #56	@ 0x38
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80081ac:	f04f 0310 	mov.w	r3, #16
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	623b      	str	r3, [r7, #32]
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80081cc:	f04f 0310 	mov.w	r3, #16
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	61fb      	str	r3, [r7, #28]
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	e7fd      	b.n	80081e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081e4:	f001 f964 	bl	80094b0 <xTaskGetSchedulerState>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d102      	bne.n	80081f4 <xQueueSemaphoreTake+0x64>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <xQueueSemaphoreTake+0x68>
 80081f4:	2301      	movs	r3, #1
 80081f6:	e000      	b.n	80081fa <xQueueSemaphoreTake+0x6a>
 80081f8:	2300      	movs	r3, #0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10b      	bne.n	8008216 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80081fe:	f04f 0310 	mov.w	r3, #16
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	61bb      	str	r3, [r7, #24]
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	e7fd      	b.n	8008212 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008216:	f001 ffb7 	bl	800a188 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800821a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d024      	beq.n	8008270 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008228:	1e5a      	subs	r2, r3, #1
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008236:	f001 fab5 	bl	80097a4 <pvTaskIncrementMutexHeldCount>
 800823a:	4602      	mov	r2, r0
 800823c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00f      	beq.n	8008268 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824a:	3310      	adds	r3, #16
 800824c:	4618      	mov	r0, r3
 800824e:	f000 ff6f 	bl	8009130 <xTaskRemoveFromEventList>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008258:	4b54      	ldr	r3, [pc, #336]	@ (80083ac <xQueueSemaphoreTake+0x21c>)
 800825a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008268:	f001 ffc0 	bl	800a1ec <vPortExitCritical>
				return pdPASS;
 800826c:	2301      	movs	r3, #1
 800826e:	e098      	b.n	80083a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d112      	bne.n	800829c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800827c:	f04f 0310 	mov.w	r3, #16
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	617b      	str	r3, [r7, #20]
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008294:	f001 ffaa 	bl	800a1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008298:	2300      	movs	r3, #0
 800829a:	e082      	b.n	80083a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082a2:	f107 030c 	add.w	r3, r7, #12
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 ffa6 	bl	80091f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082b0:	f001 ff9c 	bl	800a1ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082b4:	f000 fd16 	bl	8008ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082b8:	f001 ff66 	bl	800a188 <vPortEnterCritical>
 80082bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082c8:	d103      	bne.n	80082d2 <xQueueSemaphoreTake+0x142>
 80082ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082d8:	b25b      	sxtb	r3, r3
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082de:	d103      	bne.n	80082e8 <xQueueSemaphoreTake+0x158>
 80082e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082e8:	f001 ff80 	bl	800a1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082ec:	463a      	mov	r2, r7
 80082ee:	f107 030c 	add.w	r3, r7, #12
 80082f2:	4611      	mov	r1, r2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 ff95 	bl	8009224 <xTaskCheckForTimeOut>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d132      	bne.n	8008366 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008300:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008302:	f000 f9f5 	bl	80086f0 <prvIsQueueEmpty>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d026      	beq.n	800835a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d109      	bne.n	8008328 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008314:	f001 ff38 	bl	800a188 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	4618      	mov	r0, r3
 800831e:	f001 f8e5 	bl	80094ec <xTaskPriorityInherit>
 8008322:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008324:	f001 ff62 	bl	800a1ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832a:	3324      	adds	r3, #36	@ 0x24
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	4611      	mov	r1, r2
 8008330:	4618      	mov	r0, r3
 8008332:	f000 feab 	bl	800908c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008336:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008338:	f000 f988 	bl	800864c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800833c:	f000 fce0 	bl	8008d00 <xTaskResumeAll>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	f47f af67 	bne.w	8008216 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008348:	4b18      	ldr	r3, [pc, #96]	@ (80083ac <xQueueSemaphoreTake+0x21c>)
 800834a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	e75d      	b.n	8008216 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800835a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800835c:	f000 f976 	bl	800864c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008360:	f000 fcce 	bl	8008d00 <xTaskResumeAll>
 8008364:	e757      	b.n	8008216 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008366:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008368:	f000 f970 	bl	800864c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800836c:	f000 fcc8 	bl	8008d00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008372:	f000 f9bd 	bl	80086f0 <prvIsQueueEmpty>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	f43f af4c 	beq.w	8008216 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00d      	beq.n	80083a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008384:	f001 ff00 	bl	800a188 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008388:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800838a:	f000 f8b7 	bl	80084fc <prvGetDisinheritPriorityAfterTimeout>
 800838e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008396:	4618      	mov	r0, r3
 8008398:	f001 f980 	bl	800969c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800839c:	f001 ff26 	bl	800a1ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3738      	adds	r7, #56	@ 0x38
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08e      	sub	sp, #56	@ 0x38
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80083c6:	f04f 0310 	mov.w	r3, #16
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	623b      	str	r3, [r7, #32]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <xQueueReceiveFromISR+0x3c>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <xQueueReceiveFromISR+0x40>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <xQueueReceiveFromISR+0x42>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80083f6:	f04f 0310 	mov.w	r3, #16
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	61fb      	str	r3, [r7, #28]
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	e7fd      	b.n	800840a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800840e:	f001 ff9b 	bl	800a348 <vPortValidateInterruptPriority>
	__asm volatile
 8008412:	f3ef 8211 	mrs	r2, BASEPRI
 8008416:	f04f 0310 	mov.w	r3, #16
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	61ba      	str	r2, [r7, #24]
 8008428:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800842a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800842c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008432:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d02f      	beq.n	800849a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008448:	f000 f8da 	bl	8008600 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800844c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844e:	1e5a      	subs	r2, r3, #1
 8008450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008452:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008454:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800845c:	d112      	bne.n	8008484 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d016      	beq.n	8008494 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	3310      	adds	r3, #16
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fe60 	bl	8009130 <xTaskRemoveFromEventList>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00e      	beq.n	8008494 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	e007      	b.n	8008494 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008488:	3301      	adds	r3, #1
 800848a:	b2db      	uxtb	r3, r3
 800848c:	b25a      	sxtb	r2, r3
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008494:	2301      	movs	r3, #1
 8008496:	637b      	str	r3, [r7, #52]	@ 0x34
 8008498:	e001      	b.n	800849e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800849a:	2300      	movs	r3, #0
 800849c:	637b      	str	r3, [r7, #52]	@ 0x34
 800849e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f383 8811 	msr	BASEPRI, r3
}
 80084a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3738      	adds	r7, #56	@ 0x38
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10b      	bne.n	80084de <vQueueDelete+0x2a>
	__asm volatile
 80084c6:	f04f 0310 	mov.w	r3, #16
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60bb      	str	r3, [r7, #8]
}
 80084d8:	bf00      	nop
 80084da:	bf00      	nop
 80084dc:	e7fd      	b.n	80084da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f95e 	bl	80087a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f002 f83a 	bl	800a568 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008508:	2b00      	cmp	r3, #0
 800850a:	d006      	beq.n	800851a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e001      	b.n	800851e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800851e:	68fb      	ldr	r3, [r7, #12]
	}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008538:	2300      	movs	r3, #0
 800853a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10d      	bne.n	8008566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d14d      	bne.n	80085ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	4618      	mov	r0, r3
 8008558:	f001 f830 	bl	80095bc <xTaskPriorityDisinherit>
 800855c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	609a      	str	r2, [r3, #8]
 8008564:	e043      	b.n	80085ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d119      	bne.n	80085a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6858      	ldr	r0, [r3, #4]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008574:	461a      	mov	r2, r3
 8008576:	68b9      	ldr	r1, [r7, #8]
 8008578:	f002 fa27 	bl	800a9ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008584:	441a      	add	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	429a      	cmp	r2, r3
 8008594:	d32b      	bcc.n	80085ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	e026      	b.n	80085ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68d8      	ldr	r0, [r3, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a8:	461a      	mov	r2, r3
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	f002 fa0d 	bl	800a9ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b8:	425b      	negs	r3, r3
 80085ba:	441a      	add	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68da      	ldr	r2, [r3, #12]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d207      	bcs.n	80085dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d4:	425b      	negs	r3, r3
 80085d6:	441a      	add	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d105      	bne.n	80085ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80085f6:	697b      	ldr	r3, [r7, #20]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d018      	beq.n	8008644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861a:	441a      	add	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	429a      	cmp	r2, r3
 800862a:	d303      	bcc.n	8008634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68d9      	ldr	r1, [r3, #12]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	461a      	mov	r2, r3
 800863e:	6838      	ldr	r0, [r7, #0]
 8008640:	f002 f9c3 	bl	800a9ca <memcpy>
	}
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008654:	f001 fd98 	bl	800a188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800865e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008660:	e011      	b.n	8008686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008666:	2b00      	cmp	r3, #0
 8008668:	d012      	beq.n	8008690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3324      	adds	r3, #36	@ 0x24
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fd5e 	bl	8009130 <xTaskRemoveFromEventList>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800867a:	f000 fe37 	bl	80092ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	3b01      	subs	r3, #1
 8008682:	b2db      	uxtb	r3, r3
 8008684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800868a:	2b00      	cmp	r3, #0
 800868c:	dce9      	bgt.n	8008662 <prvUnlockQueue+0x16>
 800868e:	e000      	b.n	8008692 <prvUnlockQueue+0x46>
					break;
 8008690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	22ff      	movs	r2, #255	@ 0xff
 8008696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800869a:	f001 fda7 	bl	800a1ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800869e:	f001 fd73 	bl	800a188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086aa:	e011      	b.n	80086d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d012      	beq.n	80086da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3310      	adds	r3, #16
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fd39 	bl	8009130 <xTaskRemoveFromEventList>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086c4:	f000 fe12 	bl	80092ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dce9      	bgt.n	80086ac <prvUnlockQueue+0x60>
 80086d8:	e000      	b.n	80086dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	22ff      	movs	r2, #255	@ 0xff
 80086e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80086e4:	f001 fd82 	bl	800a1ec <vPortExitCritical>
}
 80086e8:	bf00      	nop
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086f8:	f001 fd46 	bl	800a188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008700:	2b00      	cmp	r3, #0
 8008702:	d102      	bne.n	800870a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008704:	2301      	movs	r3, #1
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	e001      	b.n	800870e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800870e:	f001 fd6d 	bl	800a1ec <vPortExitCritical>

	return xReturn;
 8008712:	68fb      	ldr	r3, [r7, #12]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008724:	f001 fd30 	bl	800a188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008730:	429a      	cmp	r2, r3
 8008732:	d102      	bne.n	800873a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008734:	2301      	movs	r3, #1
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e001      	b.n	800873e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800873e:	f001 fd55 	bl	800a1ec <vPortExitCritical>

	return xReturn;
 8008742:	68fb      	ldr	r3, [r7, #12]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e014      	b.n	8008786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800875c:	4a0f      	ldr	r2, [pc, #60]	@ (800879c <vQueueAddToRegistry+0x50>)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008768:	490c      	ldr	r1, [pc, #48]	@ (800879c <vQueueAddToRegistry+0x50>)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008772:	4a0a      	ldr	r2, [pc, #40]	@ (800879c <vQueueAddToRegistry+0x50>)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	4413      	add	r3, r2
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800877e:	e006      	b.n	800878e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3301      	adds	r3, #1
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b07      	cmp	r3, #7
 800878a:	d9e7      	bls.n	800875c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	200011a4 	.word	0x200011a4

080087a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	e016      	b.n	80087dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80087ae:	4a10      	ldr	r2, [pc, #64]	@ (80087f0 <vQueueUnregisterQueue+0x50>)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d10b      	bne.n	80087d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80087be:	4a0c      	ldr	r2, [pc, #48]	@ (80087f0 <vQueueUnregisterQueue+0x50>)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2100      	movs	r1, #0
 80087c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80087c8:	4a09      	ldr	r2, [pc, #36]	@ (80087f0 <vQueueUnregisterQueue+0x50>)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	4413      	add	r3, r2
 80087d0:	2200      	movs	r2, #0
 80087d2:	605a      	str	r2, [r3, #4]
				break;
 80087d4:	e006      	b.n	80087e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b07      	cmp	r3, #7
 80087e0:	d9e5      	bls.n	80087ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80087e2:	bf00      	nop
 80087e4:	bf00      	nop
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	200011a4 	.word	0x200011a4

080087f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008804:	f001 fcc0 	bl	800a188 <vPortEnterCritical>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800880e:	b25b      	sxtb	r3, r3
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008814:	d103      	bne.n	800881e <vQueueWaitForMessageRestricted+0x2a>
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008824:	b25b      	sxtb	r3, r3
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800882a:	d103      	bne.n	8008834 <vQueueWaitForMessageRestricted+0x40>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008834:	f001 fcda 	bl	800a1ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883c:	2b00      	cmp	r3, #0
 800883e:	d106      	bne.n	800884e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	3324      	adds	r3, #36	@ 0x24
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	4618      	mov	r0, r3
 800884a:	f000 fc45 	bl	80090d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800884e:	6978      	ldr	r0, [r7, #20]
 8008850:	f7ff fefc 	bl	800864c <prvUnlockQueue>
	}
 8008854:	bf00      	nop
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08e      	sub	sp, #56	@ 0x38
 8008860:	af04      	add	r7, sp, #16
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800886a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10b      	bne.n	8008888 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008870:	f04f 0310 	mov.w	r3, #16
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	623b      	str	r3, [r7, #32]
}
 8008882:	bf00      	nop
 8008884:	bf00      	nop
 8008886:	e7fd      	b.n	8008884 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800888e:	f04f 0310 	mov.w	r3, #16
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	61fb      	str	r3, [r7, #28]
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088a6:	235c      	movs	r3, #92	@ 0x5c
 80088a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80088ae:	d00b      	beq.n	80088c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80088b0:	f04f 0310 	mov.w	r3, #16
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	61bb      	str	r3, [r7, #24]
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80088c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01e      	beq.n	800890e <xTaskCreateStatic+0xb2>
 80088d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01b      	beq.n	800890e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088e8:	2300      	movs	r3, #0
 80088ea:	9303      	str	r3, [sp, #12]
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	9302      	str	r3, [sp, #8]
 80088f0:	f107 0314 	add.w	r3, r7, #20
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f850 	bl	80089a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008906:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008908:	f000 f8de 	bl	8008ac8 <prvAddNewTaskToReadyList>
 800890c:	e001      	b.n	8008912 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008912:	697b      	ldr	r3, [r7, #20]
	}
 8008914:	4618      	mov	r0, r3
 8008916:	3728      	adds	r7, #40	@ 0x28
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08c      	sub	sp, #48	@ 0x30
 8008920:	af04      	add	r7, sp, #16
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4618      	mov	r0, r3
 8008932:	f001 fd4b 	bl	800a3cc <pvPortMalloc>
 8008936:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00e      	beq.n	800895c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800893e:	205c      	movs	r0, #92	@ 0x5c
 8008940:	f001 fd44 	bl	800a3cc <pvPortMalloc>
 8008944:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	631a      	str	r2, [r3, #48]	@ 0x30
 8008952:	e005      	b.n	8008960 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008954:	6978      	ldr	r0, [r7, #20]
 8008956:	f001 fe07 	bl	800a568 <vPortFree>
 800895a:	e001      	b.n	8008960 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d017      	beq.n	8008996 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800896e:	88fa      	ldrh	r2, [r7, #6]
 8008970:	2300      	movs	r3, #0
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	9302      	str	r3, [sp, #8]
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 f80e 	bl	80089a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800898a:	69f8      	ldr	r0, [r7, #28]
 800898c:	f000 f89c 	bl	8008ac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008990:	2301      	movs	r3, #1
 8008992:	61bb      	str	r3, [r7, #24]
 8008994:	e002      	b.n	800899c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800899a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800899c:	69bb      	ldr	r3, [r7, #24]
	}
 800899e:	4618      	mov	r0, r3
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b088      	sub	sp, #32
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	461a      	mov	r2, r3
 80089be:	21a5      	movs	r1, #165	@ 0xa5
 80089c0:	f001 ffce 	bl	800a960 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089ce:	3b01      	subs	r3, #1
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	f023 0307 	bic.w	r3, r3, #7
 80089dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80089e8:	f04f 0310 	mov.w	r3, #16
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	617b      	str	r3, [r7, #20]
}
 80089fa:	bf00      	nop
 80089fc:	bf00      	nop
 80089fe:	e7fd      	b.n	80089fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01f      	beq.n	8008a46 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]
 8008a0a:	e012      	b.n	8008a32 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	7819      	ldrb	r1, [r3, #0]
 8008a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	4413      	add	r3, r2
 8008a1a:	3334      	adds	r3, #52	@ 0x34
 8008a1c:	460a      	mov	r2, r1
 8008a1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	4413      	add	r3, r2
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d006      	beq.n	8008a3a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	61fb      	str	r3, [r7, #28]
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2b0f      	cmp	r3, #15
 8008a36:	d9e9      	bls.n	8008a0c <prvInitialiseNewTask+0x66>
 8008a38:	e000      	b.n	8008a3c <prvInitialiseNewTask+0x96>
			{
				break;
 8008a3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a44:	e003      	b.n	8008a4e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a50:	2b37      	cmp	r3, #55	@ 0x37
 8008a52:	d901      	bls.n	8008a58 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a54:	2337      	movs	r3, #55	@ 0x37
 8008a56:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a62:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	2200      	movs	r2, #0
 8008a68:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fe34 	bl	80076dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	3318      	adds	r3, #24
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fe fe2f 	bl	80076dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	2200      	movs	r2, #0
 8008a98:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	68f9      	ldr	r1, [r7, #12]
 8008aa6:	69b8      	ldr	r0, [r7, #24]
 8008aa8:	f001 fa3e 	bl	8009f28 <pxPortInitialiseStack>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008abe:	bf00      	nop
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ad0:	f001 fb5a 	bl	800a188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8008b8c <prvAddNewTaskToReadyList+0xc4>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	4a2c      	ldr	r2, [pc, #176]	@ (8008b8c <prvAddNewTaskToReadyList+0xc4>)
 8008adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ade:	4b2c      	ldr	r3, [pc, #176]	@ (8008b90 <prvAddNewTaskToReadyList+0xc8>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d109      	bne.n	8008afa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b90 <prvAddNewTaskToReadyList+0xc8>)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008aec:	4b27      	ldr	r3, [pc, #156]	@ (8008b8c <prvAddNewTaskToReadyList+0xc4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d110      	bne.n	8008b16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008af4:	f000 fc1e 	bl	8009334 <prvInitialiseTaskLists>
 8008af8:	e00d      	b.n	8008b16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008afa:	4b26      	ldr	r3, [pc, #152]	@ (8008b94 <prvAddNewTaskToReadyList+0xcc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b02:	4b23      	ldr	r3, [pc, #140]	@ (8008b90 <prvAddNewTaskToReadyList+0xc8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d802      	bhi.n	8008b16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b10:	4a1f      	ldr	r2, [pc, #124]	@ (8008b90 <prvAddNewTaskToReadyList+0xc8>)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b16:	4b20      	ldr	r3, [pc, #128]	@ (8008b98 <prvAddNewTaskToReadyList+0xd0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8008b98 <prvAddNewTaskToReadyList+0xd0>)
 8008b1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b20:	4b1d      	ldr	r3, [pc, #116]	@ (8008b98 <prvAddNewTaskToReadyList+0xd0>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008b9c <prvAddNewTaskToReadyList+0xd4>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d903      	bls.n	8008b3c <prvAddNewTaskToReadyList+0x74>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	4a18      	ldr	r2, [pc, #96]	@ (8008b9c <prvAddNewTaskToReadyList+0xd4>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4a15      	ldr	r2, [pc, #84]	@ (8008ba0 <prvAddNewTaskToReadyList+0xd8>)
 8008b4a:	441a      	add	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f7fe fdcf 	bl	80076f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b58:	f001 fb48 	bl	800a1ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b94 <prvAddNewTaskToReadyList+0xcc>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00e      	beq.n	8008b82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b64:	4b0a      	ldr	r3, [pc, #40]	@ (8008b90 <prvAddNewTaskToReadyList+0xc8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d207      	bcs.n	8008b82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba4 <prvAddNewTaskToReadyList+0xdc>)
 8008b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200016b8 	.word	0x200016b8
 8008b90:	200011e4 	.word	0x200011e4
 8008b94:	200016c4 	.word	0x200016c4
 8008b98:	200016d4 	.word	0x200016d4
 8008b9c:	200016c0 	.word	0x200016c0
 8008ba0:	200011e8 	.word	0x200011e8
 8008ba4:	e000ed04 	.word	0xe000ed04

08008ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d018      	beq.n	8008bec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bba:	4b14      	ldr	r3, [pc, #80]	@ (8008c0c <vTaskDelay+0x64>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00b      	beq.n	8008bda <vTaskDelay+0x32>
	__asm volatile
 8008bc2:	f04f 0310 	mov.w	r3, #16
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	60bb      	str	r3, [r7, #8]
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop
 8008bd8:	e7fd      	b.n	8008bd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bda:	f000 f883 	bl	8008ce4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bde:	2100      	movs	r1, #0
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fdf3 	bl	80097cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008be6:	f000 f88b 	bl	8008d00 <xTaskResumeAll>
 8008bea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d107      	bne.n	8008c02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008bf2:	4b07      	ldr	r3, [pc, #28]	@ (8008c10 <vTaskDelay+0x68>)
 8008bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200016e0 	.word	0x200016e0
 8008c10:	e000ed04 	.word	0xe000ed04

08008c14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	@ 0x28
 8008c18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c22:	463a      	mov	r2, r7
 8008c24:	1d39      	adds	r1, r7, #4
 8008c26:	f107 0308 	add.w	r3, r7, #8
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fd02 	bl	8007634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	9202      	str	r2, [sp, #8]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	460a      	mov	r2, r1
 8008c42:	4922      	ldr	r1, [pc, #136]	@ (8008ccc <vTaskStartScheduler+0xb8>)
 8008c44:	4822      	ldr	r0, [pc, #136]	@ (8008cd0 <vTaskStartScheduler+0xbc>)
 8008c46:	f7ff fe09 	bl	800885c <xTaskCreateStatic>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4a21      	ldr	r2, [pc, #132]	@ (8008cd4 <vTaskStartScheduler+0xc0>)
 8008c4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c50:	4b20      	ldr	r3, [pc, #128]	@ (8008cd4 <vTaskStartScheduler+0xc0>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	617b      	str	r3, [r7, #20]
 8008c5c:	e001      	b.n	8008c62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d102      	bne.n	8008c6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c68:	f000 fe04 	bl	8009874 <xTimerCreateTimerTask>
 8008c6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d116      	bne.n	8008ca2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008c74:	f04f 0310 	mov.w	r3, #16
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	613b      	str	r3, [r7, #16]
}
 8008c86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c88:	4b13      	ldr	r3, [pc, #76]	@ (8008cd8 <vTaskStartScheduler+0xc4>)
 8008c8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c90:	4b12      	ldr	r3, [pc, #72]	@ (8008cdc <vTaskStartScheduler+0xc8>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c96:	4b12      	ldr	r3, [pc, #72]	@ (8008ce0 <vTaskStartScheduler+0xcc>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c9c:	f001 f9d0 	bl	800a040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ca0:	e00f      	b.n	8008cc2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ca8:	d10b      	bne.n	8008cc2 <vTaskStartScheduler+0xae>
	__asm volatile
 8008caa:	f04f 0310 	mov.w	r3, #16
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	60fb      	str	r3, [r7, #12]
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	e7fd      	b.n	8008cbe <vTaskStartScheduler+0xaa>
}
 8008cc2:	bf00      	nop
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	0800b6ec 	.word	0x0800b6ec
 8008cd0:	08009305 	.word	0x08009305
 8008cd4:	200016dc 	.word	0x200016dc
 8008cd8:	200016d8 	.word	0x200016d8
 8008cdc:	200016c4 	.word	0x200016c4
 8008ce0:	200016bc 	.word	0x200016bc

08008ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ce8:	4b04      	ldr	r3, [pc, #16]	@ (8008cfc <vTaskSuspendAll+0x18>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3301      	adds	r3, #1
 8008cee:	4a03      	ldr	r2, [pc, #12]	@ (8008cfc <vTaskSuspendAll+0x18>)
 8008cf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008cf2:	bf00      	nop
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	200016e0 	.word	0x200016e0

08008d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d0e:	4b42      	ldr	r3, [pc, #264]	@ (8008e18 <xTaskResumeAll+0x118>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <xTaskResumeAll+0x2e>
	__asm volatile
 8008d16:	f04f 0310 	mov.w	r3, #16
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	603b      	str	r3, [r7, #0]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d2e:	f001 fa2b 	bl	800a188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d32:	4b39      	ldr	r3, [pc, #228]	@ (8008e18 <xTaskResumeAll+0x118>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	4a37      	ldr	r2, [pc, #220]	@ (8008e18 <xTaskResumeAll+0x118>)
 8008d3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d3c:	4b36      	ldr	r3, [pc, #216]	@ (8008e18 <xTaskResumeAll+0x118>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d162      	bne.n	8008e0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d44:	4b35      	ldr	r3, [pc, #212]	@ (8008e1c <xTaskResumeAll+0x11c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d05e      	beq.n	8008e0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d4c:	e02f      	b.n	8008dae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4e:	4b34      	ldr	r3, [pc, #208]	@ (8008e20 <xTaskResumeAll+0x120>)
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3318      	adds	r3, #24
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe fd28 	bl	80077b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fd23 	bl	80077b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008e24 <xTaskResumeAll+0x124>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d903      	bls.n	8008d7e <xTaskResumeAll+0x7e>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8008e24 <xTaskResumeAll+0x124>)
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4a27      	ldr	r2, [pc, #156]	@ (8008e28 <xTaskResumeAll+0x128>)
 8008d8c:	441a      	add	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f7fe fcae 	bl	80076f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d9e:	4b23      	ldr	r3, [pc, #140]	@ (8008e2c <xTaskResumeAll+0x12c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d302      	bcc.n	8008dae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008da8:	4b21      	ldr	r3, [pc, #132]	@ (8008e30 <xTaskResumeAll+0x130>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dae:	4b1c      	ldr	r3, [pc, #112]	@ (8008e20 <xTaskResumeAll+0x120>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1cb      	bne.n	8008d4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dbc:	f000 fb58 	bl	8009470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e34 <xTaskResumeAll+0x134>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d010      	beq.n	8008dee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dcc:	f000 f846 	bl	8008e5c <xTaskIncrementTick>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008dd6:	4b16      	ldr	r3, [pc, #88]	@ (8008e30 <xTaskResumeAll+0x130>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1f1      	bne.n	8008dcc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008de8:	4b12      	ldr	r3, [pc, #72]	@ (8008e34 <xTaskResumeAll+0x134>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dee:	4b10      	ldr	r3, [pc, #64]	@ (8008e30 <xTaskResumeAll+0x130>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d009      	beq.n	8008e0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008df6:	2301      	movs	r3, #1
 8008df8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8008e38 <xTaskResumeAll+0x138>)
 8008dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e0a:	f001 f9ef 	bl	800a1ec <vPortExitCritical>

	return xAlreadyYielded;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	200016e0 	.word	0x200016e0
 8008e1c:	200016b8 	.word	0x200016b8
 8008e20:	20001678 	.word	0x20001678
 8008e24:	200016c0 	.word	0x200016c0
 8008e28:	200011e8 	.word	0x200011e8
 8008e2c:	200011e4 	.word	0x200011e4
 8008e30:	200016cc 	.word	0x200016cc
 8008e34:	200016c8 	.word	0x200016c8
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e42:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <xTaskGetTickCount+0x1c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e48:	687b      	ldr	r3, [r7, #4]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	200016bc 	.word	0x200016bc

08008e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e66:	4b4f      	ldr	r3, [pc, #316]	@ (8008fa4 <xTaskIncrementTick+0x148>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f040 8090 	bne.w	8008f90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e70:	4b4d      	ldr	r3, [pc, #308]	@ (8008fa8 <xTaskIncrementTick+0x14c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e78:	4a4b      	ldr	r2, [pc, #300]	@ (8008fa8 <xTaskIncrementTick+0x14c>)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d121      	bne.n	8008ec8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e84:	4b49      	ldr	r3, [pc, #292]	@ (8008fac <xTaskIncrementTick+0x150>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e8e:	f04f 0310 	mov.w	r3, #16
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	603b      	str	r3, [r7, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	bf00      	nop
 8008ea4:	e7fd      	b.n	8008ea2 <xTaskIncrementTick+0x46>
 8008ea6:	4b41      	ldr	r3, [pc, #260]	@ (8008fac <xTaskIncrementTick+0x150>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	4b40      	ldr	r3, [pc, #256]	@ (8008fb0 <xTaskIncrementTick+0x154>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8008fac <xTaskIncrementTick+0x150>)
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8008fb0 <xTaskIncrementTick+0x154>)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	4b3e      	ldr	r3, [pc, #248]	@ (8008fb4 <xTaskIncrementTick+0x158>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8008fb4 <xTaskIncrementTick+0x158>)
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	f000 fad4 	bl	8009470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8008fb8 <xTaskIncrementTick+0x15c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d349      	bcc.n	8008f66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ed2:	4b36      	ldr	r3, [pc, #216]	@ (8008fac <xTaskIncrementTick+0x150>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d104      	bne.n	8008ee6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008edc:	4b36      	ldr	r3, [pc, #216]	@ (8008fb8 <xTaskIncrementTick+0x15c>)
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ee2:	601a      	str	r2, [r3, #0]
					break;
 8008ee4:	e03f      	b.n	8008f66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee6:	4b31      	ldr	r3, [pc, #196]	@ (8008fac <xTaskIncrementTick+0x150>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d203      	bcs.n	8008f06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008efe:	4a2e      	ldr	r2, [pc, #184]	@ (8008fb8 <xTaskIncrementTick+0x15c>)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f04:	e02f      	b.n	8008f66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3304      	adds	r3, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fc50 	bl	80077b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d004      	beq.n	8008f22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	3318      	adds	r3, #24
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe fc47 	bl	80077b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f26:	4b25      	ldr	r3, [pc, #148]	@ (8008fbc <xTaskIncrementTick+0x160>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d903      	bls.n	8008f36 <xTaskIncrementTick+0xda>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f32:	4a22      	ldr	r2, [pc, #136]	@ (8008fbc <xTaskIncrementTick+0x160>)
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4a1f      	ldr	r2, [pc, #124]	@ (8008fc0 <xTaskIncrementTick+0x164>)
 8008f44:	441a      	add	r2, r3
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f7fe fbd2 	bl	80076f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f56:	4b1b      	ldr	r3, [pc, #108]	@ (8008fc4 <xTaskIncrementTick+0x168>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d3b8      	bcc.n	8008ed2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f64:	e7b5      	b.n	8008ed2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f66:	4b17      	ldr	r3, [pc, #92]	@ (8008fc4 <xTaskIncrementTick+0x168>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6c:	4914      	ldr	r1, [pc, #80]	@ (8008fc0 <xTaskIncrementTick+0x164>)
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d901      	bls.n	8008f82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f82:	4b11      	ldr	r3, [pc, #68]	@ (8008fc8 <xTaskIncrementTick+0x16c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d007      	beq.n	8008f9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	617b      	str	r3, [r7, #20]
 8008f8e:	e004      	b.n	8008f9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f90:	4b0e      	ldr	r3, [pc, #56]	@ (8008fcc <xTaskIncrementTick+0x170>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3301      	adds	r3, #1
 8008f96:	4a0d      	ldr	r2, [pc, #52]	@ (8008fcc <xTaskIncrementTick+0x170>)
 8008f98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f9a:	697b      	ldr	r3, [r7, #20]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	200016e0 	.word	0x200016e0
 8008fa8:	200016bc 	.word	0x200016bc
 8008fac:	20001670 	.word	0x20001670
 8008fb0:	20001674 	.word	0x20001674
 8008fb4:	200016d0 	.word	0x200016d0
 8008fb8:	200016d8 	.word	0x200016d8
 8008fbc:	200016c0 	.word	0x200016c0
 8008fc0:	200011e8 	.word	0x200011e8
 8008fc4:	200011e4 	.word	0x200011e4
 8008fc8:	200016cc 	.word	0x200016cc
 8008fcc:	200016c8 	.word	0x200016c8

08008fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fd6:	4b28      	ldr	r3, [pc, #160]	@ (8009078 <vTaskSwitchContext+0xa8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fde:	4b27      	ldr	r3, [pc, #156]	@ (800907c <vTaskSwitchContext+0xac>)
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fe4:	e042      	b.n	800906c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008fe6:	4b25      	ldr	r3, [pc, #148]	@ (800907c <vTaskSwitchContext+0xac>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fec:	4b24      	ldr	r3, [pc, #144]	@ (8009080 <vTaskSwitchContext+0xb0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	e011      	b.n	8009018 <vTaskSwitchContext+0x48>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10b      	bne.n	8009012 <vTaskSwitchContext+0x42>
	__asm volatile
 8008ffa:	f04f 0310 	mov.w	r3, #16
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	607b      	str	r3, [r7, #4]
}
 800900c:	bf00      	nop
 800900e:	bf00      	nop
 8009010:	e7fd      	b.n	800900e <vTaskSwitchContext+0x3e>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3b01      	subs	r3, #1
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	491a      	ldr	r1, [pc, #104]	@ (8009084 <vTaskSwitchContext+0xb4>)
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0e3      	beq.n	8008ff4 <vTaskSwitchContext+0x24>
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4613      	mov	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4a13      	ldr	r2, [pc, #76]	@ (8009084 <vTaskSwitchContext+0xb4>)
 8009038:	4413      	add	r3, r2
 800903a:	60bb      	str	r3, [r7, #8]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	605a      	str	r2, [r3, #4]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	3308      	adds	r3, #8
 800904e:	429a      	cmp	r2, r3
 8009050:	d104      	bne.n	800905c <vTaskSwitchContext+0x8c>
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	605a      	str	r2, [r3, #4]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	4a09      	ldr	r2, [pc, #36]	@ (8009088 <vTaskSwitchContext+0xb8>)
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	4a06      	ldr	r2, [pc, #24]	@ (8009080 <vTaskSwitchContext+0xb0>)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6013      	str	r3, [r2, #0]
}
 800906c:	bf00      	nop
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	200016e0 	.word	0x200016e0
 800907c:	200016cc 	.word	0x200016cc
 8009080:	200016c0 	.word	0x200016c0
 8009084:	200011e8 	.word	0x200011e8
 8009088:	200011e4 	.word	0x200011e4

0800908c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10b      	bne.n	80090b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800909c:	f04f 0310 	mov.w	r3, #16
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60fb      	str	r3, [r7, #12]
}
 80090ae:	bf00      	nop
 80090b0:	bf00      	nop
 80090b2:	e7fd      	b.n	80090b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090b4:	4b07      	ldr	r3, [pc, #28]	@ (80090d4 <vTaskPlaceOnEventList+0x48>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3318      	adds	r3, #24
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7fe fb3e 	bl	800773e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090c2:	2101      	movs	r1, #1
 80090c4:	6838      	ldr	r0, [r7, #0]
 80090c6:	f000 fb81 	bl	80097cc <prvAddCurrentTaskToDelayedList>
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	200011e4 	.word	0x200011e4

080090d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80090ea:	f04f 0310 	mov.w	r3, #16
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	617b      	str	r3, [r7, #20]
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	e7fd      	b.n	80090fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009102:	4b0a      	ldr	r3, [pc, #40]	@ (800912c <vTaskPlaceOnEventListRestricted+0x54>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3318      	adds	r3, #24
 8009108:	4619      	mov	r1, r3
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7fe faf3 	bl	80076f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800911a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	68b8      	ldr	r0, [r7, #8]
 8009120:	f000 fb54 	bl	80097cc <prvAddCurrentTaskToDelayedList>
	}
 8009124:	bf00      	nop
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	200011e4 	.word	0x200011e4

08009130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10b      	bne.n	800915e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009146:	f04f 0310 	mov.w	r3, #16
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	60fb      	str	r3, [r7, #12]
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	e7fd      	b.n	800915a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	3318      	adds	r3, #24
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fb24 	bl	80077b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009168:	4b1d      	ldr	r3, [pc, #116]	@ (80091e0 <xTaskRemoveFromEventList+0xb0>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d11d      	bne.n	80091ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	3304      	adds	r3, #4
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe fb1b 	bl	80077b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800917e:	4b19      	ldr	r3, [pc, #100]	@ (80091e4 <xTaskRemoveFromEventList+0xb4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d903      	bls.n	800918e <xTaskRemoveFromEventList+0x5e>
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	4a16      	ldr	r2, [pc, #88]	@ (80091e4 <xTaskRemoveFromEventList+0xb4>)
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4a13      	ldr	r2, [pc, #76]	@ (80091e8 <xTaskRemoveFromEventList+0xb8>)
 800919c:	441a      	add	r2, r3
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3304      	adds	r3, #4
 80091a2:	4619      	mov	r1, r3
 80091a4:	4610      	mov	r0, r2
 80091a6:	f7fe faa6 	bl	80076f6 <vListInsertEnd>
 80091aa:	e005      	b.n	80091b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	3318      	adds	r3, #24
 80091b0:	4619      	mov	r1, r3
 80091b2:	480e      	ldr	r0, [pc, #56]	@ (80091ec <xTaskRemoveFromEventList+0xbc>)
 80091b4:	f7fe fa9f 	bl	80076f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091bc:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <xTaskRemoveFromEventList+0xc0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d905      	bls.n	80091d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091c6:	2301      	movs	r3, #1
 80091c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091ca:	4b0a      	ldr	r3, [pc, #40]	@ (80091f4 <xTaskRemoveFromEventList+0xc4>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e001      	b.n	80091d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091d6:	697b      	ldr	r3, [r7, #20]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	200016e0 	.word	0x200016e0
 80091e4:	200016c0 	.word	0x200016c0
 80091e8:	200011e8 	.word	0x200011e8
 80091ec:	20001678 	.word	0x20001678
 80091f0:	200011e4 	.word	0x200011e4
 80091f4:	200016cc 	.word	0x200016cc

080091f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009200:	4b06      	ldr	r3, [pc, #24]	@ (800921c <vTaskInternalSetTimeOutState+0x24>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009208:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <vTaskInternalSetTimeOutState+0x28>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	605a      	str	r2, [r3, #4]
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	200016d0 	.word	0x200016d0
 8009220:	200016bc 	.word	0x200016bc

08009224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10b      	bne.n	800924c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009234:	f04f 0310 	mov.w	r3, #16
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	613b      	str	r3, [r7, #16]
}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	e7fd      	b.n	8009248 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10b      	bne.n	800926a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009252:	f04f 0310 	mov.w	r3, #16
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	60fb      	str	r3, [r7, #12]
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop
 8009268:	e7fd      	b.n	8009266 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800926a:	f000 ff8d 	bl	800a188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800926e:	4b1d      	ldr	r3, [pc, #116]	@ (80092e4 <xTaskCheckForTimeOut+0xc0>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009286:	d102      	bne.n	800928e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	e023      	b.n	80092d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b15      	ldr	r3, [pc, #84]	@ (80092e8 <xTaskCheckForTimeOut+0xc4>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d007      	beq.n	80092aa <xTaskCheckForTimeOut+0x86>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d302      	bcc.n	80092aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092a4:	2301      	movs	r3, #1
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	e015      	b.n	80092d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d20b      	bcs.n	80092cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	1ad2      	subs	r2, r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ff99 	bl	80091f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092c6:	2300      	movs	r3, #0
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	e004      	b.n	80092d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092d6:	f000 ff89 	bl	800a1ec <vPortExitCritical>

	return xReturn;
 80092da:	69fb      	ldr	r3, [r7, #28]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3720      	adds	r7, #32
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	200016bc 	.word	0x200016bc
 80092e8:	200016d0 	.word	0x200016d0

080092ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092f0:	4b03      	ldr	r3, [pc, #12]	@ (8009300 <vTaskMissedYield+0x14>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
}
 80092f6:	bf00      	nop
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	200016cc 	.word	0x200016cc

08009304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800930c:	f000 f852 	bl	80093b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009310:	4b06      	ldr	r3, [pc, #24]	@ (800932c <prvIdleTask+0x28>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d9f9      	bls.n	800930c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009318:	4b05      	ldr	r3, [pc, #20]	@ (8009330 <prvIdleTask+0x2c>)
 800931a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009328:	e7f0      	b.n	800930c <prvIdleTask+0x8>
 800932a:	bf00      	nop
 800932c:	200011e8 	.word	0x200011e8
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800933a:	2300      	movs	r3, #0
 800933c:	607b      	str	r3, [r7, #4]
 800933e:	e00c      	b.n	800935a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4a12      	ldr	r2, [pc, #72]	@ (8009394 <prvInitialiseTaskLists+0x60>)
 800934c:	4413      	add	r3, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe f9a4 	bl	800769c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3301      	adds	r3, #1
 8009358:	607b      	str	r3, [r7, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b37      	cmp	r3, #55	@ 0x37
 800935e:	d9ef      	bls.n	8009340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009360:	480d      	ldr	r0, [pc, #52]	@ (8009398 <prvInitialiseTaskLists+0x64>)
 8009362:	f7fe f99b 	bl	800769c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009366:	480d      	ldr	r0, [pc, #52]	@ (800939c <prvInitialiseTaskLists+0x68>)
 8009368:	f7fe f998 	bl	800769c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800936c:	480c      	ldr	r0, [pc, #48]	@ (80093a0 <prvInitialiseTaskLists+0x6c>)
 800936e:	f7fe f995 	bl	800769c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009372:	480c      	ldr	r0, [pc, #48]	@ (80093a4 <prvInitialiseTaskLists+0x70>)
 8009374:	f7fe f992 	bl	800769c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009378:	480b      	ldr	r0, [pc, #44]	@ (80093a8 <prvInitialiseTaskLists+0x74>)
 800937a:	f7fe f98f 	bl	800769c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800937e:	4b0b      	ldr	r3, [pc, #44]	@ (80093ac <prvInitialiseTaskLists+0x78>)
 8009380:	4a05      	ldr	r2, [pc, #20]	@ (8009398 <prvInitialiseTaskLists+0x64>)
 8009382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009384:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <prvInitialiseTaskLists+0x7c>)
 8009386:	4a05      	ldr	r2, [pc, #20]	@ (800939c <prvInitialiseTaskLists+0x68>)
 8009388:	601a      	str	r2, [r3, #0]
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	200011e8 	.word	0x200011e8
 8009398:	20001648 	.word	0x20001648
 800939c:	2000165c 	.word	0x2000165c
 80093a0:	20001678 	.word	0x20001678
 80093a4:	2000168c 	.word	0x2000168c
 80093a8:	200016a4 	.word	0x200016a4
 80093ac:	20001670 	.word	0x20001670
 80093b0:	20001674 	.word	0x20001674

080093b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093ba:	e019      	b.n	80093f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093bc:	f000 fee4 	bl	800a188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c0:	4b10      	ldr	r3, [pc, #64]	@ (8009404 <prvCheckTasksWaitingTermination+0x50>)
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe f9ef 	bl	80077b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009408 <prvCheckTasksWaitingTermination+0x54>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009408 <prvCheckTasksWaitingTermination+0x54>)
 80093da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093dc:	4b0b      	ldr	r3, [pc, #44]	@ (800940c <prvCheckTasksWaitingTermination+0x58>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	4a0a      	ldr	r2, [pc, #40]	@ (800940c <prvCheckTasksWaitingTermination+0x58>)
 80093e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093e6:	f000 ff01 	bl	800a1ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f810 	bl	8009410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093f0:	4b06      	ldr	r3, [pc, #24]	@ (800940c <prvCheckTasksWaitingTermination+0x58>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e1      	bne.n	80093bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	2000168c 	.word	0x2000168c
 8009408:	200016b8 	.word	0x200016b8
 800940c:	200016a0 	.word	0x200016a0

08009410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800941e:	2b00      	cmp	r3, #0
 8009420:	d108      	bne.n	8009434 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f89e 	bl	800a568 <vPortFree>
				vPortFree( pxTCB );
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 f89b 	bl	800a568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009432:	e019      	b.n	8009468 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800943a:	2b01      	cmp	r3, #1
 800943c:	d103      	bne.n	8009446 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f001 f892 	bl	800a568 <vPortFree>
	}
 8009444:	e010      	b.n	8009468 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800944c:	2b02      	cmp	r3, #2
 800944e:	d00b      	beq.n	8009468 <prvDeleteTCB+0x58>
	__asm volatile
 8009450:	f04f 0310 	mov.w	r3, #16
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60fb      	str	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	bf00      	nop
 8009466:	e7fd      	b.n	8009464 <prvDeleteTCB+0x54>
	}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009476:	4b0c      	ldr	r3, [pc, #48]	@ (80094a8 <prvResetNextTaskUnblockTime+0x38>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009480:	4b0a      	ldr	r3, [pc, #40]	@ (80094ac <prvResetNextTaskUnblockTime+0x3c>)
 8009482:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009488:	e008      	b.n	800949c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800948a:	4b07      	ldr	r3, [pc, #28]	@ (80094a8 <prvResetNextTaskUnblockTime+0x38>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4a04      	ldr	r2, [pc, #16]	@ (80094ac <prvResetNextTaskUnblockTime+0x3c>)
 800949a:	6013      	str	r3, [r2, #0]
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	20001670 	.word	0x20001670
 80094ac:	200016d8 	.word	0x200016d8

080094b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094b6:	4b0b      	ldr	r3, [pc, #44]	@ (80094e4 <xTaskGetSchedulerState+0x34>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d102      	bne.n	80094c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094be:	2301      	movs	r3, #1
 80094c0:	607b      	str	r3, [r7, #4]
 80094c2:	e008      	b.n	80094d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c4:	4b08      	ldr	r3, [pc, #32]	@ (80094e8 <xTaskGetSchedulerState+0x38>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d102      	bne.n	80094d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094cc:	2302      	movs	r3, #2
 80094ce:	607b      	str	r3, [r7, #4]
 80094d0:	e001      	b.n	80094d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094d2:	2300      	movs	r3, #0
 80094d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094d6:	687b      	ldr	r3, [r7, #4]
	}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	200016c4 	.word	0x200016c4
 80094e8:	200016e0 	.word	0x200016e0

080094ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d051      	beq.n	80095a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009506:	4b2a      	ldr	r3, [pc, #168]	@ (80095b0 <xTaskPriorityInherit+0xc4>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950c:	429a      	cmp	r2, r3
 800950e:	d241      	bcs.n	8009594 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	db06      	blt.n	8009526 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009518:	4b25      	ldr	r3, [pc, #148]	@ (80095b0 <xTaskPriorityInherit+0xc4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	6959      	ldr	r1, [r3, #20]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4a1f      	ldr	r2, [pc, #124]	@ (80095b4 <xTaskPriorityInherit+0xc8>)
 8009538:	4413      	add	r3, r2
 800953a:	4299      	cmp	r1, r3
 800953c:	d122      	bne.n	8009584 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	3304      	adds	r3, #4
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe f934 	bl	80077b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009548:	4b19      	ldr	r3, [pc, #100]	@ (80095b0 <xTaskPriorityInherit+0xc4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009556:	4b18      	ldr	r3, [pc, #96]	@ (80095b8 <xTaskPriorityInherit+0xcc>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d903      	bls.n	8009566 <xTaskPriorityInherit+0x7a>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009562:	4a15      	ldr	r2, [pc, #84]	@ (80095b8 <xTaskPriorityInherit+0xcc>)
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4a10      	ldr	r2, [pc, #64]	@ (80095b4 <xTaskPriorityInherit+0xc8>)
 8009574:	441a      	add	r2, r3
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	3304      	adds	r3, #4
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f7fe f8ba 	bl	80076f6 <vListInsertEnd>
 8009582:	e004      	b.n	800958e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009584:	4b0a      	ldr	r3, [pc, #40]	@ (80095b0 <xTaskPriorityInherit+0xc4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800958e:	2301      	movs	r3, #1
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	e008      	b.n	80095a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009598:	4b05      	ldr	r3, [pc, #20]	@ (80095b0 <xTaskPriorityInherit+0xc4>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959e:	429a      	cmp	r2, r3
 80095a0:	d201      	bcs.n	80095a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80095a2:	2301      	movs	r3, #1
 80095a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095a6:	68fb      	ldr	r3, [r7, #12]
	}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	200011e4 	.word	0x200011e4
 80095b4:	200011e8 	.word	0x200011e8
 80095b8:	200016c0 	.word	0x200016c0

080095bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095c8:	2300      	movs	r3, #0
 80095ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d058      	beq.n	8009684 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009690 <xTaskPriorityDisinherit+0xd4>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d00b      	beq.n	80095f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80095dc:	f04f 0310 	mov.w	r3, #16
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	60fb      	str	r3, [r7, #12]
}
 80095ee:	bf00      	nop
 80095f0:	bf00      	nop
 80095f2:	e7fd      	b.n	80095f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10b      	bne.n	8009614 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80095fc:	f04f 0310 	mov.w	r3, #16
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	60bb      	str	r3, [r7, #8]
}
 800960e:	bf00      	nop
 8009610:	bf00      	nop
 8009612:	e7fd      	b.n	8009610 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009626:	429a      	cmp	r2, r3
 8009628:	d02c      	beq.n	8009684 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800962e:	2b00      	cmp	r3, #0
 8009630:	d128      	bne.n	8009684 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	3304      	adds	r3, #4
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe f8ba 	bl	80077b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009648:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009654:	4b0f      	ldr	r3, [pc, #60]	@ (8009694 <xTaskPriorityDisinherit+0xd8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d903      	bls.n	8009664 <xTaskPriorityDisinherit+0xa8>
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009660:	4a0c      	ldr	r2, [pc, #48]	@ (8009694 <xTaskPriorityDisinherit+0xd8>)
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4a09      	ldr	r2, [pc, #36]	@ (8009698 <xTaskPriorityDisinherit+0xdc>)
 8009672:	441a      	add	r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	3304      	adds	r3, #4
 8009678:	4619      	mov	r1, r3
 800967a:	4610      	mov	r0, r2
 800967c:	f7fe f83b 	bl	80076f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009684:	697b      	ldr	r3, [r7, #20]
	}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	200011e4 	.word	0x200011e4
 8009694:	200016c0 	.word	0x200016c0
 8009698:	200011e8 	.word	0x200011e8

0800969c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80096aa:	2301      	movs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d06c      	beq.n	800978e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10b      	bne.n	80096d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80096bc:	f04f 0310 	mov.w	r3, #16
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	60fb      	str	r3, [r7, #12]
}
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096d8:	683a      	ldr	r2, [r7, #0]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d902      	bls.n	80096e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	61fb      	str	r3, [r7, #28]
 80096e2:	e002      	b.n	80096ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d04c      	beq.n	800978e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d147      	bne.n	800978e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80096fe:	4b26      	ldr	r3, [pc, #152]	@ (8009798 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	429a      	cmp	r2, r3
 8009706:	d10b      	bne.n	8009720 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009708:	f04f 0310 	mov.w	r3, #16
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	60bb      	str	r3, [r7, #8]
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	e7fd      	b.n	800971c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009724:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	db04      	blt.n	800973e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	6959      	ldr	r1, [r3, #20]
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a13      	ldr	r2, [pc, #76]	@ (800979c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800974e:	4413      	add	r3, r2
 8009750:	4299      	cmp	r1, r3
 8009752:	d11c      	bne.n	800978e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe f829 	bl	80077b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009762:	4b0f      	ldr	r3, [pc, #60]	@ (80097a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d903      	bls.n	8009772 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976e:	4a0c      	ldr	r2, [pc, #48]	@ (80097a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4a07      	ldr	r2, [pc, #28]	@ (800979c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009780:	441a      	add	r2, r3
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	3304      	adds	r3, #4
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f7fd ffb4 	bl	80076f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800978e:	bf00      	nop
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	200011e4 	.word	0x200011e4
 800979c:	200011e8 	.word	0x200011e8
 80097a0:	200016c0 	.word	0x200016c0

080097a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80097a8:	4b07      	ldr	r3, [pc, #28]	@ (80097c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d004      	beq.n	80097ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80097b0:	4b05      	ldr	r3, [pc, #20]	@ (80097c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097b6:	3201      	adds	r2, #1
 80097b8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80097ba:	4b03      	ldr	r3, [pc, #12]	@ (80097c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80097bc:	681b      	ldr	r3, [r3, #0]
	}
 80097be:	4618      	mov	r0, r3
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	200011e4 	.word	0x200011e4

080097cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097d6:	4b21      	ldr	r3, [pc, #132]	@ (800985c <prvAddCurrentTaskToDelayedList+0x90>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097dc:	4b20      	ldr	r3, [pc, #128]	@ (8009860 <prvAddCurrentTaskToDelayedList+0x94>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3304      	adds	r3, #4
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fd ffe4 	bl	80077b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097ee:	d10a      	bne.n	8009806 <prvAddCurrentTaskToDelayedList+0x3a>
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d007      	beq.n	8009806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009860 <prvAddCurrentTaskToDelayedList+0x94>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4619      	mov	r1, r3
 80097fe:	4819      	ldr	r0, [pc, #100]	@ (8009864 <prvAddCurrentTaskToDelayedList+0x98>)
 8009800:	f7fd ff79 	bl	80076f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009804:	e026      	b.n	8009854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4413      	add	r3, r2
 800980c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800980e:	4b14      	ldr	r3, [pc, #80]	@ (8009860 <prvAddCurrentTaskToDelayedList+0x94>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	429a      	cmp	r2, r3
 800981c:	d209      	bcs.n	8009832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800981e:	4b12      	ldr	r3, [pc, #72]	@ (8009868 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4b0f      	ldr	r3, [pc, #60]	@ (8009860 <prvAddCurrentTaskToDelayedList+0x94>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	4610      	mov	r0, r2
 800982c:	f7fd ff87 	bl	800773e <vListInsert>
}
 8009830:	e010      	b.n	8009854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009832:	4b0e      	ldr	r3, [pc, #56]	@ (800986c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	4b0a      	ldr	r3, [pc, #40]	@ (8009860 <prvAddCurrentTaskToDelayedList+0x94>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3304      	adds	r3, #4
 800983c:	4619      	mov	r1, r3
 800983e:	4610      	mov	r0, r2
 8009840:	f7fd ff7d 	bl	800773e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009844:	4b0a      	ldr	r3, [pc, #40]	@ (8009870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	429a      	cmp	r2, r3
 800984c:	d202      	bcs.n	8009854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800984e:	4a08      	ldr	r2, [pc, #32]	@ (8009870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	6013      	str	r3, [r2, #0]
}
 8009854:	bf00      	nop
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	200016bc 	.word	0x200016bc
 8009860:	200011e4 	.word	0x200011e4
 8009864:	200016a4 	.word	0x200016a4
 8009868:	20001674 	.word	0x20001674
 800986c:	20001670 	.word	0x20001670
 8009870:	200016d8 	.word	0x200016d8

08009874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	@ 0x28
 8009878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800987a:	2300      	movs	r3, #0
 800987c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800987e:	f000 fb13 	bl	8009ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009882:	4b1d      	ldr	r3, [pc, #116]	@ (80098f8 <xTimerCreateTimerTask+0x84>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d021      	beq.n	80098ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800988a:	2300      	movs	r3, #0
 800988c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800988e:	2300      	movs	r3, #0
 8009890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009892:	1d3a      	adds	r2, r7, #4
 8009894:	f107 0108 	add.w	r1, r7, #8
 8009898:	f107 030c 	add.w	r3, r7, #12
 800989c:	4618      	mov	r0, r3
 800989e:	f7fd fee3 	bl	8007668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	9202      	str	r2, [sp, #8]
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	2302      	movs	r3, #2
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	460a      	mov	r2, r1
 80098b4:	4911      	ldr	r1, [pc, #68]	@ (80098fc <xTimerCreateTimerTask+0x88>)
 80098b6:	4812      	ldr	r0, [pc, #72]	@ (8009900 <xTimerCreateTimerTask+0x8c>)
 80098b8:	f7fe ffd0 	bl	800885c <xTaskCreateStatic>
 80098bc:	4603      	mov	r3, r0
 80098be:	4a11      	ldr	r2, [pc, #68]	@ (8009904 <xTimerCreateTimerTask+0x90>)
 80098c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098c2:	4b10      	ldr	r3, [pc, #64]	@ (8009904 <xTimerCreateTimerTask+0x90>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098ca:	2301      	movs	r3, #1
 80098cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10b      	bne.n	80098ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80098d4:	f04f 0310 	mov.w	r3, #16
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	613b      	str	r3, [r7, #16]
}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	e7fd      	b.n	80098e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098ec:	697b      	ldr	r3, [r7, #20]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20001714 	.word	0x20001714
 80098fc:	0800b6f4 	.word	0x0800b6f4
 8009900:	08009a41 	.word	0x08009a41
 8009904:	20001718 	.word	0x20001718

08009908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b08a      	sub	sp, #40	@ 0x28
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009916:	2300      	movs	r3, #0
 8009918:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10b      	bne.n	8009938 <xTimerGenericCommand+0x30>
	__asm volatile
 8009920:	f04f 0310 	mov.w	r3, #16
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	623b      	str	r3, [r7, #32]
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	e7fd      	b.n	8009934 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009938:	4b19      	ldr	r3, [pc, #100]	@ (80099a0 <xTimerGenericCommand+0x98>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d02a      	beq.n	8009996 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b05      	cmp	r3, #5
 8009950:	dc18      	bgt.n	8009984 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009952:	f7ff fdad 	bl	80094b0 <xTaskGetSchedulerState>
 8009956:	4603      	mov	r3, r0
 8009958:	2b02      	cmp	r3, #2
 800995a:	d109      	bne.n	8009970 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800995c:	4b10      	ldr	r3, [pc, #64]	@ (80099a0 <xTimerGenericCommand+0x98>)
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	f107 0110 	add.w	r1, r7, #16
 8009964:	2300      	movs	r3, #0
 8009966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009968:	f7fe f900 	bl	8007b6c <xQueueGenericSend>
 800996c:	6278      	str	r0, [r7, #36]	@ 0x24
 800996e:	e012      	b.n	8009996 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009970:	4b0b      	ldr	r3, [pc, #44]	@ (80099a0 <xTimerGenericCommand+0x98>)
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	f107 0110 	add.w	r1, r7, #16
 8009978:	2300      	movs	r3, #0
 800997a:	2200      	movs	r2, #0
 800997c:	f7fe f8f6 	bl	8007b6c <xQueueGenericSend>
 8009980:	6278      	str	r0, [r7, #36]	@ 0x24
 8009982:	e008      	b.n	8009996 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009984:	4b06      	ldr	r3, [pc, #24]	@ (80099a0 <xTimerGenericCommand+0x98>)
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	f107 0110 	add.w	r1, r7, #16
 800998c:	2300      	movs	r3, #0
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	f7fe f9ee 	bl	8007d70 <xQueueGenericSendFromISR>
 8009994:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009998:	4618      	mov	r0, r3
 800999a:	3728      	adds	r7, #40	@ 0x28
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20001714 	.word	0x20001714

080099a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ae:	4b23      	ldr	r3, [pc, #140]	@ (8009a3c <prvProcessExpiredTimer+0x98>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	3304      	adds	r3, #4
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fd fef7 	bl	80077b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d023      	beq.n	8009a18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	699a      	ldr	r2, [r3, #24]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	18d1      	adds	r1, r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	6978      	ldr	r0, [r7, #20]
 80099de:	f000 f8d5 	bl	8009b8c <prvInsertTimerInActiveList>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d020      	beq.n	8009a2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099e8:	2300      	movs	r3, #0
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	2300      	movs	r3, #0
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	2100      	movs	r1, #0
 80099f2:	6978      	ldr	r0, [r7, #20]
 80099f4:	f7ff ff88 	bl	8009908 <xTimerGenericCommand>
 80099f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d114      	bne.n	8009a2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009a00:	f04f 0310 	mov.w	r3, #16
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	60fb      	str	r3, [r7, #12]
}
 8009a12:	bf00      	nop
 8009a14:	bf00      	nop
 8009a16:	e7fd      	b.n	8009a14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a1e:	f023 0301 	bic.w	r3, r3, #1
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	6978      	ldr	r0, [r7, #20]
 8009a30:	4798      	blx	r3
}
 8009a32:	bf00      	nop
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2000170c 	.word	0x2000170c

08009a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a48:	f107 0308 	add.w	r3, r7, #8
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 f859 	bl	8009b04 <prvGetNextExpireTime>
 8009a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4619      	mov	r1, r3
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f805 	bl	8009a68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a5e:	f000 f8d7 	bl	8009c10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a62:	bf00      	nop
 8009a64:	e7f0      	b.n	8009a48 <prvTimerTask+0x8>
	...

08009a68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a72:	f7ff f937 	bl	8008ce4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a76:	f107 0308 	add.w	r3, r7, #8
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f866 	bl	8009b4c <prvSampleTimeNow>
 8009a80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d130      	bne.n	8009aea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <prvProcessTimerOrBlockTask+0x3c>
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d806      	bhi.n	8009aa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a96:	f7ff f933 	bl	8008d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff ff81 	bl	80099a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009aa2:	e024      	b.n	8009aee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d008      	beq.n	8009abc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009aaa:	4b13      	ldr	r3, [pc, #76]	@ (8009af8 <prvProcessTimerOrBlockTask+0x90>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <prvProcessTimerOrBlockTask+0x50>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e000      	b.n	8009aba <prvProcessTimerOrBlockTask+0x52>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009abc:	4b0f      	ldr	r3, [pc, #60]	@ (8009afc <prvProcessTimerOrBlockTask+0x94>)
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f7fe fe93 	bl	80087f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ace:	f7ff f917 	bl	8008d00 <xTaskResumeAll>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ad8:	4b09      	ldr	r3, [pc, #36]	@ (8009b00 <prvProcessTimerOrBlockTask+0x98>)
 8009ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	f3bf 8f6f 	isb	sy
}
 8009ae8:	e001      	b.n	8009aee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aea:	f7ff f909 	bl	8008d00 <xTaskResumeAll>
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20001710 	.word	0x20001710
 8009afc:	20001714 	.word	0x20001714
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b48 <prvGetNextExpireTime+0x44>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <prvGetNextExpireTime+0x16>
 8009b16:	2201      	movs	r2, #1
 8009b18:	e000      	b.n	8009b1c <prvGetNextExpireTime+0x18>
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d105      	bne.n	8009b34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b28:	4b07      	ldr	r3, [pc, #28]	@ (8009b48 <prvGetNextExpireTime+0x44>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	e001      	b.n	8009b38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b38:	68fb      	ldr	r3, [r7, #12]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	2000170c 	.word	0x2000170c

08009b4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b54:	f7ff f972 	bl	8008e3c <xTaskGetTickCount>
 8009b58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b88 <prvSampleTimeNow+0x3c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d205      	bcs.n	8009b70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b64:	f000 f93a 	bl	8009ddc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	e002      	b.n	8009b76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b76:	4a04      	ldr	r2, [pc, #16]	@ (8009b88 <prvSampleTimeNow+0x3c>)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	2000171c 	.word	0x2000171c

08009b8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d812      	bhi.n	8009bd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	1ad2      	subs	r2, r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d302      	bcc.n	8009bc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	e01b      	b.n	8009bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bc6:	4b10      	ldr	r3, [pc, #64]	@ (8009c08 <prvInsertTimerInActiveList+0x7c>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7fd fdb4 	bl	800773e <vListInsert>
 8009bd6:	e012      	b.n	8009bfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d206      	bcs.n	8009bee <prvInsertTimerInActiveList+0x62>
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d302      	bcc.n	8009bee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009be8:	2301      	movs	r3, #1
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	e007      	b.n	8009bfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bee:	4b07      	ldr	r3, [pc, #28]	@ (8009c0c <prvInsertTimerInActiveList+0x80>)
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f7fd fda0 	bl	800773e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bfe:	697b      	ldr	r3, [r7, #20]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20001710 	.word	0x20001710
 8009c0c:	2000170c 	.word	0x2000170c

08009c10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08e      	sub	sp, #56	@ 0x38
 8009c14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c16:	e0ce      	b.n	8009db6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da19      	bge.n	8009c52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c1e:	1d3b      	adds	r3, r7, #4
 8009c20:	3304      	adds	r3, #4
 8009c22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10b      	bne.n	8009c42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009c2a:	f04f 0310 	mov.w	r3, #16
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	61fb      	str	r3, [r7, #28]
}
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	e7fd      	b.n	8009c3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c48:	6850      	ldr	r0, [r2, #4]
 8009c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c4c:	6892      	ldr	r2, [r2, #8]
 8009c4e:	4611      	mov	r1, r2
 8009c50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f2c0 80ae 	blt.w	8009db6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fd fda0 	bl	80077b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c70:	463b      	mov	r3, r7
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff ff6a 	bl	8009b4c <prvSampleTimeNow>
 8009c78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b09      	cmp	r3, #9
 8009c7e:	f200 8097 	bhi.w	8009db0 <prvProcessReceivedCommands+0x1a0>
 8009c82:	a201      	add	r2, pc, #4	@ (adr r2, 8009c88 <prvProcessReceivedCommands+0x78>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb1 	.word	0x08009cb1
 8009c90:	08009cb1 	.word	0x08009cb1
 8009c94:	08009d27 	.word	0x08009d27
 8009c98:	08009d3b 	.word	0x08009d3b
 8009c9c:	08009d87 	.word	0x08009d87
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009cb1 	.word	0x08009cb1
 8009ca8:	08009d27 	.word	0x08009d27
 8009cac:	08009d3b 	.word	0x08009d3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	18d1      	adds	r1, r2, r3
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cd0:	f7ff ff5c 	bl	8009b8c <prvInsertTimerInActiveList>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d06c      	beq.n	8009db4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d061      	beq.n	8009db4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	441a      	add	r2, r3
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2100      	movs	r1, #0
 8009d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d02:	f7ff fe01 	bl	8009908 <xTimerGenericCommand>
 8009d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d152      	bne.n	8009db4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009d0e:	f04f 0310 	mov.w	r3, #16
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61bb      	str	r3, [r7, #24]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d2c:	f023 0301 	bic.w	r3, r3, #1
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d38:	e03d      	b.n	8009db6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d40:	f043 0301 	orr.w	r3, r3, #1
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009d5a:	f04f 0310 	mov.w	r3, #16
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	617b      	str	r3, [r7, #20]
}
 8009d6c:	bf00      	nop
 8009d6e:	bf00      	nop
 8009d70:	e7fd      	b.n	8009d6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	699a      	ldr	r2, [r3, #24]
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	18d1      	adds	r1, r2, r3
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d80:	f7ff ff04 	bl	8009b8c <prvInsertTimerInActiveList>
					break;
 8009d84:	e017      	b.n	8009db6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d8c:	f003 0302 	and.w	r3, r3, #2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d103      	bne.n	8009d9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d96:	f000 fbe7 	bl	800a568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d9a:	e00c      	b.n	8009db6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009da2:	f023 0301 	bic.w	r3, r3, #1
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009daa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009dae:	e002      	b.n	8009db6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009db0:	bf00      	nop
 8009db2:	e000      	b.n	8009db6 <prvProcessReceivedCommands+0x1a6>
					break;
 8009db4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009db6:	4b08      	ldr	r3, [pc, #32]	@ (8009dd8 <prvProcessReceivedCommands+0x1c8>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	1d39      	adds	r1, r7, #4
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe f904 	bl	8007fcc <xQueueReceive>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f47f af26 	bne.w	8009c18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	3730      	adds	r7, #48	@ 0x30
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20001714 	.word	0x20001714

08009ddc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b088      	sub	sp, #32
 8009de0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009de2:	e049      	b.n	8009e78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009de4:	4b2e      	ldr	r3, [pc, #184]	@ (8009ea0 <prvSwitchTimerLists+0xc4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dee:	4b2c      	ldr	r3, [pc, #176]	@ (8009ea0 <prvSwitchTimerLists+0xc4>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fd fcd7 	bl	80077b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d02f      	beq.n	8009e78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	4413      	add	r3, r2
 8009e20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d90e      	bls.n	8009e48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e36:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea0 <prvSwitchTimerLists+0xc4>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4610      	mov	r0, r2
 8009e42:	f7fd fc7c 	bl	800773e <vListInsert>
 8009e46:	e017      	b.n	8009e78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e48:	2300      	movs	r3, #0
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	2100      	movs	r1, #0
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f7ff fd58 	bl	8009908 <xTimerGenericCommand>
 8009e58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10b      	bne.n	8009e78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e60:	f04f 0310 	mov.w	r3, #16
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	603b      	str	r3, [r7, #0]
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	e7fd      	b.n	8009e74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e78:	4b09      	ldr	r3, [pc, #36]	@ (8009ea0 <prvSwitchTimerLists+0xc4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1b0      	bne.n	8009de4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e82:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <prvSwitchTimerLists+0xc4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e88:	4b06      	ldr	r3, [pc, #24]	@ (8009ea4 <prvSwitchTimerLists+0xc8>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a04      	ldr	r2, [pc, #16]	@ (8009ea0 <prvSwitchTimerLists+0xc4>)
 8009e8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e90:	4a04      	ldr	r2, [pc, #16]	@ (8009ea4 <prvSwitchTimerLists+0xc8>)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	6013      	str	r3, [r2, #0]
}
 8009e96:	bf00      	nop
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	2000170c 	.word	0x2000170c
 8009ea4:	20001710 	.word	0x20001710

08009ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009eae:	f000 f96b 	bl	800a188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009eb2:	4b15      	ldr	r3, [pc, #84]	@ (8009f08 <prvCheckForValidListAndQueue+0x60>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d120      	bne.n	8009efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009eba:	4814      	ldr	r0, [pc, #80]	@ (8009f0c <prvCheckForValidListAndQueue+0x64>)
 8009ebc:	f7fd fbee 	bl	800769c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ec0:	4813      	ldr	r0, [pc, #76]	@ (8009f10 <prvCheckForValidListAndQueue+0x68>)
 8009ec2:	f7fd fbeb 	bl	800769c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ec6:	4b13      	ldr	r3, [pc, #76]	@ (8009f14 <prvCheckForValidListAndQueue+0x6c>)
 8009ec8:	4a10      	ldr	r2, [pc, #64]	@ (8009f0c <prvCheckForValidListAndQueue+0x64>)
 8009eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ecc:	4b12      	ldr	r3, [pc, #72]	@ (8009f18 <prvCheckForValidListAndQueue+0x70>)
 8009ece:	4a10      	ldr	r2, [pc, #64]	@ (8009f10 <prvCheckForValidListAndQueue+0x68>)
 8009ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	4b11      	ldr	r3, [pc, #68]	@ (8009f1c <prvCheckForValidListAndQueue+0x74>)
 8009ed8:	4a11      	ldr	r2, [pc, #68]	@ (8009f20 <prvCheckForValidListAndQueue+0x78>)
 8009eda:	2110      	movs	r1, #16
 8009edc:	200a      	movs	r0, #10
 8009ede:	f7fd fcfb 	bl	80078d8 <xQueueGenericCreateStatic>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	4a08      	ldr	r2, [pc, #32]	@ (8009f08 <prvCheckForValidListAndQueue+0x60>)
 8009ee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ee8:	4b07      	ldr	r3, [pc, #28]	@ (8009f08 <prvCheckForValidListAndQueue+0x60>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d005      	beq.n	8009efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ef0:	4b05      	ldr	r3, [pc, #20]	@ (8009f08 <prvCheckForValidListAndQueue+0x60>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	490b      	ldr	r1, [pc, #44]	@ (8009f24 <prvCheckForValidListAndQueue+0x7c>)
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fc28 	bl	800874c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009efc:	f000 f976 	bl	800a1ec <vPortExitCritical>
}
 8009f00:	bf00      	nop
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	20001714 	.word	0x20001714
 8009f0c:	200016e4 	.word	0x200016e4
 8009f10:	200016f8 	.word	0x200016f8
 8009f14:	2000170c 	.word	0x2000170c
 8009f18:	20001710 	.word	0x20001710
 8009f1c:	200017c0 	.word	0x200017c0
 8009f20:	20001720 	.word	0x20001720
 8009f24:	0800b6fc 	.word	0x0800b6fc

08009f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3b04      	subs	r3, #4
 8009f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3b04      	subs	r3, #4
 8009f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f023 0201 	bic.w	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3b04      	subs	r3, #4
 8009f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f58:	4a0c      	ldr	r2, [pc, #48]	@ (8009f8c <pxPortInitialiseStack+0x64>)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3b14      	subs	r3, #20
 8009f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3b04      	subs	r3, #4
 8009f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f06f 0202 	mvn.w	r2, #2
 8009f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3b20      	subs	r3, #32
 8009f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	08009f91 	.word	0x08009f91

08009f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f9a:	4b13      	ldr	r3, [pc, #76]	@ (8009fe8 <prvTaskExitError+0x58>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fa2:	d00b      	beq.n	8009fbc <prvTaskExitError+0x2c>
	__asm volatile
 8009fa4:	f04f 0310 	mov.w	r3, #16
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	60fb      	str	r3, [r7, #12]
}
 8009fb6:	bf00      	nop
 8009fb8:	bf00      	nop
 8009fba:	e7fd      	b.n	8009fb8 <prvTaskExitError+0x28>
	__asm volatile
 8009fbc:	f04f 0310 	mov.w	r3, #16
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	60bb      	str	r3, [r7, #8]
}
 8009fce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fd0:	bf00      	nop
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0fc      	beq.n	8009fd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	2000000c 	.word	0x2000000c
 8009fec:	00000000 	.word	0x00000000

08009ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ff0:	4b07      	ldr	r3, [pc, #28]	@ (800a010 <pxCurrentTCBConst2>)
 8009ff2:	6819      	ldr	r1, [r3, #0]
 8009ff4:	6808      	ldr	r0, [r1, #0]
 8009ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffa:	f380 8809 	msr	PSP, r0
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f04f 0000 	mov.w	r0, #0
 800a006:	f380 8811 	msr	BASEPRI, r0
 800a00a:	4770      	bx	lr
 800a00c:	f3af 8000 	nop.w

0800a010 <pxCurrentTCBConst2>:
 800a010:	200011e4 	.word	0x200011e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop

0800a018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a018:	4808      	ldr	r0, [pc, #32]	@ (800a03c <prvPortStartFirstTask+0x24>)
 800a01a:	6800      	ldr	r0, [r0, #0]
 800a01c:	6800      	ldr	r0, [r0, #0]
 800a01e:	f380 8808 	msr	MSP, r0
 800a022:	f04f 0000 	mov.w	r0, #0
 800a026:	f380 8814 	msr	CONTROL, r0
 800a02a:	b662      	cpsie	i
 800a02c:	b661      	cpsie	f
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	df00      	svc	0
 800a038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a03a:	bf00      	nop
 800a03c:	e000ed08 	.word	0xe000ed08

0800a040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a046:	4b47      	ldr	r3, [pc, #284]	@ (800a164 <xPortStartScheduler+0x124>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a47      	ldr	r2, [pc, #284]	@ (800a168 <xPortStartScheduler+0x128>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10b      	bne.n	800a068 <xPortStartScheduler+0x28>
	__asm volatile
 800a050:	f04f 0310 	mov.w	r3, #16
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	613b      	str	r3, [r7, #16]
}
 800a062:	bf00      	nop
 800a064:	bf00      	nop
 800a066:	e7fd      	b.n	800a064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a068:	4b3e      	ldr	r3, [pc, #248]	@ (800a164 <xPortStartScheduler+0x124>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a3f      	ldr	r2, [pc, #252]	@ (800a16c <xPortStartScheduler+0x12c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d10b      	bne.n	800a08a <xPortStartScheduler+0x4a>
	__asm volatile
 800a072:	f04f 0310 	mov.w	r3, #16
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	60fb      	str	r3, [r7, #12]
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	e7fd      	b.n	800a086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a08a:	4b39      	ldr	r3, [pc, #228]	@ (800a170 <xPortStartScheduler+0x130>)
 800a08c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	22ff      	movs	r2, #255	@ 0xff
 800a09a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	f003 0310 	and.w	r3, r3, #16
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	4b31      	ldr	r3, [pc, #196]	@ (800a174 <xPortStartScheduler+0x134>)
 800a0b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0b2:	4b31      	ldr	r3, [pc, #196]	@ (800a178 <xPortStartScheduler+0x138>)
 800a0b4:	2207      	movs	r2, #7
 800a0b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0b8:	e009      	b.n	800a0ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a0ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a178 <xPortStartScheduler+0x138>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	4a2d      	ldr	r2, [pc, #180]	@ (800a178 <xPortStartScheduler+0x138>)
 800a0c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0ce:	78fb      	ldrb	r3, [r7, #3]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0d6:	2b80      	cmp	r3, #128	@ 0x80
 800a0d8:	d0ef      	beq.n	800a0ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0da:	4b27      	ldr	r3, [pc, #156]	@ (800a178 <xPortStartScheduler+0x138>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f1c3 0307 	rsb	r3, r3, #7
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d00b      	beq.n	800a0fe <xPortStartScheduler+0xbe>
	__asm volatile
 800a0e6:	f04f 0310 	mov.w	r3, #16
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	60bb      	str	r3, [r7, #8]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a178 <xPortStartScheduler+0x138>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	021b      	lsls	r3, r3, #8
 800a104:	4a1c      	ldr	r2, [pc, #112]	@ (800a178 <xPortStartScheduler+0x138>)
 800a106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a108:	4b1b      	ldr	r3, [pc, #108]	@ (800a178 <xPortStartScheduler+0x138>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a110:	4a19      	ldr	r2, [pc, #100]	@ (800a178 <xPortStartScheduler+0x138>)
 800a112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	b2da      	uxtb	r2, r3
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a11c:	4b17      	ldr	r3, [pc, #92]	@ (800a17c <xPortStartScheduler+0x13c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a16      	ldr	r2, [pc, #88]	@ (800a17c <xPortStartScheduler+0x13c>)
 800a122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a128:	4b14      	ldr	r3, [pc, #80]	@ (800a17c <xPortStartScheduler+0x13c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a13      	ldr	r2, [pc, #76]	@ (800a17c <xPortStartScheduler+0x13c>)
 800a12e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a134:	f000 f8da 	bl	800a2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a138:	4b11      	ldr	r3, [pc, #68]	@ (800a180 <xPortStartScheduler+0x140>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a13e:	f000 f8f9 	bl	800a334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a142:	4b10      	ldr	r3, [pc, #64]	@ (800a184 <xPortStartScheduler+0x144>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a0f      	ldr	r2, [pc, #60]	@ (800a184 <xPortStartScheduler+0x144>)
 800a148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a14c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a14e:	f7ff ff63 	bl	800a018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a152:	f7fe ff3d 	bl	8008fd0 <vTaskSwitchContext>
	prvTaskExitError();
 800a156:	f7ff ff1b 	bl	8009f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	e000ed00 	.word	0xe000ed00
 800a168:	410fc271 	.word	0x410fc271
 800a16c:	410fc270 	.word	0x410fc270
 800a170:	e000e400 	.word	0xe000e400
 800a174:	20001810 	.word	0x20001810
 800a178:	20001814 	.word	0x20001814
 800a17c:	e000ed20 	.word	0xe000ed20
 800a180:	2000000c 	.word	0x2000000c
 800a184:	e000ef34 	.word	0xe000ef34

0800a188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
	__asm volatile
 800a18e:	f04f 0310 	mov.w	r3, #16
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	607b      	str	r3, [r7, #4]
}
 800a1a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1a2:	4b10      	ldr	r3, [pc, #64]	@ (800a1e4 <vPortEnterCritical+0x5c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	4a0e      	ldr	r2, [pc, #56]	@ (800a1e4 <vPortEnterCritical+0x5c>)
 800a1aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e4 <vPortEnterCritical+0x5c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d110      	bne.n	800a1d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e8 <vPortEnterCritical+0x60>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a1be:	f04f 0310 	mov.w	r3, #16
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	603b      	str	r3, [r7, #0]
}
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	e7fd      	b.n	800a1d2 <vPortEnterCritical+0x4a>
	}
}
 800a1d6:	bf00      	nop
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	2000000c 	.word	0x2000000c
 800a1e8:	e000ed04 	.word	0xe000ed04

0800a1ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1f2:	4b12      	ldr	r3, [pc, #72]	@ (800a23c <vPortExitCritical+0x50>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10b      	bne.n	800a212 <vPortExitCritical+0x26>
	__asm volatile
 800a1fa:	f04f 0310 	mov.w	r3, #16
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	607b      	str	r3, [r7, #4]
}
 800a20c:	bf00      	nop
 800a20e:	bf00      	nop
 800a210:	e7fd      	b.n	800a20e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a212:	4b0a      	ldr	r3, [pc, #40]	@ (800a23c <vPortExitCritical+0x50>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3b01      	subs	r3, #1
 800a218:	4a08      	ldr	r2, [pc, #32]	@ (800a23c <vPortExitCritical+0x50>)
 800a21a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a21c:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <vPortExitCritical+0x50>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d105      	bne.n	800a230 <vPortExitCritical+0x44>
 800a224:	2300      	movs	r3, #0
 800a226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	f383 8811 	msr	BASEPRI, r3
}
 800a22e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	2000000c 	.word	0x2000000c

0800a240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a240:	f3ef 8009 	mrs	r0, PSP
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	4b15      	ldr	r3, [pc, #84]	@ (800a2a0 <pxCurrentTCBConst>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	f01e 0f10 	tst.w	lr, #16
 800a250:	bf08      	it	eq
 800a252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25a:	6010      	str	r0, [r2, #0]
 800a25c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a260:	f04f 0010 	mov.w	r0, #16
 800a264:	f380 8811 	msr	BASEPRI, r0
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f7fe feae 	bl	8008fd0 <vTaskSwitchContext>
 800a274:	f04f 0000 	mov.w	r0, #0
 800a278:	f380 8811 	msr	BASEPRI, r0
 800a27c:	bc09      	pop	{r0, r3}
 800a27e:	6819      	ldr	r1, [r3, #0]
 800a280:	6808      	ldr	r0, [r1, #0]
 800a282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a286:	f01e 0f10 	tst.w	lr, #16
 800a28a:	bf08      	it	eq
 800a28c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a290:	f380 8809 	msr	PSP, r0
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	f3af 8000 	nop.w

0800a2a0 <pxCurrentTCBConst>:
 800a2a0:	200011e4 	.word	0x200011e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ae:	f04f 0310 	mov.w	r3, #16
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	607b      	str	r3, [r7, #4]
}
 800a2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2c2:	f7fe fdcb 	bl	8008e5c <xTaskIncrementTick>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2cc:	4b06      	ldr	r3, [pc, #24]	@ (800a2e8 <xPortSysTickHandler+0x40>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f383 8811 	msr	BASEPRI, r3
}
 800a2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a324 <vPortSetupTimerInterrupt+0x38>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a328 <vPortSetupTimerInterrupt+0x3c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a0a      	ldr	r2, [pc, #40]	@ (800a32c <vPortSetupTimerInterrupt+0x40>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	099b      	lsrs	r3, r3, #6
 800a308:	4a09      	ldr	r2, [pc, #36]	@ (800a330 <vPortSetupTimerInterrupt+0x44>)
 800a30a:	3b01      	subs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a30e:	4b04      	ldr	r3, [pc, #16]	@ (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a310:	2207      	movs	r2, #7
 800a312:	601a      	str	r2, [r3, #0]
}
 800a314:	bf00      	nop
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	e000e010 	.word	0xe000e010
 800a324:	e000e018 	.word	0xe000e018
 800a328:	20000000 	.word	0x20000000
 800a32c:	10624dd3 	.word	0x10624dd3
 800a330:	e000e014 	.word	0xe000e014

0800a334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a344 <vPortEnableVFP+0x10>
 800a338:	6801      	ldr	r1, [r0, #0]
 800a33a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a33e:	6001      	str	r1, [r0, #0]
 800a340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a342:	bf00      	nop
 800a344:	e000ed88 	.word	0xe000ed88

0800a348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a34e:	f3ef 8305 	mrs	r3, IPSR
 800a352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b0f      	cmp	r3, #15
 800a358:	d915      	bls.n	800a386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a35a:	4a18      	ldr	r2, [pc, #96]	@ (800a3bc <vPortValidateInterruptPriority+0x74>)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a364:	4b16      	ldr	r3, [pc, #88]	@ (800a3c0 <vPortValidateInterruptPriority+0x78>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	7afa      	ldrb	r2, [r7, #11]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d20b      	bcs.n	800a386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a36e:	f04f 0310 	mov.w	r3, #16
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	607b      	str	r3, [r7, #4]
}
 800a380:	bf00      	nop
 800a382:	bf00      	nop
 800a384:	e7fd      	b.n	800a382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a386:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c4 <vPortValidateInterruptPriority+0x7c>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a38e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c8 <vPortValidateInterruptPriority+0x80>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d90b      	bls.n	800a3ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a396:	f04f 0310 	mov.w	r3, #16
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	603b      	str	r3, [r7, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <vPortValidateInterruptPriority+0x62>
	}
 800a3ae:	bf00      	nop
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	e000e3f0 	.word	0xe000e3f0
 800a3c0:	20001810 	.word	0x20001810
 800a3c4:	e000ed0c 	.word	0xe000ed0c
 800a3c8:	20001814 	.word	0x20001814

0800a3cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08a      	sub	sp, #40	@ 0x28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3d8:	f7fe fc84 	bl	8008ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3dc:	4b5c      	ldr	r3, [pc, #368]	@ (800a550 <pvPortMalloc+0x184>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3e4:	f000 f924 	bl	800a630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a554 <pvPortMalloc+0x188>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f040 8095 	bne.w	800a520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01e      	beq.n	800a43a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a3fc:	2208      	movs	r2, #8
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4413      	add	r3, r2
 800a402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d015      	beq.n	800a43a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f023 0307 	bic.w	r3, r3, #7
 800a414:	3308      	adds	r3, #8
 800a416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00b      	beq.n	800a43a <pvPortMalloc+0x6e>
	__asm volatile
 800a422:	f04f 0310 	mov.w	r3, #16
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	617b      	str	r3, [r7, #20]
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	e7fd      	b.n	800a436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d06f      	beq.n	800a520 <pvPortMalloc+0x154>
 800a440:	4b45      	ldr	r3, [pc, #276]	@ (800a558 <pvPortMalloc+0x18c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	429a      	cmp	r2, r3
 800a448:	d86a      	bhi.n	800a520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a44a:	4b44      	ldr	r3, [pc, #272]	@ (800a55c <pvPortMalloc+0x190>)
 800a44c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a44e:	4b43      	ldr	r3, [pc, #268]	@ (800a55c <pvPortMalloc+0x190>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a454:	e004      	b.n	800a460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	429a      	cmp	r2, r3
 800a468:	d903      	bls.n	800a472 <pvPortMalloc+0xa6>
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f1      	bne.n	800a456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a472:	4b37      	ldr	r3, [pc, #220]	@ (800a550 <pvPortMalloc+0x184>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a478:	429a      	cmp	r2, r3
 800a47a:	d051      	beq.n	800a520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2208      	movs	r2, #8
 800a482:	4413      	add	r3, r2
 800a484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	1ad2      	subs	r2, r2, r3
 800a496:	2308      	movs	r3, #8
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d920      	bls.n	800a4e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	f003 0307 	and.w	r3, r3, #7
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <pvPortMalloc+0xfc>
	__asm volatile
 800a4b0:	f04f 0310 	mov.w	r3, #16
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	613b      	str	r3, [r7, #16]
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4da:	69b8      	ldr	r0, [r7, #24]
 800a4dc:	f000 f90a 	bl	800a6f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800a560 <pvPortMalloc+0x194>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d203      	bcs.n	800a502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4fa:	4b17      	ldr	r3, [pc, #92]	@ (800a558 <pvPortMalloc+0x18c>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a18      	ldr	r2, [pc, #96]	@ (800a560 <pvPortMalloc+0x194>)
 800a500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	4b13      	ldr	r3, [pc, #76]	@ (800a554 <pvPortMalloc+0x188>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a516:	4b13      	ldr	r3, [pc, #76]	@ (800a564 <pvPortMalloc+0x198>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	4a11      	ldr	r2, [pc, #68]	@ (800a564 <pvPortMalloc+0x198>)
 800a51e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a520:	f7fe fbee 	bl	8008d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00b      	beq.n	800a546 <pvPortMalloc+0x17a>
	__asm volatile
 800a52e:	f04f 0310 	mov.w	r3, #16
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	60fb      	str	r3, [r7, #12]
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <pvPortMalloc+0x176>
	return pvReturn;
 800a546:	69fb      	ldr	r3, [r7, #28]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3728      	adds	r7, #40	@ 0x28
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	200023d8 	.word	0x200023d8
 800a554:	200023ec 	.word	0x200023ec
 800a558:	200023dc 	.word	0x200023dc
 800a55c:	200023d0 	.word	0x200023d0
 800a560:	200023e0 	.word	0x200023e0
 800a564:	200023e4 	.word	0x200023e4

0800a568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d04f      	beq.n	800a61a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a57a:	2308      	movs	r3, #8
 800a57c:	425b      	negs	r3, r3
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	4413      	add	r3, r2
 800a582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	4b25      	ldr	r3, [pc, #148]	@ (800a624 <vPortFree+0xbc>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4013      	ands	r3, r2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <vPortFree+0x46>
	__asm volatile
 800a596:	f04f 0310 	mov.w	r3, #16
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	60fb      	str	r3, [r7, #12]
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	e7fd      	b.n	800a5aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00b      	beq.n	800a5ce <vPortFree+0x66>
	__asm volatile
 800a5b6:	f04f 0310 	mov.w	r3, #16
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	60bb      	str	r3, [r7, #8]
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	e7fd      	b.n	800a5ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	4b14      	ldr	r3, [pc, #80]	@ (800a624 <vPortFree+0xbc>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d01e      	beq.n	800a61a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11a      	bne.n	800a61a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a624 <vPortFree+0xbc>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	43db      	mvns	r3, r3
 800a5ee:	401a      	ands	r2, r3
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5f4:	f7fe fb76 	bl	8008ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a628 <vPortFree+0xc0>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4413      	add	r3, r2
 800a602:	4a09      	ldr	r2, [pc, #36]	@ (800a628 <vPortFree+0xc0>)
 800a604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a606:	6938      	ldr	r0, [r7, #16]
 800a608:	f000 f874 	bl	800a6f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a60c:	4b07      	ldr	r3, [pc, #28]	@ (800a62c <vPortFree+0xc4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	4a06      	ldr	r2, [pc, #24]	@ (800a62c <vPortFree+0xc4>)
 800a614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a616:	f7fe fb73 	bl	8008d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a61a:	bf00      	nop
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	200023ec 	.word	0x200023ec
 800a628:	200023dc 	.word	0x200023dc
 800a62c:	200023e8 	.word	0x200023e8

0800a630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a636:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a63a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a63c:	4b27      	ldr	r3, [pc, #156]	@ (800a6dc <prvHeapInit+0xac>)
 800a63e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00c      	beq.n	800a664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3307      	adds	r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 0307 	bic.w	r3, r3, #7
 800a656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	4a1f      	ldr	r2, [pc, #124]	@ (800a6dc <prvHeapInit+0xac>)
 800a660:	4413      	add	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a668:	4a1d      	ldr	r2, [pc, #116]	@ (800a6e0 <prvHeapInit+0xb0>)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a66e:	4b1c      	ldr	r3, [pc, #112]	@ (800a6e0 <prvHeapInit+0xb0>)
 800a670:	2200      	movs	r2, #0
 800a672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	4413      	add	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a67c:	2208      	movs	r2, #8
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	1a9b      	subs	r3, r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f023 0307 	bic.w	r3, r3, #7
 800a68a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4a15      	ldr	r2, [pc, #84]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a692:	4b14      	ldr	r3, [pc, #80]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2200      	movs	r2, #0
 800a698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a69a:	4b12      	ldr	r3, [pc, #72]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	1ad2      	subs	r2, r2, r3
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e4 <prvHeapInit+0xb4>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	4a0a      	ldr	r2, [pc, #40]	@ (800a6e8 <prvHeapInit+0xb8>)
 800a6be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	4a09      	ldr	r2, [pc, #36]	@ (800a6ec <prvHeapInit+0xbc>)
 800a6c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6c8:	4b09      	ldr	r3, [pc, #36]	@ (800a6f0 <prvHeapInit+0xc0>)
 800a6ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a6ce:	601a      	str	r2, [r3, #0]
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	20001818 	.word	0x20001818
 800a6e0:	200023d0 	.word	0x200023d0
 800a6e4:	200023d8 	.word	0x200023d8
 800a6e8:	200023e0 	.word	0x200023e0
 800a6ec:	200023dc 	.word	0x200023dc
 800a6f0:	200023ec 	.word	0x200023ec

0800a6f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6fc:	4b28      	ldr	r3, [pc, #160]	@ (800a7a0 <prvInsertBlockIntoFreeList+0xac>)
 800a6fe:	60fb      	str	r3, [r7, #12]
 800a700:	e002      	b.n	800a708 <prvInsertBlockIntoFreeList+0x14>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d8f7      	bhi.n	800a702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	4413      	add	r3, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d108      	bne.n	800a736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	441a      	add	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	441a      	add	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d118      	bne.n	800a77c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	4b15      	ldr	r3, [pc, #84]	@ (800a7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d00d      	beq.n	800a772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	441a      	add	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	e008      	b.n	800a784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a772:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a4 <prvInsertBlockIntoFreeList+0xb0>)
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e003      	b.n	800a784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d002      	beq.n	800a792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a792:	bf00      	nop
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	200023d0 	.word	0x200023d0
 800a7a4:	200023d8 	.word	0x200023d8

0800a7a8 <std>:
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a7b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7b6:	6083      	str	r3, [r0, #8]
 800a7b8:	8181      	strh	r1, [r0, #12]
 800a7ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7bc:	81c2      	strh	r2, [r0, #14]
 800a7be:	6183      	str	r3, [r0, #24]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	2208      	movs	r2, #8
 800a7c4:	305c      	adds	r0, #92	@ 0x5c
 800a7c6:	f000 f8cb 	bl	800a960 <memset>
 800a7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a800 <std+0x58>)
 800a7cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a804 <std+0x5c>)
 800a7d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a808 <std+0x60>)
 800a7d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a80c <std+0x64>)
 800a7d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7da:	4b0d      	ldr	r3, [pc, #52]	@ (800a810 <std+0x68>)
 800a7dc:	6224      	str	r4, [r4, #32]
 800a7de:	429c      	cmp	r4, r3
 800a7e0:	d006      	beq.n	800a7f0 <std+0x48>
 800a7e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7e6:	4294      	cmp	r4, r2
 800a7e8:	d002      	beq.n	800a7f0 <std+0x48>
 800a7ea:	33d0      	adds	r3, #208	@ 0xd0
 800a7ec:	429c      	cmp	r4, r3
 800a7ee:	d105      	bne.n	800a7fc <std+0x54>
 800a7f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f8:	f000 b8e4 	b.w	800a9c4 <__retarget_lock_init_recursive>
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	bf00      	nop
 800a800:	0800b239 	.word	0x0800b239
 800a804:	0800b25b 	.word	0x0800b25b
 800a808:	0800b293 	.word	0x0800b293
 800a80c:	0800b2b7 	.word	0x0800b2b7
 800a810:	200023f0 	.word	0x200023f0

0800a814 <stdio_exit_handler>:
 800a814:	4a02      	ldr	r2, [pc, #8]	@ (800a820 <stdio_exit_handler+0xc>)
 800a816:	4903      	ldr	r1, [pc, #12]	@ (800a824 <stdio_exit_handler+0x10>)
 800a818:	4803      	ldr	r0, [pc, #12]	@ (800a828 <stdio_exit_handler+0x14>)
 800a81a:	f000 b869 	b.w	800a8f0 <_fwalk_sglue>
 800a81e:	bf00      	nop
 800a820:	20000010 	.word	0x20000010
 800a824:	0800b1d1 	.word	0x0800b1d1
 800a828:	20000020 	.word	0x20000020

0800a82c <cleanup_stdio>:
 800a82c:	6841      	ldr	r1, [r0, #4]
 800a82e:	4b0c      	ldr	r3, [pc, #48]	@ (800a860 <cleanup_stdio+0x34>)
 800a830:	4299      	cmp	r1, r3
 800a832:	b510      	push	{r4, lr}
 800a834:	4604      	mov	r4, r0
 800a836:	d001      	beq.n	800a83c <cleanup_stdio+0x10>
 800a838:	f000 fcca 	bl	800b1d0 <_fflush_r>
 800a83c:	68a1      	ldr	r1, [r4, #8]
 800a83e:	4b09      	ldr	r3, [pc, #36]	@ (800a864 <cleanup_stdio+0x38>)
 800a840:	4299      	cmp	r1, r3
 800a842:	d002      	beq.n	800a84a <cleanup_stdio+0x1e>
 800a844:	4620      	mov	r0, r4
 800a846:	f000 fcc3 	bl	800b1d0 <_fflush_r>
 800a84a:	68e1      	ldr	r1, [r4, #12]
 800a84c:	4b06      	ldr	r3, [pc, #24]	@ (800a868 <cleanup_stdio+0x3c>)
 800a84e:	4299      	cmp	r1, r3
 800a850:	d004      	beq.n	800a85c <cleanup_stdio+0x30>
 800a852:	4620      	mov	r0, r4
 800a854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a858:	f000 bcba 	b.w	800b1d0 <_fflush_r>
 800a85c:	bd10      	pop	{r4, pc}
 800a85e:	bf00      	nop
 800a860:	200023f0 	.word	0x200023f0
 800a864:	20002458 	.word	0x20002458
 800a868:	200024c0 	.word	0x200024c0

0800a86c <global_stdio_init.part.0>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	4b0b      	ldr	r3, [pc, #44]	@ (800a89c <global_stdio_init.part.0+0x30>)
 800a870:	4c0b      	ldr	r4, [pc, #44]	@ (800a8a0 <global_stdio_init.part.0+0x34>)
 800a872:	4a0c      	ldr	r2, [pc, #48]	@ (800a8a4 <global_stdio_init.part.0+0x38>)
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	4620      	mov	r0, r4
 800a878:	2200      	movs	r2, #0
 800a87a:	2104      	movs	r1, #4
 800a87c:	f7ff ff94 	bl	800a7a8 <std>
 800a880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a884:	2201      	movs	r2, #1
 800a886:	2109      	movs	r1, #9
 800a888:	f7ff ff8e 	bl	800a7a8 <std>
 800a88c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a890:	2202      	movs	r2, #2
 800a892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a896:	2112      	movs	r1, #18
 800a898:	f7ff bf86 	b.w	800a7a8 <std>
 800a89c:	20002528 	.word	0x20002528
 800a8a0:	200023f0 	.word	0x200023f0
 800a8a4:	0800a815 	.word	0x0800a815

0800a8a8 <__sfp_lock_acquire>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	@ (800a8b0 <__sfp_lock_acquire+0x8>)
 800a8aa:	f000 b88c 	b.w	800a9c6 <__retarget_lock_acquire_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	2000252d 	.word	0x2000252d

0800a8b4 <__sfp_lock_release>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	@ (800a8bc <__sfp_lock_release+0x8>)
 800a8b6:	f000 b887 	b.w	800a9c8 <__retarget_lock_release_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	2000252d 	.word	0x2000252d

0800a8c0 <__sinit>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	f7ff fff0 	bl	800a8a8 <__sfp_lock_acquire>
 800a8c8:	6a23      	ldr	r3, [r4, #32]
 800a8ca:	b11b      	cbz	r3, 800a8d4 <__sinit+0x14>
 800a8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d0:	f7ff bff0 	b.w	800a8b4 <__sfp_lock_release>
 800a8d4:	4b04      	ldr	r3, [pc, #16]	@ (800a8e8 <__sinit+0x28>)
 800a8d6:	6223      	str	r3, [r4, #32]
 800a8d8:	4b04      	ldr	r3, [pc, #16]	@ (800a8ec <__sinit+0x2c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1f5      	bne.n	800a8cc <__sinit+0xc>
 800a8e0:	f7ff ffc4 	bl	800a86c <global_stdio_init.part.0>
 800a8e4:	e7f2      	b.n	800a8cc <__sinit+0xc>
 800a8e6:	bf00      	nop
 800a8e8:	0800a82d 	.word	0x0800a82d
 800a8ec:	20002528 	.word	0x20002528

0800a8f0 <_fwalk_sglue>:
 800a8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f4:	4607      	mov	r7, r0
 800a8f6:	4688      	mov	r8, r1
 800a8f8:	4614      	mov	r4, r2
 800a8fa:	2600      	movs	r6, #0
 800a8fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a900:	f1b9 0901 	subs.w	r9, r9, #1
 800a904:	d505      	bpl.n	800a912 <_fwalk_sglue+0x22>
 800a906:	6824      	ldr	r4, [r4, #0]
 800a908:	2c00      	cmp	r4, #0
 800a90a:	d1f7      	bne.n	800a8fc <_fwalk_sglue+0xc>
 800a90c:	4630      	mov	r0, r6
 800a90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a912:	89ab      	ldrh	r3, [r5, #12]
 800a914:	2b01      	cmp	r3, #1
 800a916:	d907      	bls.n	800a928 <_fwalk_sglue+0x38>
 800a918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a91c:	3301      	adds	r3, #1
 800a91e:	d003      	beq.n	800a928 <_fwalk_sglue+0x38>
 800a920:	4629      	mov	r1, r5
 800a922:	4638      	mov	r0, r7
 800a924:	47c0      	blx	r8
 800a926:	4306      	orrs	r6, r0
 800a928:	3568      	adds	r5, #104	@ 0x68
 800a92a:	e7e9      	b.n	800a900 <_fwalk_sglue+0x10>

0800a92c <iprintf>:
 800a92c:	b40f      	push	{r0, r1, r2, r3}
 800a92e:	b507      	push	{r0, r1, r2, lr}
 800a930:	4906      	ldr	r1, [pc, #24]	@ (800a94c <iprintf+0x20>)
 800a932:	ab04      	add	r3, sp, #16
 800a934:	6808      	ldr	r0, [r1, #0]
 800a936:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93a:	6881      	ldr	r1, [r0, #8]
 800a93c:	9301      	str	r3, [sp, #4]
 800a93e:	f000 f87b 	bl	800aa38 <_vfiprintf_r>
 800a942:	b003      	add	sp, #12
 800a944:	f85d eb04 	ldr.w	lr, [sp], #4
 800a948:	b004      	add	sp, #16
 800a94a:	4770      	bx	lr
 800a94c:	2000001c 	.word	0x2000001c

0800a950 <putchar>:
 800a950:	4b02      	ldr	r3, [pc, #8]	@ (800a95c <putchar+0xc>)
 800a952:	4601      	mov	r1, r0
 800a954:	6818      	ldr	r0, [r3, #0]
 800a956:	6882      	ldr	r2, [r0, #8]
 800a958:	f000 bda8 	b.w	800b4ac <_putc_r>
 800a95c:	2000001c 	.word	0x2000001c

0800a960 <memset>:
 800a960:	4402      	add	r2, r0
 800a962:	4603      	mov	r3, r0
 800a964:	4293      	cmp	r3, r2
 800a966:	d100      	bne.n	800a96a <memset+0xa>
 800a968:	4770      	bx	lr
 800a96a:	f803 1b01 	strb.w	r1, [r3], #1
 800a96e:	e7f9      	b.n	800a964 <memset+0x4>

0800a970 <__errno>:
 800a970:	4b01      	ldr	r3, [pc, #4]	@ (800a978 <__errno+0x8>)
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	2000001c 	.word	0x2000001c

0800a97c <__libc_init_array>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b4 <__libc_init_array+0x38>)
 800a980:	4c0d      	ldr	r4, [pc, #52]	@ (800a9b8 <__libc_init_array+0x3c>)
 800a982:	1b64      	subs	r4, r4, r5
 800a984:	10a4      	asrs	r4, r4, #2
 800a986:	2600      	movs	r6, #0
 800a988:	42a6      	cmp	r6, r4
 800a98a:	d109      	bne.n	800a9a0 <__libc_init_array+0x24>
 800a98c:	4d0b      	ldr	r5, [pc, #44]	@ (800a9bc <__libc_init_array+0x40>)
 800a98e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c0 <__libc_init_array+0x44>)
 800a990:	f000 fe82 	bl	800b698 <_init>
 800a994:	1b64      	subs	r4, r4, r5
 800a996:	10a4      	asrs	r4, r4, #2
 800a998:	2600      	movs	r6, #0
 800a99a:	42a6      	cmp	r6, r4
 800a99c:	d105      	bne.n	800a9aa <__libc_init_array+0x2e>
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a4:	4798      	blx	r3
 800a9a6:	3601      	adds	r6, #1
 800a9a8:	e7ee      	b.n	800a988 <__libc_init_array+0xc>
 800a9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ae:	4798      	blx	r3
 800a9b0:	3601      	adds	r6, #1
 800a9b2:	e7f2      	b.n	800a99a <__libc_init_array+0x1e>
 800a9b4:	0800b7f0 	.word	0x0800b7f0
 800a9b8:	0800b7f0 	.word	0x0800b7f0
 800a9bc:	0800b7f0 	.word	0x0800b7f0
 800a9c0:	0800b7f4 	.word	0x0800b7f4

0800a9c4 <__retarget_lock_init_recursive>:
 800a9c4:	4770      	bx	lr

0800a9c6 <__retarget_lock_acquire_recursive>:
 800a9c6:	4770      	bx	lr

0800a9c8 <__retarget_lock_release_recursive>:
 800a9c8:	4770      	bx	lr

0800a9ca <memcpy>:
 800a9ca:	440a      	add	r2, r1
 800a9cc:	4291      	cmp	r1, r2
 800a9ce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a9d2:	d100      	bne.n	800a9d6 <memcpy+0xc>
 800a9d4:	4770      	bx	lr
 800a9d6:	b510      	push	{r4, lr}
 800a9d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9e0:	4291      	cmp	r1, r2
 800a9e2:	d1f9      	bne.n	800a9d8 <memcpy+0xe>
 800a9e4:	bd10      	pop	{r4, pc}

0800a9e6 <__sfputc_r>:
 800a9e6:	6893      	ldr	r3, [r2, #8]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	b410      	push	{r4}
 800a9ee:	6093      	str	r3, [r2, #8]
 800a9f0:	da08      	bge.n	800aa04 <__sfputc_r+0x1e>
 800a9f2:	6994      	ldr	r4, [r2, #24]
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	db01      	blt.n	800a9fc <__sfputc_r+0x16>
 800a9f8:	290a      	cmp	r1, #10
 800a9fa:	d103      	bne.n	800aa04 <__sfputc_r+0x1e>
 800a9fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa00:	f000 bc5d 	b.w	800b2be <__swbuf_r>
 800aa04:	6813      	ldr	r3, [r2, #0]
 800aa06:	1c58      	adds	r0, r3, #1
 800aa08:	6010      	str	r0, [r2, #0]
 800aa0a:	7019      	strb	r1, [r3, #0]
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <__sfputs_r>:
 800aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa16:	4606      	mov	r6, r0
 800aa18:	460f      	mov	r7, r1
 800aa1a:	4614      	mov	r4, r2
 800aa1c:	18d5      	adds	r5, r2, r3
 800aa1e:	42ac      	cmp	r4, r5
 800aa20:	d101      	bne.n	800aa26 <__sfputs_r+0x12>
 800aa22:	2000      	movs	r0, #0
 800aa24:	e007      	b.n	800aa36 <__sfputs_r+0x22>
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	463a      	mov	r2, r7
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f7ff ffda 	bl	800a9e6 <__sfputc_r>
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	d1f3      	bne.n	800aa1e <__sfputs_r+0xa>
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa38 <_vfiprintf_r>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	b09d      	sub	sp, #116	@ 0x74
 800aa40:	4614      	mov	r4, r2
 800aa42:	4698      	mov	r8, r3
 800aa44:	4606      	mov	r6, r0
 800aa46:	b118      	cbz	r0, 800aa50 <_vfiprintf_r+0x18>
 800aa48:	6a03      	ldr	r3, [r0, #32]
 800aa4a:	b90b      	cbnz	r3, 800aa50 <_vfiprintf_r+0x18>
 800aa4c:	f7ff ff38 	bl	800a8c0 <__sinit>
 800aa50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa52:	07d9      	lsls	r1, r3, #31
 800aa54:	d405      	bmi.n	800aa62 <_vfiprintf_r+0x2a>
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	059a      	lsls	r2, r3, #22
 800aa5a:	d402      	bmi.n	800aa62 <_vfiprintf_r+0x2a>
 800aa5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa5e:	f7ff ffb2 	bl	800a9c6 <__retarget_lock_acquire_recursive>
 800aa62:	89ab      	ldrh	r3, [r5, #12]
 800aa64:	071b      	lsls	r3, r3, #28
 800aa66:	d501      	bpl.n	800aa6c <_vfiprintf_r+0x34>
 800aa68:	692b      	ldr	r3, [r5, #16]
 800aa6a:	b99b      	cbnz	r3, 800aa94 <_vfiprintf_r+0x5c>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f000 fc64 	bl	800b33c <__swsetup_r>
 800aa74:	b170      	cbz	r0, 800aa94 <_vfiprintf_r+0x5c>
 800aa76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa78:	07dc      	lsls	r4, r3, #31
 800aa7a:	d504      	bpl.n	800aa86 <_vfiprintf_r+0x4e>
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa80:	b01d      	add	sp, #116	@ 0x74
 800aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa86:	89ab      	ldrh	r3, [r5, #12]
 800aa88:	0598      	lsls	r0, r3, #22
 800aa8a:	d4f7      	bmi.n	800aa7c <_vfiprintf_r+0x44>
 800aa8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa8e:	f7ff ff9b 	bl	800a9c8 <__retarget_lock_release_recursive>
 800aa92:	e7f3      	b.n	800aa7c <_vfiprintf_r+0x44>
 800aa94:	2300      	movs	r3, #0
 800aa96:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa98:	2320      	movs	r3, #32
 800aa9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa2:	2330      	movs	r3, #48	@ 0x30
 800aaa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac54 <_vfiprintf_r+0x21c>
 800aaa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaac:	f04f 0901 	mov.w	r9, #1
 800aab0:	4623      	mov	r3, r4
 800aab2:	469a      	mov	sl, r3
 800aab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aab8:	b10a      	cbz	r2, 800aabe <_vfiprintf_r+0x86>
 800aaba:	2a25      	cmp	r2, #37	@ 0x25
 800aabc:	d1f9      	bne.n	800aab2 <_vfiprintf_r+0x7a>
 800aabe:	ebba 0b04 	subs.w	fp, sl, r4
 800aac2:	d00b      	beq.n	800aadc <_vfiprintf_r+0xa4>
 800aac4:	465b      	mov	r3, fp
 800aac6:	4622      	mov	r2, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7ff ffa2 	bl	800aa14 <__sfputs_r>
 800aad0:	3001      	adds	r0, #1
 800aad2:	f000 80a7 	beq.w	800ac24 <_vfiprintf_r+0x1ec>
 800aad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad8:	445a      	add	r2, fp
 800aada:	9209      	str	r2, [sp, #36]	@ 0x24
 800aadc:	f89a 3000 	ldrb.w	r3, [sl]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 809f 	beq.w	800ac24 <_vfiprintf_r+0x1ec>
 800aae6:	2300      	movs	r3, #0
 800aae8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aaec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf0:	f10a 0a01 	add.w	sl, sl, #1
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	9307      	str	r3, [sp, #28]
 800aaf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aafc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aafe:	4654      	mov	r4, sl
 800ab00:	2205      	movs	r2, #5
 800ab02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab06:	4853      	ldr	r0, [pc, #332]	@ (800ac54 <_vfiprintf_r+0x21c>)
 800ab08:	f7f5 fb62 	bl	80001d0 <memchr>
 800ab0c:	9a04      	ldr	r2, [sp, #16]
 800ab0e:	b9d8      	cbnz	r0, 800ab48 <_vfiprintf_r+0x110>
 800ab10:	06d1      	lsls	r1, r2, #27
 800ab12:	bf44      	itt	mi
 800ab14:	2320      	movmi	r3, #32
 800ab16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab1a:	0713      	lsls	r3, r2, #28
 800ab1c:	bf44      	itt	mi
 800ab1e:	232b      	movmi	r3, #43	@ 0x2b
 800ab20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab24:	f89a 3000 	ldrb.w	r3, [sl]
 800ab28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab2a:	d015      	beq.n	800ab58 <_vfiprintf_r+0x120>
 800ab2c:	9a07      	ldr	r2, [sp, #28]
 800ab2e:	4654      	mov	r4, sl
 800ab30:	2000      	movs	r0, #0
 800ab32:	f04f 0c0a 	mov.w	ip, #10
 800ab36:	4621      	mov	r1, r4
 800ab38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab3c:	3b30      	subs	r3, #48	@ 0x30
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d94b      	bls.n	800abda <_vfiprintf_r+0x1a2>
 800ab42:	b1b0      	cbz	r0, 800ab72 <_vfiprintf_r+0x13a>
 800ab44:	9207      	str	r2, [sp, #28]
 800ab46:	e014      	b.n	800ab72 <_vfiprintf_r+0x13a>
 800ab48:	eba0 0308 	sub.w	r3, r0, r8
 800ab4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab50:	4313      	orrs	r3, r2
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	46a2      	mov	sl, r4
 800ab56:	e7d2      	b.n	800aafe <_vfiprintf_r+0xc6>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	1d19      	adds	r1, r3, #4
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	9103      	str	r1, [sp, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfbb      	ittet	lt
 800ab64:	425b      	neglt	r3, r3
 800ab66:	f042 0202 	orrlt.w	r2, r2, #2
 800ab6a:	9307      	strge	r3, [sp, #28]
 800ab6c:	9307      	strlt	r3, [sp, #28]
 800ab6e:	bfb8      	it	lt
 800ab70:	9204      	strlt	r2, [sp, #16]
 800ab72:	7823      	ldrb	r3, [r4, #0]
 800ab74:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab76:	d10a      	bne.n	800ab8e <_vfiprintf_r+0x156>
 800ab78:	7863      	ldrb	r3, [r4, #1]
 800ab7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab7c:	d132      	bne.n	800abe4 <_vfiprintf_r+0x1ac>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	1d1a      	adds	r2, r3, #4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	9203      	str	r2, [sp, #12]
 800ab86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab8a:	3402      	adds	r4, #2
 800ab8c:	9305      	str	r3, [sp, #20]
 800ab8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac64 <_vfiprintf_r+0x22c>
 800ab92:	7821      	ldrb	r1, [r4, #0]
 800ab94:	2203      	movs	r2, #3
 800ab96:	4650      	mov	r0, sl
 800ab98:	f7f5 fb1a 	bl	80001d0 <memchr>
 800ab9c:	b138      	cbz	r0, 800abae <_vfiprintf_r+0x176>
 800ab9e:	9b04      	ldr	r3, [sp, #16]
 800aba0:	eba0 000a 	sub.w	r0, r0, sl
 800aba4:	2240      	movs	r2, #64	@ 0x40
 800aba6:	4082      	lsls	r2, r0
 800aba8:	4313      	orrs	r3, r2
 800abaa:	3401      	adds	r4, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb2:	4829      	ldr	r0, [pc, #164]	@ (800ac58 <_vfiprintf_r+0x220>)
 800abb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abb8:	2206      	movs	r2, #6
 800abba:	f7f5 fb09 	bl	80001d0 <memchr>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d03f      	beq.n	800ac42 <_vfiprintf_r+0x20a>
 800abc2:	4b26      	ldr	r3, [pc, #152]	@ (800ac5c <_vfiprintf_r+0x224>)
 800abc4:	bb1b      	cbnz	r3, 800ac0e <_vfiprintf_r+0x1d6>
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	3307      	adds	r3, #7
 800abca:	f023 0307 	bic.w	r3, r3, #7
 800abce:	3308      	adds	r3, #8
 800abd0:	9303      	str	r3, [sp, #12]
 800abd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd4:	443b      	add	r3, r7
 800abd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd8:	e76a      	b.n	800aab0 <_vfiprintf_r+0x78>
 800abda:	fb0c 3202 	mla	r2, ip, r2, r3
 800abde:	460c      	mov	r4, r1
 800abe0:	2001      	movs	r0, #1
 800abe2:	e7a8      	b.n	800ab36 <_vfiprintf_r+0xfe>
 800abe4:	2300      	movs	r3, #0
 800abe6:	3401      	adds	r4, #1
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	4619      	mov	r1, r3
 800abec:	f04f 0c0a 	mov.w	ip, #10
 800abf0:	4620      	mov	r0, r4
 800abf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abf6:	3a30      	subs	r2, #48	@ 0x30
 800abf8:	2a09      	cmp	r2, #9
 800abfa:	d903      	bls.n	800ac04 <_vfiprintf_r+0x1cc>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0c6      	beq.n	800ab8e <_vfiprintf_r+0x156>
 800ac00:	9105      	str	r1, [sp, #20]
 800ac02:	e7c4      	b.n	800ab8e <_vfiprintf_r+0x156>
 800ac04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac08:	4604      	mov	r4, r0
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e7f0      	b.n	800abf0 <_vfiprintf_r+0x1b8>
 800ac0e:	ab03      	add	r3, sp, #12
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	462a      	mov	r2, r5
 800ac14:	4b12      	ldr	r3, [pc, #72]	@ (800ac60 <_vfiprintf_r+0x228>)
 800ac16:	a904      	add	r1, sp, #16
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f3af 8000 	nop.w
 800ac1e:	4607      	mov	r7, r0
 800ac20:	1c78      	adds	r0, r7, #1
 800ac22:	d1d6      	bne.n	800abd2 <_vfiprintf_r+0x19a>
 800ac24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac26:	07d9      	lsls	r1, r3, #31
 800ac28:	d405      	bmi.n	800ac36 <_vfiprintf_r+0x1fe>
 800ac2a:	89ab      	ldrh	r3, [r5, #12]
 800ac2c:	059a      	lsls	r2, r3, #22
 800ac2e:	d402      	bmi.n	800ac36 <_vfiprintf_r+0x1fe>
 800ac30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac32:	f7ff fec9 	bl	800a9c8 <__retarget_lock_release_recursive>
 800ac36:	89ab      	ldrh	r3, [r5, #12]
 800ac38:	065b      	lsls	r3, r3, #25
 800ac3a:	f53f af1f 	bmi.w	800aa7c <_vfiprintf_r+0x44>
 800ac3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac40:	e71e      	b.n	800aa80 <_vfiprintf_r+0x48>
 800ac42:	ab03      	add	r3, sp, #12
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	462a      	mov	r2, r5
 800ac48:	4b05      	ldr	r3, [pc, #20]	@ (800ac60 <_vfiprintf_r+0x228>)
 800ac4a:	a904      	add	r1, sp, #16
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f000 f91b 	bl	800ae88 <_printf_i>
 800ac52:	e7e4      	b.n	800ac1e <_vfiprintf_r+0x1e6>
 800ac54:	0800b7b4 	.word	0x0800b7b4
 800ac58:	0800b7be 	.word	0x0800b7be
 800ac5c:	00000000 	.word	0x00000000
 800ac60:	0800aa15 	.word	0x0800aa15
 800ac64:	0800b7ba 	.word	0x0800b7ba

0800ac68 <sbrk_aligned>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4e0f      	ldr	r6, [pc, #60]	@ (800aca8 <sbrk_aligned+0x40>)
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	6831      	ldr	r1, [r6, #0]
 800ac70:	4605      	mov	r5, r0
 800ac72:	b911      	cbnz	r1, 800ac7a <sbrk_aligned+0x12>
 800ac74:	f000 fca4 	bl	800b5c0 <_sbrk_r>
 800ac78:	6030      	str	r0, [r6, #0]
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f000 fc9f 	bl	800b5c0 <_sbrk_r>
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	d103      	bne.n	800ac8e <sbrk_aligned+0x26>
 800ac86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	bd70      	pop	{r4, r5, r6, pc}
 800ac8e:	1cc4      	adds	r4, r0, #3
 800ac90:	f024 0403 	bic.w	r4, r4, #3
 800ac94:	42a0      	cmp	r0, r4
 800ac96:	d0f8      	beq.n	800ac8a <sbrk_aligned+0x22>
 800ac98:	1a21      	subs	r1, r4, r0
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	f000 fc90 	bl	800b5c0 <_sbrk_r>
 800aca0:	3001      	adds	r0, #1
 800aca2:	d1f2      	bne.n	800ac8a <sbrk_aligned+0x22>
 800aca4:	e7ef      	b.n	800ac86 <sbrk_aligned+0x1e>
 800aca6:	bf00      	nop
 800aca8:	20002530 	.word	0x20002530

0800acac <_malloc_r>:
 800acac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb0:	1ccd      	adds	r5, r1, #3
 800acb2:	f025 0503 	bic.w	r5, r5, #3
 800acb6:	3508      	adds	r5, #8
 800acb8:	2d0c      	cmp	r5, #12
 800acba:	bf38      	it	cc
 800acbc:	250c      	movcc	r5, #12
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	4606      	mov	r6, r0
 800acc2:	db01      	blt.n	800acc8 <_malloc_r+0x1c>
 800acc4:	42a9      	cmp	r1, r5
 800acc6:	d904      	bls.n	800acd2 <_malloc_r+0x26>
 800acc8:	230c      	movs	r3, #12
 800acca:	6033      	str	r3, [r6, #0]
 800accc:	2000      	movs	r0, #0
 800acce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ada8 <_malloc_r+0xfc>
 800acd6:	f000 faa3 	bl	800b220 <__malloc_lock>
 800acda:	f8d8 3000 	ldr.w	r3, [r8]
 800acde:	461c      	mov	r4, r3
 800ace0:	bb44      	cbnz	r4, 800ad34 <_malloc_r+0x88>
 800ace2:	4629      	mov	r1, r5
 800ace4:	4630      	mov	r0, r6
 800ace6:	f7ff ffbf 	bl	800ac68 <sbrk_aligned>
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	4604      	mov	r4, r0
 800acee:	d158      	bne.n	800ada2 <_malloc_r+0xf6>
 800acf0:	f8d8 4000 	ldr.w	r4, [r8]
 800acf4:	4627      	mov	r7, r4
 800acf6:	2f00      	cmp	r7, #0
 800acf8:	d143      	bne.n	800ad82 <_malloc_r+0xd6>
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	d04b      	beq.n	800ad96 <_malloc_r+0xea>
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	4639      	mov	r1, r7
 800ad02:	4630      	mov	r0, r6
 800ad04:	eb04 0903 	add.w	r9, r4, r3
 800ad08:	f000 fc5a 	bl	800b5c0 <_sbrk_r>
 800ad0c:	4581      	cmp	r9, r0
 800ad0e:	d142      	bne.n	800ad96 <_malloc_r+0xea>
 800ad10:	6821      	ldr	r1, [r4, #0]
 800ad12:	1a6d      	subs	r5, r5, r1
 800ad14:	4629      	mov	r1, r5
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7ff ffa6 	bl	800ac68 <sbrk_aligned>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d03a      	beq.n	800ad96 <_malloc_r+0xea>
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	442b      	add	r3, r5
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	f8d8 3000 	ldr.w	r3, [r8]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	bb62      	cbnz	r2, 800ad88 <_malloc_r+0xdc>
 800ad2e:	f8c8 7000 	str.w	r7, [r8]
 800ad32:	e00f      	b.n	800ad54 <_malloc_r+0xa8>
 800ad34:	6822      	ldr	r2, [r4, #0]
 800ad36:	1b52      	subs	r2, r2, r5
 800ad38:	d420      	bmi.n	800ad7c <_malloc_r+0xd0>
 800ad3a:	2a0b      	cmp	r2, #11
 800ad3c:	d917      	bls.n	800ad6e <_malloc_r+0xc2>
 800ad3e:	1961      	adds	r1, r4, r5
 800ad40:	42a3      	cmp	r3, r4
 800ad42:	6025      	str	r5, [r4, #0]
 800ad44:	bf18      	it	ne
 800ad46:	6059      	strne	r1, [r3, #4]
 800ad48:	6863      	ldr	r3, [r4, #4]
 800ad4a:	bf08      	it	eq
 800ad4c:	f8c8 1000 	streq.w	r1, [r8]
 800ad50:	5162      	str	r2, [r4, r5]
 800ad52:	604b      	str	r3, [r1, #4]
 800ad54:	4630      	mov	r0, r6
 800ad56:	f000 fa69 	bl	800b22c <__malloc_unlock>
 800ad5a:	f104 000b 	add.w	r0, r4, #11
 800ad5e:	1d23      	adds	r3, r4, #4
 800ad60:	f020 0007 	bic.w	r0, r0, #7
 800ad64:	1ac2      	subs	r2, r0, r3
 800ad66:	bf1c      	itt	ne
 800ad68:	1a1b      	subne	r3, r3, r0
 800ad6a:	50a3      	strne	r3, [r4, r2]
 800ad6c:	e7af      	b.n	800acce <_malloc_r+0x22>
 800ad6e:	6862      	ldr	r2, [r4, #4]
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	bf0c      	ite	eq
 800ad74:	f8c8 2000 	streq.w	r2, [r8]
 800ad78:	605a      	strne	r2, [r3, #4]
 800ad7a:	e7eb      	b.n	800ad54 <_malloc_r+0xa8>
 800ad7c:	4623      	mov	r3, r4
 800ad7e:	6864      	ldr	r4, [r4, #4]
 800ad80:	e7ae      	b.n	800ace0 <_malloc_r+0x34>
 800ad82:	463c      	mov	r4, r7
 800ad84:	687f      	ldr	r7, [r7, #4]
 800ad86:	e7b6      	b.n	800acf6 <_malloc_r+0x4a>
 800ad88:	461a      	mov	r2, r3
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	42a3      	cmp	r3, r4
 800ad8e:	d1fb      	bne.n	800ad88 <_malloc_r+0xdc>
 800ad90:	2300      	movs	r3, #0
 800ad92:	6053      	str	r3, [r2, #4]
 800ad94:	e7de      	b.n	800ad54 <_malloc_r+0xa8>
 800ad96:	230c      	movs	r3, #12
 800ad98:	6033      	str	r3, [r6, #0]
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f000 fa46 	bl	800b22c <__malloc_unlock>
 800ada0:	e794      	b.n	800accc <_malloc_r+0x20>
 800ada2:	6005      	str	r5, [r0, #0]
 800ada4:	e7d6      	b.n	800ad54 <_malloc_r+0xa8>
 800ada6:	bf00      	nop
 800ada8:	20002534 	.word	0x20002534

0800adac <_printf_common>:
 800adac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb0:	4616      	mov	r6, r2
 800adb2:	4698      	mov	r8, r3
 800adb4:	688a      	ldr	r2, [r1, #8]
 800adb6:	690b      	ldr	r3, [r1, #16]
 800adb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	bfb8      	it	lt
 800adc0:	4613      	movlt	r3, r2
 800adc2:	6033      	str	r3, [r6, #0]
 800adc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adc8:	4607      	mov	r7, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	b10a      	cbz	r2, 800add2 <_printf_common+0x26>
 800adce:	3301      	adds	r3, #1
 800add0:	6033      	str	r3, [r6, #0]
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	0699      	lsls	r1, r3, #26
 800add6:	bf42      	ittt	mi
 800add8:	6833      	ldrmi	r3, [r6, #0]
 800adda:	3302      	addmi	r3, #2
 800addc:	6033      	strmi	r3, [r6, #0]
 800adde:	6825      	ldr	r5, [r4, #0]
 800ade0:	f015 0506 	ands.w	r5, r5, #6
 800ade4:	d106      	bne.n	800adf4 <_printf_common+0x48>
 800ade6:	f104 0a19 	add.w	sl, r4, #25
 800adea:	68e3      	ldr	r3, [r4, #12]
 800adec:	6832      	ldr	r2, [r6, #0]
 800adee:	1a9b      	subs	r3, r3, r2
 800adf0:	42ab      	cmp	r3, r5
 800adf2:	dc26      	bgt.n	800ae42 <_printf_common+0x96>
 800adf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	3b00      	subs	r3, #0
 800adfc:	bf18      	it	ne
 800adfe:	2301      	movne	r3, #1
 800ae00:	0692      	lsls	r2, r2, #26
 800ae02:	d42b      	bmi.n	800ae5c <_printf_common+0xb0>
 800ae04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae08:	4641      	mov	r1, r8
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	47c8      	blx	r9
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d01e      	beq.n	800ae50 <_printf_common+0xa4>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	6922      	ldr	r2, [r4, #16]
 800ae16:	f003 0306 	and.w	r3, r3, #6
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	bf02      	ittt	eq
 800ae1e:	68e5      	ldreq	r5, [r4, #12]
 800ae20:	6833      	ldreq	r3, [r6, #0]
 800ae22:	1aed      	subeq	r5, r5, r3
 800ae24:	68a3      	ldr	r3, [r4, #8]
 800ae26:	bf0c      	ite	eq
 800ae28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae2c:	2500      	movne	r5, #0
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	bfc4      	itt	gt
 800ae32:	1a9b      	subgt	r3, r3, r2
 800ae34:	18ed      	addgt	r5, r5, r3
 800ae36:	2600      	movs	r6, #0
 800ae38:	341a      	adds	r4, #26
 800ae3a:	42b5      	cmp	r5, r6
 800ae3c:	d11a      	bne.n	800ae74 <_printf_common+0xc8>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	e008      	b.n	800ae54 <_printf_common+0xa8>
 800ae42:	2301      	movs	r3, #1
 800ae44:	4652      	mov	r2, sl
 800ae46:	4641      	mov	r1, r8
 800ae48:	4638      	mov	r0, r7
 800ae4a:	47c8      	blx	r9
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d103      	bne.n	800ae58 <_printf_common+0xac>
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	3501      	adds	r5, #1
 800ae5a:	e7c6      	b.n	800adea <_printf_common+0x3e>
 800ae5c:	18e1      	adds	r1, r4, r3
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	2030      	movs	r0, #48	@ 0x30
 800ae62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae66:	4422      	add	r2, r4
 800ae68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae70:	3302      	adds	r3, #2
 800ae72:	e7c7      	b.n	800ae04 <_printf_common+0x58>
 800ae74:	2301      	movs	r3, #1
 800ae76:	4622      	mov	r2, r4
 800ae78:	4641      	mov	r1, r8
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	47c8      	blx	r9
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d0e6      	beq.n	800ae50 <_printf_common+0xa4>
 800ae82:	3601      	adds	r6, #1
 800ae84:	e7d9      	b.n	800ae3a <_printf_common+0x8e>
	...

0800ae88 <_printf_i>:
 800ae88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	7e0f      	ldrb	r7, [r1, #24]
 800ae8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae90:	2f78      	cmp	r7, #120	@ 0x78
 800ae92:	4691      	mov	r9, r2
 800ae94:	4680      	mov	r8, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	469a      	mov	sl, r3
 800ae9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae9e:	d807      	bhi.n	800aeb0 <_printf_i+0x28>
 800aea0:	2f62      	cmp	r7, #98	@ 0x62
 800aea2:	d80a      	bhi.n	800aeba <_printf_i+0x32>
 800aea4:	2f00      	cmp	r7, #0
 800aea6:	f000 80d2 	beq.w	800b04e <_printf_i+0x1c6>
 800aeaa:	2f58      	cmp	r7, #88	@ 0x58
 800aeac:	f000 80b9 	beq.w	800b022 <_printf_i+0x19a>
 800aeb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aeb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aeb8:	e03a      	b.n	800af30 <_printf_i+0xa8>
 800aeba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aebe:	2b15      	cmp	r3, #21
 800aec0:	d8f6      	bhi.n	800aeb0 <_printf_i+0x28>
 800aec2:	a101      	add	r1, pc, #4	@ (adr r1, 800aec8 <_printf_i+0x40>)
 800aec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aec8:	0800af21 	.word	0x0800af21
 800aecc:	0800af35 	.word	0x0800af35
 800aed0:	0800aeb1 	.word	0x0800aeb1
 800aed4:	0800aeb1 	.word	0x0800aeb1
 800aed8:	0800aeb1 	.word	0x0800aeb1
 800aedc:	0800aeb1 	.word	0x0800aeb1
 800aee0:	0800af35 	.word	0x0800af35
 800aee4:	0800aeb1 	.word	0x0800aeb1
 800aee8:	0800aeb1 	.word	0x0800aeb1
 800aeec:	0800aeb1 	.word	0x0800aeb1
 800aef0:	0800aeb1 	.word	0x0800aeb1
 800aef4:	0800b035 	.word	0x0800b035
 800aef8:	0800af5f 	.word	0x0800af5f
 800aefc:	0800afef 	.word	0x0800afef
 800af00:	0800aeb1 	.word	0x0800aeb1
 800af04:	0800aeb1 	.word	0x0800aeb1
 800af08:	0800b057 	.word	0x0800b057
 800af0c:	0800aeb1 	.word	0x0800aeb1
 800af10:	0800af5f 	.word	0x0800af5f
 800af14:	0800aeb1 	.word	0x0800aeb1
 800af18:	0800aeb1 	.word	0x0800aeb1
 800af1c:	0800aff7 	.word	0x0800aff7
 800af20:	6833      	ldr	r3, [r6, #0]
 800af22:	1d1a      	adds	r2, r3, #4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6032      	str	r2, [r6, #0]
 800af28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af30:	2301      	movs	r3, #1
 800af32:	e09d      	b.n	800b070 <_printf_i+0x1e8>
 800af34:	6833      	ldr	r3, [r6, #0]
 800af36:	6820      	ldr	r0, [r4, #0]
 800af38:	1d19      	adds	r1, r3, #4
 800af3a:	6031      	str	r1, [r6, #0]
 800af3c:	0606      	lsls	r6, r0, #24
 800af3e:	d501      	bpl.n	800af44 <_printf_i+0xbc>
 800af40:	681d      	ldr	r5, [r3, #0]
 800af42:	e003      	b.n	800af4c <_printf_i+0xc4>
 800af44:	0645      	lsls	r5, r0, #25
 800af46:	d5fb      	bpl.n	800af40 <_printf_i+0xb8>
 800af48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af4c:	2d00      	cmp	r5, #0
 800af4e:	da03      	bge.n	800af58 <_printf_i+0xd0>
 800af50:	232d      	movs	r3, #45	@ 0x2d
 800af52:	426d      	negs	r5, r5
 800af54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af58:	4859      	ldr	r0, [pc, #356]	@ (800b0c0 <_printf_i+0x238>)
 800af5a:	230a      	movs	r3, #10
 800af5c:	e011      	b.n	800af82 <_printf_i+0xfa>
 800af5e:	6821      	ldr	r1, [r4, #0]
 800af60:	6833      	ldr	r3, [r6, #0]
 800af62:	0608      	lsls	r0, r1, #24
 800af64:	f853 5b04 	ldr.w	r5, [r3], #4
 800af68:	d402      	bmi.n	800af70 <_printf_i+0xe8>
 800af6a:	0649      	lsls	r1, r1, #25
 800af6c:	bf48      	it	mi
 800af6e:	b2ad      	uxthmi	r5, r5
 800af70:	2f6f      	cmp	r7, #111	@ 0x6f
 800af72:	4853      	ldr	r0, [pc, #332]	@ (800b0c0 <_printf_i+0x238>)
 800af74:	6033      	str	r3, [r6, #0]
 800af76:	bf14      	ite	ne
 800af78:	230a      	movne	r3, #10
 800af7a:	2308      	moveq	r3, #8
 800af7c:	2100      	movs	r1, #0
 800af7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af82:	6866      	ldr	r6, [r4, #4]
 800af84:	60a6      	str	r6, [r4, #8]
 800af86:	2e00      	cmp	r6, #0
 800af88:	bfa2      	ittt	ge
 800af8a:	6821      	ldrge	r1, [r4, #0]
 800af8c:	f021 0104 	bicge.w	r1, r1, #4
 800af90:	6021      	strge	r1, [r4, #0]
 800af92:	b90d      	cbnz	r5, 800af98 <_printf_i+0x110>
 800af94:	2e00      	cmp	r6, #0
 800af96:	d04b      	beq.n	800b030 <_printf_i+0x1a8>
 800af98:	4616      	mov	r6, r2
 800af9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800af9e:	fb03 5711 	mls	r7, r3, r1, r5
 800afa2:	5dc7      	ldrb	r7, [r0, r7]
 800afa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800afa8:	462f      	mov	r7, r5
 800afaa:	42bb      	cmp	r3, r7
 800afac:	460d      	mov	r5, r1
 800afae:	d9f4      	bls.n	800af9a <_printf_i+0x112>
 800afb0:	2b08      	cmp	r3, #8
 800afb2:	d10b      	bne.n	800afcc <_printf_i+0x144>
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	07df      	lsls	r7, r3, #31
 800afb8:	d508      	bpl.n	800afcc <_printf_i+0x144>
 800afba:	6923      	ldr	r3, [r4, #16]
 800afbc:	6861      	ldr	r1, [r4, #4]
 800afbe:	4299      	cmp	r1, r3
 800afc0:	bfde      	ittt	le
 800afc2:	2330      	movle	r3, #48	@ 0x30
 800afc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afc8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800afcc:	1b92      	subs	r2, r2, r6
 800afce:	6122      	str	r2, [r4, #16]
 800afd0:	f8cd a000 	str.w	sl, [sp]
 800afd4:	464b      	mov	r3, r9
 800afd6:	aa03      	add	r2, sp, #12
 800afd8:	4621      	mov	r1, r4
 800afda:	4640      	mov	r0, r8
 800afdc:	f7ff fee6 	bl	800adac <_printf_common>
 800afe0:	3001      	adds	r0, #1
 800afe2:	d14a      	bne.n	800b07a <_printf_i+0x1f2>
 800afe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afe8:	b004      	add	sp, #16
 800afea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	f043 0320 	orr.w	r3, r3, #32
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	4833      	ldr	r0, [pc, #204]	@ (800b0c4 <_printf_i+0x23c>)
 800aff8:	2778      	movs	r7, #120	@ 0x78
 800affa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	6831      	ldr	r1, [r6, #0]
 800b002:	061f      	lsls	r7, r3, #24
 800b004:	f851 5b04 	ldr.w	r5, [r1], #4
 800b008:	d402      	bmi.n	800b010 <_printf_i+0x188>
 800b00a:	065f      	lsls	r7, r3, #25
 800b00c:	bf48      	it	mi
 800b00e:	b2ad      	uxthmi	r5, r5
 800b010:	6031      	str	r1, [r6, #0]
 800b012:	07d9      	lsls	r1, r3, #31
 800b014:	bf44      	itt	mi
 800b016:	f043 0320 	orrmi.w	r3, r3, #32
 800b01a:	6023      	strmi	r3, [r4, #0]
 800b01c:	b11d      	cbz	r5, 800b026 <_printf_i+0x19e>
 800b01e:	2310      	movs	r3, #16
 800b020:	e7ac      	b.n	800af7c <_printf_i+0xf4>
 800b022:	4827      	ldr	r0, [pc, #156]	@ (800b0c0 <_printf_i+0x238>)
 800b024:	e7e9      	b.n	800affa <_printf_i+0x172>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	f023 0320 	bic.w	r3, r3, #32
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	e7f6      	b.n	800b01e <_printf_i+0x196>
 800b030:	4616      	mov	r6, r2
 800b032:	e7bd      	b.n	800afb0 <_printf_i+0x128>
 800b034:	6833      	ldr	r3, [r6, #0]
 800b036:	6825      	ldr	r5, [r4, #0]
 800b038:	6961      	ldr	r1, [r4, #20]
 800b03a:	1d18      	adds	r0, r3, #4
 800b03c:	6030      	str	r0, [r6, #0]
 800b03e:	062e      	lsls	r6, r5, #24
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	d501      	bpl.n	800b048 <_printf_i+0x1c0>
 800b044:	6019      	str	r1, [r3, #0]
 800b046:	e002      	b.n	800b04e <_printf_i+0x1c6>
 800b048:	0668      	lsls	r0, r5, #25
 800b04a:	d5fb      	bpl.n	800b044 <_printf_i+0x1bc>
 800b04c:	8019      	strh	r1, [r3, #0]
 800b04e:	2300      	movs	r3, #0
 800b050:	6123      	str	r3, [r4, #16]
 800b052:	4616      	mov	r6, r2
 800b054:	e7bc      	b.n	800afd0 <_printf_i+0x148>
 800b056:	6833      	ldr	r3, [r6, #0]
 800b058:	1d1a      	adds	r2, r3, #4
 800b05a:	6032      	str	r2, [r6, #0]
 800b05c:	681e      	ldr	r6, [r3, #0]
 800b05e:	6862      	ldr	r2, [r4, #4]
 800b060:	2100      	movs	r1, #0
 800b062:	4630      	mov	r0, r6
 800b064:	f7f5 f8b4 	bl	80001d0 <memchr>
 800b068:	b108      	cbz	r0, 800b06e <_printf_i+0x1e6>
 800b06a:	1b80      	subs	r0, r0, r6
 800b06c:	6060      	str	r0, [r4, #4]
 800b06e:	6863      	ldr	r3, [r4, #4]
 800b070:	6123      	str	r3, [r4, #16]
 800b072:	2300      	movs	r3, #0
 800b074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b078:	e7aa      	b.n	800afd0 <_printf_i+0x148>
 800b07a:	6923      	ldr	r3, [r4, #16]
 800b07c:	4632      	mov	r2, r6
 800b07e:	4649      	mov	r1, r9
 800b080:	4640      	mov	r0, r8
 800b082:	47d0      	blx	sl
 800b084:	3001      	adds	r0, #1
 800b086:	d0ad      	beq.n	800afe4 <_printf_i+0x15c>
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	079b      	lsls	r3, r3, #30
 800b08c:	d413      	bmi.n	800b0b6 <_printf_i+0x22e>
 800b08e:	68e0      	ldr	r0, [r4, #12]
 800b090:	9b03      	ldr	r3, [sp, #12]
 800b092:	4298      	cmp	r0, r3
 800b094:	bfb8      	it	lt
 800b096:	4618      	movlt	r0, r3
 800b098:	e7a6      	b.n	800afe8 <_printf_i+0x160>
 800b09a:	2301      	movs	r3, #1
 800b09c:	4632      	mov	r2, r6
 800b09e:	4649      	mov	r1, r9
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	47d0      	blx	sl
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d09d      	beq.n	800afe4 <_printf_i+0x15c>
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	68e3      	ldr	r3, [r4, #12]
 800b0ac:	9903      	ldr	r1, [sp, #12]
 800b0ae:	1a5b      	subs	r3, r3, r1
 800b0b0:	42ab      	cmp	r3, r5
 800b0b2:	dcf2      	bgt.n	800b09a <_printf_i+0x212>
 800b0b4:	e7eb      	b.n	800b08e <_printf_i+0x206>
 800b0b6:	2500      	movs	r5, #0
 800b0b8:	f104 0619 	add.w	r6, r4, #25
 800b0bc:	e7f5      	b.n	800b0aa <_printf_i+0x222>
 800b0be:	bf00      	nop
 800b0c0:	0800b7c5 	.word	0x0800b7c5
 800b0c4:	0800b7d6 	.word	0x0800b7d6

0800b0c8 <__sflush_r>:
 800b0c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d0:	0716      	lsls	r6, r2, #28
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	460c      	mov	r4, r1
 800b0d6:	d454      	bmi.n	800b182 <__sflush_r+0xba>
 800b0d8:	684b      	ldr	r3, [r1, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dc02      	bgt.n	800b0e4 <__sflush_r+0x1c>
 800b0de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dd48      	ble.n	800b176 <__sflush_r+0xae>
 800b0e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0e6:	2e00      	cmp	r6, #0
 800b0e8:	d045      	beq.n	800b176 <__sflush_r+0xae>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0f0:	682f      	ldr	r7, [r5, #0]
 800b0f2:	6a21      	ldr	r1, [r4, #32]
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	d030      	beq.n	800b15a <__sflush_r+0x92>
 800b0f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	0759      	lsls	r1, r3, #29
 800b0fe:	d505      	bpl.n	800b10c <__sflush_r+0x44>
 800b100:	6863      	ldr	r3, [r4, #4]
 800b102:	1ad2      	subs	r2, r2, r3
 800b104:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b106:	b10b      	cbz	r3, 800b10c <__sflush_r+0x44>
 800b108:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b10a:	1ad2      	subs	r2, r2, r3
 800b10c:	2300      	movs	r3, #0
 800b10e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b110:	6a21      	ldr	r1, [r4, #32]
 800b112:	4628      	mov	r0, r5
 800b114:	47b0      	blx	r6
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	d106      	bne.n	800b12a <__sflush_r+0x62>
 800b11c:	6829      	ldr	r1, [r5, #0]
 800b11e:	291d      	cmp	r1, #29
 800b120:	d82b      	bhi.n	800b17a <__sflush_r+0xb2>
 800b122:	4a2a      	ldr	r2, [pc, #168]	@ (800b1cc <__sflush_r+0x104>)
 800b124:	410a      	asrs	r2, r1
 800b126:	07d6      	lsls	r6, r2, #31
 800b128:	d427      	bmi.n	800b17a <__sflush_r+0xb2>
 800b12a:	2200      	movs	r2, #0
 800b12c:	6062      	str	r2, [r4, #4]
 800b12e:	04d9      	lsls	r1, r3, #19
 800b130:	6922      	ldr	r2, [r4, #16]
 800b132:	6022      	str	r2, [r4, #0]
 800b134:	d504      	bpl.n	800b140 <__sflush_r+0x78>
 800b136:	1c42      	adds	r2, r0, #1
 800b138:	d101      	bne.n	800b13e <__sflush_r+0x76>
 800b13a:	682b      	ldr	r3, [r5, #0]
 800b13c:	b903      	cbnz	r3, 800b140 <__sflush_r+0x78>
 800b13e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b142:	602f      	str	r7, [r5, #0]
 800b144:	b1b9      	cbz	r1, 800b176 <__sflush_r+0xae>
 800b146:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b14a:	4299      	cmp	r1, r3
 800b14c:	d002      	beq.n	800b154 <__sflush_r+0x8c>
 800b14e:	4628      	mov	r0, r5
 800b150:	f000 fa58 	bl	800b604 <_free_r>
 800b154:	2300      	movs	r3, #0
 800b156:	6363      	str	r3, [r4, #52]	@ 0x34
 800b158:	e00d      	b.n	800b176 <__sflush_r+0xae>
 800b15a:	2301      	movs	r3, #1
 800b15c:	4628      	mov	r0, r5
 800b15e:	47b0      	blx	r6
 800b160:	4602      	mov	r2, r0
 800b162:	1c50      	adds	r0, r2, #1
 800b164:	d1c9      	bne.n	800b0fa <__sflush_r+0x32>
 800b166:	682b      	ldr	r3, [r5, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d0c6      	beq.n	800b0fa <__sflush_r+0x32>
 800b16c:	2b1d      	cmp	r3, #29
 800b16e:	d001      	beq.n	800b174 <__sflush_r+0xac>
 800b170:	2b16      	cmp	r3, #22
 800b172:	d11e      	bne.n	800b1b2 <__sflush_r+0xea>
 800b174:	602f      	str	r7, [r5, #0]
 800b176:	2000      	movs	r0, #0
 800b178:	e022      	b.n	800b1c0 <__sflush_r+0xf8>
 800b17a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b17e:	b21b      	sxth	r3, r3
 800b180:	e01b      	b.n	800b1ba <__sflush_r+0xf2>
 800b182:	690f      	ldr	r7, [r1, #16]
 800b184:	2f00      	cmp	r7, #0
 800b186:	d0f6      	beq.n	800b176 <__sflush_r+0xae>
 800b188:	0793      	lsls	r3, r2, #30
 800b18a:	680e      	ldr	r6, [r1, #0]
 800b18c:	bf08      	it	eq
 800b18e:	694b      	ldreq	r3, [r1, #20]
 800b190:	600f      	str	r7, [r1, #0]
 800b192:	bf18      	it	ne
 800b194:	2300      	movne	r3, #0
 800b196:	eba6 0807 	sub.w	r8, r6, r7
 800b19a:	608b      	str	r3, [r1, #8]
 800b19c:	f1b8 0f00 	cmp.w	r8, #0
 800b1a0:	dde9      	ble.n	800b176 <__sflush_r+0xae>
 800b1a2:	6a21      	ldr	r1, [r4, #32]
 800b1a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1a6:	4643      	mov	r3, r8
 800b1a8:	463a      	mov	r2, r7
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	47b0      	blx	r6
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	dc08      	bgt.n	800b1c4 <__sflush_r+0xfc>
 800b1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c4:	4407      	add	r7, r0
 800b1c6:	eba8 0800 	sub.w	r8, r8, r0
 800b1ca:	e7e7      	b.n	800b19c <__sflush_r+0xd4>
 800b1cc:	dfbffffe 	.word	0xdfbffffe

0800b1d0 <_fflush_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	690b      	ldr	r3, [r1, #16]
 800b1d4:	4605      	mov	r5, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	b913      	cbnz	r3, 800b1e0 <_fflush_r+0x10>
 800b1da:	2500      	movs	r5, #0
 800b1dc:	4628      	mov	r0, r5
 800b1de:	bd38      	pop	{r3, r4, r5, pc}
 800b1e0:	b118      	cbz	r0, 800b1ea <_fflush_r+0x1a>
 800b1e2:	6a03      	ldr	r3, [r0, #32]
 800b1e4:	b90b      	cbnz	r3, 800b1ea <_fflush_r+0x1a>
 800b1e6:	f7ff fb6b 	bl	800a8c0 <__sinit>
 800b1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0f3      	beq.n	800b1da <_fflush_r+0xa>
 800b1f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1f4:	07d0      	lsls	r0, r2, #31
 800b1f6:	d404      	bmi.n	800b202 <_fflush_r+0x32>
 800b1f8:	0599      	lsls	r1, r3, #22
 800b1fa:	d402      	bmi.n	800b202 <_fflush_r+0x32>
 800b1fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1fe:	f7ff fbe2 	bl	800a9c6 <__retarget_lock_acquire_recursive>
 800b202:	4628      	mov	r0, r5
 800b204:	4621      	mov	r1, r4
 800b206:	f7ff ff5f 	bl	800b0c8 <__sflush_r>
 800b20a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b20c:	07da      	lsls	r2, r3, #31
 800b20e:	4605      	mov	r5, r0
 800b210:	d4e4      	bmi.n	800b1dc <_fflush_r+0xc>
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	059b      	lsls	r3, r3, #22
 800b216:	d4e1      	bmi.n	800b1dc <_fflush_r+0xc>
 800b218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b21a:	f7ff fbd5 	bl	800a9c8 <__retarget_lock_release_recursive>
 800b21e:	e7dd      	b.n	800b1dc <_fflush_r+0xc>

0800b220 <__malloc_lock>:
 800b220:	4801      	ldr	r0, [pc, #4]	@ (800b228 <__malloc_lock+0x8>)
 800b222:	f7ff bbd0 	b.w	800a9c6 <__retarget_lock_acquire_recursive>
 800b226:	bf00      	nop
 800b228:	2000252c 	.word	0x2000252c

0800b22c <__malloc_unlock>:
 800b22c:	4801      	ldr	r0, [pc, #4]	@ (800b234 <__malloc_unlock+0x8>)
 800b22e:	f7ff bbcb 	b.w	800a9c8 <__retarget_lock_release_recursive>
 800b232:	bf00      	nop
 800b234:	2000252c 	.word	0x2000252c

0800b238 <__sread>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	460c      	mov	r4, r1
 800b23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b240:	f000 f9ac 	bl	800b59c <_read_r>
 800b244:	2800      	cmp	r0, #0
 800b246:	bfab      	itete	ge
 800b248:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b24a:	89a3      	ldrhlt	r3, [r4, #12]
 800b24c:	181b      	addge	r3, r3, r0
 800b24e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b252:	bfac      	ite	ge
 800b254:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b256:	81a3      	strhlt	r3, [r4, #12]
 800b258:	bd10      	pop	{r4, pc}

0800b25a <__swrite>:
 800b25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25e:	461f      	mov	r7, r3
 800b260:	898b      	ldrh	r3, [r1, #12]
 800b262:	05db      	lsls	r3, r3, #23
 800b264:	4605      	mov	r5, r0
 800b266:	460c      	mov	r4, r1
 800b268:	4616      	mov	r6, r2
 800b26a:	d505      	bpl.n	800b278 <__swrite+0x1e>
 800b26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b270:	2302      	movs	r3, #2
 800b272:	2200      	movs	r2, #0
 800b274:	f000 f980 	bl	800b578 <_lseek_r>
 800b278:	89a3      	ldrh	r3, [r4, #12]
 800b27a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b27e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b282:	81a3      	strh	r3, [r4, #12]
 800b284:	4632      	mov	r2, r6
 800b286:	463b      	mov	r3, r7
 800b288:	4628      	mov	r0, r5
 800b28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b28e:	f000 b9a7 	b.w	800b5e0 <_write_r>

0800b292 <__sseek>:
 800b292:	b510      	push	{r4, lr}
 800b294:	460c      	mov	r4, r1
 800b296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b29a:	f000 f96d 	bl	800b578 <_lseek_r>
 800b29e:	1c43      	adds	r3, r0, #1
 800b2a0:	89a3      	ldrh	r3, [r4, #12]
 800b2a2:	bf15      	itete	ne
 800b2a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b2a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b2aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b2ae:	81a3      	strheq	r3, [r4, #12]
 800b2b0:	bf18      	it	ne
 800b2b2:	81a3      	strhne	r3, [r4, #12]
 800b2b4:	bd10      	pop	{r4, pc}

0800b2b6 <__sclose>:
 800b2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ba:	f000 b92b 	b.w	800b514 <_close_r>

0800b2be <__swbuf_r>:
 800b2be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c0:	460e      	mov	r6, r1
 800b2c2:	4614      	mov	r4, r2
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	b118      	cbz	r0, 800b2d0 <__swbuf_r+0x12>
 800b2c8:	6a03      	ldr	r3, [r0, #32]
 800b2ca:	b90b      	cbnz	r3, 800b2d0 <__swbuf_r+0x12>
 800b2cc:	f7ff faf8 	bl	800a8c0 <__sinit>
 800b2d0:	69a3      	ldr	r3, [r4, #24]
 800b2d2:	60a3      	str	r3, [r4, #8]
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	071a      	lsls	r2, r3, #28
 800b2d8:	d501      	bpl.n	800b2de <__swbuf_r+0x20>
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	b943      	cbnz	r3, 800b2f0 <__swbuf_r+0x32>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f000 f82b 	bl	800b33c <__swsetup_r>
 800b2e6:	b118      	cbz	r0, 800b2f0 <__swbuf_r+0x32>
 800b2e8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	6922      	ldr	r2, [r4, #16]
 800b2f4:	1a98      	subs	r0, r3, r2
 800b2f6:	6963      	ldr	r3, [r4, #20]
 800b2f8:	b2f6      	uxtb	r6, r6
 800b2fa:	4283      	cmp	r3, r0
 800b2fc:	4637      	mov	r7, r6
 800b2fe:	dc05      	bgt.n	800b30c <__swbuf_r+0x4e>
 800b300:	4621      	mov	r1, r4
 800b302:	4628      	mov	r0, r5
 800b304:	f7ff ff64 	bl	800b1d0 <_fflush_r>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d1ed      	bne.n	800b2e8 <__swbuf_r+0x2a>
 800b30c:	68a3      	ldr	r3, [r4, #8]
 800b30e:	3b01      	subs	r3, #1
 800b310:	60a3      	str	r3, [r4, #8]
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	6022      	str	r2, [r4, #0]
 800b318:	701e      	strb	r6, [r3, #0]
 800b31a:	6962      	ldr	r2, [r4, #20]
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	429a      	cmp	r2, r3
 800b320:	d004      	beq.n	800b32c <__swbuf_r+0x6e>
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	07db      	lsls	r3, r3, #31
 800b326:	d5e1      	bpl.n	800b2ec <__swbuf_r+0x2e>
 800b328:	2e0a      	cmp	r6, #10
 800b32a:	d1df      	bne.n	800b2ec <__swbuf_r+0x2e>
 800b32c:	4621      	mov	r1, r4
 800b32e:	4628      	mov	r0, r5
 800b330:	f7ff ff4e 	bl	800b1d0 <_fflush_r>
 800b334:	2800      	cmp	r0, #0
 800b336:	d0d9      	beq.n	800b2ec <__swbuf_r+0x2e>
 800b338:	e7d6      	b.n	800b2e8 <__swbuf_r+0x2a>
	...

0800b33c <__swsetup_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4b29      	ldr	r3, [pc, #164]	@ (800b3e4 <__swsetup_r+0xa8>)
 800b340:	4605      	mov	r5, r0
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	460c      	mov	r4, r1
 800b346:	b118      	cbz	r0, 800b350 <__swsetup_r+0x14>
 800b348:	6a03      	ldr	r3, [r0, #32]
 800b34a:	b90b      	cbnz	r3, 800b350 <__swsetup_r+0x14>
 800b34c:	f7ff fab8 	bl	800a8c0 <__sinit>
 800b350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b354:	0719      	lsls	r1, r3, #28
 800b356:	d422      	bmi.n	800b39e <__swsetup_r+0x62>
 800b358:	06da      	lsls	r2, r3, #27
 800b35a:	d407      	bmi.n	800b36c <__swsetup_r+0x30>
 800b35c:	2209      	movs	r2, #9
 800b35e:	602a      	str	r2, [r5, #0]
 800b360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b36a:	e033      	b.n	800b3d4 <__swsetup_r+0x98>
 800b36c:	0758      	lsls	r0, r3, #29
 800b36e:	d512      	bpl.n	800b396 <__swsetup_r+0x5a>
 800b370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b372:	b141      	cbz	r1, 800b386 <__swsetup_r+0x4a>
 800b374:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b378:	4299      	cmp	r1, r3
 800b37a:	d002      	beq.n	800b382 <__swsetup_r+0x46>
 800b37c:	4628      	mov	r0, r5
 800b37e:	f000 f941 	bl	800b604 <_free_r>
 800b382:	2300      	movs	r3, #0
 800b384:	6363      	str	r3, [r4, #52]	@ 0x34
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b38c:	81a3      	strh	r3, [r4, #12]
 800b38e:	2300      	movs	r3, #0
 800b390:	6063      	str	r3, [r4, #4]
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	f043 0308 	orr.w	r3, r3, #8
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	6923      	ldr	r3, [r4, #16]
 800b3a0:	b94b      	cbnz	r3, 800b3b6 <__swsetup_r+0x7a>
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b3a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3ac:	d003      	beq.n	800b3b6 <__swsetup_r+0x7a>
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	f000 f83f 	bl	800b434 <__smakebuf_r>
 800b3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ba:	f013 0201 	ands.w	r2, r3, #1
 800b3be:	d00a      	beq.n	800b3d6 <__swsetup_r+0x9a>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	60a2      	str	r2, [r4, #8]
 800b3c4:	6962      	ldr	r2, [r4, #20]
 800b3c6:	4252      	negs	r2, r2
 800b3c8:	61a2      	str	r2, [r4, #24]
 800b3ca:	6922      	ldr	r2, [r4, #16]
 800b3cc:	b942      	cbnz	r2, 800b3e0 <__swsetup_r+0xa4>
 800b3ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b3d2:	d1c5      	bne.n	800b360 <__swsetup_r+0x24>
 800b3d4:	bd38      	pop	{r3, r4, r5, pc}
 800b3d6:	0799      	lsls	r1, r3, #30
 800b3d8:	bf58      	it	pl
 800b3da:	6962      	ldrpl	r2, [r4, #20]
 800b3dc:	60a2      	str	r2, [r4, #8]
 800b3de:	e7f4      	b.n	800b3ca <__swsetup_r+0x8e>
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e7f7      	b.n	800b3d4 <__swsetup_r+0x98>
 800b3e4:	2000001c 	.word	0x2000001c

0800b3e8 <__swhatbuf_r>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f0:	2900      	cmp	r1, #0
 800b3f2:	b096      	sub	sp, #88	@ 0x58
 800b3f4:	4615      	mov	r5, r2
 800b3f6:	461e      	mov	r6, r3
 800b3f8:	da0d      	bge.n	800b416 <__swhatbuf_r+0x2e>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b400:	f04f 0100 	mov.w	r1, #0
 800b404:	bf14      	ite	ne
 800b406:	2340      	movne	r3, #64	@ 0x40
 800b408:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b40c:	2000      	movs	r0, #0
 800b40e:	6031      	str	r1, [r6, #0]
 800b410:	602b      	str	r3, [r5, #0]
 800b412:	b016      	add	sp, #88	@ 0x58
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	466a      	mov	r2, sp
 800b418:	f000 f88c 	bl	800b534 <_fstat_r>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	dbec      	blt.n	800b3fa <__swhatbuf_r+0x12>
 800b420:	9901      	ldr	r1, [sp, #4]
 800b422:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b426:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b42a:	4259      	negs	r1, r3
 800b42c:	4159      	adcs	r1, r3
 800b42e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b432:	e7eb      	b.n	800b40c <__swhatbuf_r+0x24>

0800b434 <__smakebuf_r>:
 800b434:	898b      	ldrh	r3, [r1, #12]
 800b436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b438:	079d      	lsls	r5, r3, #30
 800b43a:	4606      	mov	r6, r0
 800b43c:	460c      	mov	r4, r1
 800b43e:	d507      	bpl.n	800b450 <__smakebuf_r+0x1c>
 800b440:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	6123      	str	r3, [r4, #16]
 800b448:	2301      	movs	r3, #1
 800b44a:	6163      	str	r3, [r4, #20]
 800b44c:	b003      	add	sp, #12
 800b44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b450:	ab01      	add	r3, sp, #4
 800b452:	466a      	mov	r2, sp
 800b454:	f7ff ffc8 	bl	800b3e8 <__swhatbuf_r>
 800b458:	9f00      	ldr	r7, [sp, #0]
 800b45a:	4605      	mov	r5, r0
 800b45c:	4639      	mov	r1, r7
 800b45e:	4630      	mov	r0, r6
 800b460:	f7ff fc24 	bl	800acac <_malloc_r>
 800b464:	b948      	cbnz	r0, 800b47a <__smakebuf_r+0x46>
 800b466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46a:	059a      	lsls	r2, r3, #22
 800b46c:	d4ee      	bmi.n	800b44c <__smakebuf_r+0x18>
 800b46e:	f023 0303 	bic.w	r3, r3, #3
 800b472:	f043 0302 	orr.w	r3, r3, #2
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	e7e2      	b.n	800b440 <__smakebuf_r+0xc>
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	6020      	str	r0, [r4, #0]
 800b47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b482:	81a3      	strh	r3, [r4, #12]
 800b484:	9b01      	ldr	r3, [sp, #4]
 800b486:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b48a:	b15b      	cbz	r3, 800b4a4 <__smakebuf_r+0x70>
 800b48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b490:	4630      	mov	r0, r6
 800b492:	f000 f861 	bl	800b558 <_isatty_r>
 800b496:	b128      	cbz	r0, 800b4a4 <__smakebuf_r+0x70>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f023 0303 	bic.w	r3, r3, #3
 800b49e:	f043 0301 	orr.w	r3, r3, #1
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	431d      	orrs	r5, r3
 800b4a8:	81a5      	strh	r5, [r4, #12]
 800b4aa:	e7cf      	b.n	800b44c <__smakebuf_r+0x18>

0800b4ac <_putc_r>:
 800b4ac:	b570      	push	{r4, r5, r6, lr}
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	4614      	mov	r4, r2
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	b118      	cbz	r0, 800b4be <_putc_r+0x12>
 800b4b6:	6a03      	ldr	r3, [r0, #32]
 800b4b8:	b90b      	cbnz	r3, 800b4be <_putc_r+0x12>
 800b4ba:	f7ff fa01 	bl	800a8c0 <__sinit>
 800b4be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4c0:	07d8      	lsls	r0, r3, #31
 800b4c2:	d405      	bmi.n	800b4d0 <_putc_r+0x24>
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	0599      	lsls	r1, r3, #22
 800b4c8:	d402      	bmi.n	800b4d0 <_putc_r+0x24>
 800b4ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4cc:	f7ff fa7b 	bl	800a9c6 <__retarget_lock_acquire_recursive>
 800b4d0:	68a3      	ldr	r3, [r4, #8]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	60a3      	str	r3, [r4, #8]
 800b4d8:	da05      	bge.n	800b4e6 <_putc_r+0x3a>
 800b4da:	69a2      	ldr	r2, [r4, #24]
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	db12      	blt.n	800b506 <_putc_r+0x5a>
 800b4e0:	b2eb      	uxtb	r3, r5
 800b4e2:	2b0a      	cmp	r3, #10
 800b4e4:	d00f      	beq.n	800b506 <_putc_r+0x5a>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	6022      	str	r2, [r4, #0]
 800b4ec:	701d      	strb	r5, [r3, #0]
 800b4ee:	b2ed      	uxtb	r5, r5
 800b4f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4f2:	07da      	lsls	r2, r3, #31
 800b4f4:	d405      	bmi.n	800b502 <_putc_r+0x56>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	059b      	lsls	r3, r3, #22
 800b4fa:	d402      	bmi.n	800b502 <_putc_r+0x56>
 800b4fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4fe:	f7ff fa63 	bl	800a9c8 <__retarget_lock_release_recursive>
 800b502:	4628      	mov	r0, r5
 800b504:	bd70      	pop	{r4, r5, r6, pc}
 800b506:	4629      	mov	r1, r5
 800b508:	4622      	mov	r2, r4
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7ff fed7 	bl	800b2be <__swbuf_r>
 800b510:	4605      	mov	r5, r0
 800b512:	e7ed      	b.n	800b4f0 <_putc_r+0x44>

0800b514 <_close_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4d06      	ldr	r5, [pc, #24]	@ (800b530 <_close_r+0x1c>)
 800b518:	2300      	movs	r3, #0
 800b51a:	4604      	mov	r4, r0
 800b51c:	4608      	mov	r0, r1
 800b51e:	602b      	str	r3, [r5, #0]
 800b520:	f7f6 f960 	bl	80017e4 <_close>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d102      	bne.n	800b52e <_close_r+0x1a>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	b103      	cbz	r3, 800b52e <_close_r+0x1a>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	20002538 	.word	0x20002538

0800b534 <_fstat_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d07      	ldr	r5, [pc, #28]	@ (800b554 <_fstat_r+0x20>)
 800b538:	2300      	movs	r3, #0
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	4611      	mov	r1, r2
 800b540:	602b      	str	r3, [r5, #0]
 800b542:	f7f6 f95b 	bl	80017fc <_fstat>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	d102      	bne.n	800b550 <_fstat_r+0x1c>
 800b54a:	682b      	ldr	r3, [r5, #0]
 800b54c:	b103      	cbz	r3, 800b550 <_fstat_r+0x1c>
 800b54e:	6023      	str	r3, [r4, #0]
 800b550:	bd38      	pop	{r3, r4, r5, pc}
 800b552:	bf00      	nop
 800b554:	20002538 	.word	0x20002538

0800b558 <_isatty_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d06      	ldr	r5, [pc, #24]	@ (800b574 <_isatty_r+0x1c>)
 800b55c:	2300      	movs	r3, #0
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	f7f6 f95a 	bl	800181c <_isatty>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d102      	bne.n	800b572 <_isatty_r+0x1a>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	b103      	cbz	r3, 800b572 <_isatty_r+0x1a>
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	20002538 	.word	0x20002538

0800b578 <_lseek_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d07      	ldr	r5, [pc, #28]	@ (800b598 <_lseek_r+0x20>)
 800b57c:	4604      	mov	r4, r0
 800b57e:	4608      	mov	r0, r1
 800b580:	4611      	mov	r1, r2
 800b582:	2200      	movs	r2, #0
 800b584:	602a      	str	r2, [r5, #0]
 800b586:	461a      	mov	r2, r3
 800b588:	f7f6 f953 	bl	8001832 <_lseek>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_lseek_r+0x1e>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_lseek_r+0x1e>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	20002538 	.word	0x20002538

0800b59c <_read_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d07      	ldr	r5, [pc, #28]	@ (800b5bc <_read_r+0x20>)
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	4608      	mov	r0, r1
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	602a      	str	r2, [r5, #0]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	f7f6 f8e1 	bl	8001772 <_read>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	d102      	bne.n	800b5ba <_read_r+0x1e>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	b103      	cbz	r3, 800b5ba <_read_r+0x1e>
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	20002538 	.word	0x20002538

0800b5c0 <_sbrk_r>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	4d06      	ldr	r5, [pc, #24]	@ (800b5dc <_sbrk_r+0x1c>)
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	4608      	mov	r0, r1
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	f7f6 f93e 	bl	800184c <_sbrk>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_sbrk_r+0x1a>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_sbrk_r+0x1a>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	20002538 	.word	0x20002538

0800b5e0 <_write_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4d07      	ldr	r5, [pc, #28]	@ (800b600 <_write_r+0x20>)
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	4608      	mov	r0, r1
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	602a      	str	r2, [r5, #0]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	f7f6 f8dc 	bl	80017ac <_write>
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	d102      	bne.n	800b5fe <_write_r+0x1e>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	b103      	cbz	r3, 800b5fe <_write_r+0x1e>
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	bd38      	pop	{r3, r4, r5, pc}
 800b600:	20002538 	.word	0x20002538

0800b604 <_free_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	4605      	mov	r5, r0
 800b608:	2900      	cmp	r1, #0
 800b60a:	d041      	beq.n	800b690 <_free_r+0x8c>
 800b60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b610:	1f0c      	subs	r4, r1, #4
 800b612:	2b00      	cmp	r3, #0
 800b614:	bfb8      	it	lt
 800b616:	18e4      	addlt	r4, r4, r3
 800b618:	f7ff fe02 	bl	800b220 <__malloc_lock>
 800b61c:	4a1d      	ldr	r2, [pc, #116]	@ (800b694 <_free_r+0x90>)
 800b61e:	6813      	ldr	r3, [r2, #0]
 800b620:	b933      	cbnz	r3, 800b630 <_free_r+0x2c>
 800b622:	6063      	str	r3, [r4, #4]
 800b624:	6014      	str	r4, [r2, #0]
 800b626:	4628      	mov	r0, r5
 800b628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b62c:	f7ff bdfe 	b.w	800b22c <__malloc_unlock>
 800b630:	42a3      	cmp	r3, r4
 800b632:	d908      	bls.n	800b646 <_free_r+0x42>
 800b634:	6820      	ldr	r0, [r4, #0]
 800b636:	1821      	adds	r1, r4, r0
 800b638:	428b      	cmp	r3, r1
 800b63a:	bf01      	itttt	eq
 800b63c:	6819      	ldreq	r1, [r3, #0]
 800b63e:	685b      	ldreq	r3, [r3, #4]
 800b640:	1809      	addeq	r1, r1, r0
 800b642:	6021      	streq	r1, [r4, #0]
 800b644:	e7ed      	b.n	800b622 <_free_r+0x1e>
 800b646:	461a      	mov	r2, r3
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	b10b      	cbz	r3, 800b650 <_free_r+0x4c>
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	d9fa      	bls.n	800b646 <_free_r+0x42>
 800b650:	6811      	ldr	r1, [r2, #0]
 800b652:	1850      	adds	r0, r2, r1
 800b654:	42a0      	cmp	r0, r4
 800b656:	d10b      	bne.n	800b670 <_free_r+0x6c>
 800b658:	6820      	ldr	r0, [r4, #0]
 800b65a:	4401      	add	r1, r0
 800b65c:	1850      	adds	r0, r2, r1
 800b65e:	4283      	cmp	r3, r0
 800b660:	6011      	str	r1, [r2, #0]
 800b662:	d1e0      	bne.n	800b626 <_free_r+0x22>
 800b664:	6818      	ldr	r0, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	6053      	str	r3, [r2, #4]
 800b66a:	4408      	add	r0, r1
 800b66c:	6010      	str	r0, [r2, #0]
 800b66e:	e7da      	b.n	800b626 <_free_r+0x22>
 800b670:	d902      	bls.n	800b678 <_free_r+0x74>
 800b672:	230c      	movs	r3, #12
 800b674:	602b      	str	r3, [r5, #0]
 800b676:	e7d6      	b.n	800b626 <_free_r+0x22>
 800b678:	6820      	ldr	r0, [r4, #0]
 800b67a:	1821      	adds	r1, r4, r0
 800b67c:	428b      	cmp	r3, r1
 800b67e:	bf04      	itt	eq
 800b680:	6819      	ldreq	r1, [r3, #0]
 800b682:	685b      	ldreq	r3, [r3, #4]
 800b684:	6063      	str	r3, [r4, #4]
 800b686:	bf04      	itt	eq
 800b688:	1809      	addeq	r1, r1, r0
 800b68a:	6021      	streq	r1, [r4, #0]
 800b68c:	6054      	str	r4, [r2, #4]
 800b68e:	e7ca      	b.n	800b626 <_free_r+0x22>
 800b690:	bd38      	pop	{r3, r4, r5, pc}
 800b692:	bf00      	nop
 800b694:	20002534 	.word	0x20002534

0800b698 <_init>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	bf00      	nop
 800b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69e:	bc08      	pop	{r3}
 800b6a0:	469e      	mov	lr, r3
 800b6a2:	4770      	bx	lr

0800b6a4 <_fini>:
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a6:	bf00      	nop
 800b6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6aa:	bc08      	pop	{r3}
 800b6ac:	469e      	mov	lr, r3
 800b6ae:	4770      	bx	lr
